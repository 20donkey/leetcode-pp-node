{"372354984":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"553269487":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992070031","body":"Lee 251 double pointer\r\n```java\r\nclass Solution {\r\n    public int[] shortestToChar(String s, char c) {\r\n        int[] ans = new int[s.length()];\r\n        int prev = - s.length(); // to assure the i - prev in first scan is bigger than any possible result;\r\n        \r\n        for(int i = 0; i < s.length(); i++){\r\n            if(s.charAt(i) == c) prev = i;\r\n            ans[i] = i - prev;   \r\n        }\r\n        \r\n        for(int i = prev; i >= 0; i--){ // prev not pos\r\n            if(s.charAt(i) == c) prev = i;\r\n            ans[i] = Math.min(prev - i, ans[i]);   \r\n        }\r\n        \r\n        return ans;\r\n    }\r\n}\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"965682575":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"1052561252":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991881171","body":"```\n/**\n * 解题思路：先把题做出来，再考虑优化\n * <p>\n * 1.直观的看，应该属于大整数相加的问题\n * 2.对num从后向前遍历，每次遍历中对k%10获得对应位数的值t，再对k/10\n * 3.使得num[i]+t；考虑两种情况，<=9和>=10；如何是第一种情况，直接相加就行；如何是第二种情况，要考虑进位\n * <p>\n * 时间复杂度：O(n)\n *\n * @author My\n * @date 2021/12/12\n */\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> temp = new ArrayList<>();\n\n        //用于进位\n        int carry = 0;\n        for (int i = num.length - 1; i >= 0; i--) {\n            int t = k % 10 + num[i] + carry;\n            if (t > 9) {\n                carry = 1;\n            } else {\n                carry = 0;\n            }\n            temp.add(t % 10);\n            k /= 10;\n        }\n\n        while (k != 0) {\n            int t = k % 10 + carry;\n            if (t > 9) {\n                carry = 1;\n            } else {\n                carry = 0;\n            }\n            temp.add(t % 10);\n            k /= 10;\n        }\n\n        if (carry != 0)\n            temp.add(carry);\n\n        List<Integer> res = new ArrayList<>();\n        for (int i = temp.size() - 1; i >= 0; i--) {\n            res.add(temp.get(i));\n        }\n\n        return res;\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992012722","body":"### 思路\n暂时只能想到时间复杂度为O(n*m)的解法，想不到有哪些性能更优的解法，先解出来再说吧\n1.通过字符串s生成字符串数组chars，遍历chars，获得c在chars中的位置，通过list存储\n2.再次遍历chars，如果chars[i]!=c，将i与list中保存的值进行判断，找出最小的差值并保存到answer[i]中\n### 代码\n```java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        char[] chars = s.toCharArray();\n        int[] answer = new int[chars.length];\n\n        List<Integer> tags = new ArrayList<>();\n        //遍历chars，标记c在chars中的各个位置\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == c) {\n                tags.add(i);\n            }\n        }\n\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] != c) {\n                int min = 200;\n                for (Integer tag : tags) {\n                    min = Math.min(min, Math.abs(i - tag));\n                }\n                answer[i] = min;\n            }\n        }\n\n        return answer;\n    }\n}\n```\n### 复杂度\n时间复杂度：O(n*m)\nn:s的长度\nm:list的长度\n\n空间复杂度：O(n+m)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993057214","body":"### 解题思路\n解题思路：\n1.直观上的解题方式是用数组来实现，用int变量curSize记录当前stack中元素的数量，因此curSize的初始化值为0\n2.每次调用push()时，先检查curSize是否等于maxSize。如果不是，使得stack[curSize]=x，然后curSize++\n3.每次调用pop()时，先检查curSize是否等于0。如果是，直接返回-1；如果不是，先让curSize--，然后num=stack[curSize]。最后返回num\n4.每次调用increment()时，取得curSize和k中的较小值为k，遍历stack[0]-stack[k-1]，使得stack[i]+=val\n### 代码\n```java\nclass CustomStack {\n\n    private int[] stack;\n    private int maxSize;\n    private int curSize;\n\n    public CustomStack(int maxSize) {\n        this.stack = new int[maxSize];\n        this.maxSize = maxSize;\n        this.curSize = 0;\n    }\n\n    public void push(int x) {\n        if (curSize < maxSize) {\n            stack[curSize] = x;\n            curSize++;\n        }\n    }\n\n    public int pop() {\n        if (curSize == 0) {\n            return -1;\n        }\n\n        int num = stack[curSize];\n        curSize--;\n        return num;\n    }\n\n    public void increment(int k, int val) {\n        k = Math.min(k, curSize);\n        for (int i = 0; i < k; i++) {\n            stack[i] += val;\n        }\n    }\n}\n```\n### 复杂度分析\n 时间复杂度：\n- push()：O(1)\n- pop()：O(1)\n- increment()：O(k)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"1149004121":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991841813","body":"### 989. 数组形式的整数加法\n### 思路\n①将数组A转成整数，再将整数A和K进行运算，再将运算结果化为数组  \n\n- 优点：不用考虑数组运算的进位问题  \n- 存在问题： 时间复杂度必然增大，因为过程包含整成整数和拆成数组2部分；最大问题是数组A长度最大为1万，超出js的16位整数长度，会导致不精确问题  \n\n②利用数组进行运算  \n通过取余和整除的方法，把k的最低位取出与数组的最低位进行和运算；在进行加和的时候因为有可能超出9，要考虑进位，可考虑把进的那一位直接加在k上；由于k和数组的相对长度不知道，所以在第一次循坏完数组之后，要再循环一次k的剩余位数。\n\n### 代码\n\n\n```java  \n\n  var addToArrayForm = function (num, k) {\n    const numLen = num.length;\n    let res = [];\n    for (let i = numLen - 1; i >= 0; i--) {\n      let sum = num[i] + k % 10;\n      k = Math.floor(k / 10);\n      if (sum > 9) {\n        k++;\n        sum -= 10;\n      }\n      res.push(sum);\n    }\n    for (; k > 0; k = Math.floor(k / 10)) {\n      let sum = k % 10;\n      res.push(sum);\n    }\n    res.reverse();\n    return res;\n  };\n\n```\n\n**复杂度分析**  \n\n- 时间复杂度：O(MAX(m,n))，其中m为数组长度，n为k的位数。\n- 空间复杂度：O(MAX(m,n))，其中m为数组长度，n为k的位数。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992170956","body":"### 821. 字符的最短距离\n### 思路\n字符串中某个字母到最近的c字符的距离，取MIN(i-l, r-i)。由于字符串的首位不一定都是c，因此可以设最左侧的l为-infinity，最右侧的r为infinity。通过从前往后，和从后往前遍历，取最小值即为结果。\n\n### 代码\n\n\n```js   \n\nvar shortestToChar = function(s, c) {\n    let len = s.length;\n    let res = [];\n    let prev = -Infinity;\n    for(let i = 0; i < len; i++){\n        if(s[i] === c) prev = i;\n        res[i] = i - prev;\n    }\n    prev = Infinity;\n    for(let i = len - 1; i >= 0; i--){\n        if(s[i] === c) prev = i;\n        res[i] = Math.min(res[i], prev - i);\n    }\n    \n    return res;\n};\n\n```\n\n**复杂度分析**  \n\n- 时间复杂度：O(N)，2次循环遍历，线性时间复杂度。\n- 空间复杂度：O(1)，额外所用空间为常数。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993147102","body":"### 1381. 设计一个支持增量操作的栈\n### 思路\n①   \n在js中没有栈，可以用数组实现，用变量存储maxSize，当数组中的个数小于maxSize时可以进行入栈操作，既push；如果栈不为空就进行pop操作；inc操作通过遍历下标从0到min(k - 1, len - 1)来操作。  \n\n②  \n在方法①中inc的时间复杂度为O(k)，若想继续降低时间复杂度，则要以空间换时间，用另一数组保存增加的信息，到pop时在讲其加回，避免反复累加。\n\n### 代码\n①  \n```js  \n\n\t /**\n\t * @param {number} maxSize\n\t */\n\tvar CustomStack = function(maxSize) {\n\t    this.maxSize = maxSize;\n\t    this.stack = [];\n\t};\n\t\n\t/** \n\t * @param {number} x\n\t * @return {void}\n\t */\n\tCustomStack.prototype.push = function(x) {\n\t    if(this.stack.length < this.maxSize){\n\t        this.stack.push(x);\n\t    }\n\t};\n\t\n\t/**\n\t * @return {number}\n\t */\n\tCustomStack.prototype.pop = function() {\n\t    if(this.stack.length === 0){\n\t        return -1\n\t    }else {\n\t        return this.stack.pop();\n\t    }\n\t};\n\t\n\t/** \n\t * @param {number} k \n\t * @param {number} val\n\t * @return {void}\n\t */\n\tCustomStack.prototype.increment = function(k, val) {\n\t    let index = Math.min(k - 1, this.stack.length - 1);\n\t    for(let i = 0; i <= index; i++){\n\t        this.stack[i] += val;\n\t    }\n\t};\n\t\n\t/**\n\t * Your CustomStack object will be instantiated and called as such:\n\t * var obj = new CustomStack(maxSize)\n\t * obj.push(x)\n\t * var param_2 = obj.pop()\n\t * obj.increment(k,val)\n\t */   \n\n```\n②  \n\n```js   \n\n\t/**\n\t * @param {number} maxSize\n\t */\n\tvar CustomStack = function(maxSize) {\n\t    this.maxSize = maxSize;\n\t    this.stack = new Array(this.maxSize).fill(0);\n\t    this.add = new Array(this.maxSize).fill(0);\n\t    this.top = -1;\n\t};\n\t\n\t/** \n\t * @param {number} x\n\t * @return {void}\n\t */\n\tCustomStack.prototype.push = function(x) {\n\t    if(this.top < this.maxSize - 1){\n\t        this.top++;\n\t        this.stack[this.top] = x;\n\t    }\n\t};\n\t\n\t/**\n\t * @return {number}\n\t */\n\tCustomStack.prototype.pop = function() {\n\t    if(this.top === -1){\n\t        return -1;\n\t    }\n\t    let val = this.add[this.top] + this.stack[this.top];\n\t    if(this.top !== 0){\n\t        this.add[this.top - 1] += this.add[this.top];\n\t    }\n\t    this.add[this.top] = 0;\n\t    this.top--;\n\t    return val;\n\t};\n\t\n\t/** \n\t * @param {number} k \n\t * @param {number} val\n\t * @return {void}\n\t */\n\tCustomStack.prototype.increment = function(k, val) {\n\t    let index = Math.min(k - 1, this.top);\n\t    if(index >= 0) this.add[index] += val;\n\t};\n\t\n\t/**\n\t * Your CustomStack object will be instantiated and called as such:\n\t * var obj = new CustomStack(maxSize)\n\t * obj.push(x)\n\t * var param_2 = obj.pop()\n\t * obj.increment(k,val)\n\t */\n\n```\n\n**复杂度分析**  \n\n- 时间复杂度：①：push、pop为O(1)，inc为O(k)；②：push、pop、inc皆为O(1)。\n- 空间复杂度：①：O(maxSize)用于保存数组；②：O(maxSize)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"1916603886":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991911495","body":"\n### 思路：\n将其中一个变为数组，之前两个都变数组，纠结怎么获取索引，现在另一个每次自处自动补零。\n### 代码：\n\nvar addToArrayForm = function(num, k) {\n       let s = [];\n        let flag = false;\n        let nl = num.length;\n        while(nl != 0 || k != 0) {\n            let a = 0, b = k % 10 ;\n            if(nl !== 0) a = num[--nl];\n            k = parseInt(k/10);\n            \n            let ans = a + b;\n            \n            if(flag) {\n                ans += 1;\n                flag = false;\n            }\n            if( ans >= 10) flag = true;\n            s.push(ans % 10);\n        }\n        if(flag) s.push(1);\n        return s.reverse();\n};\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992195419","body":"var shortestToChar = function(s, c) {\nlet arr = [];\n    let ans = [];\n    for (let i = 0; i < s.length; i++) {\n      if (s[i] === c) {\n        arr.push(i);\n      }\n    }\n    for (let i = 0; i < s.length; i++) {\n      let max = 1000;\n      for (let j = 0; j < arr.length; j++) {\n        if (Math.abs(i - arr[j]) < max) {\n          max = Math.abs(i - arr[j]);\n        }\n      }\n      ans.push(max);\n    }\n    return ans;\n};","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ruohai0925":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lilyzhaoyilu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mm12344":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangzehan123":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991766191","body":"\n\n```java\n\nclass Solution {\npublic List<Integer> addToArrayForm(int[] num, int k) {\n    int len = num.length;\n    int count = 0;\n    int flag = 0;\n    List<Integer> ans = new ArrayList<>();\n    while (k > 0) {\n        int tmpNum = len - count - 1 < 0 ? 0: num[len - count - 1];\n        int sum = k % 10 + tmpNum + flag;\n        flag = sum / 10;\n        k /= 10;\n        count++;\n        ans.add(flag == 1 ? sum % 10 : sum);\n    }\n    for(int i = len - count - 1; i > -1; i--) {\n        int sum = num[i] + flag;\n        flag = sum / 10;\n        ans.add(flag == 1 ? sum % 10 : sum);\n    }\n    if (flag == 1) {\n        ans.add(1);\n    }\n    Collections.reverse(ans);\n    return ans;\n}\n}\n\n```\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991945520","body":"\n- 语言支持：Java\n\nJava Code:\n\n```java\n\npublic class Solution {\n    /**\n     * @param S: \n     * @param C: \n     * @return: nothing\n     */\n    public int[] shortestToChar(String S, char C) {\n        int n = S.length();\n        int[] res = new int[n];\n        int pos = -n;\n        for (int i = 0; i < n; ++i) {\n            if (S.charAt(i) == C) pos = i;\n            res[i] = i - pos;\n        }\n        for (int i = n - 1; i >= 0; --i) {\n            if (S.charAt(i) == C)  pos = i;\n            res[i] = Math.min(res[i], Math.abs(i - pos));\n        }\n        return res;\n    }\n}\n\n\n```\n\n\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-992979075","body":"-  \n\n## 代码\n\n- 语言支持：Java\n\nJava Code:\n\n```java\n\nclass CustomStack {\n\n    int[] data;\n    int head;\n\n    public CustomStack(int maxSize) {\n\n        data = new int[maxSize];\n        head = -1;\n    }\n    \n    public void push(int x) {\n\n        if (head == data.length - 1)\n            return;\n            \n        data[++head] = x;\n    }\n    \n    public int pop() {\n\n        if (head == -1)\n            return -1;\n\n        return data[head--];\n    }\n    \n    public void increment(int k, int val) {\n\n        for (int i = 0; i < Math.min(k, head + 1); i++)\n            data[i] += val;\n    }\n}\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack obj = new CustomStack(maxSize);\n * obj.push(x);\n * int param_2 = obj.pop();\n * obj.increment(k,val);\n */\n\n```\n\n\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"erik7777777":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yachtcoder":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chang-you":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mmboxmm":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangwiitao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"leungogogo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ai2095":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yanglr":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cicihou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shixinlovey1314":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pangjiadai":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991847081","body":"## Python3\n```Python3\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        number = 0\n        for n in num:\n            number = number * 10 + n\n        total_num = number + k\n        num_list = []\n        while total_num >= 10:\n            temp = total_num % 10\n            total_num = total_num // 10\n            num_list.append(temp)\n        num_list.append(total_num)\n        return num_list[::-1]\n```\n\n## 思路\n1. 可以用暴力解法\n2. 也可以每个位单独计算（注意进位）\n- time complexity: O(n)\n- space complexity: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992053965","body":"## 思路\n1. 暴力记录每一个c的index，然后遍历找到最小值，时间复杂度O(nm)\n2. 遍历两次：从左到右，从右到左，记录最小值，时间复杂度O(m)\n\n## Python3 \n```Python3\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        # # 两遍遍历 O(m*n)\n        # index_list = []\n        # ans = [len(s)] * len(s)\n        # for index, char in enumerate(s):\n        #     if char == c:\n        #         index_list.append(index)\n\n        # for index, char in enumerate(s):\n        #     min_distance = len(s)\n        #     for i in index_list:\n        #         distance = abs(i-index)\n        #         if distance < min_distance:\n        #             min_distance = distance\n        #     ans[index] = min_distance\n\n        # return ans\n\n        ans = [len(s)] * len(s)\n        index = -1\n\n        # from left to right\n        for i in range(len(s)):\n            if s[i] == c:\n                index = i\n            if index == -1:\n                continue\n            ans[i] = abs(i - index)\n\n        # from right to left\n        index2 = len(s)\n        for j in range(len(s)-1, -1, -1):\n            if s[j] == c:\n                index2 = j\n            if index2 == len(s):\n                continue\n            ans[j] = min(ans[j], abs(j-index2))\n\n        return ans\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993138334","body":"## Python3\n```Python3\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        # stack: FILO, append, pop\n        self.stack = []\n        self.size = maxSize\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.size:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if self.stack:\n            return self.stack.pop()\n        return -1\n\n    def increment(self, k: int, val: int) -> None:\n        pointer = 0\n        for i in range(min(k, len(self.stack))):\n            self.stack[pointer] += val \n            pointer += 1\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luojiamun":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991904972","body":"### 思路\r\n\r\n- 思路与解法\r\n```\r\n- 逐位加；\r\n- 反向存，最后reverse，不然正向存，每次add数组都得挪位；\r\n```\r\n\r\n- 心得\r\n```\r\n- 第一次fail了因为大意了，这题要注意num和k的长短不一，不能一个for on num解决；\r\n```\r\n\r\n### 代码\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        int carry = 0, i = num.length - 1;\r\n        List<Integer> res = new ArrayList<>();\r\n        \r\n        while(i >= 0 || k > 0 || carry > 0){\r\n            int left = i >= 0?num[i]:0;\r\n            i--;\r\n            int right = k % 10;\r\n            k = k / 10;\r\n            int sum = left + right + carry;\r\n            res.add(sum % 10);\r\n            carry = sum / 10;\r\n        }\r\n\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n}\r\n```\r\n\r\n### 复杂度\r\n\r\n***k因为是常数，其实其长度可以忽略。***\r\n\r\ntime: O(Math.max(num.length, Math.log10(k)+1))\r\nspace: O(1)，不算结果","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992526525","body":"### 思路\nArray遍历\n\n- 思路与解法\n```\n- 左右两边各扫一遍；\n- 第一遍扫出初始编号；\n- 第二遍更新编号找最小值；\n```\n\n- 心得\n```\n- array的题肯定不会只考array，因为是基础；\n- array一般肯定要考遍历，就像是binary tree；遍历就是左到右，右到左，左右各扫一遍，这是最基本的，可能再有结合双指针/滑动窗口的；总之就是一些结合题目已知条件需要找到合适的便利方式；\n- 这题还可以用stack，边push边更新；\n```\n\n### 代码\n```java\n//array遍历\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int[] res = new int[s.length()];\n        int ci = 20000;\n        Arrays.fill(res, 20000);\n        for(int i = 0;i < s.length();i++){\n            if(s.charAt(i) == c){\n                ci = 0;\n            }\n            res[i] = Math.min(ci, res[i]);\n            ci++;\n        }\n        \n        for(int i = s.length() - 1;i >= 0;i--){\n            if(s.charAt(i) == c){\n                ci = 0;\n            }\n            res[i] = Math.min(ci, res[i]);\n            ci++;\n        }\n        \n        return res;\n      \n    }\n}\n\n```\n\n### 复杂度\n\nArray遍历\nO(s.length());\nO(1)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yiwchen":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991921921","body":"思路：\r\n直接模拟\r\n代码：\r\nJava：\r\n```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        /* Set up */\r\n        int n = num.length;\r\n        int cur = k;\r\n        List<Integer> res = new ArrayList();\r\n        \r\n        /* run the addition backwards digit by digit*/\r\n        int i = n;\r\n        while (--i >= 0|| cur > 0){\r\n        /* Adding a new digit*/\r\n            if (i >= 0){\r\n                cur += num[i];\r\n            }\r\n        /* Carry addition simulator*/\r\n            res.add(cur % 10);\r\n            cur = cur / 10;;\r\n        }\r\n        /* return the result reversely since we adding up reversely*/\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n}\r\n```\r\n\r\nScala:\r\n```\r\nobject Solution {\r\n    def addToArrayForm(num: Array[Int], K: Int): List[Int] = {\r\n        // Set up\r\n        var res = List[Int]()\r\n        var k = K\r\n        \r\n        // Reverse the num list, and initialize the carry\r\n        // Scala variable definition 101\r\n        // carry is repeatedly folding out and most addition is taken care here\r\n        val carry = num.reverse.foldLeft(0)((sum, x)=>{\r\n          val temp = k % 10 + x + sum\r\n          k = k / 10\r\n          res :::= List(temp % 10)\r\n          temp / 10}\r\n        )\r\n        // edge case when there is k or carry left\r\n        if(k == 0){\r\n          if (carry == 1) res :::= List(1)\r\n          res\r\n        }\r\n        else{\r\n          k = k + carry\r\n          while(k > 0){\r\n            res :::= List(k % 10)\r\n            k  = k / 10\r\n          }\r\n          res\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n复杂度：\r\nTC: O(n + k)\r\nSC: O(n + k)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qixuan-code":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ZT4188":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"thinkfurther":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pophy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ninghuang456":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991829936","body":"```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] nums, int k) {\r\n        LinkedList<Integer> res = new LinkedList<>(); // LinkedList addFirst()\r\n        for (int i = nums.length - 1; i >= 0; i --) {\r\n            res.addFirst((nums[i] + k) % 10);\r\n            k = (nums[i] + k) / 10;\r\n        }\r\n        while (k > 0) {\r\n            res.addFirst(k % 10);\r\n            k /= 10;\r\n        }\r\n        return res;\r\n    }\r\n}\r\n//Time O(n), Space O(n)\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992558904","body":"```java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        // two pass(forward, backward) and compare.\n       //  fp, bp edge condition\n\n        int len = s.length(); int fp = -len; \n      \n        int[] res = new int[len];\n        \n        for (int i = 0; i < len; i ++) {\n            if(s.charAt(i) == c) fp = i;\n            res[i] = i - fp;\n        }\n        \n        int bp = 2*len - 1;\n        for(int j = s.length() - 1; j >= 0; j --){\n            if(s.charAt(j) == c) bp = j;\n            res[j] = Math.min(res[j], bp - j);\n        }\n        \n        return res;\n    }\n}\n// Time: O(n). Space:O(n)\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zol013":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991980237","body":"```\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        n = len(s)\n        ans = [float('inf') for _ in range(n)]\n        for i in range(n):\n            for j in range(i, n):\n                if s[j] == c:\n                    ans[i] = j - i\n                    break\n                    \n        for i in range(n-1,-1,-1):\n            for j in range(i,-1,-1):\n                if s[j] == c:\n                    ans[i] = min(ans[i],i-j)\n                    break\n        return ans\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993124094","body":"```\nclass CustomStack:\n\n    def __init__(self, size: int):\n        self.size = size\n        self.st = []\n        self.cnt = 0\n        self.incrementals = []\n    def push(self, x: int) -> None:\n        if self.cnt < self.size:\n            self.cnt += 1\n            self.st.append(x)\n            self.incrementals.append(0)\n    def pop(self) -> int:\n        if self.cnt == 0: return -1\n        self.cnt -= 1\n        if self.cnt >= 1:\n            self.incrementals[-2] += self.incrementals[-1]\n        return self.st.pop() + self.incrementals.pop()\n    def increment(self, k: int, val: int) -> None:\n        if self.incrementals:\n            self.incrementals[min(k - 1, self.cnt - 1)] += val\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qyw-wqy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"skinnyh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"leo173701":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kidexp":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"falconruo":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991748173","body":"** 思路：**\r\n1. 从后向前依次取一位数字与k相加，余数等于和模10，并存入返回数组，令k除10，继续遍历\r\n2. 遍历结束，判断k是否为0， 不为0则循环继续将余数存入数组res, k除10，继续，直至k=0\r\n3. 反转数组res并返回\r\n\r\n** 复杂度分析: **\r\n- 时间复杂度:  O(max(n, m))， 其中n为数组num的长度，m为数字k的位数\r\n- 空间复杂度:  O (1)\r\n-\r\n** 代码(C++): **\r\n```C++\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n        int n = num.size() - 1;\r\n        vector<int> res;\r\n\r\n        while (n >= 0) {\r\n            k += num[n];\r\n            res.push_back(k % 10);\r\n            k /= 10;\r\n            n--;\r\n        }\r\n\r\n        // for the condition that k not 0\r\n        while (k) {\r\n            res.push_back(k % 10);\r\n            k /= 10;\r\n        }\r\n        reverse(res.begin(), res.end());\r\n\r\n        return res;\r\n    }\r\n};\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992084192","body":"**思路:**\r\n1. 从前到后遍历，计算出每个字符的距离\r\n2. 从后到前再次遍历，计算出每个字符的距离取小值\r\n\r\n**复杂度分析:**\r\n- 时间复杂度: O(n)，其中n是字符串的长度\r\n- 空间复杂度: O(1)\r\n\r\n**代码(C++):**\r\n```C++\r\nclass Solution {\r\npublic:\r\n    vector<int> shortestToChar(string s, char c) {\r\n        int n = s.length();\r\n\r\n        vector<int> res(n, n - 1);\r\n        int idx = n - 1;\r\n\r\n        for (int i = 0; i < n; ++i) {\r\n            if (s[i] == c)\r\n                idx = i;\r\n            res[i] = min(res[i], abs(idx - i));\r\n        }\r\n\r\n        idx = 0;\r\n        for (int i = n - 1; i >= 0; --i) {\r\n            if (s[i] == c)\r\n                idx = i;\r\n            res[i] = min(res[i], abs(idx - i));\r\n        }\r\n\r\n        return res;\r\n    }\r\n};\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-992747551","body":"**思路:**\r\n使用数组模拟栈\r\n\r\n**时间复杂度:**\r\n- 时间复杂度: O(1) - push, pop; O(k) - increment\r\n- 空间复杂度: O(maxSize)\r\n\r\n**代码(C++):**\r\n```\r\nclass CustomStack {\r\npublic:\r\n    CustomStack(int maxSize) {\r\n        size = maxSize;\r\n    }\r\n    \r\n    void push(int x) {\r\n        if (st.size() >= size) return;\r\n        st.push_back(x);\r\n    }\r\n    \r\n    int pop() {\r\n        if (st.size() == 0) return -1;\r\n        int val = st.back();\r\n        st.pop_back();\r\n        return (val);\r\n    }\r\n    \r\n    void increment(int k, int val) {\r\n        int idx = (k <= st.size()) ? k : st.size();\r\n\r\n        for (int i = 0; i < idx; ++i)\r\n            st[i] += val;\r\n    }\r\nprivate:\r\n    int size;\r\n    vector<int> st;\r\n};\r\n\r\n/**\r\n * Your CustomStack object will be instantiated and called as such:\r\n * CustomStack* obj = new CustomStack(maxSize);\r\n * obj->push(x);\r\n * int param_2 = obj->pop();\r\n * obj->increment(k,val);\r\n */\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"florenzliu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"q815101630":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991823659","body":"Ripple Adder\r\nSimilar to the implementation of ripple adder, The adder will add numbers at the same position, output the sum of the current position, and pass the carry to the next bit.\r\n\r\nPython\r\nclass Solution:\r\n    def addToArrayForm(self, A: List[int], k: int) -> List[int]:\r\n        curSum = 0\r\n        carry = 0\r\n\r\n        # This can be achieved through continuing division, but I am lazy\r\n        if not A:\r\n            return [int(i) for i in str(k)]\r\n        elif not k:\r\n            return A\r\n\r\n        K = [int(i) for i in str(k)]\r\n        LA = len(A)-1\r\n        LK = len(K)-1\r\n\r\n        if LA <= LK:\r\n            target = K\r\n            idx = LK\r\n        else:\r\n            target = A\r\n            idx = LA\r\n        while LA >= 0 and LK >= 0:\r\n            curSum = A[LA] + K[LK] + carry\r\n            if curSum < 10:\r\n                target[idx] = curSum\r\n                carry = 0\r\n            else:\r\n                carry = curSum //10\r\n                target[idx] = curSum % 10\r\n            LA-=1\r\n            LK-=1\r\n            idx-=1\r\n        if LK != LA:\r\n            while idx >=0:\r\n                curSum = target[idx] + carry\r\n                if curSum < 10:\r\n                    target[idx] = curSum\r\n                    carry = 0\r\n                else:\r\n                    carry = curSum // 10\r\n                    target[idx] = curSum%10\r\n                idx-=1\r\n        if carry > 0:\r\n            target[0:0] = [carry]\r\n        return target\r\nTime Complexity: O(max(K,A))\r\nSpace Complexity: O(max(K,A))","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991959488","body":"遍历两遍array， 从左往右+从右往左。\r\n```python\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        ans = [float(\"inf\")]*len(s)\r\n\r\n        idx = float(\"inf\")\r\n        for i,v in enumerate(s):\r\n            if v == c:\r\n                idx = i\r\n            else:\r\n                if idx != float(\"inf\"):\r\n                    ans[i] = i-idx\r\n        \r\n        idx = float(\"inf\")\r\n\r\n        for i in range(len(s)-1, -1, -1):\r\n            if s[i] == c:\r\n                idx = i\r\n                ans[i] = 0\r\n            else:\r\n                if idx != float(\"inf\"):\r\n                    ans[i] = min(ans[i], idx-i)\r\n        \r\n        return ans\r\n```\r\n时空O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993141103","body":"# 用list 模拟 stack 就行，\r\n记录三个attributes, maxSize, size, stack\r\n\r\n```python\r\nclass CustomStack:\r\n\r\n    def __init__(self, maxSize: int):\r\n        self.maxSize = maxSize\r\n        self.stack = []\r\n        self.size = 0\r\n    def push(self, x: int) -> None:\r\n        if self.size < self.maxSize:\r\n            self.stack.append(x)\r\n            self.size+=1\r\n\r\n    def pop(self) -> int:\r\n        if self.size>0:\r\n            self.size-=1\r\n            return self.stack.pop()\r\n        else:\r\n            return -1\r\n\r\n    def increment(self, k: int, val: int) -> None:\r\n        num = min(k, self.size)\r\n        for i in range(num):\r\n            self.stack[i] += val\r\n```\r\nTime: O(1) excepts O(min(k, size)) for increment\r\nSpace: O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chen445":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991850462","body":"### 代码\n``` Python3\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        k=[int(x) for x in str(k)]\n        i=len(num)-1\n        j=len(k)-1\n        carry=0\n        result=deque([])\n        while i>=0 or j>=0:\n            a=num[i] if i >=0 else 0 \n            b=k[j] if j>=0 else 0\n            s=a+b+carry\n            carry=s//10\n            result.appendleft(s%10)\n            i-=1\n            j-=1\n        if carry != 0:\n            result.appendleft(carry)\n        return result\n```\n### 复杂度\n\nTime: O(n)\nSpace: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992040472","body":"### 代码\n``` python3\nclass Solution: \n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        prev_position=float('-inf')\n        result=[]\n        for i in range(len(s)):\n            if s[i] == c:\n                prev_position = i\n            result.append(i-prev_position)\n        prev_position=float('inf')\n        for i in range(len(s)-1,-1,-1):\n            if s[i]==c:\n                prev_position =i\n            result[i]= min(result[i],prev_position-i)\n        return result\n```\n\n### 复杂度\n\nTime: O(n)\n\nSpace: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993194847","body":"### 代码\n\n``` Python3\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack=[]\n        self.size_limit=maxSize\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.size_limit:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if self.stack:\n            return self.stack.pop()\n        return -1\n    def increment(self, k: int, val: int) -> None:\n        for i in range(min(k, len(self.stack))):\n            self.stack[i] += val\n```\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"JachinM":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangyalei1026":[null,null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993190950","body":"# Main idea\r\nArray\r\n# Code\r\n```py\r\nclass CustomStack:\r\n\r\n    def __init__(self, maxSize: int):\r\n        self.maxSize = maxSize\r\n        self.stack = []\r\n\r\n    def push(self, x: int) -> None:\r\n        if len(self.stack) < self.maxSize:\r\n            self.stack.append(x)\r\n\r\n    def pop(self) -> int:\r\n        if len(self.stack) == 0:\r\n            return -1\r\n        temp = self.stack[-1]\r\n        self.stack.pop()\r\n        return temp\r\n    def increment(self, k: int, val: int) -> None:\r\n        for i in range(min(len(self.stack),k)):\r\n            self.stack[i] += val\r\n```\r\n# Complexity\r\nTime complexity: O(1)\r\nSpace complexity: O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangzz2015":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991759056","body":"## 思路\r\n- 倒序遍历num ，把 k 转化为每一位，做加法注意carry flag。时间复杂度 O(n)，空间复杂度为O(1)。\r\n\r\n## 代码\r\n\r\n- 语言支持：C++\r\n\r\nC++ Code:\r\n\r\n```c++\r\n\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) { \r\n        \r\n        int i=num.size()-1; \r\n        int carry =0; \r\n        vector<int> ret; \r\n        while(k||carry||i<num.size())\r\n        {\r\n            int value ;\r\n            if(i>=0)\r\n            {\r\n              value = k%10 + num[i] + carry; \r\n            }\r\n            else\r\n            {\r\n                value = k%10 + carry; \r\n            }\r\n            \r\n            carry = value/10; \r\n            ret.push_back(value%10); \r\n            \r\n            k = k/10; \r\n            i--; \r\n        }\r\n        \r\n        reverse(ret.begin(), ret.end()); \r\n        \r\n        return ret; \r\n        \r\n    }\r\n};\r\n\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991956160","body":"## 思路\n- f(i)为第i个位置的最短距离，f(i)和s字符串中在i 的前后最近的c 位置相关，有时候一次同时处理两个位置比较难，但是可分解成先处理前面的最近位置，再处理后面的最近位置则比较容易。实现方法，两次遍历，先从前往后，找到前面的最近位置，再从后往前，找到后面的最近位置，返回两次中最小的。时间复杂度为O(N)，空间复杂度为O(1)，不考虑输出的话。\n\n## 关键点\n\n-  \n\n## 代码\n\n- 语言支持：C++\n\nC++ Code:\n\n```c++\n\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        \n        vector<int> ret(s.size(), INT_MAX); \n        // loop left. \n        int pos = -1; \n        for(int i=0; i< s.size(); i++)\n        {\n            if(s[i]==c)\n            {\n                pos = i; \n                ret[i] =0; \n            }\n            else if(pos!=-1)\n            {\n                ret[i] = i - pos; \n            }\n        }\n        pos = -1; \n        for(int i= s.size()-1; i>=0; i--)\n        {\n            if(s[i]==c)\n            {\n                pos = i; \n                ret[i] =0; \n            }\n            else if(pos!=-1)\n            {\n                ret[i] = min(ret[i], pos -i); \n            }\n        }\n        \n        return ret; \n        \n    }\n};\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-992810434","body":"## 思路\n- 关键点如何处理incremental  number。利用一个数组记录对应位置的incremental，当pop时，累加当前位置的incremental value，同时把该incremental value传递前一个index。使用如下例子  stack   [  1  2  3  4 5]   incremental [100 100 100  100 100]  当pop  是  5 + 100    后stack  [ 1 2 3 4]  incremental [ 100 100 100 200]  再pop是  4 + 200 。这样起到累加的效果。时间复杂度为  O(1) ，空间复杂度为 O(N)，N为最大设置stack size。\n\n## 关键点\n\n-  \n\n## 代码\n\n- 语言支持：C++\n\nC++ Code:\n\n```c++\n\nclass CustomStack {\npublic:\n    \n    vector<int> stack; \n    int iSize; \n    vector<int> incSum; \n    CustomStack(int maxSize) {\n        \n        iSize = maxSize; \n        incSum.assign(iSize, 0); \n    }\n    \n    void push(int x) {\n        \n        if(stack.size() < iSize)\n        {\n            stack.push_back(x); \n        }        \n    }\n    \n    int pop() {\n        \n        if(stack.size())\n        {\n            int index = stack.size()-1;\n            int addValue = incSum[index];\n            if(index>0)\n            {\n                incSum[index-1] += addValue;                  \n            }\n            incSum[index] =0;            \n            int ret = stack.back() + addValue; \n            stack.pop_back();\n            return ret; \n        }\n        else\n            return -1; \n        \n    }\n    \n    void increment(int k, int val) {\n        \n        int index = min(k, int(stack.size()) ); \n        if(index>0)\n        {\n            incSum[index-1] += val; \n        }        \n    }\n};\n\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tongxw":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991829384","body":"## 思路\r\n遍历合并，类似合并有序数组/链表。\r\n## 代码\r\n```js\r\nvar addToArrayForm = function(num, k) {\r\n    ans = [];\r\n    i = num.length - 1;\r\n    carry = 0;\r\n    while (i >= 0 || k != 0) {\r\n        val1 = i >= 0 ? num[i] : 0;\r\n        val2 = k != 0 ? k % 10 : 0;\r\n        \r\n        sum = val1 + val2 + carry;\r\n        carry = Math.floor(sum / 10);\r\n        sum = sum % 10;\r\n        \r\n        ans.push(sum);\r\n        \r\n        i--;\r\n        k = Math.floor(k/10);\r\n    }\r\n    \r\n    if (carry != 0) {\r\n        ans.push(carry);\r\n    }\r\n\r\n    return ans.reverse();\r\n};\r\n```\r\nTC: O(max(N, logK))\r\nSC: O(max(N, logK))\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992053100","body":"## 思路\r\n正序遍历和逆序遍历，取最小值\r\n## 代码\r\n```java\r\nclass Solution {\r\n    public int[] shortestToChar(String s, char c) {\r\n        int n = s.length();\r\n        int[] ans = new int[n];\r\n        \r\n        int count = n + 1;\r\n        for (int i=0; i<n; i++) {\r\n            char cur = s.charAt(i);\r\n            count = cur == c ? 0 : count + 1;\r\n            ans[i] = count;\r\n        }\r\n        \r\n        for (int i=n-1; i>=0; i--) {\r\n            char cur = s.charAt(i);\r\n            count = cur == c ? 0 : count + 1;\r\n            ans[i] = Math.min(ans[i], count);\r\n        }\r\n        \r\n        return ans;\r\n    }\r\n}\r\n```\r\nTC: O(n)\r\nSC: O(n)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993189185","body":"## 思路\r\n用一个增量数组记录增值\r\n## 代码\r\n```java\r\nclass CustomStack {\r\n    Deque<Integer> stack;\r\n    int[] incre;\r\n    int size;\r\n    int max;\r\n\r\n    public CustomStack(int maxSize) {\r\n        stack = new LinkedList<>();\r\n        incre = new int[maxSize + 1];\r\n        max = maxSize;\r\n        size = 0;\r\n    }\r\n    \r\n    public void push(int x) {\r\n        if (size < max) {\r\n            stack.push(x);\r\n            size++;\r\n        }\r\n    }\r\n    \r\n    public int pop() {\r\n        if (size == 0) {\r\n            return -1;\r\n        }\r\n\r\n        int val = stack.pop();\r\n        if (incre[size] != 0) {\r\n            val += incre[size];\r\n            incre[size - 1] += incre[size];\r\n            incre[size] = 0;\r\n        }\r\n        size--;\r\n        return val;\r\n    }\r\n    \r\n    public void increment(int k, int val) {\r\n        int total = Math.min(k, size);\r\n        incre[total] += val;\r\n    }\r\n}\r\n\r\n```\r\nTC: push: O(1), pop (1), increment O(1)\r\nSC: O(maxSize)\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"okbug":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yan0327":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991699058","body":"思路：\r\n创建一个out数组用于存放结果。\r\npre代表进位，sum代表总和,k代表被加数\r\n数组从n-1到0开始遍历， 但是for的判断条件有i>=0||k>0||pre>0\r\n如果i>=0，则 sum= num[i]+k%10+pre\r\n否则 sum= k%10+pre\r\n最后处理：pre = sum/10; k /= 10 添加到out数组\r\n最后翻转数组即可\r\n```Go\r\nfunc addToArrayForm(num []int, k int) []int {\r\n    n := len(num)\r\n    pre,sum:=0,0\r\n    out := []int{}\r\n    for i:=n-1;i>=0||k>0||pre>0;i--{\r\n        if i >= 0{\r\n            sum = num[i]+k%10+pre\r\n        }else{\r\n            sum =k%10 + pre\r\n        }\r\n        pre = sum/10\r\n        k /= 10\r\n        out = append(out,sum%10)\r\n    }\r\n    reverse(out)\r\n    return out\r\n}\r\nfunc reverse(out []int) []int{\r\n    for i:=0;i<len(out)/2;i++{\r\n        out[i],out[len(out)-1-i] = out[len(out)-1-i] , out[i]\r\n    }\r\n    return out\r\n}\r\n```\r\n时间复杂度O（n）\r\n空间复杂度O（n）","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991925070","body":"思路：\r\n字符的最短距离，可以从前往后遍历，以及从后往前遍历求最小值。\r\n初始化一个out数组\r\n令flag = -1 ，flag表示前一个字符c出现的位置。\r\n从前往后遍历：（1）判断是否该字符为c （2）若c存在【flag >= 0】则此时out[i] = i-flag 否则 out[i] = math.MaxInt32\r\n从后往前遍历：（1）判断是否该字符为c （2）若c存在【flag >= 0】则此时out[i] = min（out[i]，flag-i）\r\n第二次遍历记得比较大小，为了得到最优解。求个最小值。\r\n最后题目出问题的地方是：flag >= 0 考虑 字符c在第一个的情况！\r\n```Go\r\nfunc shortestToChar(s string, c byte) []int {\r\n    out := make([]int,len(s))\r\n    flag := -1\r\n    for i :=0;i<len(s);i++{\r\n        if s[i] == c{\r\n            flag = i\r\n        }\r\n        if flag >= 0{\r\n            out[i] = i-flag\r\n        }else{\r\n            out[i] = math.MaxInt32\r\n        }\r\n    }\r\n    flag = -1\r\n    for i := len(s)-1;i>=0;i--{\r\n        if s[i] == c{\r\n            flag = i\r\n        }\r\n        if flag >= 0{\r\n            out[i] = min(out[i],flag-i)\r\n        }\r\n    }\r\n    return out\r\n}\r\nfunc min(a,b int)int{\r\n    if a < b{\r\n        return a\r\n    }\r\n        return b\r\n}\r\n```\r\n时间复杂度O（N）\r\n空间复杂度O（N）","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-992622969","body":"思路：\r\n构造函数构造栈以及容量\r\n入栈需要判断栈是否满了，如果不满才可以进行入栈操作\r\n出栈需要判断栈是否为空，不为空才能出栈\r\n批量增加，要判断此时的k是否大于栈的元素，如果大于要置为k，此时一个for循环遍历批量增加\r\n```Go\r\ntype CustomStack struct {\r\n    stack []int\r\n    total int\r\n}\r\n\r\n\r\nfunc Constructor(maxSize int) CustomStack {\r\n    return CustomStack{[]int{},maxSize}\r\n}\r\n\r\n\r\nfunc (this *CustomStack) Push(x int)  {\r\n    if len(this.stack) <this.total{\r\n        this.stack = append(this.stack,x)\r\n    }\r\n}\r\n\r\n\r\nfunc (this *CustomStack) Pop() int {\r\n    if len(this.stack) == 0{\r\n        return -1\r\n    }\r\n    out := this.stack[len(this.stack)-1]\r\n    this.stack = this.stack[:len(this.stack)-1]\r\n    return out\r\n}\r\n\r\n\r\nfunc (this *CustomStack) Increment(k int, val int)  {\r\n    if k > len(this.stack){\r\n        k = len(this.stack)\r\n    }\r\n    for i:=0;i<k;i++{\r\n        this.stack[i] += val\r\n    }\r\n}\r\n```\r\n入栈，出栈 时间复杂度O（N）\r\n增量操作O（k）\r\n空间复杂度O（N）","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chenming-cao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mozro0327":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xingzhan0312":[null,null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993100893","body":"## Note\n\n1. Push O(1), Pop O(1), Increment O(n), n is min(this.size,k);\n2. Space Complexity: O(n)\n\n```js\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n    this.maxSize=maxSize;\n    this.size=0;\n    this.stack=[];\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if(this.size!==this.maxSize){\n        this.stack.push(x);\n        this.size++;\n    }\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    if(this.size===0) return -1;\n    this.size--;\n    return this.stack.pop();\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    for(let i=Math.min(k-1,this.size-1);i>=0;i--){\n        this.stack[i]+=val;\n    }\n};\n\n/** \n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */\n```\n\n\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"laurallalala":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yingliufilms":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jin03041209":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"agentzzz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"suukii":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992041436","body":"[Link to LeetCode Problem](https://leetcode-cn.com/problems/shortest-distance-to-a-character/)\n\n## S1: 中心扩展法\n\n这是最符合直觉的思路，对每个字符分别进行如下处理：\n\n- 从当前下标出发，分别向左、右两个方向去寻找目标字符 `C`。\n- 只在一个方向找到的话，直接计算字符距离。\n- 两个方向都找到的话，取两个距离的最小值。\n\n[https://camo.githubusercontent.com/efaa1cd00bcef4ff7e2cf0c5cd7a37a60d403cf9f82439dffb63a1a48dcf3e06/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f7375756b69692f39312d646179732d616c676f726974686d2f6173736574732f3832315f302e706e67](https://camo.githubusercontent.com/efaa1cd00bcef4ff7e2cf0c5cd7a37a60d403cf9f82439dffb63a1a48dcf3e06/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f7375756b69692f39312d646179732d616c676f726974686d2f6173736574732f3832315f302e706e67)\n\n```cpp\nclass Solution {\npublic:\n    vector<int> shortestToChar(string S, char C) {\n        vector<int> res(S.length());\n\n        for (int i = 0; i < S.length(); i++) {\n            if (S[i] == C) continue;\n\n            int left = i;\n            int right = i;\n            int dist = 0;\n\n            while (left >= 0 || right <= S.length() - 1) {\n                if (S[left] == C) {\n                    dist = i - left;\n                    break;\n                }\n                if (S[right] == C) {\n                    dist = right - i;\n                    break;\n                }\n\n                if (left > 0) left--;\n                if (right < S.length() - 1) right++;\n            }\n\n            res[i] = dist;\n        }\n\n        return res;\n    }\n}\n```\n\n```jsx\n/**\n * @param {string} S\n * @param {character} C\n * @return {number[]}\n */\nvar shortestToChar = function (S, C) {\n  // 结果数组 res\n  var res = Array(S.length).fill(0);\n\n  for (let i = 0; i < S.length; i++) {\n    // 如果当前是目标字符，就什么都不用做\n    if (S[i] === C) continue;\n\n    // 定义两个指针 l, r 分别向左、右两个方向寻找目标字符 C，取最短距离\n    let l = i,\n      r = i,\n      shortest = Infinity;\n\n    while (l >= 0) {\n      if (S[l] === C) {\n        shortest = Math.min(shortest, i - l);\n        break;\n      }\n      l--;\n    }\n\n    while (r < S.length) {\n      if (S[r] === C) {\n        shortest = Math.min(shortest, r - i);\n        break;\n      }\n      r++;\n    }\n\n    res[i] = shortest;\n  }\n  return res;\n};\n```\n\n- ****Time:**** $O(N^2)$，N 为 S 的长度，两层循环。\n- ***Space:** $O(1)$*\n\n## S2: 空间换时间\n\n空间换时间是编程中很常见的一种 trade-off (反过来，时间换空间也是)。\n\n- 因为目标字符 `C` 在 `S` 中的位置是不变的，所以我们可以提前将 `C` 的所有下标记录在一个数组 `cIndices` 中。\n- 然后遍历字符串 `S` 中的每个字符，到 `cIndices` 中找到距离当前位置最近的下标，计算距离。\n\n```cpp\nclass Solution {\npublic:\n    vector<int> shortestToChar(string S, char C) {\n        int n = S.length();\n        vector<int> c_indices;\n        // Initialize a vector of size n with default value n.\n        vector<int> res(n, n);\n\n        for (int i = 0; i < n; i++) {\n            if (S[i] == C) c_indices.push_back(i);\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (S[i] == C) {\n                res[i] = 0;\n                continue;\n            }\n\n            for (int j = 0; j < c_indices.size(); j++) {\n                int dist = abs(c_indices[j] - i);\n                if (dist > res[i]) break;\n                res[i] = dist;\n            }\n        }\n\n        return res;\n    }\n};\n```\n\n```jsx\n/**\n * @param {string} S\n * @param {character} C\n * @return {number[]}\n */\nvar shortestToChar = function (S, C) {\n  // 记录 C 字符在 S 字符串中出现的所有下标\n  var cIndices = [];\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === C) cIndices.push(i);\n  }\n\n  // 结果数组 res\n  var res = Array(S.length).fill(Infinity);\n\n  for (let i = 0; i < S.length; i++) {\n    // 目标字符，距离是 0\n    if (S[i] === C) {\n      res[i] = 0;\n      continue;\n    }\n\n    // 非目标字符，到下标数组中找最近的下标\n    for (const cIndex of cIndices) {\n      const dist = Math.abs(cIndex - i);\n\n      // 小小剪枝一下\n      // 注：因为 cIndices 中的下标是递增的，后面的 dist 也会越来越大，可以排除\n      if (dist >= res[i]) break;\n\n      res[i] = dist;\n    }\n  }\n  return res;\n};\n```\n\n- ****Time:**** $O(N*K)$，N 是 S 的长度，K 是字符 `C` 在字符串中出现的次数，*K <= N*。\n- ***Space:** $O(K)$，*K 为字符 `C` 出现的次数，这是记录字符 `C` 出现下标的辅助数组消耗的空间。\n\n## S3: 贪心\n\n其实对于每个字符来说，它只关心离它最近的那个 `C` 字符，其他的它都不管。所以这里还可以用贪心的思路：\n\n1. 先 `从左往右` 遍历字符串 `S`，用一个数组 left 记录每个字符 `左侧` 出现的最后一个 `C` 字符的下标；\n2. 再 `从右往左` 遍历字符串 `S`，用一个数组 right 记录每个字符 `右侧` 出现的最后一个 `C` 字符的下标；\n3. 然后同时遍历这两个数组，计算距离最小值。\n\n**优化 1**\n\n再多想一步，其实第二个数组并不需要。\n\n因为对于左右两侧的 `C` 字符，我们也只关心其中距离更近的那一个，所以第二次遍历的时候可以看情况覆盖掉第一个数组的值：\n\n1. 字符左侧没有出现过 `C` 字符\n2. `i - left` > `right - i` (i 为当前字符下标，left 为字符左侧最近的 `C` 下标，right 为字符右侧最近的 `C` 下标)\n\n如果出现以上两种情况，就可以进行覆盖，最后再遍历一次数组计算距离。\n\n**优化 2**\n\n如果我们是直接记录 `C` 与当前字符的距离，而不是记录 `C` 的下标，还可以省掉最后一次遍历计算距离的过程。\n\n```cpp\nclass Solution {\npublic:\n    vector<int> shortestToChar(string S, char C) {\n        int n = S.length();\n        vector<int> dist(n, n);\n\n        for (int i = 0; i < n; i++) {\n            if (S[i] == C) dist[i] = 0;\n            else if (i > 0) dist[i] = dist[i - 1] + 1;\n        }\n\n        for (int i = n - 1; i >= 0; i--) {\n            if (dist[i] == n\n                || (i < n - 1 && dist[i + 1] + 1 < dist[i]))\n                    dist[i] = dist[i + 1] + 1;\n        }\n\n        return dist;\n    }\n};\n```\n\n```jsx\n/**\n * 优化1：覆盖最近距离\n * @param {string} S\n * @param {character} C\n * @return {number[]}\n */\nvar shortestToChar = function (S, C) {\n  var res = Array(S.length);\n\n  // 第一次遍历：从左往右\n  // 找到出现在左侧的 C 字符的最后下标\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === C) res[i] = i;\n    // 如果左侧没有出现 C 字符的话，用 Infinity 进行标记\n    else res[i] = res[i - 1] === void 0 ? Infinity : res[i - 1];\n  }\n\n  // 第二次遍历：从右往左\n  // 找出现在右侧的 C 字符的最后下标\n  // 如果左侧没有出现过 C 字符，或者右侧出现的 C 字符距离更近，就更新 res[i]\n  for (let i = S.length - 1; i >= 0; i--) {\n    if (res[i] === Infinity || res[i + 1] - i < i - res[i]) res[i] = res[i + 1];\n  }\n\n  // 计算距离\n  for (let i = 0; i < res.length; i++) {\n    res[i] = Math.abs(res[i] - i);\n  }\n  return res;\n};\n\n/**\n * 优化2: 直接计算距离\n * @param {string} S\n * @param {character} C\n * @return {number[]}\n */\nvar shortestToChar = function (S, C) {\n  var res = Array(S.length);\n\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === C) res[i] = 0;\n    // 记录距离：res[i - 1] + 1\n    else res[i] = res[i - 1] === void 0 ? Infinity : res[i - 1] + 1;\n  }\n\n  for (let i = S.length - 1; i >= 0; i--) {\n    // 更新距离：res[i + 1] + 1\n    if (res[i] === Infinity || res[i + 1] + 1 < res[i]) res[i] = res[i + 1] + 1;\n  }\n\n  return res;\n};\n```\n\n```python\nclass Solution(object):\n    def shortestToChar(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: List[int]\n        \"\"\"\n        n = len(s)\n        res = [0 if s[i] == c else None for i in range(n)]\n\n        for i in range(1, n):\n            if res[i] != 0 and res[i - 1] is not None:\n                res[i] = res[i - 1] + 1\n\n        for i in range(n - 2, -1, -1):\n            if res[i] is None or res[i + 1] + 1 < res[i]:\n                res[i] = res[i + 1] + 1\n        return res\n```\n\n- ****Time:**** $O(N)$，N 是 S 的长度。\n- ***Space:** $O(1)$*\n\n## S4: 窗口\n\n把 `C` 看成分界线，将 `S` 划分成一个个窗口。然后对每个窗口进行遍历，分别计算每个字符到窗口边界的距离最小值。\n\n![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/07bbb9ef-1f56-41b2-9272-d313af7af06a/Untitled.png)\n\n```cpp\nclass Solution {\npublic:\n    vector<int> shortestToChar(string S, char C) {\n        int n = S.length();\n\n        int l = S[0] == C ? 0 : n;\n        int r = S.find(C, 1);\n\n        vector<int> dist(n);\n\n        for (int i = 0; i < n; i++) {\n            dist[i] = min(abs(i - l), abs(r - i));\n            if (i == r) {\n                l = r;\n                r = S.find(C, r + 1);\n            }\n        }\n\n        return dist;\n    }\n};\n```\n\n```jsx\n/**\n * @param {string} S\n * @param {character} C\n * @return {number[]}\n */\nvar shortestToChar = function (S, C) {\n  // 窗口左边界，如果没有就初始化为 Infinity，初始化为 S.length 也可以\n  let l = S[0] === C ? 0 : Infinity,\n    // 窗口右边界\n    r = S.indexOf(C, 1);\n\n  const res = Array(S.length);\n\n  for (let i = 0; i < S.length; i++) {\n    // 计算字符到当前窗口左右边界的最小距离\n    res[i] = Math.min(Math.abs(i - l), Math.abs(r - i));\n\n    // 遍历完了当前窗口的字符后，将整个窗口右移\n    if (i === r) {\n      l = r;\n      r = S.indexOf(C, l + 1);\n    }\n  }\n\n  return res;\n};\n```\n\n```python\nclass Solution(object):\n    def shortestToChar(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: List[int]\n        \"\"\"\n        n = len(s)\n        res = [0 for _ in range(n)]\n\n        l = 0 if s[0] == c else n\n        r = s.find(c, 1)\n\n        for i in range(n):\n            res[i] = min(abs(i - l), abs(r - i))\n            if i == r:\n                l = r\n                r = s.find(c, l + 1)\n        return res\n```\n\n- ****Time:**** $O(N)$，N 是 S 的长度。\n- ***Space:** $O(1)$*","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993310567","body":"[Link to LeetCode Problem](https://leetcode-cn.com/problems/design-a-stack-with-increment-operation/)\n\n## S1: 模拟\n\n直观思路是在增量操作时进行模拟，每次进行增量操作时都遍历指定的 k 个元素，但这样时间复杂度是 $O(N)$。\n\n时间优化思路是，既然我们只有在出栈时才考虑元素的值，何不将增量操作延后到出栈时，如此便需要将所有增量操作都先存起来。\n\n- 借助另一个容器来记录增量操作。\n- 在出栈时，将栈顶元素加上增量弹出，并更新增量记录。\n\n```cpp\nclass CustomStack {\npublic:\n    CustomStack(int maxSize): max_size_(maxSize) {\n        stack_.resize(maxSize);\n        add_.resize(maxSize);\n    }\n    \n    void push(int x) {\n        if (top_ < max_size_ - 1) {\n            top_++;\n            stack_[top_] = x;\n        }\n    }\n    \n    int pop() {\n        if (top_ == -1) return -1;\n        int res = stack_[top_] + add_[top_];\n        if (top_ > 0) add_[top_ - 1] += add_[top_];\n        add_[top_] = 0; \n        top_--;\n        return res;\n\n    }\n    \n    void increment(int k, int val) {\n        int idx = min(k - 1, top_);\n        if (idx >= 0) add_[idx] += val;\n    }\nprivate:\n    vector<int> stack_;\n    vector<int> add_;\n    int top_ = -1;\n    int max_size_;\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack* obj = new CustomStack(maxSize);\n * obj->push(x);\n * int param_2 = obj->pop();\n * obj->increment(k,val);\n */\n```\n\n- ****Time:**** $O(1)$，所有操作的时间复杂度都是 $O(1)$。\n- ***Space:** $O(N)$*，使用了一个长度为 maxSize 的辅助数组来记录增量操作。","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bingyingchu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"newbeenoob":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"samaritan1998":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992431278","body":"## 字符的最短距离\n\n双向遍历的思想\n\n- 从左向右遍历，记录上一个字符 C 出现的位置 prev，那么答案就是 i - prev。\n- 从右向左遍历，记录上一个字符 C 出现的位置 prev，那么答案就是 prev - i。\n- 这两个值取最小就是答案。\n\n```python\nclass Solution(object):\n    def shortestToChar(self, S, C):\n        prev = float('-inf')\n        ans = []\n        for i, x in enumerate(S):\n            if x == C: \n                prev = i\n            ans.append(i - prev)\n\n        prev = float('inf')\n        for i in range(len(S) - 1, -1, -1):\n            if S[i] == C: \n                prev = i\n            ans[i] = min(ans[i], prev - i)\n\n        return ans\n```\n\n时间复杂度和空间复杂度都为O(n)\n\n像这样双向遍历的题还有   分发糖果","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993133904","body":"## 设计一个支持增量操作的栈\n\n- 初始化栈\n- push和pop\n- 栈底的 k 个元素的值都增加 val\n\n```python\nclass CustomStack:\n\n    #初始化,maxSize为栈最多能容纳的元素数量\n    def __init__(self, maxSize: int):\n        self.st=[0]*maxSize\n        self.top=-1\n\n    #将元素x添加到栈顶   \n    def push(self, x: int) -> None: \n        if self.top != len(self.st) - 1:\n            self.top += 1\n            self.st[self.top] = x\n\n    #弹出栈顶元素        \n    def pop(self) -> int:\n        if self.top == -1:\n            return -1\n        self.top -= 1\n        return self.stk[self.top + 1]\n\n    # 栈底的 k 个元素的值都增加 val\n    def increment(self, k: int, val: int) -> None:\n        lim = min(k, self.top + 1)\n        for i in range(lim):\n            self.stk[i] += val\n```\n\n此类设计题需要先分析时间空间复杂度，选定合适的数据结构\n\n![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0a0bb94d-5f53-4234-be93-279d4e7c753d/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0a0bb94d-5f53-4234-be93-279d4e7c753d/Untitled.png)\n\n贴一个C++解法\n\n```cpp\nclass CustomStack {\nprivate:\n    vector<int> vc;\n    int maxSize;\npublic:\n    CustomStack(int maxSize_) {\n        maxSize = maxSize_;\n        vc.clear();\n        vc.reserve(maxSize);\n    }\n    \n    void push(int x) {\n        if (vc.size() == maxSize) {\n            return;\n        }\n        vc.push_back(x);\n    }\n    \n    int pop() {\n        if (vc.empty()) {\n            return -1;\n        }\n        int res = vc.back();\n        vc.pop_back();\n        return res;\n    }\n    \n    void increment(int k, int val) {\n        int len=0;\n        len = std::min( k, int(vc.size()) );\n        for (int i = 0; i < len; ++i) {\n            vc[i] += val;\n        }\n    }\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ginnydyy":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991993182","body":"## Problem\r\nhttps://leetcode.com/problems/shortest-distance-to-a-character/\r\n\r\n## Note\r\n- Intuition: scan once and mark all the c index. scan again to calculate the distance comparing the marked index.\r\n- Improvement: scan once from left to right and calculate the initial distance. scan again from right to left and update the distance. Note that from left to right, need to use Integer.MIN_VALUE / 2 to avoid overflow.\r\n\r\n## Solution\r\n```java\r\nclass Solution {\r\n    public int[] shortestToChar(String s, char c) {\r\n        if(s == null || s.isEmpty()){\r\n            return null;\r\n        }\r\n        \r\n        int[] res = new int[s.length()];\r\n        \r\n        int left = Integer.MIN_VALUE / 2;\r\n        for(int i = 0; i < s.length(); i++){\r\n            if(s.charAt(i) == c){\r\n                left = i;\r\n            }\r\n            res[i] = Math.abs(i - left);\r\n        }\r\n        \r\n        int right = Integer.MAX_VALUE;\r\n        for(int i = s.length() - 1; i >= 0; i--){\r\n            if(s.charAt(i) == c){\r\n                right = i;\r\n            }\r\n            res[i] = Math.min(res[i], Math.abs(right - i));\r\n        }\r\n        \r\n        return res;\r\n    }\r\n}\r\n```\r\n\r\n## Complexity\r\n- T: O(n) n is the length of s.\r\n- S: O(1) no extra space is required.\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-992774750","body":"## Problem\r\nhttps://leetcode.com/problems/design-a-stack-with-increment-operation/\r\n\r\n## Note\r\n- Use int array and record the maxSize and curSize\r\n\r\n## Solution\r\n```java\r\nclass CustomStack {\r\n    \r\n    private int[] array;\r\n    private int maxSize;\r\n    private int curSize;\r\n\r\n    public CustomStack(int maxSize) {\r\n        this.array = new int[maxSize];\r\n        this.maxSize = maxSize;\r\n        this.curSize = 0;\r\n    }\r\n    \r\n    public void push(int x) {\r\n        if(this.curSize < this.maxSize){\r\n            array[curSize++] = x;\r\n        }\r\n    }\r\n    \r\n    public int pop() {\r\n        if(this.curSize > 0){\r\n            return array[--curSize];\r\n        }\r\n        return -1;\r\n    }\r\n    \r\n    public void increment(int k, int val) {\r\n        if(curSize > 0){\r\n            for(int i = 0; i < k && i < curSize; i++){\r\n                array[i] += val;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Your CustomStack object will be instantiated and called as such:\r\n * CustomStack obj = new CustomStack(maxSize);\r\n * obj.push(x);\r\n * int param_2 = obj.pop();\r\n * obj.increment(k,val);\r\n */\r\n```\r\n\r\n## Complexity\r\n- T: O(1) for push and pop, O(k) for increment.\r\n- S: O(n) n is the max size of the stack.","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"GemZq":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"littlemoon-zh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xbhog":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"st2yang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiezhengyun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kofzhang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ymkymk":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"15691894985":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992154137","body":"day【2】题目地址(821. 字符的最短距离)\n\nhttps://leetcode-cn.com/problems/shortest-distance-to-a-character\n```python\n    class Solution(object):\n        def shortestToChar(self, S, C):\n            prev = float('-inf')\n            ans = []\n            for i, x in enumerate(S):\n                if x == C: prev = i\n                ans.append(i - prev)\n    \n            prev = float('inf')\n            for i in xrange(len(S) - 1, -1, -1):\n                if S[i] == C: prev = i\n                ans[i] = min(ans[i], prev - i)\n            return ans\n```\n复杂度分析\n\n- 时间复杂度：O(N)，其中 NN 是 S 的长度，遍历字符串两次。\n- 空间复杂度：O(N)，ans 数组的大小。\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"feikerwu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xj-yan":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991819951","body":"```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        num2 = list()\n        while k:\n            tmp = k % 10\n            num2.append(tmp)\n            k //= 10\n        num2.reverse()\n        i, j = len(num) - 1, len(num2) - 1\n        isCarried = False\n        res = list()\n        while i >= 0 or j >= 0 or isCarried:\n            digit = (num[i] if i >= 0 else 0) +  (num2[j] if j >= 0 else 0) + (1 if isCarried else 0)\n            isCarried = True if digit >= 10 else False\n            res.append(digit % 10)\n            i -= 1\n            j -= 1\n        res.reverse()\n        return res\n```\nTime Complexity: O(n), Space Complexity: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992551556","body":"```python\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        n, pos = len(s), -float('inf')\n        res = [n] * n\n        for i in list(range(n)) + list(range(n)[::-1]):\n            if s[i] == c:\n                pos = i\n            res[i] = min(res[i], abs(i - pos))\n        return res\n```\nTime Complexity: O(n), Space Complexity: O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ychen8777":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lilixikun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"peteruixi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"user1689":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xieyj17":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shamworld":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991877147","body":"```js\nvar addToArrayForm = function(num, k) {\n    const res = [];\n    const n = num.length;\n    for (let i = n - 1; i >= 0; --i) {\n        let sum = num[i] + k % 10;\n        k = Math.floor(k / 10);\n        if (sum >= 10) {\n            k++;\n            sum -= 10;\n        }\n        res.push(sum);\n    }\n    for (; k > 0; k = Math.floor(k / 10)) {\n        res.push(k % 10);\n    }\n    res.reverse();\n    return res;\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992047270","body":"```js\nvar shortestToChar = function(s, c) {\n    let arr = [];\n    let result = [];\n    for(let i = 0;i < s.length; i++){  \n        if(s[i]===c){\n            arr.push(i)\n        }\n    }\n    for(let i = 0;i < s.length; i++){\n        if(s[i]===c){\n            result[i] = 0;\n            continue\n        }\n        \n        for(let index of arr){\n            let res = Math.abs(index-i);\n            console.log(result)\n            if(res>=result[i]) break;\n            result[i] = res;\n        }\n    }\n    return result\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993123116","body":"```js\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n    this.stackList = [];\n    this.maxSize = maxSize;\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if(this.stackList.length>=this.maxSize) return null;\n    this.stackList.push(x); \n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    \n    if(this.stackList.length==0) return -1;\n    return this.stackList.pop();\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    if(k<this.stackList.length){\n        for(let i = 0; i < k; i++){\n            this.stackList[i] += val\n        }\n    }else{\n        for(let i = 0; i < this.stackList.length; i++){\n            this.stackList[i] += val\n        }\n    }\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"learning-go123":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"a244629128":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhousibao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ysy0707":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sunupdong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"machuangmr":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991903092","body":"### 代码\r\n```java\r\nclass Solution {\r\n    // 思路： 1、将数组的最后一个元素和k的个位开始相加，\r\n    //       2、大于10 就向前进一位（k的前一位 + 1）\r\n     //        3、 重复以上步骤直到数组和k的位数结束\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n     List<Integer> rest = new LinkedList<>();\r\n    int len = num.length - 1;\r\n    for(int i = len;i >= 0;i--) {\r\n        int total = num[i] + k % 10;\r\n        //取 除过后一位的前面的值\r\n        k /= 10;\r\n        if(total >= 10) {\r\n            //大于10，则前面的值需要进1\r\n            k++;\r\n            total = total % 10;\r\n        }\r\n        rest.add(total);\r\n    }\r\n    while(k > 0) {\r\n        rest.add(k % 10);\r\n        k /=10;\r\n    }\r\n     Collections.reverse(rest);\r\n     return rest;\r\n    }\r\n}\r\n````\r\n### 复杂度\r\n- 时间复杂度O(N)\r\n- 空间复杂度O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992533315","body":"### 代码\r\n```java\r\nclass Solution {\r\n    public int[] shortestToChar(String s, char c) {\r\n    int[] arr = new int[s.length()];\r\n    // 从左到右遍历，则每个s[i]的值为， 当前下标减去上个元素C的下标\r\n     int pre = Integer.MIN_VALUE / 2;\r\n     for(int i = 0;i < arr.length;i++) {\r\n         if(s.charAt(i) == c) {\r\n             pre = i;\r\n         }\r\n         arr [i] = i - pre;\r\n     }\r\n\r\n     // 从右边向右边遍历，则\bs[i]的值就等于 pre - i ;\r\n      pre = Integer.MAX_VALUE;\r\n     for(int i = s.length() -1;i >=0;i--){\r\n         if(s.charAt(i) == c) {\r\n             pre = i;\r\n         }\r\n        arr[i] = Math.min(arr[i], pre - i);\r\n     }\r\n        return arr;\r\n    }\r\n}\r\n````\r\n### 复杂度\r\n- 时间复杂度 O(N)\r\n- 空间复杂度 O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wang-hejie":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"iambigchen":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991853617","body":"### 思路\n逐位相加，如果大于9，就要进位\n\n### 代码\n```js\nvar addToArrayForm = function(num, k) {\n    k = String(k).split('')\n    var length = Math.max(num.length, k.length)\n    var res = new Array(length).fill(0)\n    for (let index = length-1; index >= 0; index--) {\n        var a = num.length > 0 ? num.pop() : 0\n        var b  = k.length > 0 ?  k.pop() : 0\n        var sum = res[index] + a + +b\n        res[index] = sum % 10\n        if (sum > 9) {\n            if (index-1 >= 0) {\n                res[index - 1] = 1\n            } else {\n                res.unshift(1)\n            }\n        }\n    }\n    return res\n};\n```\n\n### 复杂度\n\n时间复杂度：O(n)\n空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992074069","body":"\n## 题目地址(821. 字符的最短距离)\n\nhttps://leetcode-cn.com/problems/shortest-distance-to-a-character/\n\n## 题目描述\n\n```\n给你一个字符串 s 和一个字符 c ，且 c 是 s 中出现过的字符。\n\n返回一个整数数组 answer ，其中 answer.length == s.length 且 answer[i] 是 s 中从下标 i 到离它 最近 的字符 c 的 距离 。\n\n两个下标 i 和 j 之间的 距离 为 abs(i - j) ，其中 abs 是绝对值函数。\n\n \n\n示例 1：\n\n输入：s = \"loveleetcode\", c = \"e\"\n输出：[3,2,1,0,1,0,0,1,2,2,1,0]\n解释：字符 'e' 出现在下标 3、5、6 和 11 处（下标从 0 开始计数）。\n距下标 0 最近的 'e' 出现在下标 3 ，所以距离为 abs(0 - 3) = 3 。\n距下标 1 最近的 'e' 出现在下标 3 ，所以距离为 abs(1 - 3) = 2 。\n对于下标 4 ，出现在下标 3 和下标 5 处的 'e' 都离它最近，但距离是一样的 abs(4 - 3) == abs(4 - 5) = 1 。\n距下标 8 最近的 'e' 出现在下标 6 ，所以距离为 abs(8 - 6) = 2 。\n\n\n示例 2：\n\n输入：s = \"aaab\", c = \"b\"\n输出：[3,2,1,0]\n\n\n \n\n提示：\n1 <= s.length <= 104\ns[i] 和 c 均为小写英文字母\n题目数据保证 c 在 s 中至少出现一次\n```\n\n## 前置知识\n\n- \n\n## 公司\n\n- 暂无\n\n## 思路\n\n遍历s每个值，如果当前值正好是c，则跳过。否则，从当前值向左、右分别遍历，直到遇到c，再计算左右的最短距离。\n\n## 关键点\n\n-  \n\n## 代码\n\n- 语言支持：JavaScript\n\nJavaScript Code:\n\n```javascript\n\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function(s, c) {\n    let res = new Array(s.length).fill(0)\n\n    for(let i = 0; i<s.length; i++) {\n        if (s[i] === c) {\n            res[i] = 0\n            continue\n        }\n        let l = i - 1\n        let r = i + 1\n        let disL = Infinity\n        let disR = Infinity\n        while(l >= 0) {\n            if (s[l] === c) {\n                disL = Math.abs(i - l)\n                break\n            } else {\n                l--\n            }\n        }\n        while(r < s.length) {\n            if (s[r] === c) {\n                disR = Math.abs(i - r)\n                break\n            } else {\n                r++\n            }\n        }\n        res[i] = Math.min(disL, disR)\n    }\n\n    return res\n};\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(n^2)$\n- 空间复杂度：$O(1)$\n\n\n## 思路2\n\n先用数组存下所有c出现过的下标，再次遍历s，计算当前值和每个c出现过下标的距离，求出最小值\n\n## 关键点\n\n再次遍历s，计算最小距离时，因为indexArr存的是c出现过的下标，是递增，所以可以做一次剪枝\n\n## 代码\n\n- 语言支持：JavaScript\n\nJavaScript Code:\n\n```javascript\n\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function(s, c) {\n    let res = new Array(s.length).fill(0)\n    let indexArr = []\n\n    for(let i = 0; i<s.length; i++) {\n        if (s[i] === c) {\n            indexArr.push(i)\n        }\n    }\n\n    for(let i = 0; i<s.length; i++) {\n        if (s[i] === c) {\n            res[i] = 0\n            continue\n        }\n        let dist = Infinity\n        for(let j = 0; j< indexArr.length; j++) {\n            if (Math.abs(indexArr[j] - i) >= dist) {\n                break\n            }\n           dist = Math.abs(indexArr[j] - i)\n        }\n        res[i] = dist\n    }\n\n    return res\n};\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。k 为c在s出现过的次数。\n\n- 时间复杂度：$O(n*k)$\n- 空间复杂度：$O(k)$\n\n\n## 思路3\n\n第一次遍历，让s存下当前索引i左侧离着最近的c的坐标。只需要判断看i-1是否有值即可。\n\n第二次遍历，从右至左，判断当前索引i， res的左侧是否有c，或者 左侧到c的距离是否比右侧(i+1)的距离小，如果没有，则更新当前i 的值，更新成右侧的值\n\n第三次遍历，计算当前每个值和索引的距离\n\n## 关键点\n\n可以让res直接存当前距离，而不是索引来减少最后计算距离的遍历。\n\n## 代码\n\n- 语言支持：JavaScript\n\nJavaScript Code:\n\n```javascript\n\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\n var shortestToChar = function (s, c) {\n    var res = Array(s.length);\n    \n    for(let i = 0; i < s.length; i++) {\n        if (s[i] === c) {\n            res[i] = i\n        } else [\n            res[i] = res[i-1] == void 0 ? Infinity : res[i-1]\n        ]\n    }\n\n    for(let i = s.length -1; i >= 0; i--) {\n        if (res[i] == Infinity || i - res[i] > res[i+1] - i) {\n            res[i] = res[i+1]\n        }\n    }\n\n    for (let i = 0; i < res.length; i++) {\n        res[i] = Math.abs(i -res[i])\n    }\n    return res\n};\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(3n)$\n- 空间复杂度：$O(n)$\n\n```javascript\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\n var shortestToChar = function (s, c) {\n    var res = Array(s.length);\n    \n    for(let i = 0; i < s.length; i++) {\n        if (s[i] === c) {\n            res[i] = 0\n        } else [\n            res[i] = res[i-1] == void 0 ? Infinity : res[i-1] + 1\n        ]\n    }\n\n    for(let i = s.length -1; i >= 0; i--) {\n        if (res[i] == Infinity || res[i] > res[i+1] + 1) {\n            res[i] = res[i+1] + 1\n        }\n    }\n\n    return res\n  };\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(2n)$\n- 空间复杂度：$O(n)$\n\n\n## 思路4\n\n定义l和r，分别表示当前窗口左侧c的下标和右侧的下标。只需要计算在窗户内元素到两个边界的距离即可。如果遍历到达右侧边界时，将整个窗口向后移。\n\n## 关键点\n\nindexOf的第二个参数表示从第几个开始查询，第二个参数传为当前左侧边框下标，即可\n\n## 代码\n\n- 语言支持：JavaScript\n\nJavaScript Code:\n\n```javascript\n\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\n var shortestToChar = function (s, c) {\n    let res = Array(s.length)\n    let l = s[0] === c ? 0 : -Infinity\n    let r = s.indexOf(c, 0)\n\n    for(let i = 0; i < s.length; i++) {\n        res[i] = Math.min(Math.abs(i-l), Math.abs(i-r))\n        if (i === r) {\n            l = r\n            r = s.indexOf(c, l+1)\n        }\n    }\n\n    return res\n};\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(n)$\n- 空间复杂度：$O(1)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993129731","body":"\n## 题目地址(1381. 设计一个支持增量操作的栈)\n\nhttps://leetcode-cn.com/problems/design-a-stack-with-increment-operation/\n\n## 题目描述\n\n```\n请你设计一个支持下述操作的栈。\n\n实现自定义栈类 CustomStack ：\n\nCustomStack(int maxSize)：用 maxSize 初始化对象，maxSize 是栈中最多能容纳的元素数量，栈在增长到 maxSize 之后则不支持 push 操作。\nvoid push(int x)：如果栈还未增长到 maxSize ，就将 x 添加到栈顶。\nint pop()：弹出栈顶元素，并返回栈顶的值，或栈为空时返回 -1 。\nvoid inc(int k, int val)：栈底的 k 个元素的值都增加 val 。如果栈中元素总数小于 k ，则栈中的所有元素都增加 val 。\n\n \n\n示例：\n\n输入：\n[\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]\n输出：\n[null,null,null,2,null,null,null,null,null,103,202,201,-1]\n解释：\nCustomStack customStack = new CustomStack(3); // 栈是空的 []\ncustomStack.push(1);                          // 栈变为 [1]\ncustomStack.push(2);                          // 栈变为 [1, 2]\ncustomStack.pop();                            // 返回 2 --> 返回栈顶值 2，栈变为 [1]\ncustomStack.push(2);                          // 栈变为 [1, 2]\ncustomStack.push(3);                          // 栈变为 [1, 2, 3]\ncustomStack.push(4);                          // 栈仍然是 [1, 2, 3]，不能添加其他元素使栈大小变为 4\ncustomStack.increment(5, 100);                // 栈变为 [101, 102, 103]\ncustomStack.increment(2, 100);                // 栈变为 [201, 202, 103]\ncustomStack.pop();                            // 返回 103 --> 返回栈顶值 103，栈变为 [201, 202]\ncustomStack.pop();                            // 返回 202 --> 返回栈顶值 202，栈变为 [201]\ncustomStack.pop();                            // 返回 201 --> 返回栈顶值 201，栈变为 []\ncustomStack.pop();                            // 返回 -1 --> 栈为空，返回 -1\n\n\n \n\n提示：\n\n1 <= maxSize <= 1000\n1 <= x <= 1000\n1 <= k <= 1000\n0 <= val <= 100\n每种方法 increment，push 以及 pop 分别最多调用 1000 次\n```\n\n## 前置知识\n\n- \n\n## 公司\n\n- 暂无\n\n## 思路\n\n用数组模拟栈\n\n## 关键点\n\n-  \n\n## 代码\n\n- 语言支持：JavaScript\n\nJavaScript Code:\n\n```javascript\n\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n    this.maxSize = maxSize\n    this.val = []\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if (this.val.length < this.maxSize) {\n        this.val.push(x)\n    }\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    if (this.val.length === 0) {\n        return -1\n    }\n    return this.val.pop()\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    for(var i =0; i< k;i++) {\n        if (i < this.val.length) {\n            this.val[i] = this.val[i] + val\n        }\n    }\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(n)$\n- 空间复杂度：$O(1)$\n\n\n\n\n## 思路\n\n用increments来存所有的increment操作，increment[i]表示前i个值都加increment[i]值\n\n在pop的时候，只需要把栈顶值取出，加increment[i]。在更新维护increment[i-1]，将increment[i-1] 变成 increment[i] + increment[i-1]。然后重置increment[i]为0即可\n\n## 关键点\n\n-  \n\n## 代码\n\n- 语言支持：JavaScript\n\nJavaScript Code:\n\n```javascript\n\nvar CustomStack = function(maxSize) {\n    this.maxSize = maxSize\n    this.list = []\n    this.increments = Array(maxSize).fill(0)\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if (this.list.length < this.maxSize) {\n        this.list.push(x)\n    }\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    if (this.list.length === 0) return -1\n    let i = this.list.length - 1\n    this.increments[i-1] += this.increments[i]\n    let res = this.list.pop() + this.increments[i]\n    this.increments[i] = 0\n    return res\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    let i = Math.min(k, this.list.length) -1\n    if (i >= 0) {\n        this.increments[i] += val\n    }\n};\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(1)$\n- 空间复杂度：$O(1)$","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ningli12":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zjsuper":[null,null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993117832","body":"```\r\nclass CustomStack:\r\n\r\n    def __init__(self, maxSize: int):\r\n        self.s = []\r\n        self.ms = maxSize\r\n        \r\n\r\n    def push(self, x: int) -> None:\r\n        if len(self.s)==self.ms:\r\n            pass\r\n        else:\r\n            self.s.append(x)\r\n        \r\n\r\n    def pop(self) -> int:\r\n        if not self.s:\r\n            return -1\r\n        temp = self.s.pop()\r\n        return temp\r\n        \r\n\r\n    def increment(self, k: int, val: int) -> None:\r\n        if k >= len(self.s):\r\n            self.s = [i+val for i in self.s]\r\n        else:\r\n            for i in range(0,k):\r\n                self.s[i] += val       \r\n``` ","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"siyuelee":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miss1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"doveshnnqkl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"taojin1992":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991834328","body":"# Understand:\r\n```\r\n1. num array won't be empty, no leading 0's, each digit is valid [0,9]\r\n2. k is non-negative, 1 <= k <= 10^4\r\n3. output most significant -> least significant\r\n4. k can have more digits\r\n\r\ncarry,\r\n99 + 1 -> 100\r\n98 + 1 -> 99\r\n789 + 12 -> 801\r\n1 + 99 -> 100\r\n```\r\n# Plan:\r\n```\r\ngo backward from the least significant digit, record carry and current sum digit, update k\r\n\r\ncheck k > 0\r\n\r\ncheck if carry == 1\r\n\r\nuse a linkedlist and insert into the head\r\n```\r\n# Evaluate:\r\n```\r\nTime: O(number of digits inside num + number of digits inside k) \r\n= O(nums.length + number of digits inside k) = O(max(nums.length, logk))\r\n\r\nSpace: O(max(nums.length, number of digits inside k) = O(max(nums.length, logk))\r\n\r\n```\r\n\r\n# Code:\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        LinkedList<Integer> sum = new LinkedList<>();\r\n        int carry = 0, newDigit = 0;\r\n        for (int pos = num.length - 1; pos >= 0; pos--) {\r\n            newDigit = num[pos] + k % 10 + carry;\r\n            carry = newDigit / 10;\r\n            newDigit %= 10;\r\n            sum.addFirst(newDigit);\r\n            k /= 10;\r\n        }\r\n        while (k > 0) {\r\n            newDigit = k % 10 + carry;\r\n            carry = newDigit / 10;\r\n            newDigit %= 10;\r\n            sum.addFirst(newDigit);\r\n            k /= 10;\r\n        }\r\n        \r\n        if (carry == 1) {\r\n            sum.addFirst(1);\r\n        }\r\n        return sum;\r\n    }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992584131","body":"\n# Understand:\n```\nIt is guaranteed that c occurs at least once in s.\ns[i] and c are lowercase English letters.\n1 <= s.length <= 10^4\n```\n# Plan:\n```\n\"record array\" to record the closest c index on its left\nthen record the closest c index on its right -> we can overwrite the same array with min value\n\nnote: no match on its left/right corner case\n\nmatch is guaranteed to exist though, either on its left or right\n```\n# Review:\n```\nInput: s = \"loveleetcode\", c = \"e\"\nOutput: [3,2,1,0,1,0,0,1,2,2,1,0]\n0.   1.  2. 3. 4  5  6. 7. 8. 9. 10 11\nl    o   v  e  l  e  e  t  c  o  d  e\n-1, -1, -1, 0, 1. 0. 0  1. 2  3. 4. 0   -> record, left to right\n3  , 2,  1 ,0, 1. 0. 0  1. 2  2. 1. 0\n\n\n\"aaba\"\n\"b\"\n```\n\n# Evaluate:\n```\nTime: O(s.length())\nSpace: O(s.length())\n```\n\n# Code:\n```java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int[] record = new int[s.length()];\n        int curIndex = 0, nearestL = -1, nearestR = -1;\n        for (curIndex = 0; curIndex < s.length(); curIndex++) {\n            if (s.charAt(curIndex) == c) {\n                record[curIndex] = 0; \n                nearestL = curIndex;\n            } else {\n                record[curIndex] = nearestL == -1 ? -1 : curIndex - nearestL;\n            }\n        }\n        /// go from right to left, overwrite the original record array\n        for (curIndex = s.length() - 1; curIndex >= 0; curIndex--) {\n            if (s.charAt(curIndex) == c) {\n                nearestR = curIndex;\n            } else {\n                if (record[curIndex] == -1) { // left is invalid, then right is guaranteed to be valid\n                    record[curIndex] = nearestR - curIndex;\n                } else {    \n                    // two cases here: is right valid? -> can we find a match on its right?\n                    if (nearestR != -1) {\n                        record[curIndex] = Math.min(record[curIndex], nearestR - curIndex);\n                    }\n                }\n            }\n        }\n        return record;\n    }\n}\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"septasset":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kennyxcao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"james20141606":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"muimi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"crystallili":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"benngfour":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ergwang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mixtureve":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"freedom0123":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"leolisgit":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhuliangyu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chun1hao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"m-z-w":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jinmenghan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lxy030988":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"HarryPangPang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"iamtheUsername":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hwpanda":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992086263","body":"``` JavaScrpit\nconst shortestToChar = (s, c)=>{\n  s=s.split('');\n  let res = [];\n  //loop through the string array\n  for (let i=0; i<s.length; i++) {\n    let dist = Infinity;\n    if(s[i] === c) {\n      res.push(0);\n      continue;\n    }\n    \n    //nested loop to find the closest index\n    //counting forward from current i \n    for(let j=i; j<s.length; j++) {\n      if(s[j] === c) {\n        dist = j-i;\n        break;\n      }\n    }\n    //counting backward from current i\n    for(let j=i; j>=0; j--) {\n      if(s[j] === c) {\n        dist = Math.min(dist, i-j);\n        break;\n      }\n    }\n    res.push(dist);\n  }//end loop string array\n  return res;\n}\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Nina1031":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fengchen321":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"maqianxiong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hewenyi666":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"flame0409":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dongzegithub":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xy147":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ccslience":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaowenhe":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991843707","body":"```C++\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        int n = num.size() - 1;\n        int cur = k;\n        vector<int> result;\n        while(n >= 0 || cur)\n        {\n            if(n>=0)\n            {\n                cur = cur + num[n];\n            }\n            result.push_back(cur%10);\n            cur = cur / 10;\n            n--;\n        }\n        reverse(result.begin(), result.end());\n        return result;\n\n    }\n};\n```\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992234694","body":"##思路\r\n左右两边分别遍历，求最小距离\r\n```python\r\nclass Solution:\r\n    def shortestToChar(self, S: str, C: str) -> List[int]:\r\n        results = []\r\n        pos = float('-inf')\r\n        for i in range(len(S)):\r\n            if S[i] == C:\r\n                pos = i\r\n            results.append(i - pos)\r\n        pos = float('inf')\r\n        for i in range(len(S)-1,-1,-1):\r\n            if S[i] == C:\r\n                pos = i\r\n            results[i] = min(results[i],(pos - i))\r\n        return results\r\n```\r\n\r\n## 复杂度\r\n时间复杂度：O（n）\r\n空间复杂度：O（n）","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mglslg":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"max-qaq":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tobepellucid":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sxr000511":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"july-aha":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xyinghe":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joriscai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cy-sues":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991867656","body":"## code\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List <Integer> arr = new ArrayList <Integer>();\n        for(int i=num.length-1;i>=0;i--){\n            int p=k%10;\n            k=k/10;\n            int sum = num[i]+p;\n            if(sum>=10){\n                k+=1;\n                sum-=10;\n            }\n            arr.add(sum);\n        }\n        for(;k>0;k=k/10){\n            int s= k%10;\n            arr.add(s);\n        }\n        Collections.reverse(arr);\n        return arr;\n    }\n}\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shenzhengkang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ryzhao5":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mosihan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"babbomax98":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Brandylulu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ivalkshfoeif":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yibenxiao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ray-hr":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991898710","body":"# 思路 \n 1.列竖式法 \n\n2.低位到高位相加 \n \n3.考虑进位位  \n\n4.取反\n# 代码 \n```python  \n \nclass Solution(object):\n    def addToArrayForm(self, num, k):\n        \"\"\"\n        :type num: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        p1 = len(num) - 1\n        carry = 0\n        res = []\n        while p1 >= 0 or k != 0 or carry > 0:\n            adder1 = num[p1] if p1 >= 0 else 0\n            adder2 = k % 10\n            sum = adder1 + adder2 + carry\n            carry = 1 if sum >= 10 else 0\n            sum = sum - 10 if sum >= 10 else sum\n            res.append(sum)\n            p1 -= 1\n            k //= 10\n        return res[::-1]\n\n```\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992337008","body":"# 思路 \n贪心 \n# 代码 \n```python \nclass Solution(object):\n    def shortestToChar(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: List[int]\n        \"\"\"\n        n = len(s)\n        res = [0 if s[i] == c else None for i in range(n)]\n\n        for i in range(1, n):\n            if res[i] != 0 and res[i - 1] is not None:\n                res[i] = res[i - 1] + 1\n\n        for i in range(n - 2, -1, -1):\n            if res[i] is None or res[i + 1] + 1 < res[i]:\n                res[i] = res[i + 1] + 1\n        return res\n``` ","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nekomoon404":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chen-ds":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"minuet-red":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mokrs":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"niyaolanggeyo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bowlofnoodles":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jerry9926":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kendj-staff":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"asterqian":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jmstart":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lizzy-123":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"edge-wzw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"20donkey":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lzcyx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"naomiwufzz":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992425638","body":"## **思路: 正反双指针**\n\n正向和负向各计算一次，每次一个指针找c一个指针指向尚未计算的元素\n\n### **代码**\n\n```python\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        res = [len(s)] * len(s)\n        i = 0\n        for j in range(len(s)):\n            if s[j] == c:\n                while i <= j:\n                    res[i] = min(res[i], j-i)\n                    i += 1\n        i = len(s) - 1\n        for j in range(len(s)-1, -1, -1):\n            if s[j] == c:\n                while i >= j:\n                    res[i] = min(res[i], i-j)\n                    i -= 1\n        return res\n```\n\n### **复杂度分析**\n\n- 时间复杂度：O(2n) n是s长度\n- 空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jaysonss":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"maxsarratt":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bxcharlie":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zszs97":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yj9676":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"carreylife":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fzzfgbw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jsyxiaoba":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"carterrr":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ff1234-debug":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zzhsaga":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"heyqz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Clarence5":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aatoe":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangyifan2018":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"eemsyw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"linearindep":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"iciue":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jiayinya":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chaggle":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sqshada":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"daidaidashixiong666":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xingkong1994":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"itsjacob":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"alwaysbest":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pzl233":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guangshisong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"baoqin87":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"MusicOfWind":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"codingcai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuetong3yu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kbfx1234":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991893740","body":"#### [989. 数组形式的整数加法](https://leetcode-cn.com/problems/add-to-array-form-of-integer/)\n\n```python\n// 91-day1-python\n\nclass Solution(object):\n    def addToArrayForm(self, num, k):\n        \"\"\"\n        :type num: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        i = len(num) - 1\n        carry = 0\n        res = []\n        while i >= 0 or k != 0:\n            x = num[i] if i >= 0 else 0\n            y = k % 10 if k != 0 else 0\n\n            sum = x + y + carry\n            res.append(sum % 10)\n            carry = sum // 10\n\n            i -= 1\n            k //= 10\n        if carry != 0: res.append(carry)\n        return res[::-1]\n```\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992598594","body":"#### [821. 字符的最短距离](https://leetcode-cn.com/problems/shortest-distance-to-a-character/)\n\n```cpp\n// 12-13\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        int len = s.length();\n        vector<int> record;\n        vector<int> ans(len);\n        for (int i = 0; i < len; i++) {\n            if (s[i] == c) record.push_back(i);\n        }\n        \n        for (int i = 0; i < len; i++) {\n            int temp = INT_MAX;\n            for (int k = 0; k < record.size(); k++) {\n                temp = min(temp, abs(i - record[k]));\n            }\n            ans[i] = temp;\n        }\n        return ans;\n    }\n};\n```\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"crypteee":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zzcyes":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yliboom":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chenbihao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xuanaxuan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"brainlds":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"flagyk5":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liuajingliu":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991891349","body":"#### 解题思路\n  1. 低位到高位逐位将数字加在一起\n  2. 若加法的结果大于等于 1010，把进位的 11 加入到下一位的计算中\n#### 代码实现\n\n```\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n    const res = [];\n    const n = num.length;\n    for (let i = n - 1; i >= 0; --i) {\n        let sum = num[i] + k % 10;\n        k = Math.floor(k / 10);\n        if (sum >= 10) {\n            k++;\n            sum -= 10;\n        }\n        res.push(sum);\n    }\n    for (; k > 0; k = Math.floor(k / 10)) {\n        res.push(k % 10);\n    }\n    res.reverse();\n    return res;\n};\n```\n#### 复杂度分析\n- 时间复杂度: O(max(n,logk), 其中 nn 为数组的长度\n- 空间复杂度: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992530602","body":"#### 解题思路\n- 从当前下标出发，分别向左、右两个方向去寻找目标字符 C。\n- 如果只在一个方向找到，直接计算字符距离。\n- 如果两个方向都找到，取两个距离的最小值\n\n#### 代码实现\n\n```\n/**\n * @param {string} S\n * @param {character} C\n * @return {number[]}\n */\nvar shortestToChar = function (S, C) {\n  const res = Array(S.length).fill(0);\n\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === C) continue;\n    // 定义两个指针 l, r 分别向左、右两个方向寻找目标字符 C，取最短距离\n    let l = i,\n      r = i,\n      shortest = Infinity;\n\n    while (l >= 0) {\n      if (S[l] === C) {\n        shortest = Math.min(shortest, i - l);\n        break;\n      }\n      l--;\n    }\n\n    while (r < S.length) {\n      if (S[r] === C) {\n        shortest = Math.min(shortest, r - i);\n        break;\n      }\n      r++;\n    }\n\n    res[i] = shortest;\n  }\n  return res;\n};\n```\n#### 复杂度分析\n- 时间复杂度：$O(N^2)$，N 为 S 的长度，两层循环。\n- 空间复杂度：$O(1)$","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"moxiaopao278":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guangsizhongbin":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991821310","body":"```go\r\nfunc addToArrayForm(num []int, k int) (ans []int) {\r\n\r\n    // 考虑直接相加k\r\n    for i := len(num) - 1; i >= 0 || k > 0; i-- {\r\n        if i >= 0 {\r\n            k += num[i]\r\n        }\r\n        ans = append(ans, k % 10)\r\n        k /= 10\r\n    }\r\n    reverse(ans)\r\n    return\r\n}\r\n\r\n// 反序的时候，直接头与尾相交换\r\nfunc reverse(num []int){\r\n    for i, n := 0, len(num); i < n/2; i++ {\r\n        num[i], num[n-1-i] = num[n-1-i], num[i]\r\n    }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991993472","body":"```go\r\nfunc shortestToChar(s string, c byte) []int {\r\n    n := len(s)\r\n    res := make([]int, n)\r\n\r\n    // 从左向右遍历, 记录c出现的前一个位置，保存 i - prev\r\n    prev := math.MinInt32 / 3\r\n    for i := 0 ; i < n; i ++ {\r\n        if s[i] == c {\r\n            prev = i\r\n        }\r\n        res[i] = i - prev\r\n    }\r\n\r\n    // 从右向左遍历, 记录c出现的前一个位置，保存 prev - i\r\n    prev = math.MaxInt32 / 3\r\n    for i := n - 1; i >= 0; i --{\r\n        if s[i] == c {\r\n            prev = i\r\n        }\r\n        res[i] = min(res[i] , prev - i)\r\n    }\r\n\r\n    return res\r\n}\r\n\r\nfunc min(a, b int) int {\r\n    if a > b {\r\n        return b\r\n    } else {\r\n        return a\r\n    }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993170573","body":"```go\r\ntype CustomStack struct {\r\n    stack []int\r\n    size int\r\n}\r\n\r\n\r\nfunc Constructor(maxSize int) CustomStack {\r\n    return CustomStack {\r\n        make([]int, 0),\r\n        maxSize,\r\n    }\r\n\r\n}\r\n\r\n\r\nfunc (this *CustomStack) Push(x int)  {\r\n    if len(this.stack) < this.size {\r\n        this.stack = append(this.stack, x)\r\n    }\r\n\r\n}\r\n\r\n\r\nfunc (this *CustomStack) Pop() int {\r\n    if len(this.stack) > 0{\r\n        res := this.stack[len(this.stack) -1]\r\n        this.stack = this.stack[:len(this.stack)-1]\r\n        return res\r\n    }\r\n    return -1\r\n}\r\n\r\n\r\nfunc (this *CustomStack) Increment(k int, val int)  {\r\n    if k > len(this.stack) {\r\n        k = len(this.stack)\r\n    }\r\n\r\n    for i := 0; i < k; i++{\r\n        this.stack[i] += val\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Your CustomStack object will be instantiated and called as such:\r\n * obj := Constructor(maxSize);\r\n * obj.Push(x);\r\n * param_2 := obj.Pop();\r\n * obj.Increment(k,val);\r\n */\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"winterdogdog":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yankang233":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gentleman-goodman":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991839137","body":"> ### 思路\n>\n> 本来是想着是把两个数加起来，再依次取出个位，添加进结果中，但是这样会溢出。\n>\n> 于是选择从后往前遍历数组，末尾数字相加后添加进结果集中，同时判断一下有没有进位。\n>\n> 最后还要看看 k 和进位等于 0 没有，如果没有还要继续添加进结果集中。\n>\n> 最后需要Collections.reverse(res);反转链表\n>\n> <加法模板>\n>\n> while ( A 没完 || B 没完)\n>\n> A 的当前位\n>\n> B 的当前位\n>\n> 和 = A 的当前位 + B 的当前位 + 进位carry\n>\n> 当前位 = 和 % 10;\n>\n> 进位 = 和 / 10;\n>\n> 判断还有进位吗\n\n```java\nclass Solution {\n        public List<Integer> addToArrayForm(int[] num, int k) {\n            List<Integer> res = new ArrayList<>();\n            int carry = 0;//进位\n            int l1 = num.length - 1;//最右边的索引开始\n            while (l1 >= 0 || k != 0) {\n                int x = l1 < 0 ? 0 : num[l1];//最左边，也就是前面没有数了，就附上0\n                int y = k == 0 ? 0 : k % 10;//取余->取出个位数   ////最左边，也就是前面没有数了，就附上0\n                int sum = x + y + carry;\n                carry = sum / 10;\n                res.add(sum % 10);\n                l1--;\n                k = k / 10;\n            }\n            //最左边的carr可能还有，判断是不是0\n            if (carry != 0) {\n                res.add(carry);\n            }\n            Collections.reverse(res);\n            return res;\n        }\n    }\n```\n\n> **复杂度分析**\n>\n> - 时间复杂度：O(N)\n> - 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992038142","body":"Day2_821_字符的最短距离\n\n> ### 思路\n>\n> ```\n> * 思路 遍历字符串，找到目标字母，并用a数组记下位置 遍历字符串，\n> * 将当前位置与a数组的位置进行相减，取最小值，记住用绝对值。 C语言4ms通过。\n> ```\n\n```java\nclass Solution {\n        public List<Integer> addToArrayForm(int[] num, int k) {\n            List<Integer> res = new ArrayList<>();\n            int carry = 0;//进位\n            int l1 = num.length - 1;//最右边的索引开始\n            while (l1 >= 0 || k != 0) {\n                int x = l1 < 0 ? 0 : num[l1];//最左边，也就是前面没有数了，就附上0\n                int y = k == 0 ? 0 : k % 10;//取余->取出个位数   ////最左边，也就是前面没有数了，就附上0\n                int sum = x + y + carry;\n                carry = sum / 10;\n                res.add(sum % 10);\n                l1--;\n                k = k / 10;\n            }\n            //最左边的carr可能还有，判断是不是0\n            if (carry != 0) {\n                res.add(carry);\n            }\n            Collections.reverse(res);\n            return res;\n        }\n    }\n```\n\n> **复杂度分析**\n>\n> - 时间复杂度：O(n*m)\n>   n:s的长度\n>   m:list的长度\n>\n>   空间复杂度：O(n+m)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zulliu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"supermeohh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Baiqr":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"for123s":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992601931","body":"## 代码\n\n- 语言支持：C++\n\nC++ Code:\n\n```c++\n\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        vector<int> idxs;\n        for(int i=0;i<s.size();i++)\n            if(s[i]==c)\n                idxs.push_back(i);\n        int l = 0, r = 0;\n        vector<int> res(s.size(),0);\n        int idx = 0;\n        while(r<idxs.size())\n        {\n            if(idx<=idxs[l])\n                res[idx] = idxs[l] - idx;\n            else if(idx>idxs[l]&&idxs[r]>=idx)\n                res[idx] = min(idx-idxs[l],idxs[r]-idx);\n            else\n            {\n                if(l==r)\n                    l--;\n                l++;\n                r++;\n                continue;\n            }\n            idx++;\n        }\n        r--;\n        while(idx<res.size())\n        {\n            res[idx] = idx - idxs[r];\n            idx++;\n        }\n        return res;\n    }\n};\n\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bolunzhang2021":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"simonsayshi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"devosend":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991914988","body":"## 思路\r\n从后往前遍历相加。\r\n## 代码\r\n```\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        for i in range(len(num) - 1, -1, -1):\r\n            k += num[i]\r\n            if k >= 10:\r\n                num[i] = k % 10\r\n                k = k // 10\r\n            else:\r\n                num[i] = k\r\n                return num\r\n\r\n        while k > 0:\r\n            num.insert(0, k % 10)\r\n            k = k // 10\r\n\r\n        return num\r\n```\r\n## 复杂度分析\r\n- 时间复杂度：O(N)\r\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992051439","body":"## 思路\r\n正反两次遍历，取较小的值存储到列表中返回。\r\n## 代码\r\n```\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        result = []\r\n        min = -float('inf')\r\n        for i in range(len(s)):\r\n            if s[i] == c:\r\n                min = i\r\n            result.append(i - min)\r\n        \r\n        max = float('inf')\r\n        for i in range(len(s) - 1, -1, -1):\r\n            if s[i] == c:\r\n                max = i\r\n            result[i] = result[i] if result[i] < max - i else max - i\r\n        \r\n        return result\r\n```\r\n## 复杂度分析\r\n- 时间复杂度：O(n)\r\n- 空间复杂度：O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"comst007":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"asuka1h":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"biscuit279":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991830092","body":"# 思路：先求A+k的值，再转换成数组形式\n···\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        n = len(num)\n        A = 0\n        for i,a in enumerate(num):\n            A += a*(10**(n-i-1))\n        ans = A+k\n\n        res = [int(s) for s in str(ans)]\n        return res\n···\n时间复杂度：O(n)\n空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992445844","body":"#思路：窗口法\n```\nclass Solution(object):\n    def shortestToChar(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: List[int]\n        \"\"\"\n        n = len(s)\n        ans = [0]*n\n        if s[0]==c:\n            l =0\n        else:\n            l=n\n        r = s.find(c,1)\n        for i in range(n):\n            ans[i] = min(abs(i-l),abs(r-i))\n            if i == r:\n                l = i\n                r = s.find(c, l+1)\n        return ans\n```\n时间复杂度:O(N)\n空间复杂度:O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"x-joey":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"biancaone":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hyxupup":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cassiechris":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sumukeio":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xvm03":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hengistchan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"youyiqin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"juleijs":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rebel-ly":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Winperrr":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangcn111":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"freesan44":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991861722","body":"## 思路\r\n通过int转换实现\r\n## 关键点\r\n\r\n-  \r\n\r\n## 代码\r\n\r\n- 语言支持：Python3\r\n\r\nPython3 Code:\r\n\r\n```python\r\n\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        #字符串与int的转换\r\n        resStr = \"\"\r\n        for i in num:\r\n            resStr +=str(i)\r\n        res = str(int(resStr)+k)\r\n        reslist = []\r\n        for i in res:\r\n            reslist.append(int(i))\r\n        return reslist\r\n\r\nif __name__ == '__main__':\r\n    A = [1,2,0,0]\r\n    K = 34\r\n    ret = Solution().addToArrayForm(A, K)\r\n    print(ret)\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(n)$\r\n- 空间复杂度：$O(n)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992066017","body":"## 思路\r\n遍历两次数组实现\r\n## 关键点\r\n\r\n-  \r\n\r\n## 代码\r\n\r\n- 语言支持：Python3\r\n\r\nPython3 Code:\r\n\r\n```python\r\n\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        indexList = []\r\n        for index,val in enumerate(s):\r\n            if val == c:\r\n                indexList.append(index)\r\n        resList = []\r\n        p = 0\r\n        # print(indexList)\r\n        for index,val in enumerate(s):\r\n            # print(index)\r\n            if p < len(indexList)-1 and (abs(index-indexList[p]) > abs(index-indexList[p+1])):\r\n                p += 1\r\n            resList.append(abs(index-indexList[p]))\r\n        return resList\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(n)$\r\n- 空间复杂度：$O(n)$","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"XiangyDeng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yanjyumoso":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"leige635539766":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"summer506hai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"saltychess":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lihuiwen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhy3213":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zywang0":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hibriansun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jz1433":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aduispace":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wenlong201807":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992058242","body":"## 代码块\r\n\r\n```javascript\r\n\r\nvar shortestToChar = function(s, c) {\r\n  const len = s.length;\r\n  let resultArr = [];\r\n\r\n  const helpFn = (curInd, len, ori, target) => {\r\n  let left = curInd;\r\n  let right = curInd;\r\n  let minLen = len;\r\n  if (ori.charAt(curInd) === target) {\r\n    return 0;\r\n  }\r\n\r\n  while (left >= 0) {\r\n    if (ori.charAt(left) === target) {\r\n      minLen = Math.min(curInd - left, len)\r\n      break;\r\n    }\r\n    left--\r\n  }\r\n\r\n  while (right <= len) {\r\n    if (ori.charAt(right) === target) {\r\n      minLen = Math.min(right - curInd, minLen)\r\n      break;\r\n    }\r\n    right++\r\n  }\r\n\r\n  return minLen;\r\n }\r\n  for(let i = 0; i < len; i++) {\r\n    resultArr.push(helpFn(i, len, s, c));\r\n  }\r\n  \r\n  return resultArr;\r\n};\r\n\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qibao1112":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ziyue08":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992336884","body":"```javascript\r\nvar shortestToChar = function(S, C) {\r\n    var dd=[];\r\n    //从左到右，从右到左\r\n    for(var i=0;i<S.length;i++){\r\n            var left=S.lastIndexOf(C,i);\r\n            var right=S.indexOf(C,i);\r\n            if(left==-1){\t//左边不存在\r\n                dd.push(right-i);\r\n            }\r\n            else if(right==-1){\t\t//右边不存在\r\n                dd.push(i-left);\r\n            }else{               \r\n                right-i>i-left?dd.push(i-left):dd.push(right-i);\r\n            }\r\n    }\r\n    return dd;\r\n};\r\n\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xuezhongyuan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"watchpoints":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wanghuaikuan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ShuchenWuu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luoanyang":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991921146","body":"### 思路\n先反转数组，然后循环相加\n\n### 代码\n```js\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n  let x1 = num.reverse();\n  let x2 = k.toString().split('').reverse();\n  let count = x1.length > x2.length?x1.length:x2.length;\n  let result = [];\n  let isAdd = false;\n  for(let i=0;i<count;i++){\n    let num1 = x1[i] || 0;\n    let num2 = x2[i] || 0;\n    let num = Number(num1) + Number(num2);\n    if(isAdd){\n      isAdd = false;\n      num+=1;\n    }\n\n    if(num>=10){\n      num -=10;\n      isAdd = true;\n    }\n    result.push(num)\n  }\n  if(isAdd){\n    result.push(1)\n  }\n  return result.reverse()\n};\n```\n\n### 复杂度\n时间复杂度 O(n),其中n为Max(num.length,k)\n空间复杂度 O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ymwang-2020":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chanceyliu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Craig-Cheng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"weichuliao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"absent1353":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"banjingking":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"now915":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992071295","body":"- 算法\n```js\n function shortestToChar(s, c) {\n   let result = Array(s.length).fill(0)\n   let left = 0, right = 0, shortest = Infinity\n   for (let index = 0; index < s.length; index++) {\n      if (s[index] == c) continue\n\n      left = right = index\n      while (left >= 0 || right < s.length) {\n        if (s[left] == c) {\n          shortest = index - left\n          break\n        }\n        if (s[right] == c) {\n          shortest = right - index\n          break\n        }\n        left > 0 ? left-- : ''\n        right < s.length - 1 ? right++: ''\n      }\n     result[index] = shortest\n   }\n   return result\n }\n```\n- 时间复杂度\nO(n²)\n- 空间复杂度\nO(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"akxuan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cdd111":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kuwan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhiyuanpeng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"whitewhatpin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liudi9047":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guohuijiedesu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zzyhang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yourspeace":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"thisjustsoso":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ozhfo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yyangeee":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pan-qin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Crazy-xjm":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"grapefruit-hellomonday":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pandaCure":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jawn-ha":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"panda-qin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lihanchenyuhua":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"whgsh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kangxiaohan05":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ru8dgj0001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"taoyr722":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"raoshuang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ninghuangaa":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"blanktime":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"iceburgs":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xlzy520":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"vaqua":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dahuang257":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shuichen17":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wsgouwan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kkwu314":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991891441","body":"# 思路 1\n\n\n\n<aside> 💡 新建一个List<Integer>，从num的最右边的元素开始加。将超出个位数的remainder继续加到被/10的k上。将计算过的sum加入到List里。最后将剩余k加入list里然后reverse List\n\n</aside>\n\n# 代码\n\n\n\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> ans = new ArrayList<Integer>();\n        int n = num.length;\n        for (int i=n-1; i>=0; i--){\n            int sum = num[i]+k%10;\n            k/=10;\n            if (sum>=10){\n                k+=sum/10;\n                sum%=10;\n            }\n            ans.add(sum);\n        }\n        for (;k>0;k/=10){\n            ans.add(k%10);\n        }\n        Collections.reverse(ans);\n        return ans;\n    }\n}\n```\n\n# 复杂度分析\n\n\n\n时间复杂度：O(N)\n\n空间复杂度：O(N)\n\n# 思路 2\n\n\n\n<aside> 💡 和上一种类似，但是直接将num[i]加到k中，再将k的个位数加到arr里\n\n</aside>\n\n# 代码\n\n\n\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> ans = new ArrayList<Integer>();\n        int n = num.length;\n        for (int i=n-1; i>=0 || k>0; i--,k/=10){\n            if (i>=0){\n                k+=num[i];\n            }\n            ans.add(k%10);\n        }\n        Collections.reverse(ans);\n        return ans;\n    }\n}\n```\n\n# 复杂度分析\n\n时间复杂度：O(N) *O*(max(*n*,log*k*))\n\n空间复杂度：O(N)\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"carsonlin9996":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"niuyibo0619":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chakochako":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991807958","body":"```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        num1 = int(''.join(map(str,num)))\n        return list(map(int,list(str(num1+k))))\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991999343","body":"```python\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        prev = float('-inf')\n        ans = []\n        for p, v in enumerate(s):\n            if v == c:\n                prev = p\n            ans.append(p - prev)\n\n        prev = float('inf')\n        for i in range(len(s) - 1, -1, -1):\n            if s[i] == c: \n                prev = i\n            ans[i] = min(ans[i], prev - i)\n\n        return ans\n\n\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mannnn6":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sogatechnology":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ariel-mu3":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sugar666":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liwangping":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cecilialmw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ph2200":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yunomin":[null,null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993099154","body":"##### python\n```python\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.space_left = maxSize\n        self.l = []\n\n    def push(self, x: int) -> None:\n        if self.space_left > 0:\n            self.l.append(x)\n            self.space_left -= 1\n\n    def pop(self) -> int:\n        if len(self.l) > 0:\n            self.space_left += 1\n            return self.l.pop(-1)\n        else:\n            return -1\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(min(k, len(self.l))):\n            self.l[i] += val\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hinancy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guochiscoding":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shibingchao123":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yukicoding":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lhjzuibang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nadostars":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xitice":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cyk1337":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ywang525":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"razor1895":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"famine330":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jsu-arch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yxq1997":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zbqnb":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xjlgod":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bai170":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nerrolk":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liyubin117":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bpointa":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991859929","body":"### 思路\n\n模拟竖式计算，新的一期打算开始试着用Java实现，自己不习惯Java，思路还是在Python上的思路，感觉实现得有点粗糙\n\n### Java代码\n```Java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n      ArrayList<Integer> klist=new ArrayList<>();\n      ArrayList<Integer> nums=new ArrayList<>();\n      for (int n:num)\n      {\n          nums.add(n);\n      }\n      while (k>0)\n      {\n          klist.add(0,k%10);\n          k=k/10;\n      }\n      int a=klist.size();\n      int b=nums.size();\n    if(a<b)\n    {\n        for (int i1=0;i1<b-a;i1++)\n        {\n            klist.add(0,0);\n        }\n    }\n    else if(b<a)\n    {\n        for (int i2=0;i2<a-b;i2++)\n        {\n            nums.add(0,0);\n        }\n    }\n  \n      ArrayList<Integer> ans=new ArrayList<>();\n      int saving=0;\n      for (int i=nums.size()-1;i>=0;i--)\n      {\n          int tmp=saving+klist.get(i)+nums.get(i);\n          ans.add(0,tmp%10);\n          saving=tmp/10 ;\n      }\n      if(saving>0)\n      {\n          ans.add(0,saving);\n      }\n\n    \n\n      \n      return ans;\n    }\n}\n\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992089496","body":"### 思路\r\n\r\n两边各自遍历\r\n\r\n### Java代码\r\n```Java\r\nclass Solution {\r\n    public int[] shortestToChar(String s, char c) {\r\n        int l=s.length();\r\n        int idx1=-l,idx2=l*2;\r\n        int [] ans=new int[s.length()];\r\n        for (int i=0;i<l;i++)\r\n        {ans[i]=l+1;}\r\n        for (int i1=0;i1<s.length();i1++)\r\n        {\r\n            if(s.charAt(i1)==c)\r\n            {ans[i1]=0;\r\n            idx1=i1;\r\n            }\r\n            int tmp=i1-idx1;\r\n            if(tmp<ans[i1])\r\n            {ans[i1]=tmp;}\r\n\r\n        }\r\n        for (int i2=s.length()-1;i2>=0;i2--)\r\n        {\r\n            if(s.charAt(i2)==c)\r\n            {ans[i2]=0;\r\n            idx2=i2;\r\n            }\r\n            int tmp=idx2-i2;\r\n            if(tmp<ans[i2])\r\n            {ans[i2]=tmp;}\r\n\r\n        }\r\n        return ans;\r\n            }\r\n}\r\n\r\n\r\n```\r\n\r\n### 复杂度\r\n\r\n时间：O(n)\r\n空间：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jiangyanlineu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rocjemaintiendrai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sunnyyujf":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zz10044":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"menglin-l":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991822250","body":"### 思路：\r\n#### 1.将k与num的最后一位(size - 1)数字相加，然后把得到的结果与10取模，便是数组新的最后一位，将其存入原数组中最后一位。\r\n#### 2.将1中的k与10取余，去掉个位，再与num的(size - 2)位相加，重复1过程。\r\n#### 3.利用LinkedList特性插入元素，直接返回最终结果，不需要再翻转。\r\n---\r\n\r\n### 代码部分：\r\n```Java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        LinkedList<Integer> ans = new LinkedList<>();\r\n        \r\n        int sum = 0, carry = 0, len = num.length - 1;\r\n        \r\n        while (len >= 0 || k != 0) {\r\n            int x = len >= 0 ? num[len] : 0;\r\n            int y = k != 0 ? k % 10 : 0;\r\n            \r\n            sum = x + y + carry;\r\n            carry = sum / 10;\r\n            \r\n            k /= 10;\r\n            len --;\r\n            \r\n            ans.addFirst(sum % 10);\r\n        }\r\n        \r\n        if (carry != 0) ans.addFirst(carry);\r\n        return ans;\r\n    }\r\n}\r\n```\r\n---\r\n\r\n#### Time: O(N)\r\n#### Space: O(1), 长度为26的数组算作常数空间","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991968203","body":"#### 1. Determine the distance to the nearest c on the left. \r\n####     Traverse s from left to right and count the index from the maximum, the size of s, as the distance. \r\n####     Increase the next index by one. If c occurs, change the distance to zero.\r\n#### 2. Determine the distance to the nearest c on the right.\r\n####     Traverse s from right to left. Count the index and compare it with the previous value, then take the minimum. \r\n---\r\n\r\n```Java\r\nclass Solution {\r\n    // s = \"l  o  v  e  l  e  e  t  c  o  d  e\", c = \"e\", s.length() = 12\r\n    //     12 13 14  0  1  0  0  1  2  3  4  0 \r\n    //      3  2  1  0  1  0  0  1  2  2  1  0\r\n    public int[] shortestToChar(String s, char c) {\r\n        if (s.length() == 1) return new int[]{0};\r\n        \r\n        char[] cc = s.toCharArray();// O(N)\r\n        int[] res = new int[s.length()];// O(N)\r\n        int disLeft = s.length();\r\n        int disRight = s.length();\r\n        \r\n        // O(N)\r\n        for (int i = 0; i < cc.length; i ++) {\r\n            if (cc[i] == c) {\r\n                disLeft = 0;\r\n            }\r\n            res[i] = disLeft;\r\n            disLeft ++;\r\n        }\r\n        \r\n        // O(N)\r\n        for (int j = cc.length - 1; j >= 0; j --) {\r\n            if (cc[j] == c) {\r\n                disRight = 0;\r\n            }\r\n            res[j] = Math.min(res[j], disRight);\r\n            disRight ++;\r\n        }\r\n        return res;\r\n    }\r\n}\r\n```\r\n---\r\n\r\n#### Time: O(N)\r\n#### Space: O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993295182","body":"### Thoughts:\r\n#### Use an array to denote that arr[i] represents the increment applied to all elements from stack[0, ..., i] or from the bottom element to the ith element.\r\n---\r\n### Code:\r\n```Java\r\nclass CustomStack {\r\n    Stack<Integer> stack = new Stack<>();\r\n    int[] additions;\r\n    int maxSize;\r\n\r\n    public CustomStack(int maxSize) {\r\n        this.maxSize = maxSize;\r\n        this.additions = new int[maxSize + 1];\r\n    }\r\n    \r\n    public void push(int x) {\r\n        // edge case: stack is full at maxSize\r\n        if (stack.size() == maxSize)\r\n            return;\r\n        // push val into stack\r\n        stack.push(x);\r\n    }\r\n    \r\n    public int pop() {\r\n        // edge case: stack is empty\r\n        if (stack.isEmpty())\r\n            return -1;\r\n        \r\n        // get addition amount for next num and erase it from arr\r\n        int amount = additions[stack.size()];\r\n        additions[stack.size()] = 0;\r\n        \r\n        // add amount to item below next val\r\n        additions[stack.size() - 1] += amount;\r\n        \r\n        return stack.pop() + amount;\r\n    }\r\n    \r\n    public void increment(int k, int val) {\r\n        // add val to kth index\r\n        additions[Math.min(k, stack.size())] += val;\r\n    }\r\n}\r\n```\r\n---\r\n\r\n### Complexity:\r\n#### Time: O(1) for pop and push; O(N) for increment\r\n#### Space: O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"potatoma":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991866936","body":"### 思路\n\n***\n\n先在对应位置一一相加，再进行进位操作\n\n### 代码\n\n***\n\nJavascript code:\n\n```javascript\nvar addToArrayForm = function(num, k) {\n    let temp = 0;\n    const kLen = k.toString().length;\n    for (let i = 0;i < kLen;i++) {\n        if (num.length < kLen) num.unshift(0);\n        temp = k % 10;\n        k = Math.floor(k / 10);\n        num[num.length - 1 - i] += temp;\n    }\n    const nLen = num.length;\n    for (let i = nLen - 1;i > 0;i--) {\n        if (num[i] >= 10) {\n            num[i - 1] += 1\n            num[i] = num[i] % 10;\n        }\n    }\n    if (num[0] >= 10) {\n        num[0] = num[0] % 10;\n        num.unshift(1);\n    }\n    return num;\n};\n```\n\n### 复杂度分析\n\n***\n\n时间复杂度O(max(N,logk))\n\n空间复杂度O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992567484","body":"### 思路1\n\n***\n\n空间换时间：先记录每一个字符C出现的下标，再遍历一次字符串S，通过下标相减的绝对值找出每个字符距离C最近的距离\n\n### JavaScript代码\n\n***\n\n```javascript\nvar shortestToChar = function(s, c) {\n    const targetIndex = [];\n    for (let i = 0;i < s.length;i++) {\n        if (s[i] === c) {\n            targetIndex.push(i);\n        }\n    }\n    const res = [];\n    for (let i = 0;i < s.length;i++) {\n        let min = Infinity;\n        for (let ti of targetIndex) {\n            if (min <= Math.abs(i - ti)) {\n                break;\n            }\n            min = Math.abs(i - ti);\n        }\n        res.push(min);\n    }\n    return res;\n};\n```\n\n### 复杂度分析\n\n***\n\n时间复杂度：O(N * K)，K是字符C在字符串S中出现的次数，K <= N\n\n空间复杂度：O(K)\n\n### 思路2\n\n***\n\n贪心，先从左往右遍历S，计算每个下标离左边距离C最近的距离，再从右往左遍历计算一次，如有更小的距离则覆盖\n\n### JavaScript代码\n\n***\n\n```javascript\nvar shortestToChar = function(s, c) {\n    let targetIndex = null;\n    const res = new Array(s.length);\n    for (let i = 0;i < s.length;i++) {\n        if (s[i] === c) targetIndex = i;\n        if (targetIndex === null) {\n            res[i] = Infinity;\n        } else {\n            res[i] = Math.abs(i - targetIndex);\n        }\n    }\n    targetIndex = null;\n    for (let i = s.length - 1;i > -1;i--) {\n        if (s[i] === c) targetIndex = i;\n        if (targetIndex !== null) {\n            res[i] = Math.min(res[i], Math.abs(i - targetIndex));\n        }\n    }\n    return res;\n};\n```\n\n### 复杂度分析\n\n***\n\n时间复杂度：O(N)\n\n空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mahalasu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"maschinist-lzy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jackielj":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"francis-xsc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"autumndesea":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"snowballbears":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liuyangqiqaq":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jinming-gu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lovewitch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kashinggo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"laofuwf":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991847136","body":"```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        total = 0\n        index = 0\n        \n        for n in num[::-1]:\n            total += (10 ** index) * n\n            index += 1\n        \n        total += k\n        \n        res = []\n        for digit in str(total):\n            res.append(int(digit))\n        \n        return res\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992107736","body":"```python\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        # len(s) is 1 bigger than max distance\n        res = [len(s)] * len(s)\n        \n        leftMost = rightMost = -1\n        \n        for i in range(len(s)):\n            if s[i] == c: leftMost = i\n            if leftMost != -1:\n                res[i] = i - leftMost\n        \n        for i in range(len(s) - 1, -1, -1):\n            if s[i] == c: rightMost = i\n            if rightMost != -1:\n                res[i] = min(res[i], rightMost - i)\n        \n        return res\n````","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993135666","body":"```python\nclass Node:\n    \n    def __init__(self, val):\n        self.val = val\n        self.next = None\n        self.prev = None\n        \nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.head = None\n        self.tail = None\n        self.maxSize = maxSize\n        self.currSize = 0\n\n    def push(self, x: int) -> None:\n        if self.currSize >= self.maxSize: return\n        \n        self.currSize += 1\n        if self.head is None: \n            self.head = Node(x)\n            self.tail = self.head\n            return\n        \n        temp = self.tail\n        self.tail.next = Node(x)\n        self.tail = self.tail.next\n        self.tail.prev = temp\n        \n    def pop(self) -> int:\n        if self.currSize == 0: return -1\n        \n        self.currSize -= 1\n        res = self.tail.val\n        self.tail = self.tail.prev\n        \n        # re-init head and tail\n        if self.tail is None:\n            self.head = None\n            return res\n        self.tail.next = None\n        \n        return res\n\n    def increment(self, k: int, val: int) -> None:\n        curr = self.head\n        for i in range(min(k, self.currSize)):\n            curr.val += val\n            curr = curr.next\npython","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zjp1483469269":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991833580","body":"```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        c = 0\n        ans = []\n        for i in range(len(num)):\n            x = k % 10\n            k = k // 10\n            n,c = (x + num[len(num)-1-i] + c) % 10,(x + num[len(num)-1-i]+c) // 10\n            ans = [n]+ans\n        k = k+c\n        if k!=0:\n            while(k!=0):\n                ans = [k%10] + ans\n                k = k // 10\n            return ans\n        if c == 0:\n            return ans\n        else :\n            return [c]+ans\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992041299","body":"#### 思路\n记录下标index，以每个index为中心向周围增加给数组赋值，直到填满数组\n#### 代码\n```python3\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        index = [i for i,x in enumerate(s) if x == c]\n        ls = [-1]*len(s)\n        cnt = len(index)\n        for i in index:\n            ls[i] = 0\n        step = 0\n        while(cnt<len(s)):\n            step = step + 1\n            for i in index:\n                for j in [-step,step]:\n                    if i+j >= 0 and i+j < len(s) and ls[i+j] == -1:\n                        ls[i+j] = step\n                        cnt = cnt + 1\n        return ls\n```\n#### 复杂度分析\n时间复杂度：O（n）\n空间复杂度：O（n）","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993171554","body":"#### 代码\n```python3\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.max_size = maxSize\n        self.stack = []\n\n    def push(self, x: int) -> None:\n        if(len(self.stack) < self.max_size):\n            self.stack.append(x)\n        else:\n            return\n        \n    def pop(self) -> int:\n        stack = self.stack\n        if(len(stack) > 0):\n            return stack.pop(len(stack)-1)\n        else:\n            return -1\n\n    def increment(self, k: int, val: int) -> None:\n        stack = self.stack\n        for i in range(min(len(stack),k)):\n            stack[i] += val\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bluerui":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joeychengtor":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"watermelondrip":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jding0":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jk1452470209":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tao-mao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"agathawang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"daniel-zheng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"moin-jer":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991922037","body":"### 思路\n---\n逐位相加\n### 代码\n---\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> ans = new LinkedList<>();\n        int len = num.length;\n        int i = len - 1, tmp = k, carry = 0;\n        while (i >= 0 || tmp > 0 || carry > 0) {\n            int t = (i >= 0 ? num[i] : 0) + (tmp > 0 ? tmp % 10 : 0) + carry;\n            carry = t / 10;\n            ans.add(0, t % 10);\n            --i;\n            tmp /= 10;\n        }\n        return ans;\n    }\n}\n```\n### 复杂度分析\n---\n+ 时间复杂度：O(max(num.length, logk))\n+ 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992095276","body":"### 思路\n---\n数组的遍历\n### 代码\n---\n```java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int n = s.length();\n        int[] ans = new int[n];\n        Arrays.fill(ans, n + 1);\n        int pre = -n;\n        for (int i = 0; i < n; ++i) {\n            if (s.charAt(i) == c) {\n                pre = i;\n            }\n            ans[i] = Math.min(ans[i], i - pre);\n        }\n\n        pre = 2 * n;\n        for (int i = n - 1; i >= 0; --i) {\n            if (s.charAt(i) == c) {\n                pre = i;\n            }\n            ans[i] = Math.min(ans[i], pre - i);\n        }\n        return ans;\n    }\n}\n```\n### 复杂度分析\n---\n+ 时间复杂度：O(N)\n+ 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993181943","body":"### 思路\n---\n栈\n### 代码\n---\n```java\nclass CustomStack {\n\n    int[] stack;\n    int top;\n    int[] add;\n    public CustomStack(int maxSize) {\n        stack = new int[maxSize];\n        top = -1;\n        add = new int[maxSize];\n    }\n    \n    public void push(int x) {\n        if (top == stack.length - 1) {\n            return;\n        }\n        ++top;\n        stack[top] = x;\n    }\n    \n    public int pop() {\n        if (top == -1) {\n            return -1;\n        }\n        int res = stack[top] + add[top];\n        --top;\n        if (top >= 0) {\n            add[top] += add[top + 1];\n        }\n        add[top + 1] = 0;\n        return res;\n    }\n    \n    public void increment(int k, int val) {\n        int c = Math.min(top, k - 1);\n        if (c >= 0) {\n            add[c] += val;\n        }\n    }\n}\n```\n### 复杂度分析\n---\n+ 时间复杂度：O(1)\n+ 空间复杂度：O(maxSize)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qizhongdd":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lllouiselao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huangxuang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangzhengneu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"just-focus":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"monkofeast":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hackbl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhang6260":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jadeqi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"houhao1998":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cartie-zhoumo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yufanzh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"timmmyang":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992087884","body":"## 思路\r\n正反两次遍历分别比较距离左边和右边的目标字符的距离。\r\n## 代码\r\n```python\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        res = []\r\n        prev = -float('inf')\r\n        for i in range(len(s)):\r\n            if s[i] == c:\r\n                prev = i\r\n            res.append(i - prev)\r\n        \r\n        prev = float('inf')\r\n        for i in range(len(s)-1, -1, -1):\r\n            if s[i] == c:\r\n                prev = i\r\n            res[i] = min(res[i], prev - i)\r\n        return res\r\n```\r\n## 复杂度\r\n时间：O(n)\r\n空间：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kennethalgol":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991873877","body":"##语言\r\njava\r\n\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> res = new LinkedList<>();\r\n\t\tfinal int len = num.length;\r\n\t\tfor(int i = len - 1; i >= 0; i--) {\r\n\t\t\tint sum = num[i] + k % 10;\r\n\t\t\tk /= 10;\r\n\t\t\tif(sum >= 10) {\r\n\t\t\t\tk++;\r\n\t\t\t\tsum -= 10;\r\n\t\t\t}\t\r\n\t\t\tres.add(0, sum);\r\n\t\t}\r\n\t\tfor(; k > 0; k /= 10) {\r\n\t\t\tres.add(0, k % 10);\r\n\t\t}\r\n\t\treturn res;\r\n    }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992040617","body":"#语言\r\njava\r\n\r\n```java\r\nclass Solution {\r\n    /*\r\n    分析（非C字符的分类如下）：\r\n    1.只有左边有C字符： sdafC...\r\n    2.左右两边都有C字符：...CdsfsC...\r\n    3.只有右边有C字符：...Cdsff\r\n    (在后面可以用一句代码实现这三种情况)\r\n    */\r\n    public int[] shortestToChar(String S, char C) {\r\n        \r\n        int[] res = new int[S.length()];\r\n        int cur = S.indexOf(C), pre = cur;\r\n        for(int i = 0; i < S.length(); i++){\r\n            if(S.charAt(i) == C){//其实就是每当遍历到C就更新cur和pre\r\n                res[i] = 0;\r\n                pre = i;\r\n                cur = S.indexOf(C, i+1);//注意：这里如果当前是最后一个C时，此时cur为-1，这也保证了上面的情况3\r\n\r\n            }else{\r\n                res[i] = Math.min(Math.abs(pre - i), Math.abs(cur - i));//\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993124305","body":"# 语言\r\njava\r\n\r\n```java\r\nclass CustomStack {\r\n    \r\n    private int[] array;\r\n    private int maxSize;\r\n    private int curSize;\r\n\r\n    public CustomStack(int maxSize) {\r\n        this.array = new int[maxSize];\r\n        this.maxSize = maxSize;\r\n        this.curSize = 0;\r\n    }\r\n    \r\n    public void push(int x) {\r\n        if(this.curSize < this.maxSize){\r\n            array[curSize++] = x;\r\n        }\r\n    }\r\n    \r\n    public int pop() {\r\n        if(this.curSize > 0){\r\n            return array[--curSize];\r\n        }\r\n        return -1;\r\n    }\r\n    \r\n    public void increment(int k, int val) {\r\n        if(curSize > 0){\r\n            for(int i = 0; i < k && i < curSize; i++){\r\n                array[i] += val;\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n# 复杂度分析\r\n时间复杂度 O(1)\r\n空间复杂度 O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dana-dai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yqycs":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"oasans":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"changanyue":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sunstrongchina":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhumengcheng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"laurence-try":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991995246","body":"```py\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        res = [len(s) for x in range (len(s))]\n        p = 0\n        count = 0\n        flag = False\n        while p < len(s):\n            if s[p] == c:\n                flag = True\n                count = 0\n                res[p] = 0\n            else:\n                if flag:\n                    count += 1\n                    res[p] = count\n            p += 1\n        count = 0\n        flag = False\n        p -= 1\n        while p >= 0:\n            if s[p] == c:\n                flag = True\n                count = 0\n                res[p] = 0\n            else:\n                if flag:\n                    count += 1\n                    if res[p] > count:\n                        res[p] = count\n            p -= 1\n        return res\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jinhma":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ronghuanyou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"last-battle":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991860618","body":"## 思路\r\n\r\n## 关键点\r\n\r\n从num的最后一位往前遍历，同时维护carry进位。循环条件是num下标合法或者k大于0才结束，那么累加的时候就要注意数组num下标的合法性。最后退出循环后再检查一下carry，防止漏加。将最后结果reverse后返回即可。 \r\n\r\n## 代码\r\n\r\n- 语言支持：C++\r\n\r\nC++ Code:\r\n\r\n```c++\r\n\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n        vector<int> res;\r\n\r\n        int carry = 0;\r\n        for (int i = num.size() - 1, j = 0; i >= 0 || k > 0; --i, ++j) {\r\n            auto tmp = (i >= 0 ? num[i] : 0) + k % 10 + carry;\r\n            res.emplace_back(tmp % 10);\r\n            carry = tmp / 10;\r\n            k /= 10;\r\n        }\r\n\r\n        if (carry) {\r\n            res.emplace_back(carry);\r\n        }\r\n\r\n        reverse(res.begin(), res.end());\r\n\r\n        return res;\r\n    }\r\n};\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(n)$\r\n- 空间复杂度：$O(n)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992064558","body":"## 思路\r\n\r\n## 关键点\r\n\r\n遍历s的时候，分别以当前位置往前、往后遍历，遇到期望字符c就更新dis，并结束某个方向的查找。\r\n\r\n## 代码\r\n\r\n- 语言支持：C++\r\n\r\nC++ Code:\r\n\r\n```c++\r\n\r\nclass Solution {\r\npublic:\r\n    vector<int> shortestToChar(string s, char c) {\r\n        vector<int> res;\r\n        for (int i = 0; i < s.length(); ++i) {\r\n            int dis = s.length();\r\n            for (int pos = i; pos >= 0; --pos) {\r\n                if (s[pos] == c) {\r\n                    dis = min(i - pos, dis);\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            for (int pos = i; pos < s.length(); ++pos) {\r\n                if (s[pos] == c) {\r\n                    dis = min(pos - i, dis);\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            res.emplace_back(dis);\r\n        }\r\n        \r\n        return res;\r\n    }\r\n};\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(n)$\r\n- 空间复杂度：$O(n)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993130689","body":"## 思路\r\n\r\n## 关键点\r\n1、push和pop：非常简单就不说了\r\n2、increment：维护一个辅助栈，每次increment的时候就先把res栈中的所有元素都搞到tmp中，然后再从tmp中出栈搞到res，搞的时候判断个数，前k个元素加上增量值val\r\n\r\n\r\n## 代码\r\n\r\n- 语言支持：C++\r\n\r\nC++ Code:\r\n\r\n```c++\r\n\r\nclass CustomStack {\r\npublic:\r\n    CustomStack(int maxSize) : cap(maxSize) {\r\n        \r\n    }\r\n    \r\n    void push(int x) {\r\n        if (num < cap) {\r\n            res.push(x);\r\n            ++num;\r\n        }\r\n    }\r\n    \r\n    int pop() {\r\n        if (!res.empty()) {\r\n            --num;\r\n            auto t = res.top();\r\n            res.pop();\r\n            return t;\r\n        }\r\n        return -1;\r\n    }\r\n    \r\n    void increment(int k, int val) {\r\n        while (!res.empty()) {\r\n            tmp.push(res.top());\r\n            res.pop();\r\n        }\r\n        \r\n        while (!tmp.empty()) {\r\n            if (k-- > 0) {\r\n                res.push(tmp.top() + val);\r\n            } else {\r\n                res.push(tmp.top());\r\n            }\r\n            \r\n            tmp.pop();\r\n        }\r\n    }\r\nprivate:\r\n    int cap = 0;\r\n    int num = 0;\r\n    stack<int> res;\r\n    stack<int> tmp;\r\n};\r\n\r\n/**\r\n * Your CustomStack object will be instantiated and called as such:\r\n * CustomStack* obj = new CustomStack(maxSize);\r\n * obj->push(x);\r\n * int param_2 = obj->pop();\r\n * obj->increment(k,val);\r\n */\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(n)$\r\n- 空间复杂度：$O(n)$","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"l-sui":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991831999","body":"var addToArrayForm = function(A, K) {\n    const res = [];\n    const n = A.length;\n    for (let i = n - 1; i >= 0 || K > 0; --i, K = Math.floor(K / 10)) {\n        if (i >= 0) {\n            K += A[i];\n        }\n        res.push(K % 10);\n    }\n    res.reverse();\n    return res;\n};","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992487560","body":"/**\r\n * @param {string} S\r\n * @param {character} C\r\n * @return {number[]}\r\n */\r\nvar shortestToChar = function (S, C) {\r\n  // 窗口左边界，如果没有就初始化为 Infinity，初始化为 S.length 也可以\r\n  let l = S[0] === C ? 0 : Infinity,\r\n    // 窗口右边界\r\n    r = S.indexOf(C, 1);\r\n\r\n  const res = Array(S.length);\r\n\r\n  for (let i = 0; i < S.length; i++) {\r\n    // 计算字符到当前窗口左右边界的最小距离\r\n    res[i] = Math.min(Math.abs(i - l), Math.abs(r - i));\r\n\r\n    // 遍历完了当前窗口的字符后，将整个窗口右移\r\n    if (i === r) {\r\n      l = r;\r\n      r = S.indexOf(C, l + 1);\r\n    }\r\n  }\r\n\r\n  return res;\r\n};","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993299762","body":"/**\n * @param {number} maxSize\n */\n var CustomStack = function(maxSize) {\n    this.queue = [];\n    this.maxSize = maxSize\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if(this.queue.length<this.maxSize) this.queue.push(x)\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    if(this.queue.length==0) return -1;\n    return this.queue.pop()\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    let i=0;\n    while(i<k&&i<this.queue.length){\n        this.queue[i] += val\n        i++\n    }\n};","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"52hzecho":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bochengwan":[null,null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993116397","body":"### 思路\r\n利用一个额外的stack来存delta\r\n\r\n### 代码\r\n\r\n\r\n```java（此处换成你的语言，比如js，py 等）\r\nclass CustomStack:\r\n\r\n    def __init__(self, maxSize: int):\r\n        self.maxSize = maxSize\r\n        self.myStack = []\r\n        self.delta = []\r\n        \r\n\r\n    def push(self, x: int) -> None:\r\n        if len(self.myStack)<self.maxSize:\r\n            self.myStack.append(x)\r\n            self.delta.append(0)\r\n        \r\n        \r\n        \r\n\r\n    def pop(self) -> int:\r\n        if len(self.myStack)==0:\r\n            return -1\r\n        delta = self.delta.pop()\r\n        \r\n        if self.delta:\r\n            self.delta[-1]+=delta\r\n        return self.myStack.pop()+delta\r\n        \r\n\r\n    def increment(self, k: int, val: int) -> None:\r\n        length = len(self.myStack)\r\n        if length ==0:\r\n            return None\r\n        inc_length = k\r\n        if k>length:\r\n            inc_length = length     \r\n        self.delta[inc_length-1]+=val\r\n\r\n\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：push,pop O(1), increment O(min(K, maxSize))\r\n- 空间复杂度：O(maxSize)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lareinawei":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chiajune":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zzh-zh3ndu1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lydia61":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"astrking":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"doublew2w":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992618576","body":"## 思路\n遍历一次数组，将字符c的位置记录下来\n\n再次遍历数组，然后比较当前字符和目标字符的最小距离\n\n## 代码\n```java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        ArrayList<Integer> arr = new ArrayList<>();\n        int[] ret = new int[s.length()];\n        int p = 0;\n        //遍历数组，将字符C的位置存放起来\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == c) arr.add(i);\n        }\n        //遍历数组，比较出距离的最小值\n        for (int i = 0; i < s.length(); i++) {\n            //如果当前字符夹在两个目标字符中间，则比较最小的，否则直接取\n            if (p < arr.size() - 1 && Math.abs(arr.get(p) - i) > Math.abs(arr.get(p + 1) - i)) p++;\n            ret[i] = Math.abs(arr.get(p) - i);\n        }\n        return ret;\n    }\n}\n\n```\n## 复杂度分析\n\n时间复杂度：O（n）\n\n空间复杂度：O（n）","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"forschers":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"toms-bigdata":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991834648","body":"# 【Day 1】989. 数组形式的整数加法\n## 思路\n数字转化成数组，按位相加，注意进位\n## Golang代码\n```\nfunc reverse(num []int) {\n\tfor i, j := 0, len(num)-1; i < j; {\n\t\tnum[i], num[j] = num[j], num[i]\n\t\ti++\n\t\tj--\n\t}\n}\n\nfunc addToArrayForm(num []int, k int) []int {\n\tif k == 0 {\n\t\treturn num\n\t}\n\tk_list := make([]int, 5)\n\n\tfor i:=0;k != 0;i++{\n\t\tk_list[i] = k%10\n\t\tk/=10\n\t}\n\tmax_length := int(math.Max(float64(len(num)), float64(len(k_list)))) + 1\n\tans := make([]int, max_length)\n\treverse(num)\n\n\tfor i := 0; i < max_length; i++ {\n\t\tnum_num := 0\n\t\tk_num := 0\n\t\tans_num := ans[i]\n\t\tif i < len(num) {\n\t\t\tnum_num = num[i]\n\t\t}\n\t\tif i < len(k_list) {\n\t\t\tk_num = k_list[i]\n\t\t}\n\t\tdata := num_num + k_num + ans_num\n\t\tif data >= 10 {\n\t\t\tans[i+1] += 1\n\t\t}\n\t\tans[i] = data % 10\n\t}\n\n\treverse(ans)\n\ti := 0\n\tfor ans[i] == 0 {\n\t\ti++\n\t}\n\treturn ans[i:]\n}\n```\n## 复杂度\n时间:O(n)\n空间:O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992046651","body":"# 【Day 2】821. 字符的最短距离\n## 思路\n建立距离数组，找到首位和末位的字符，将距离数组首位字符之前和末位字符后的字符距离更新，之后将两字符之间的字母前向遍历一次，后向遍历一次，更新距离数组，返回距离数组\n## 代码\n```\nfunc shortestToChar(s string, c byte) []int {\n\tfirst_num := strings.IndexByte(s, c)\n\tlast_num := strings.LastIndexByte(s, c)\n\tarray := make([]int, len(s))\n\tif first_num == last_num {\n\t\tfor i := 0; i < len(s); i++ {\n\t\t\tarray[i] = int(math.Abs(float64(i - first_num)))\n\t\t}\n\t\treturn array\n\t}\n\n\tfor k, _ := range s[:first_num] {\n\t\tarray[k] = int(math.Abs(float64(k - first_num)))\n\t}\n\tif last_num < len(s)-1 {\n\t\tfor i := last_num;i<len(s);i++{\n\t\t\tarray[i] = int(math.Abs(float64(i - last_num)))\n\t\t}\n\t}\n\tif first_num + 1 < last_num{\n\t\tperiod_num := first_num\n\t\tfor i := first_num; i < last_num; i++ {\n\n\t\t\tif s[i] == c {\n\t\t\t\tperiod_num = i\n\t\t\t}\n\t\t\tarray[i] = int(math.Abs(float64(i - period_num)))\n\t\t}\n\t\tperiod_num = last_num\n\t\tfor i := last_num; i > first_num; i-- {\n\t\t\tif s[i] == c {\n\t\t\t\tperiod_num = i\n\t\t\t}\n\t\t\tarray[i] = int(math.Min(math.Abs(float64(i-period_num)), float64(array[i])))\n\t\t}\n\t}\n\treturn array\n}\n```\n## 复杂度\n时间:O(n)\n空间:O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993081130","body":"# 【Day 3】1381. 设计一个支持增量操作的栈\n## 思路\n数组模拟栈，唯一区别在inc,比较数组长度和K值，再循环增加\n## Golang代码\n```\ntype CustomStack struct {\n\tStack []int\n\n}\n\n\nfunc Constructor(maxSize int) CustomStack {\n\tif maxSize < 0{\n\t\treturn CustomStack{}\n\t}\n\treturn CustomStack{\n\t\tStack: make([]int , 0, maxSize),\n\t}\n}\n\n\nfunc (this *CustomStack) Push(x int)  {\n\tif len(this.Stack) < cap(this.Stack){\n\t\tthis.Stack = append(this.Stack, x)\n\t}\n}\n\n\nfunc (this *CustomStack) Pop() int {\n\tif len(this.Stack) == 0 {\n\t\treturn -1\n\t}else {\n\t\tpop := this.Stack[len(this.Stack)-1]\n\t\tthis.Stack = this.Stack[:len(this.Stack)-1]\n\t\treturn pop\n\t}\n}\n\n\nfunc (this *CustomStack) Increment(k int, val int)  {\n\tchange_num := int(math.Min(float64(k), float64(len(this.Stack))))\n\tfor i :=0;i<change_num;i++{\n\t\tthis.Stack[i] += val\n\t}\n}\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jaywx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wu-zonglin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"socrates2001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shinnost":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"v-enzo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hwfrankfung":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991913378","body":"Codes\n-\n```javascript\nvar addToArrayForm = function(num, k) {\n    const res = [];\n    const n = num.length;\n    for (let i = n - 1; i >= 0; --i) {\n        let sum = num[i] + k % 10;\n        k = Math.floor(k / 10);\n        if (sum >= 10) {\n            k++;\n            sum -= 10;\n        }\n        res.push(sum);\n    }\n    for (; k > 0; k = Math.floor(k / 10)) {\n        res.push(k % 10);\n    }\n    res.reverse();\n    return res;\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992480645","body":"Codes\n-\n```javascript\nvar shortestToChar = function(s, c) {\n    let arrs=s.split(c)\n    let res=[]\n    for(let i=0; i<arrs.length; i++) {\n        let len=arrs[i].length\n        for(let j=0; j<arrs[i].length; j++) {\n            if(i==0){\n                res.push(arrs[i].length-j)\n            }else{\n                if(i+1<arrs.length){\n                    res.push((1+j>len-j)?(len-j):(1+j))\n                }else{\n                    res.push(j+1)\n                }\n            }\n        }\n        if(i+1<arrs.length){\n            res.push(0)\n        }\n    }\n    return res\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mrhero-web":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hondrytravis":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992054401","body":"### 思路\n\n遍历每一个字符，对当前字符设左右双指针，返回较近c和当前字符距离。\n\n### 代码\n\n```js\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function (S, C) {\n    const result = []\n    \n    //  先找到前两个出现的位置\n    for (let i = 0, l = S.indexOf(C), r = S.indexOf(C, l + 1); i < S.length; i++) {\n        // 计算与左指针的距离\n        result[i] = Math.abs(l - i)\n        if (r === -1) continue\n\n        // 如果右指针存在,取较小的距离\n        result[i] = Math.min(result[i], r - i)\n\n        // 走到右指针则左右指针往下一个\n        if (i != r ) continue\n\n        result[i] = 0\n        l = r\n        r = S.indexOf(C, r + 1)\n    }\n    return result\n};\n```\n\n### 复杂度分析\n\n时间复杂度 O(n)\n\n空间复杂度 O(1)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"awenbocc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"vincentlw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"richard-lyf":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991922848","body":"class Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n\n        carry = 0\n        nums = num\n        for i in range(len(num)-1,-1,-1):\n            tmp = (nums[i] + k % 10 + carry) % 10\n            carry = (nums[i] + k % 10 + carry) // 10\n            nums[i] = tmp\n            k = k // 10  \n\n        s = k + carry\n        b = []\n        while s:\n             b = [s % 10] + b\n             s = s // 10\n        return b + nums\n\n        # o n + max(0 , k-n)2  o max(1, k-n) ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992619471","body":"class Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n\r\n        prev = float('-inf')\r\n        ans = []\r\n        for i, x in enumerate(s):\r\n            if x == c:\r\n                prev = i\r\n            ans.append(i - prev)\r\n        prev = float('inf')\r\n        for i in range(len(s) - 1, -1, -1):\r\n            if s[i] == c:\r\n                prev = i \r\n            ans[i] = min(ans[i], prev - i)\r\n\r\n        return ans\r\n        \r\n        \r\n\r\n\r\n\r\n\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gjts":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aruseito":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"harleyszhang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"badcoderchou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"auto-sk":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"breezepython":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jianxinyu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cruiseyugh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"abby-xu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zetavi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"anhtom2000":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhi22":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991886091","body":"```python3\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        lk = []\n        addOne = 0\n        while k:\n            k, m = divmod(k, 10)\n            lk.append(m)\n        ln = len(num); llk = len(lk)\n        res = [0 for _ in range(max(ln, llk)+1)]\n        num.reverse()\n        idx = 0\n        while idx < ln and idx < llk:\n            sum = num[idx] + lk[idx] + addOne\n            res[idx] = sum % 10\n            addOne = 0\n            if sum >= 10: addOne = 1\n            idx += 1\n        remain = num if ln > llk else lk\n        while idx < len(remain) or addOne:\n            if idx < len(remain): res[idx] += remain[idx]\n            res[idx] += addOne\n            addOne = 0\n            idx += 1\n            if res[idx] >= 10:\n                res[idx] %= 10\n                addOne = 1\n        if res[-1] == 0: res.pop()\n        res.reverse()\n        return res\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"master-guang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chenjingjing85":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"forlittlebeauty":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991717494","body":"## 思路\n\n***\n\n1. sum the value of the num list\n2. add k\n3. return the list form of the final value\n\n***\n\n## 代码\n\n``` python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        # numSum = 0\n        # for n in num:\n        #     numSum = numSum*10+n\n        # numSum += k\n        # return list(str(numSum))\n        return (list(str(int(\"\".join(map(str, num))) + k)))\n```\n\n\n\n***\n\n时间复杂度: O(n) \n\n空间复杂度: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991975436","body":"## 思路\n\n***\n\n1. scan the list from left to right, when find c set the index = the position of c, so that our result array can record the distance between a character and the c show before that character.\n2. scan the list from right to left, change index whenever encounter a c. make record[i] = min(abs(i-index),record[i])\n\n***\n\n## 代码\n\n``` python\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        result = []\n        index = len(s)-1\n        for i in range(len(s)):\n            if s[i]==c:\n                index = i\n            result.append(abs(index-i))\n        \n        index = 0\n        for i in range(len(s)-1,-1,-1):\n            if s[i]==c:\n                index = i\n            result[i] = min(result[i],abs(index-i))\n        return result\n```\n\n\n\n***\n\n时间复杂度: O(n) \n\n空间复杂度: O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liuxy94":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991874521","body":"## 思路\n把num先变成int 然后sum_int = k+num_int 再把sum_int变成sum_array\n\n## 代码\n``` python\nclass Solution(object):\n    def addToArrayForm(self, num, k):\n        \"\"\"\n        :type num: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        ## step0: corner case\n        if k == 0:\n            return num\n        ## step1: change the array to number\n        n = len(num)\n        num_int = 0\n        for i in range(n):\n            num_int += num[i]*10**(n-1-i)\n        ## step2: compute the sum\n        sum_int = num_int + k\n        sum_array = []\n        ## step3: change the sum to array\n        while sum_int != 0:\n            quotient = sum_int//10\n            remainder = sum_int%10\n            ## update sum array and int\n            sum_array.insert(0,remainder)\n            sum_int = quotient\n        \n        return sum_array\n```\n\n## 复杂度分析\n时间 O(n^2)\n\n空间 O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992302693","body":"## 思路\n1. 利用c在s的位置，初始化res\n2. 先计算左侧最短距离，存入res\n3. 再计算右侧最短距离，与之前结果比较，并存入res\n\n## 代码\n```python\nclass Solution(object):\n    def shortestToChar(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: List[int]\n        \"\"\"\n        ## step1: setup result by the postion of c\n        n = len(s)\n        result = []\n        for i in range(n):\n            if s[i]==c:\n                result.append(0)\n            else:\n                result.append(n)\n        #step2: compute the min distance from left \n        for i in range(1,n):\n            result[i] = min(result[i], result[i-1]+1)\n        #step3: compute the min distance from right and compare with previous result\n        for i in range(-2,-(n+1),-1):\n            result[i] = min(result[i],result[i+1]+1)\n        \n        return result\n    ```\n\n## 复杂度分析\n空间: O(n)\n\n时间: O(n)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xinnxuu":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991851926","body":"# Idea\n\n---\n\n- Add numbers from right to left digit by digit. Add k's units' digit to first sum, tens' digit to second sum, hundreds' digit to third sum, and so on.\n- Beware of  the case that k > num.  (Whether k > 0 after the num loop)\n- And remember to reverse the result list.\n\n# Code (Java)\n\n---\n\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = num.length - 1; i >= 0; i--){\n            int sum = num[i] + k % 10;\n            k /= 10;\n            if (sum >= 10){\n                k++;\n                sum -= 10;\n            }\n            res.add(sum);\n        }\n        \n        while (k > 0){\n            res.add(k % 10);\n            k /= 10;\n        }\n        \n        Collections.reverse(res);\n        return res;\n    }\n}\n```\n\n# Complexity\n\n---\n\n- Time Complexity: O(N)\n- Space Complexity: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991973335","body":"## Notes\r\n\r\nTraverse the string twice, one from left to right, and one from right to left.\r\n\r\n## Code (Java)\r\n\r\n```java\r\nclass Solution {\r\n    public int[] shortestToChar(String s, char c) {\r\n        int n = s.length();\r\n        int[] res = new int[n]; \r\n        //left to right\r\n        int right = -10001;\r\n        for (int i = 0; i < n; i++){\r\n            res[i] = i - right;\r\n            if (s.charAt(i) == c){\r\n                res[i] = 0;\r\n                right = i;\r\n            }\r\n        }\r\n        //right to left\r\n        int left = 10001;\r\n        for (int i = n - 1; i >= 0; i--){\r\n            if (res[i] > left - i){\r\n                res[i] = left - i;\r\n            }\r\n            if (s.charAt(i) == c){\r\n                res[i] = 0;\r\n                left = i;\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}\r\n\r\n```\r\n\r\n## Complexity\r\n\r\n- Time: O(N), N is the length of string s.\r\n- Space: O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993289238","body":"\r\n```java\r\n//1.原始解法\r\nclass CustomStack {\r\n\r\n    int[] stack;\r\n    int top;\r\n\r\n    public CustomStack(int maxSize) {\r\n        stack = new int[maxSize];\r\n        top = -1;\r\n    }\r\n    \r\n    public void push(int x) {\r\n        if (top != stack.length - 1){\r\n            stack[++top] = x;\r\n        }\r\n    }\r\n    \r\n    public int pop() {\r\n        if (top != -1) {\r\n            return stack[top--];\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n    \r\n    public void increment(int k, int val) {\r\n        int limit = Math.min(k, top + 1);\r\n        for (int i = 0; i < limit; i++) {\r\n            stack[i] += val;\r\n        }\r\n    }\r\n}\r\n\r\n//2.增加一个数组专门记录increment，优化increment操作的时间复杂度至O(1)\r\nclass CustomStack {\r\n\r\n    int[] stack;\r\n    int top;\r\n    int[] add;\r\n\r\n    public CustomStack(int maxSize) {\r\n        stack = new int[maxSize];\r\n        add = new int[maxSize];\r\n        top = -1;\r\n    }\r\n    \r\n    public void push(int x) {\r\n        if (top != stack.length - 1){\r\n            stack[++top] = x;\r\n        }\r\n    }\r\n    \r\n    public int pop() {\r\n        if (top == -1){\r\n            return -1;\r\n        }\r\n        int res = stack[top] + add[top];\r\n        if (top != 0) {\r\n            add[top - 1] += add[top];\r\n        } \r\n        add[top] = 0;\r\n        top--;\r\n        return res;\r\n    }\r\n    \r\n    public void increment(int k, int val) {\r\n        int limit = Math.min(k - 1, top);\r\n        if (limit > -1){\r\n            add[limit] += val;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Your CustomStack object will be instantiated and called as such:\r\n * CustomStack obj = new CustomStack(maxSize);\r\n * obj.push(x);\r\n * int param_2 = obj.pop();\r\n * obj.increment(k,val);\r\n */\r\n```\r\n\r\n**复杂度分析**\r\n1. 解法1\r\n- 时间复杂度：除了increment是O(k), 其他全部是 O(1)\r\n- 空间复杂度：O(maxSize)\r\n2. 解法2\r\n- 时间复杂度：全部是 O(1)\r\n- 空间复杂度：O(maxSize)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"weisday":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"missnanlan":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991866075","body":"## 思路\n\n1、逐位相加法，逐位数字相加在一起，遇到相加等于 10 的时候要进位，把进位的 1 加入到下一位计算中\n\n2、将整个加数 k 加数加入数组表示数的最低位(简单点)\n\n## 关键点\n\n- 要考虑进位的情况， 比如 num=[3,6,9]，n=45\n- 要考虑 n>num 的长度 的情况，比如 num=[3,6]，n=789\n\n## 代码\n\n- 语言支持：JavaScript\n\nJavaScript Code:\n\n### 解法 1 逐位相加法\n\n```javascript\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\n\nvar addToArrayForm = function (n, k) {\n  var res = [];\n  for (var i = n.length - 1; i >= 0; --i) {\n    var sum = n[i] + (k % 10);\n    k = Math.floor(k / 10);\n    // 如果相加大于10，则进位，把进位的1加入到下一位计算中\n    if (sum >= 10) {\n      k++;\n      sum = sum % 10;\n    }\n    res.push(sum);\n  }\n  // 如果n>num的长度\n  for (; k > 0; k = Math.floor(k / 10)) {\n    res.push(k % 10);\n  }\n\n  return res.reverse();\n};\n```\n\n### 解法 2 将整个加数 k 加数加入数组表示数的最低位\n\n```javascript\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function (num, k) {\n  const res = [];\n  const n = num.length;\n  for (let i = n - 1; i >= 0 || k > 0; --i, k = Math.floor(k / 10)) {\n    if (i >= 0) {\n      k += num[i];\n    }\n    res.push(k % 10);\n  }\n  res.reverse();\n  return res;\n};\n```\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(max(n,logk))$\n- 空间复杂度：$O(n)$\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992553025","body":"## 思路1\n\n- 找出 c 的下标的位置，放入到一个数组 tempArr 里面\n- 用 tempArr 与 i 相减得到绝对值，与 tempArr 下一个元素作比较，前一个元素比较大，则 tempArr 向后移动一个位置\n- 前一个元素小，则不需要动\n- 以上思路是参照别人的解法，感觉用两个循环不是很优雅，希望以后还是有自己的想法\n\n## 关键点\n\n- 如何求出两个下标之间的距离（两个下标相减的绝对值）\n\n## 代码\n\n- 语言支持：JavaScript\n\nJavaScript Code:\n\n```javascript\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function (str, c) {\n  var answer = [];\n  var tempArr = [];\n  var k = 0;\n  // 找出 c的下标的位置，放入到一个数组tempArr里面\n  for (var i = 0; i < str.length; i++) {\n    var s = str.charAt(i);\n    if (s === c) tempArr.push(i);\n  }\n  //  用tempArr与i相减得到绝对值，与tempArr下一个元素作比较，前一个元素比较大，则tempArr向后移动一个位置\n  // 前一个元素小，则不需要动\n  for (var i = 0; i < str.length; i++) {\n    if (\n      k < tempArr.length - 1 &&\n      Math.abs(tempArr[k] - i) > Math.abs(tempArr[k + 1] - i)\n    )\n      k++;\n    answer.push(Math.abs(tempArr[k] - i));\n  }\n  return answer;\n};\n```\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：O(n)\n- 空间复杂度：O(n)，这里有些疑问，不知道算不算O(2n)\n\n-----------\n\n## 思路2\n\n- 窗口，参照西法大佬的窗口解法\n\n## 代码\n\n- 语言支持：JavaScript\n\nJavaScript Code:\n\n```javascript\n\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function (s, c) {\n     \n   // 定义左边界,右边界\n    let l = s[0] === c ? 0 : Infinity, r = s.indexOf(c, 1);\n    const res = Array(s.length);\n\n    for (let i = 0; i < 1; i++) {\n        res[i] = Math.min(Math.abs(i - l), Math.abs(r - i));\n        \n        // 如果滑动到边界，则继续向右滑动\n        if (i === r) {\n            l = r;\n            r = s.indexOf(c,l+1)\n        } \n    }\n\n    return res;\n\n};\n\n```\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(n)$\n- 空间复杂度：$O(1)$\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"venchyluo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuanwenlai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sjingz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jlin-data":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"victoria011":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"coreja":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991915086","body":"# 思路\n方法挺多的，可以用map以及reduce的方法把列表转字符串再转数字，最后再换成列表\n\n更合理的方法是运用列表模拟进位等操作，把k直接加到num的最后一位里，然后再进位，k自除10，num最后一位取余保留，直到k为0.\n\n# 代码\n```python\nclass Solution:\n    def addToArrayForm1(self, num: List[int], k: int) -> List[int]:\n        return list(map(int, str(int(\"\".join(map(str, num))) + k)))\n\n    def addToArrayForm2(self, num: List[int], k: int) -> List[int]:\n        return list(map(int, str(k + reduce(lambda x, y: 10 * x + y, num))))\n\n    def addToArrayForm3(self, num: List[int], k: int) -> List[int]:\n        i = len(num) - 1\n        carry = 0\n        res = []\n        while k or i >= 0:\n            left = k % 10\n            res_dig = num[i] + left + carry if i >= 0 else left + carry\n            if res_dig >= 10:\n                carry = 1\n                res_dig %= 10\n            else:\n                carry = 0\n            res.insert(0, res_dig)\n            i -= 1\n            k //= 10\n        if carry:\n            res.insert(0, 1)\n        return res\n\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        i = len(num) - 1\n        while k:\n            num[i] += k\n            k, num[i] = num[i] // 10, num[i] % 10\n            i -= 1\n            if i < 0 and k:\n                num.insert(0, 0)\n                i = 0\n        return num\n\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992036434","body":"# 思路\n贪心法，从左到右+从右到左遍历，取最小值即可。\n\n简单描述就是，从第一个c开始向右遍历数组，下标c的结果取0，后面的结果就分别递增直到再次遇到c置0。同样的过程从最后一个c开始向左遍历，第二次遍历的时候和第一遍遍历的结果比较，取最小值。\n\n# 代码\n```python\nclass Solution:\n    # 贪心解法\n    def shortestToChar1(self, s: str, c: str) -> List[int]:\n        n = len(s)\n        ans = [float('inf')] * n\n        cnt = float('inf')\n        for i in range(n):\n            if s[i] == c:\n                ans[i] = 0\n                cnt = 0\n            else:\n                cnt += 1\n                ans[i] = cnt\n        cnt = float('inf')\n        for i in range(n - 1, -1, -1):\n            if s[i] == c:\n                cnt = 0\n                continue\n            else:\n                cnt += 1\n                ans[i] = min(cnt, ans[i])\n        return ans\n    # 贪心法简单写法\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        n = len(s)\n        ans = [0 if ch == c else None for ch in s]\n\n        for i in range(1, n):\n            if ans[i] != 0 and ans[i - 1] is not None:\n                ans[i] = ans[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if ans[i] is None or ans[i] != 0 and ans[i + 1] + 1 < ans[i]:\n                ans[i] = ans[i + 1] + 1\n        return ans\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-992851358","body":"# 思路\nnaive思路非常好想，按照需求实现即可\n\n但是考虑到increment操作针对的是栈，栈在这里只会访问栈顶，所以可以考虑对increment使用lazy操作\n只在出栈的时候去进行之前的increment操作，以规避对栈内元素过多的操作\n\n具体就是每次increment并不直接增加到它要求的栈底的k个元素，而是用另一个数组lazy_inc保存起来，\n只在pop的时候去加上lazy_inc的top-1元素，并将这个increment加到数组中的前一个元素中(这样就把它继承下去了)\n\n# 代码\n```python\n# naive思路\nclass CustomStack1:\n\n    def __init__(self, maxSize: int):\n        self.stack = [0] * maxSize\n        self.cur = 0\n\n    def push(self, x: int) -> None:\n        if self.cur >= len(self.stack):\n            return\n        self.stack[self.cur] = x\n        self.cur += 1\n\n    def pop(self) -> int:\n        if self.cur <= 0:\n            return -1\n        self.cur -= 1\n        return self.stack[self.cur]\n\n    def increment(self, k: int, val: int) -> None:\n        k = self.cur if k > self.cur else k\n        for i in range(k):\n            self.stack[i] += val\n\n\n#  lazy_increment做法\nclass CustomStack:\n    def __init__(self, maxSize: int):\n        self.top = 0\n        self.stack = [0] * maxSize\n        self.add = [0] * maxSize\n\n    def push(self, x: int) -> None:\n        if self.top >= len(self.stack):\n            return\n        self.stack[self.top] = x\n        self.top += 1\n        return\n\n    def pop(self) -> int:\n        if self.top > 0:\n            self.top -= 1\n            self.stack[self.top] += self.add[self.top]\n            if self.top > 0:\n                self.add[self.top - 1] += self.add[self.top]\n            self.add[self.top] = 0\n            return self.stack[self.top]\n        return -1\n\n    def increment(self, k: int, val: int) -> None:\n        k = min(k, self.top)\n        if k > 0:\n            self.add[k - 1] += val\n```\n# 复杂度\nTC: push O(1), increment O(1), pop O(1)\nSC: O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"weilantao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gaozizhong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pearlcoastal":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jinjin680":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"northseacoder":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"greyqt":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lagrangist":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"asukareisj":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"stefanleeee":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huijunxu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"naivecoder1999":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wxqkb":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"serena9":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"imsingee":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hzhengzhi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"poidaze7":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"c2tr":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"okkband":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bingbinxu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gz712d":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"smallcodebo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zymacro":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"florencelll":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991916994","body":"### 思路\n1.把k转为数组，做数组逐位相加的运算，需要一个tmp array记录哪一位进1了;\n\n2.把num转为数字计算后再转数组;\n\n3.边把num加到k里，边存;\n\n\n采用3，有3个步骤：\n\n1.将num未计算的最低位取出来，跟k相加\n\n2.将k未存到AL的最低位存进去\n\n3.全部完成后 reverse刚刚的AL，因为是从低位存的，但每次都是addLast操作\n\n\n\n\n### 代码\n```Java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = num.length - 1; i >= 0 || k > 0; i--, k /= 10) {\n            //add num to k from low bits\n            if (i >= 0) {\n                k += num[i];\n            }\n            //add k's bit to AL from low\n            res.add(k % 10);\n        }\n        //reverse\n        Collections.reverse(res);\n        return res;   \n    }\n}\n```\n\n### 复杂度分析：\n时间复杂度 O(n)，这里n是 num、k的长度中的最大值(reverse的操作应该是logn的？）\n\n空间复杂度 O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992191732","body":"### 思路\n左右两个指针，固定左指针，右指针遍历数组，计算最小距离\n\n明早学习一下O(n)是怎么解决的\n\n### 代码\n```Java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        char[] ch = s.toCharArray();\n        int[] res = new int[ch.length];\n        \n        for (int i = 0; i < ch.length; i++) {\n            int dis = ch.length;\n            for (int j = ch.length -1; j >= 0; j--) {\n                if (ch[j] == c) {\n                    dis = Math.min(Math.abs(j - i), dis);\n                }\n            }\n            res[i] = dis;\n        }\n        return res;\n    }\n}\n```\n\n### 复杂度分析\n时间复杂度 O(n^2)\n\n空间复杂度 O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"weiwri-cc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kirito1017":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"a-polarbear":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"krabbejing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fullstackh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"carinskyrim":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ziyangz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"threegold-yxh":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991855499","body":"# [989. 数组形式的整数加法](https://leetcode-cn.com/problems/add-to-array-form-of-integer/)\n\n\n\n对于非负整数 `X` 而言，*`X`* 的*数组形式*是每位数字按从左到右的顺序形成的数组。例如，如果 `X = 1231`，那么其数组形式为 `[1,2,3,1]`。\n\n给定非负整数 `X` 的数组形式 `A`，返回整数 `X+K` 的数组形式。\n\n```java\n示例 1：\n\n输入：A = [1,2,0,0], K = 34\n输出：[1,2,3,4]\n解释：1200 + 34 = 1234\n示例 2：\n\n输入：A = [2,7,4], K = 181\n输出：[4,5,5]\n解释：274 + 181 = 455\n示例 3：\n\n输入：A = [2,1,5], K = 806\n输出：[1,0,2,1]\n解释：215 + 806 = 1021\n示例 4：\n\n输入：A = [9,9,9,9,9,9,9,9,9,9], K = 1\n输出：[1,0,0,0,0,0,0,0,0,0,0]\n解释：9999999999 + 1 = 10000000000\n```\n\n\n\n```java\n提示：\n1 <= A.length <= 10000\n0 <= A[i] <= 9\n0 <= K <= 10000\n如果 A.length > 1，那么 A[0] != 0\n```\n\n\n\n## 思路一\n\n模拟加法的过程即可\n\n\n\n### 代码\n\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        //因为num的位数可以有10000位，所以肯定是超过了int，或者long的，那么只能通过数组按位计算\n        //每一位的值 = num数组在这一位上的值 + k数组在这一位上的值 + 前一位的进位\n        LinkedList<Integer> res = new LinkedList<>();\n        int carry = 0;\n        for(int i = num.length - 1; i >= 0; i--){\n            //拿当前k的最后一位 Take the last digit of the current k\n            int kLastDigital = k % 10;\n            //sum of the add\n            int sumOfAdd = num[i] + kLastDigital + carry;\n            //注意是头插到结果list中\n            res.addFirst(sumOfAdd % 10);\n\n            //处理carry和k\n            carry = sumOfAdd / 10;\n            k = k / 10;\n        }\n        //如果k提前结束了，那没有关系，后面全部加的都是0\n        //但如果是num先结束了，k还有剩余，那还要把k给处理完\n        while(k != 0){\n            int kLastDigital = k % 10;\n            int sumOfAdd = kLastDigital + carry;\n            //注意是头插到结果list中\n            res.addFirst(sumOfAdd % 10);\n            //处理carry和k\n            carry = sumOfAdd / 10;\n            k = k / 10;\n        }\n        //最后还要检查carry里面还有没有数，如果有的话，加进去\n        if(carry!=0){\n            res.addFirst(carry);\n        }\n\n        return res;        \n    }\n}\n```\n\n\n\n### 复杂度分析\n\n时间复杂度：$O(n)$\n\n空间复杂度：$O(n)$\n\n\n\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992613526","body":"# [821. 字符的最短距离](https://leetcode-cn.com/problems/shortest-distance-to-a-character/)\n\n\n\n给你一个字符串 s 和一个字符 c ，且 c 是 s 中出现过的字符。\n\n返回一个整数数组 answer ，其中 answer.length == s.length 且 answer[i] 是 s 中从下标 i 到离它 最近 的字符 c 的 距离 。\n\n两个下标 i 和 j 之间的 距离 为 abs(i - j) ，其中 abs 是绝对值函数。\n\n \n\n示例 1：\n\n```java\n输入：s = \"loveleetcode\", c = \"e\"\n输出：[3,2,1,0,1,0,0,1,2,2,1,0]\n解释：字符 'e' 出现在下标 3、5、6 和 11 处（下标从 0 开始计数）。\n距下标 0 最近的 'e' 出现在下标 3 ，所以距离为 abs(0 - 3) = 3 。\n距下标 1 最近的 'e' 出现在下标 3 ，所以距离为 abs(1 - 3) = 2 。\n对于下标 4 ，出现在下标 3 和下标 5 处的 'e' 都离它最近，但距离是一样的 abs(4 - 3) == abs(4 - 5) = 1 。\n距下标 8 最近的 'e' 出现在下标 6 ，所以距离为 abs(8 - 6) = 2 。\n```\n\n示例 2：\n\n```java\n输入：s = \"aaab\", c = \"b\"\n输出：[3,2,1,0]\n```\n\n提示：\n1 <= s.length <= 10<sup>4</sup>\ns[i] 和 c 均为小写英文字母\n题目数据保证 c 在 s 中至少出现一次\n\n\n\n\n\n## 方法一：先假定这个c的坐标存在，然后从左从右遍历两次\n\n```java\n//方法一：先假定这个c的坐标存在，然后遍历两次\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        //创建结果数组\n        int[] res = new int[s.length()];\n        //首先从左往右遍历，我们假定c最开始的下标是Integer.MIN_VALUE / 2\n        //除以2是为了防止负溢出\n        //它代表的含义是从左边算起的，离当前结点左边的最近的c的位置\n        int leftClosestPos = Integer.MIN_VALUE / 2;\n        for(int i = 0; i < s.length(); i++){\n            //如果找到了c，修改pos值\n            if(s.charAt(i) == c){\n                leftClosestPos = i;\n            }\n            res[i] = i - leftClosestPos;\n        }\n        //然后再从右边开始遍历\n        //它代表的含义是从右边算起的，离当前结点右边的最近的c的位置\n        int rightClosestPos = Integer.MAX_VALUE / 2;\n        for(int i = s.length() - 1; i >= 0; i--){\n            //如果找到了c，修改pos值\n            if(s.charAt(i) == c){\n                rightClosestPos = i;\n            }\n            //这里要和已有的左边的最近值比较，看谁更小\n            res[i] = Math.min(rightClosestPos - i, res[i]);\n        }\n        return res;\n    }\n}\n```\n\n\n\n### 复杂度分析\n\n时间复杂度：$O(n)$\n\n空间复杂度：$O(1)$","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"linrax":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991897178","body":"# 思路\n\n将数组从低位到高位加到k上,最后反转\n\n# 代码\n\n语言支持:java\n\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> res = new ArrayList<>();\n        for(int i = num.length-1;i >= 0|| k >0;i--,k/=10){\n            if(i>=0){\n                k+=num[i];\n            }\n            res.add(k%10);\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}\n```\n\n# 复杂度分析\n\n时间复杂度  O(max(n,log k)) , n为数组长度\n\n空间复杂度 O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"davont":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991922745","body":"## code\n```js\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function (num, k) {\n  /**\n   * 大数相加，先将两个数反转\n   */\n  let numAStr = num.reverse();\n  let numBStr = k.toString().split('').reverse();\n  let temp = 0;\n  let result = [];\n  for (let i = 0; i < Math.max(numAStr.length, numBStr.length); i++) {\n    if (!numAStr[i]) {\n      numAStr[i] = 0;\n    }\n    if (!numBStr[i]) {\n      numBStr[i] = 0;\n    }\n    result[i] = numAStr[i] + +numBStr[i] + temp;\n    if (result[i] > 9) {\n      result[i] -= 10;\n      temp = 1;\n    } else{\n        temp = 0;\n    }\n  }\n  if (temp === 1) {\n    result.push(temp);\n  }\n  return result.reverse();\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992062594","body":"## 思路\n官方题解的思路二：空间换时间，实际上就是暴力，没有什么技术思想，但也是最容易想到的\n\n## code\n\n```js\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function(s, c) {\n    const sArr = s.split('');\n    const keyArr = [];\n    const ans = [];\n    for (let i = 0; i < sArr.length; i++) {\n        const ele = sArr[i];\n        if(ele === c){\n            keyArr.push(i);\n        }\n    }\n    for (let i = 0; i < sArr.length; i++) {\n        const ele = sArr[i];\n        let minLen = sArr.length;\n        for (let j = 0; j < keyArr.length; j++) {\n            const keyEle = keyArr[j];\n            minLen = Math.min(minLen,Math.abs(keyEle - i));\n        }\n        ans.push(minLen);\n    }\n    return ans;\n\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joyce94":[null,null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993086458","body":"```\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack = []\n        self.maxSize = maxSize\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.maxSize:\n            self.stack.append(x)\n\n\n    def pop(self) -> int:\n        if len(self.stack) > 0:\n            top = self.stack[-1]\n            self.stack.pop()\n            return top \n        else:\n            return -1 \n\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(len(self.stack)):\n            if i == k:\n                return \n            self.stack[i] += val \n\n```\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"domorecode":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"junqu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bruce-young233":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"eggeggliu":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991834504","body":"## 代码\n```cpp\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        reverse(num.begin(), num.end());\n        \n        vector<int> num2 = splitToArray(k);\n        \n        num = addTwoArrays(num, num2);\n        \n        reverse(num.begin(), num.end());\n        return num;\n    }\nprivate:\n    vector<int> splitToArray(int k) {\n        if (k < 0 || k > 10000) {\n            cout << \"invalid input\" << endl;\n            return {};\n        }\n        vector<int> res = {};\n        while (k) {\n            res.push_back(k % 10);\n            k /= 10;\n        }\n        return res;\n    }\n    \n    vector<int> addTwoArrays(vector<int>num1, vector<int>num2) {\n        int sz1 = num1.size();\n        int sz2 = num2.size();\n        int n = 0;\n        int carry = 0;\n        while (n < sz1 && n < sz2) {\n            int sum = num1[n] + num2[n] + carry;\n            carry = sum / 10;\n            num1[n++] = sum % 10;\n        }\n        while (n < sz1) {\n            int sum = num1[n] + carry;\n            carry = sum / 10;\n            num1[n++] = sum % 10;\n        }\n        while (n < sz2) {\n            int sum = num2[n++] + carry;\n            carry = sum / 10;\n            num1.push_back(sum % 10);\n        }\n        if (carry) {\n            num1.push_back(carry);\n        }\n        return num1;\n    }\n};\n```\n\n## 复杂度\n时间 O(n)\n空间 O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"daxiadaxia":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"draculabo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ankidord":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tomtao626":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"alanwgy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"potato121":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"baijian1990":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"l-mx-wq":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"corki418":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lovemyse1f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kuroky-chen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yachen-guo":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991918651","body":"加法问题，重点在于进位的处理。使用carry位储存。\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        LinkedList<Integer> tmp = new LinkedList<>();\n        int n = num.length;\n        int i = n - 1, sum = 0, carry = 0;\n        while(i >= 0 || k!=0){\n            int x = i >= 0 ? num[i] : 0;\n            int y = k != 0? k % 10 : 0;\n            sum = x + y + carry;\n            carry = sum / 10;\n            k /= 10;\n            tmp.addFirst(sum % 10);\n            i--;\n        }\n        if(carry!=0) tmp.addFirst(carry);\n        List<Integer> res = new ArrayList<>(tmp);\n        return res;\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992204581","body":"方法1：遍历找到左右指针，向中间扩散，时间复杂度O(N)。\n```java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int[] res = new int[s.length()];\n        int left = -1;\n        int right = -1;\n        for(int i = 0; i < s.length(); i++){\n            if(s.charAt(i) == c){\n                right = i;\n                int distance = 0;\n                if(left != -1){\n                    int start = left;\n                    int end = right;\n                    while(start <= end){\n                        res[start++] = distance;\n                        res[end--] = distance;\n                        distance++;\n                    }\n                } else{\n                    int end = right;\n                    while(end >= 0){\n                        res[end--] = distance++;\n                    }\n                }\n                left = i;\n            }\n        }\n        if(right!=s.length()-1){\n            int start = right;\n            int distance = 0;\n            while(start < s.length()){\n                res[start++] = distance++;\n            }\n        }\n        return res;\n    }\n}\n```\n方法2：仅供参考，时间复杂度较高（O(N^2)）\n```java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        Map<Character,List<Integer>> map = new HashMap<>();\n        char[] charArr = s.toCharArray();\n        for(int i = 0; i < charArr.length; i++){\n            if(map.containsKey(charArr[i])){\n                map.get(charArr[i]).add(i);\n            } else{\n                List<Integer> list = new ArrayList<>();\n                list.add(i);\n                map.put(charArr[i],list);\n            }\n        }\n        int[] res = new int[charArr.length];\n        List<Integer> tmp = map.get(c);\n        for(int i = 0; i < charArr.length; i++){\n            int min = Integer.MAX_VALUE;\n            for(int j = 0; j < tmp.size(); j++){\n                int val = Math.abs(tmp.get(j) - i);\n                min = min < val?min:val;\n            }\n            res[i] = min;\n        }\n        return res;\n    }\n}\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zt4188":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jachinm":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gemzq":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"harrypangpang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"iamtheusername":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nina1031":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"brandylulu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"clarence5":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991903023","body":"```js\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n    const res = [];\n    const n = num.length;\n    for (let i = n - 1; i >= 0 || k > 0; --i, k = Math.floor(k / 10)) {\n        if (i >= 0) {\n            k += num[i];\n        }\n        res.push(k % 10);\n    }\n    res.reverse();\n    return res;\n};\n```\n复杂度：数组长度O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"musicofwind":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"baiqr":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"winperrr":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiangydeng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shuchenwuu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"craig-cheng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"crazy-xjm":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pandacure":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shanrufu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"husky-gong":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991805344","body":"# 解题思路\r\n - 遍历整个array，求出array的值\r\n - 将array求出的数字和给的数字相加\r\n - 将数字转化为array\r\n\r\n# 代码\r\n```\r\nprivate static int[] arrayAddInteger (int[] A, int k) {\r\n        int temp = 0;\r\n        int idx = 0;\r\n\r\n        List<Integer> list = new ArrayList<>();\r\n\r\n        while (idx < A.length) {\r\n            temp = temp * 10 + A[idx];\r\n            idx++;\r\n        }\r\n\r\n        System.out.println(temp);\r\n\r\n        int sum = temp + k;\r\n\r\n        System.out.println(sum);\r\n\r\n        while (sum != 0) {\r\n            list.add(sum % 10);\r\n            sum /= 10;\r\n        }\r\n\r\n        // convert to array\r\n        Collections.reverse(list);\r\n\r\n        int[] result = new int[list.size()];\r\n        for (int i = 0; i < list.size() ; i++) {\r\n            result[i] = list.get(i);\r\n        }\r\n\r\n        return result;\r\n    }\r\n```\r\n\r\n# 复杂度\r\n- 时间复杂度：O(n) 需要遍历整个数组\r\n- 空间复杂度：O(n) 返回数组需要开辟N的额外空间","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991929422","body":"# 解题思路\r\n- 使用两个指针，代表一个window，左边设为left，右边设置为right\r\n- curr代表当前遍历到的S的位置\r\n- 分为三个阶段：\r\n-- 初始化：left未进入S，right为第一个e出现的位置\r\n-- 中间阶段：left和right均为S中的某一个位置\r\n-- 最后阶段：left为S中最后一个e出现的位置，right已发生越界\r\n- 需要注意：\r\n-- 每次curr扫描到一个C，代表其已到达window的右边界，则需要将左边界设置为C当前位置，并且重新设定右边界\r\n-- 更新距离时，需要使用Math.min(Math.abs(curr - left), Math.abs(curr - right))求出最小值gap，设置到结果位置result[curr] = gap\r\n-- 不能设置为Integer.MIN_VALUE 和Intger.MAX_VALUE，因为会发生越界\r\n# 代码\r\n```\r\npublic static int[] minGap(String S, Character C) {\r\n        // set window [left, right] range\r\n        int left = -S.length();\r\n        int right = 0;\r\n\r\n        // initialize right first\r\n        while (right < S.length() && S.charAt(right) != C) {\r\n            right++;\r\n        }\r\n\r\n        // curr -> current position\r\n        int curr = 0;\r\n        int[] distance = new int[S.length()];\r\n\r\n        while (curr < S.length() && right < S.length()) {\r\n            if (S.charAt(curr) == C) {\r\n                distance[curr] = 0;\r\n                // it means curr has reached to the right edge of the window\r\n                // then have to update the left, right for a new window\r\n                left = curr;\r\n                while (left == right || (right < S.length() && S.charAt(right) != C)) {\r\n                    right++;\r\n                    // if right is out of S, then set it as Integer.MAX_VALUE\r\n                    if (right == S.length()) {\r\n                        right = 2 * S.length();\r\n                    }\r\n                }\r\n            } else {\r\n                // between current window\r\n                // update gaps for Characters in this window\r\n                int gap = Math.min(Math.abs(curr - left), Math.abs(right - curr));\r\n                distance[curr] = gap;\r\n            }\r\n            curr++;\r\n        }\r\n\r\n        return distance;\r\n    }\r\n```\r\n# 复杂度\r\n时间复杂度：O(n) 从左到右，只遍历一遍\r\n空间复杂度：O(n) 需要开辟新的空间，存储结果\r\n\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-992897084","body":"# 思路\r\n1. 使用ArrayList模拟实现\r\n2. 构造函数：初始化ArrayList和maxSize\r\n3. push：如果list.size()<maxSize，才向其中添加数字；否则，返回。\r\n4. pop：判断list中是否有函数，有的话返回，并remove掉当前数字。否则，返回-1\r\n5. increment：【bottom】代表从list的0开始计算的k个元素进行加val\r\n\r\n# 代码\r\n```\r\nclass CustomStack {\r\n    List<Integer> list;\r\n    int maxSize;\r\n\r\n    public CustomStack(int maxSize) {\r\n        list = new ArrayList<>();\r\n        this.maxSize = maxSize;\r\n    }\r\n    \r\n    public void push(int x) {\r\n        if (maxSize > list.size()) {\r\n            list.add(x);\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n    \r\n    public int pop() {\r\n        if (list.size() > 0) {\r\n            int result = list.get(list.size() - 1);\r\n            list.remove(list.size() - 1);\r\n            return result;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n    \r\n    public void increment(int k, int val) {\r\n        // bottom is start from 0\r\n        int cur = 0;\r\n        \r\n        while (cur <= list.size() - 1 && k > 0) {\r\n            int newVal = list.get(cur) + val;\r\n            list.set(cur, newVal);\r\n            cur++;\r\n            k--;\r\n        }\r\n    }\r\n}\r\n```\r\n# 复杂度\r\n时间复杂度：O(n) 因为有increment操作，可能需要遍历所有数\r\n空间复杂度：O(n) 构造了新的数据结构用于存放数字\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mayqiu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"leonalhq":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jiabin123":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zacherycao":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991742873","body":"## Idea\n1. Use a carry variable to record previous sum's tenth value\nWhile loop (if num is not empty or k larger than zero or carry larger than zero): \n2. Pop num array's last element as variable LAST. If empty num, LAST = 0\n3. Append the ones digit of the summation to the ans array left side\n4. Update the carry to the summation's tens digit\n\n## Code:\n```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        carry = 0\n        ans = collections.deque()\n        while num or k>0 or carry > 0:\n            last = num.pop() if num else 0\n            cur = (carry + last + k%10)%10\n            carry = (carry + last + k%10)//10\n            k = k//10\n            ans.appendleft(cur)\n        return ans\n```\n\n## Complexity:\nTime: O(max(N, log_10(K)). N is the length of num array. Since we divide K by 10 every loop till K is zero, the complexity of this operation will be log base 10 of K.\nSapce: O(1). The space for carry, last is O(1). The space for the ans is O(max(N, log_10(K)).","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991976277","body":"## Idea\nArray to record position of the C. \n\n## Code\n```python\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        pos = []\n        for i in range(len(s)):\n            if s[i] == c:\n                pos.append(i)\n        \n        ans = []\n        p1, p2 = math.inf, math.inf\n        if len(pos) == 1:\n            p1 = 0\n        else:\n            p1 = 0\n            p2 = 1\n        for i in range(len(s)):\n            if p2 != math.inf and i > pos[p2] and p2<len(pos)-1:\n                p1 += 1\n                p2 += 1\n            if i <= pos[p1] or  p2 == math.inf:\n                ans.append(abs(pos[p1] - i))\n            else:\n                ans.append(min(abs(i - pos[p1]),abs(pos[p2] - i) ))\n        return ans\n```\n\n## Complexity:\nTime: O(N)\nSpace: O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993041736","body":"## Idea\nArray\n\n## Code\n```python\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.capacity = maxSize\n        self.cache = []\n\n    def push(self, x: int) -> None:\n        if len(self.cache) < self.capacity:\n            self.cache.append(x)\n\n    def pop(self) -> int:\n        if not self.cache:\n            return -1\n        return self.cache.pop()\n\n    def increment(self, k: int, val: int) -> None:\n        if len(self.cache) <= k:\n            for i in range(len(self.cache)):\n                self.cache[i] += val\n        else:\n            for i in range(k):\n                self.cache[i] += val\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n```\n\n## Complexity:\nTine: Push: O(1). Pop: O(1). Increment: O(min(K, N))\nSpace: O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zliu1413":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ts4331":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xueniuniu98":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"louxibai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kelh93":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qin-pan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xulli1996":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"beckyyu96":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"renxumei":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liangsen-zju":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hellowxwworld":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"asaoba":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jiahui-z":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"falsity":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"crystallatte":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhuzuojun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"atree716":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luoguanggit":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"abouty":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zippend":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tjuaachen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"goddessiu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangyingxuhalo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lemon-hoyoung":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huzizailushang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"25829365639":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liang233":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"neal0408":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991914566","body":"### 思路\r\n倒着 按位相加，大于 10进位。但是写的有点乱七八糟。\r\n\r\n### 代码\r\n```Python3\r\nclass Solution:\r\n\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        A = num[::-1]\r\n        B = []\r\n        # 将 k 变数组。\r\n        while k:\r\n            B.append(k % 10)\r\n            k = (k - k % 10) // 10\r\n\r\n        # A比 B 短的时候。\r\n        if len(A) < len(B):\r\n            A, B = B, A\r\n\r\n        # 把 B加到 A 中。\r\n        for i in range(len(B)):\r\n            A[i] = A[i] + B[i]\r\n\r\n        # A 中超过 10 的做进位，超过 A 长度的做列表添加。\r\n        for i in range(len(A)):\r\n            if A[i] >= 10:\r\n                if i < len(A) - 1:\r\n                    A[i + 1] = A[i + 1] + A[i] // 10\r\n                    A[i] = A[i] % 10\r\n                else:\r\n                    A.append(A[i] // 10)\r\n                    A[i] = A[i] % 10\r\n\r\n        return A[::-1]\r\n```\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992553389","body":"```Python3\nclass Solution:\n\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        prev = float('-inf')\n        ans = []\n        for i, x in enumerate(s):\n            if x == c:\n                prev = i\n            ans.append(i - prev)\n\n        prev = float('inf')\n        for i in range(len(s) - 1, -1, -1):\n            if s[i] == c:\n                prev = i\n            ans[i] = min(ans[i], prev - i)\n\n        return ans\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"taylucky":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jocelinlx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"vuesch":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992583311","body":"## 参考题解的中心扩展法\n## js代码\n```js\n/**\n * @param {string} S\n * @param {character} C\n * @return {number[]}\n */\nvar shortestToChar = function (S, C) {\n// 定义最终返回结果\n  var res = Array(S.length).fill(0);\n\n  for (let i = 0; i < S.length; i++) {\n    // 如果当前是目标字符，就什么都不用做\n    if (S[i] === C) continue;\n\n    // 定义两个指针 l, r 分别向左、右两个方向寻找目标字符 C，取最短距离\n    let l = i,\n      r = i,\n      shortest = Infinity;\n\n    while (l >= 0) {\n      if (S[l] === C) {\n        shortest = Math.min(shortest, i - l);\n        break;\n      }\n      l--;\n    }\n\n    while (r < S.length) {\n      if (S[r] === C) {\n        shortest = Math.min(shortest, r - i);\n        break;\n      }\n      r++;\n    }\n\n    res[i] = shortest;\n  }\n  return res;\n};\n```\n### 复杂度分析\n- 时间复杂度：O(n^2)\n\n- 空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yulecc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jax-van":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wenjialu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yohannjin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"codewithiris":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991714436","body":"### 思路\n\n\n模拟,将num和k从个位起逐位相加，最终然后反转vector即可。\n例如:  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num = [1, 2, 3, 4]  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k = 12  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-->ans = [6]  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-->ans = [6, 4]  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-->ans = [6, 4, 2]  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-->ans = [6, 4, 2, 1]  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-->ans = [1, 2, 4, 6] \n\n\n### 代码\n\n\n``` C++\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int> ans;\n        int n = num.size() - 1;\n        int flag = 0;\n        while(n >= 0 || k != 0){\n            int a = n < 0 ? 0 : num[n];\n            int b = k != 0 ? (k % 10) : 0;\n            int tmp = a + b + flag;\n            ans.push_back(tmp % 10);\n            flag = tmp / 10;\n            --n; k/=10;\n        }\n        if(flag != 0){\n            ans.push_back(flag);\n        }\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};\n\n```\n\n**复杂度分析**\n- 时间复杂度: O(max(n,len(k)),其中n是num的长度, len(k)是k的长度\n- 空间复杂度：O(n), n是ans的长度","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991940147","body":"### 思路\n\n\n&nbsp;&nbsp;初始化ans均为1.  \n&nbsp;&nbsp;第一次遍历字符串s，将ans中对应字符c的位置设置为0.    \n&nbsp;&nbsp;第二次遍历字符串s，遇到非字符c的便从左侧或者右侧寻找字符c，取最小值填入ans中.    \n\n\n### 代码\n\n\n``` C++\n\nclass Solution {\npublic:\n    void findC(string& s, int i, char c, vector<int>& ans){\n        int left = i - 1, right = i + 1, n = s.size();\n        while(left >= 0 || right < n){\n            if(left >= 0 && right < n){\n                if(s[left] == c || s[right] == c){\n                    ans[i] = right - i;\n                    return ;\n                }\n            }else if(left >= 0 && s[left] == c){\n                ans[i] = i - left;\n                return ;\n            }else if(right < n && s[right] == c){\n                ans[i] = right - i;\n                return ;\n            }\n            --left;\n            ++right;\n        }\n    }\n    vector<int> shortestToChar(string s, char c) {\n        int n = s.size();\n        vector<int> ans(n, 1);\n        for(int i = 0; i < n; ++i){\n            if(s[i] == c) ans[i] = 0;\n        }\n        for(int i = 0; i < n; ++i){\n            if(s[i] != c) findC(s, i, c, ans);\n        }\n        return ans;\n    }\n};\n\n```\n\n**复杂度分析**\n- 时间复杂度: O(n)\n- 空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-992857589","body":"### Note\n\n\n&nbsp;&nbsp;Use vector to store the data.\n&nbsp;&nbsp;Record the curIndex and execute the push, pop and increment operation through the curIndex.\n\n\n### Solution\n\n\n``` C++\n\nclass CustomStack {\npublic:\n    vector<int> stk;\n    int top, size;\n    CustomStack(int maxSize) {\n        stk.resize(maxSize);\n        size = maxSize;\n        top = -1;\n    }\n    \n    void push(int x) {\n        if(top != size -1){\n            ++top;\n            stk[top] = x;\n        }\n    }\n    \n    int pop() {\n        if(top == -1) return -1;\n        --top;\n        return stk[top + 1];\n    }\n    \n    void increment(int k, int val) {\n        for(int i = 0; i < min(top + 1, k); ++i){\n            stk[i] += val;\n        }\n    }\n};\n\n```\n\n**Complexity**\n- T: O(1) for push and pop operation, O(k) for increment operation\n- S: O(n): n is the 'maxSize'","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zwx0641":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991715965","body":"思路：\r\n从后往前遍历数组，k+num[i]的模就为结果数组的前一位，k /= 10\r\n存在遍历结束k还大于0的情况，用k/=10处理\r\n``` java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> ans = new ArrayList<>();\r\n        int i = num.length - 1;\r\n        while (i >= 0 || k > 0) {\r\n            if (i >= 0) {\r\n                k = num[i] + k;\r\n            }\r\n            ans.add(0, k % 10);\r\n            k/= 10;\r\n            i--;\r\n        }\r\n        return ans;\r\n    }\r\n}\r\n```\r\n时间O(n) 空间O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991928973","body":"思路：\n从前往后从后往前两次遍历\ntmp记录c出现的位置\n第一次遍历ans[i]存放s中i位置字符与前一个c的距离\n第二次遍历比较min(ans[i], s中i位置字符与后一个c的距离)\n``` java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int[] ans = new int[s.length()];\n        //Arrays.fill(ans, s.length() + 1);\n        int i = 0, j = s.length() - 1, tmp = -1;\n        while (i < s.length()) {\n            if (s.charAt(i) == c) {\n                ans[i] = 0;\n                tmp = i;\n            } \n            if (tmp != -1) {\n                ans[i] = i - tmp;\n            } else {\n                ans[i] = s.length() + 1;\n            }\n            \n            i++;\n        }\n        tmp = -1;\n        while (j >= 0) {\n            if (s.charAt(j) == c) {\n                ans[j] = 0;\n                tmp = j;\n            }\n            if (tmp != -1) ans[j] = Math.min(ans[j], tmp - j);\n            \n            j--;\n        }\n        \n        return ans;\n    }\n}\n```\n时间：O(n)\n空间：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-992640911","body":"思路：\n使用数组来存放作为CusStack，cur表示当前需要填的数组位置  \npush就转化为放入cur位置，pop就为获取cur-1位置的值  \ninc就为数组前k个数加上val  \n``` java\nclass CustomStack {\n    int[] stack;\n    int cur = 0;\n    public CustomStack(int maxSize) {\n        stack = new int[maxSize];\n    }\n    \n    public void push(int x) {\n        if (cur >= stack.length) {\n            return;\n        }\n        stack[cur] = x;\n        cur++;\n    }\n    \n    public int pop() {\n        if (cur == 0) {\n            return -1;\n        }\n        cur--;\n        return stack[cur];\n    }\n    \n    public void increment(int k, int val) {\n        for (int i = 0; i < k && i < cur; i++) {\n            stack[i] += val;\n        }\n    }\n}\n```\n时间：O(k) \n空间：O(maxSize)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wxj783428795":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991716414","body":"### 思路\r\n\r\n将K的每位与A的每位相加，如果大于10，则下一次相加要进位。\r\n\r\n### 代码\r\n```javascript\r\n/**\r\n * @param {number[]} num\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = function (num, k) {\r\n\r\n    let answer = []; \r\n    let carry = 0; // 进位\r\n    for (let i = 1; i <= num.length || k >= 1; i++) {\r\n        let num1 = num.length - i >= 0 ? num[num.length - i] : 0;\r\n        let num2 = k % 10;\r\n        let sum = num1 + num2 + carry; //每位的和记得加上上一位的进位\r\n        if (sum >= 10) { \r\n            answer.unshift(sum % 10);\r\n            carry = Math.floor(sum / 10)\r\n        } else {\r\n            answer.unshift(sum)\r\n            carry = 0\r\n        }\r\n        k = Math.floor(k / 10)\r\n    }\r\n    if (carry !== 0) { // 出循环后，如果最后进位不为0，则将进位添加到数组首位\r\n        answer.unshift(carry)\r\n    }\r\n    return answer;\r\n};\r\n```\r\n### 复杂度分析\r\n**复杂度分析不是很会，不一定对，如果有错，请指正。**\r\n- 时间复杂度：O(N)，其中 N 为 num 和 k 中较长的长度。\r\n- 空间复杂度：O(N)，其中 N 为 answer 的长度。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991931122","body":"### 思路\r\n\r\n第一次循环：找到s中所有c的下标。\r\n第二次循环：循环对比s中每个字符，到所有c的下标的距离，取其中的最小值放入answer中\r\n\r\n### 代码\r\n```javascript\r\n/**\r\n * @param {string} s\r\n * @param {character} c\r\n * @return {number[]}\r\n */\r\n\r\nvar shortestToChar = function (s, c) {\r\n    let indexs = []; // 存储所有c在s中的下标\r\n    let answer = []; // 存储结果\r\n    for (let i = 0; i < s.length; i++) { // 第一遍循环先找到所有c在s中的下标\r\n        if (c === s[i]) {\r\n            indexs.push(i)\r\n        }\r\n    }\r\n    for (let i = 0; i < s.length; i++) { // 第二遍循环\r\n        let distance = 0;\r\n        if (c === s[i]) { // 如果当前位等于c，则将0放入answer\r\n            answer.push(distance)\r\n        } else {\r\n            distance = Math.abs(i - indexs[0]);\r\n            for (let j = 1; j < indexs.length; j++) {// 循环判断当前位和每一个c的距离，取最小值\r\n                distance = Math.min(distance, Math.abs(i - indexs[j]));\r\n            }\r\n            answer.push(distance)\r\n        }\r\n    }\r\n    return answer;\r\n};\r\n```\r\n### 复杂度分析\r\n**复杂度分析不是很会，不一定对，如果有错，请指正。**\r\n- 时间复杂度：O(NM)，其中 N 为s的长度，M为s中c出现的次数。\r\n- 空间复杂度：O(N+M)，其中 N 为s的长度，M为s中c出现的次数。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-992645250","body":"### 思路\r\njs用数组模拟栈，可以直接用数组的push和pop方法表示栈的入栈和出栈\r\n\r\n### 代码\r\n```javascript\r\n/**\r\n * @param {number} maxSize\r\n */\r\nvar CustomStack = function (maxSize) {\r\n    this.values = [];\r\n    this.size = 0;\r\n    this.maxSize = maxSize;\r\n};\r\n\r\n/** \r\n * @param {number} x\r\n * @return {void}\r\n */\r\nCustomStack.prototype.push = function (x) {\r\n    if (this.size < this.maxSize) {\r\n        this.values.push(x);\r\n        this.size += 1;\r\n    }\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nCustomStack.prototype.pop = function () {\r\n    if (this.size) {\r\n        this.size -= 1;\r\n        return this.values.pop();\r\n    }\r\n    return -1;\r\n};\r\n\r\n/** \r\n * @param {number} k \r\n * @param {number} val\r\n * @return {void}\r\n */\r\nCustomStack.prototype.increment = function (k, val) {\r\n    let range = k < this.size ? k : this.size\r\n    for (i = 0; i < range; i++) {\r\n        this.values[i] += val;\r\n    }\r\n};\r\n```\r\n### 复杂度分析\r\n**复杂度分析不是很会，不一定对，如果有错，请指正。**\r\n- 时间复杂度：\r\n  - push ：O(1)，数组在末位添加元素，复杂度为O(1)。\r\n  - pop：O(1)，数组从末尾删除元素，复杂度为O(1)。\r\n  - increment：O(min(k,N))，其中N为数组长度，k为需要操作的元素数量。\r\n- 空间复杂度：O(N)，其中N为maxSize。","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"baddate":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991718618","body":"### 题目\n\n[https://leetcode-cn.com/problems/add-to-array-form-of-integer/](https://leetcode-cn.com/problems/add-to-array-form-of-integer/)\n\n### 思路\n\n基本的加减法思路，从最低位开始，逐位相加，大于10就进1位（直接在原数k上操作），把结果存到一个新的数组res中，\n如果最后k仍然大于0，说明最终结果位数大于两个加数，这时候再将k值加到结果数组res中，\n最后再翻转该数组即可得到最终结果。\n\n### 代码\n\n```cpp\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int> res;\n        int n = num.size();\n        for(int i = n-1;i >= 0;i--)\n        {\n            int temp = num[i] + k % 10;\n            k /= 10;\n            if(temp >= 10)\n            {\n                k++;\n                temp -= 10;\n            }\n            res.push_back(temp);\n        }\n        while(k > 0)\n        {\n            res.push_back(k % 10);\n            k /= 10;\n        }\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：O(N)，其中 N 为max(num数组长度，k的位数）。\n- 空间复杂度：O(N)，其中 N 为res数组长度。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992549533","body":"### **思路**\r\n\r\n两次遍历（正向&反向），取最小值\r\n\r\n### **代码**\r\n\r\n```cpp\r\nclass Solution {\r\npublic:\r\n    vector<int> shortestToChar(string s, char c) {\r\n        vector<int> res(s.length(),0);\r\n        int temp = INT_MIN/2;\r\n        for (int i=0;i<s.length();i++)\r\n        {\r\n            if(s[i]==c)\r\n            {\r\n                temp=i;\r\n            }\r\n            res[i]=i-temp;\r\n        }\r\n        temp = INT_MAX/2;\r\n        for (int i=s.length()-1;i>=0;i--)\r\n        {\r\n            if(s[i]==c)\r\n            {\r\n                temp=i;\r\n            }\r\n            res[i]=min(temp-i, res[i]);\r\n        }\r\n        return res;\r\n    }\r\n};\r\n```\r\n\r\n**复杂度分析**\r\n\r\n- 时间复杂度：O(N)，其中 N 字符串长度，遍历两次。\r\n- 空间复杂度：O(N)，N为res的大小","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"courtneyz94":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991738847","body":"```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        ans, i = [],len(num) -1\n        while k > 0 or i >= 0:\n            k,rmd = divmod(k + (num[i] if i >= 0 else 0),10)\n            ans.append(rmd)\n            i -= 1\n        return reversed(ans)\n```\n### Time Complexity O(n) , Space O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991977177","body":"```python\nclass Solution(object):\n    def shortestToChar(self, S, C):\n        prev = -len(S)\n        ans = []\n        for i in range(len(S)):\n            if S[i] == C: \n                prev = i\n            ans.append(i - prev)\n\n        prev = 2 * len(S)\n        for i in range(len(S) - 1, -1, -1):\n            if S[i] == C: \n                prev = i\n            ans[i] = min(ans[i], prev - i)\n\n        return ans\n```\ntime complexity: o(n) space complexity: o(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"feifan-bai":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991744742","body":"\n### 思路\n1. Add the k to the num array from the last digit\n2. Iterated with each digit to update the num array\n3. Deal with the carry situation(if need carry, num.insert(0, 0))\n\n\n*### 代码*\n\n```\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        i = len(num)-1\n\n        while k > 0:\n            num[i] += k\n            k, num[i] = num[i] // 10, num[i] % 10\n            i -= 1\n\n            if i < 0 and k!= 0:\n                num.insert(0, 0)\n                i = 0\n        return num\n\n```\n\n- *复杂度分析**\n- 时间复杂度：O(N), N = max(num,len(k)) \n- 空间复杂度：O(N), N = max(len(num), len(k))","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992022067","body":"### 思路\n\n1. Traverse from left to right, record the last position where c appears,  ans_l = i - prev_l\n2. Traverse from right to left, record the last position where c appears, ans_r = prev_r - i\n3. Final ans = min(ans_l, ans_r)\n\n*### 代码*\n\n```\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        prev_l,  prev_r = float('-inf'), float('inf')\n        ans = []\n        \n        for i, char in enumerate(s):\n            if char == c:\n                prev_l = i\n            ans.append(i - prev_l)\n        \n        for i in range(len(s)-1, -1, -1):\n            if s[i] == c:\n                prev_r = i\n            ans[i] = min(ans[i], prev_r - i)\n        \n        return ans\n\n```\n\n- *复杂度分析*\n- 时间复杂度：O(N), N = len(s)\n- 空间复杂度：O(N), N = len(ans)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993145847","body":"### 思路\n1. Using top, add[] array to record the top postion and increasement of stack.\n2. Push, if not reaching the limitation, top += 1, add new element\n3. Pop, if not empty, return original value of top + add[top]\n4. Increment, add[lim] + val\n\n*### 代码*\n\n```\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stk = [0] * maxSize\n        self.add = [0] * maxSize\n        self.top = -1\n        \n    def push(self, x: int) -> None:\n        if self.top != len(self.stk) - 1:\n            self.top += 1\n            self.stk[self.top] = x\n\n    def pop(self) -> int:\n        if self.top == -1: return -1\n        res = self.stk[self.top] + self.add[self.top]\n        if self.top != 0:\n            self.add[self.top-1] += self.add[self.top]\n        self.add[self.top] = 0\n        self.top -= 1\n        return res\n\n    def increment(self, k: int, val: int) -> None:\n        lim = min(k-1, self.top)\n        if lim >= 0:\n            self.add[lim] += val\n```\n\n- *复杂度分析*\n- 时间复杂度：O(1)\n- 空间复杂度：O(N), N = maxSize","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangnn2018":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991753962","body":"思路： 把数组num转换成整数，与k相加，再将得到的和转换成对应的数组\n代码：\nclass Solution(object):\n    def addToArrayForm(self, num, k):\n        \"\"\"\n        :type num: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        nn=0\n        '''\n        for i in reversed(range(len(num))):\n            nn = nn + 10 ** (len(num) - 1 - i) * num[i]\n        '''\n        for n in num:\n            nn = nn*10+n\n        sum=nn+k\n        strs=str(sum)\n        l=[]\n        for j in range(len(strs)):\n            l.append(int(strs[j]))\n        return l\n复杂度（不是很确定对不对.....）：\n时间复杂度：O(N)，N是num+k的位数\n空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991943786","body":"#### 思路\r\n先遍历`s`找到所有等于`c`的元素下标，并存在数组`lab`里，  \r\n再次遍历`s`计算所有元素的下标与数组`lab`里元素值的差的绝对值，取最小的一个。\r\n\r\n#### 代码\r\n  ```python\r\n      class Solution(object):\r\n      def shortestToChar(self, s, c):\r\n          \"\"\"\r\n          :type s: str\r\n          :type c: str\r\n          :rtype: List[int]\r\n          \"\"\"\r\n          lab=[]\r\n          for i in range(len(s)):\r\n              if s[i]==c:\r\n                  lab.append(i)\r\n\r\n          res=[0]*len(s)\r\n          for i in range(len(s)):\r\n              lab0 = [abs(j-i) for j in lab]\r\n              res[i]=min(lab0)\r\n          return res\r\n ```\r\n#### 复杂度\r\n时间复杂度：O(NM), N为数组`s`的长度, M为数组`lab`的长度。  \r\n空间复杂度：O(M), M为数组`lab`的长度，最差情况下等于数组`s`的长度。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-992851295","body":"#### 思路\r\n创建列表[]，对列表操作实现相关功能。\r\n\r\n#### 代码\r\n```python\r\nclass CustomStack(object):\r\n\r\n    def __init__(self, maxSize):\r\n        \"\"\"\r\n        :type maxSize: int\r\n        \"\"\"\r\n        self.maxSize = maxSize\r\n        self.stack = []\r\n\r\n\r\n    def push(self, x):\r\n        \"\"\"\r\n        :type x: int\r\n        :rtype: None\r\n        \"\"\"\r\n        if len(self.stack)<self.maxSize:\r\n            self.stack.append(x)\r\n\r\n\r\n    def pop(self):\r\n        \"\"\"\r\n        :rtype: int\r\n        \"\"\"\r\n        if len(self.stack)==0:\r\n            return -1\r\n        else:\r\n            return self.stack.pop(-1)\r\n\r\n\r\n    def increment(self, k, val):\r\n        \"\"\"\r\n        :type k: int\r\n        :type val: int\r\n        :rtype: None\r\n        \"\"\"\r\n        for i in range(min(k,len(self.stack))):\r\n            self.stack[i]=self.stack[i]+val\r\n\r\n\r\n\r\n# Your CustomStack object will be instantiated and called as such:\r\n# obj = CustomStack(maxSize)\r\n# obj.push(x)\r\n# param_2 = obj.pop()\r\n# obj.increment(k,val)\r\n```\r\n#### 复杂度\r\n* 时间复杂度: O(N), 由increment的遍历带来的；\r\n* 空间复杂度：O(N), 栈的生成占用的空间。","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"w-curiosity":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991771477","body":"### 思路\ntraverse each digit of the `num` and `k` in reverse order and do add operation\nreverse the list and return\n\n### 代码\n\n\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        int carry = 0;\n        int p = num.length - 1;\n        List<Integer> list = new LinkedList<>();\n        while( p >= 0 || k > 0 || carry > 0) {\n            int cur = k % 10 + carry;\n            if(p >= 0) {\n                cur += num[p];\n                p--;\n            }\n            list.add(cur % 10);\n            carry = cur / 10;\n            k = k / 10;\n        }\n        Collections.reverse(list);\n        return list;\n    }\n}\n\n\n```\n\n**复杂度分析**\n- TC = O(max(M,N)), M is the length of num, N is the numbers of digits of k\n- SC = O(1), use constant space","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991983018","body":"### 思路\niterate twice, from left to right, then from right to left, \nalways update the shortest distance\n\n### 代码\n\n\n```java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n\n        int len = s.length();\n        int loc = -20000;   // -2*10^4\n        char[] ch = s.toCharArray();\n\n        int[] ans = new int[len];\n        \n        // from left to right\n        for(int i = 0; i < len; ++i) {\n            if( ch[i]  == c ) {\n                loc = i;\n                ans[i] = 0;\n            } else {\n                ans[i] = i - loc;\n            }\n        }\n        \n        // from right to left\n        for(int i = len - 1; i >= 0; --i) {\n            if( ch[i]  == c ) {\n                loc = i;\n            } else {\n                ans[i] = Math.min(ans[i], Math.abs(loc - i));\n            }\n        }\n        \n        return ans;\n    }\n}\n\n```\n\n**复杂度分析**\n- Time Complexitty = O(N)\n- Space Complexitty = O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-992699387","body":"### 思路\nusing array to simulate stack\n\n### 代码\n\n\n```java\n\nclass CustomStack {\n\n    private int[] stack;\n    private int pointer;\n    private int maxSize;\n\n    public CustomStack(int maxSize) {\n        this.stack = new int[maxSize];\n        this.pointer = 0;\n        this.maxSize = maxSize;\n    }\n    \n    public void push(int x) {\n        if( pointer < maxSize ) {\n            stack[pointer] = x;\n            ++pointer;\n        }\n    }\n    \n    public int pop() {\n        if( pointer > 0 ) {\n            --pointer;\n            return stack[pointer];\n        } else {\n            return -1;\n        }\n    }\n    \n    public void increment(int k, int val) {\n        int min = Math.min(k, pointer);\n        for(int i = 0; i < min; i++) {\n            stack[i] += val;\n        }\n    }\n}\n\n```\n\n**复杂度分析**\n- Time Complexitty\n\t- SC = O(maxSize)\n\t- CustomStack O(1)\n\t- push TC = O(1)\n\t- pop TC = O(1)\n\t- increment TC = O(k)\n- Space Complexitty = O(maxSize)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yrtryannn":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991794054","body":"```\nclass Solution {\n    public List<Integer> addToArrayForm(int[] A, int K) {\n        List<Integer> res = new ArrayList<Integer>();\n        int n = A.length;\n        for(int i = n - 1;i >= 0;i--){\n            int sum = A[i] + K % 10;       \n            K /= 10;    \n            if(sum >= 10){\n                K++;                       \n                sum -= 10;                  \n            }\n            res.add(sum);\n        }\n        while (K > 0) {\n            res.add(K % 10);\n            K /= 10;\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992055428","body":"```\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        ArrayList<Integer> list = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == c) {\n                list.add(i);\n            }\n        }\n        if (list.isEmpty()) {\n            return new int[0];\n        }\n        int[] res = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            if (list.contains(i)) {\n                res[i] = 0;\n            } else {\n                res[i] = rearchMinDistance(i, list);\n            }\n        }\n        return res;\n    }\n\n    public int rearchMinDistance(int index, ArrayList<Integer> list) {\n        int minValue = 10000;\n        for (int i = 0; i < list.size(); i++) {\n            minValue = Math.min(minValue, Math.abs(index - list.get(i)));\n        }\n        return minValue;\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-992989378","body":"```\nclass CustomStack {\n\n    int[] data;\n    int head;\n\n    public CustomStack(int maxSize) {\n\n        data = new int[maxSize];\n        head = -1;\n    }\n    \n    public void push(int x) {\n\n        if (head == data.length - 1)\n            return;\n            \n        data[++head] = x;\n    }\n    \n    public int pop() {\n\n        if (head == -1)\n            return -1;\n\n        return data[head--];\n    }\n    \n    public void increment(int k, int val) {\n\n        for (int i = 0; i < Math.min(k, head + 1); i++)\n            data[i] += val;\n    }\n}\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zwmanman":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991814629","body":"### 思路\nCalculate the total sum in the array, each number * 10^idx.\nThen sum up with the k \nOut each digit in the total sum\n\n### 代码\n\n\n```python（此处换成你的语言，比如js，py 等）\nclass Solution(object):\n    def addToArrayForm(self, num, k):\n        \"\"\"\n        :type num: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n\n        idx = len(num) - 1\n        sum_num = 0\n        res = []\n        for number in num:\n            sum_num = number * (10**idx) + sum_num\n            idx -= 1\n            \n        sum_num += k\n        \n        for digit in (str(sum_num)):\n            res.append(int(digit))\n            \n        return res\n\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，需要遍历数组。\n- 空间复杂度：O(N)，存储返回的数组\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991959149","body":"### 思路\nIterate s and store index of c in a dictionary\nIterate s again and calculate the min diff of c index in dictionary \n\n### 代码\n\n\n```Python\nclass Solution(object):\n    def shortestToChar(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: List[int]\n        \"\"\"\n        dictC = {}\n        dictC[c] = []\n        res = []\n        \n        for i in range(len(s)):\n            if s[i] == c:\n                dictC[c].append(i)\n        \n        for i in range(len(s)):\n            res.append(min([abs(i - ele) for ele in dictC[c]]))\n            \n        return res\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(NM)，其中 N 为数组长度, M为dictionary长度。\n- 空间复杂度：O(N)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-992839893","body":"### 思路\n\nCreate a stack and a global variable to keep the max size\n\n### 代码\n\n\n```python（此处换成你的语言，比如js，py 等）\nclass CustomStack(object):\n\n    def __init__(self, maxSize):\n        \"\"\"\n        :type maxSize: int\n        \"\"\"\n        self.stack = []\n        self.maxEle = maxSize\n\n    def push(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: None\n        \"\"\"\n        if len(self.stack) < self.maxEle:\n            self.stack.append(x)\n\n    def pop(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        if len(self.stack) > 0:\n            return self.stack.pop()\n        else:\n            return -1\n\n    def increment(self, k, val):\n        \"\"\"\n        :type k: int\n        :type val: int\n        :rtype: None\n        \"\"\"\n        for i in range(min(len(self.stack), k)):\n            self.stack[i] += val\n\n\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(min(len(stack), k))，为增量k和数组长度中的较小值\n- 空间复杂度：O(Maxsize)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kmshui":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991820454","body":"```\nclass Solution(object):\n    def addToArrayForm(self, num, k):\n        \"\"\"\n        :type num: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        def num_to_lst(n):\n            result = []\n            while n:\n                result.append(n % 10)\n                n = n // 10\n\n            return result[::-1]\n        \n        k_lst = num_to_lst(k)\n        i = len(num) - 1\n        j = len(k_lst) - 1\n        \n        result = []\n        \n        carry = 0\n        while i >= 0 or j >= 0 or carry:\n            left = num[i] if i >= 0 else 0\n            right = k_lst[j] if j >= 0 else 0\n            \n            s = left + right + carry\n            result.append(s % 10)\n            carry = s // 10\n            \n            i -= 1\n            j -= 1\n            \n        return result[::-1]\n```\nTime: O(max(n, m))\nSpace: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992038994","body":"```\r\nclass Solution(object):\r\n    def shortestToChar(self, s, c):\r\n        \"\"\"\r\n        :type s: str\r\n        :type c: str\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        left = [float('inf') for _ in range(len(s))]\r\n        right = [float('inf') for _ in range(len(s))]\r\n        \r\n        cur_min = float('inf')\r\n        for i in range(len(s)):\r\n            if s[i] == c:\r\n                left[i] = 0\r\n                cur_min = 0\r\n            else:\r\n                cur_min += 1\r\n                left[i] = cur_min\r\n                \r\n        cur_min = float('inf')\r\n        for i in range(len(s)-1, -1, -1):\r\n            if s[i] == c:\r\n                right[i] = 0\r\n                cur_min = 0\r\n            else:\r\n                cur_min += 1\r\n                right[i] = cur_min\r\n                \r\n        result = [min(left[i], right[i]) for i in range(len(s))]\r\n        \r\n        return result\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993139062","body":"```\r\nclass CustomStack(object):\r\n\r\n    def __init__(self, maxSize):\r\n        \"\"\"\r\n        :type maxSize: int\r\n        \"\"\"\r\n        self.arr = [float('inf') for _ in range(maxSize)]\r\n        self.top = 0\r\n        self.size = maxSize\r\n        \r\n\r\n    def push(self, x):\r\n        \"\"\"\r\n        :type x: int\r\n        :rtype: None\r\n        \"\"\"\r\n        if self.top != self.size:\r\n            self.arr[self.top] = x\r\n            self.top += 1\r\n            \r\n        \r\n\r\n    def pop(self):\r\n        \"\"\"\r\n        :rtype: int\r\n        \"\"\"\r\n        if self.top == 0:\r\n            return -1\r\n        ret = self.arr[self.top-1]\r\n        self.top -= 1\r\n        return ret\r\n        \r\n\r\n    def increment(self, k, val):\r\n        \"\"\"\r\n        :type k: int\r\n        :type val: int\r\n        :rtype: None\r\n        \"\"\"\r\n        if self.top > 0:\r\n            for i in range(min(k, self.top)):\r\n                self.arr[i] += val\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"smilejohnson":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991822957","body":"1. 取 k 的最后一位 lastOfk\n2. 取 num 的最后一位 lastOfNum\n3. 如果 sum(lastOfNum + lastOfk + flag) 大于等于10，进位标记为1，将 sum(lastOfNum + lastOfk + flag) % 10 放置到 res 中\n4. 如果 sum(lastOfNum + lastOfk + flag) 小于10， 进位标记为0，将 sum(lastOfNum + lastOfk + flag) % 10 放置到 res 中\n5.  然后遍历完 num, k 并确保flag最后的值为 0\n\n``` java\nclass Solution {\n    // 取 k 的最后一位 lastOfk\n    // 取 num 的最后一位 lastOfNum\n    // 如果 sum(lastOfNum + lastOfk + flag) 大于等于10，进位标记为1，将 sum(lastOfNum + lastOfk + flag) % 10 放置到 res 中\n    // 如果 sum(lastOfNum + lastOfk + flag) 小于10， 进位标记为0，将 sum(lastOfNum + lastOfk + flag) % 10 放置到 res 中\n    // 然后遍历完 num, k 并确保flag最后的值为 0\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        LinkedList<Integer> res = new LinkedList<>();\n        // 遍历k\n        int index = num.length - 1; // num 的最后一位\n        int flag = 0; // 进位\n        int lastOfNum = 0;\n        int lastOfk = 0;\n        int sum = 0;\n        while (k > 0 && index >= 0) {\n            lastOfk = k % 10;\n            k /= 10;\n            lastOfNum = num[index--];\n            sum = lastOfk + lastOfNum + flag;\n            if (sum >= 10) {\n                flag = 1;\n                res.addFirst(sum % 10);\n            } else {\n                flag = 0;\n                res.addFirst(sum);\n            }\n        }\n        \n        while (k > 0) {\n            lastOfk = k % 10;\n            k /= 10;\n            sum = lastOfk + flag;\n            if (sum >= 10) {\n                flag = 1;\n                res.addFirst(sum % 10);\n            } else {\n                flag = 0;\n                res.addFirst(sum);\n            }\n           \n        }\n\n        while (index >= 0) {\n            lastOfNum = num[index--];\n            sum = lastOfNum + flag;\n            if (sum >= 10) {\n                flag = 1;\n                res.addFirst(sum % 10);\n            } else {\n                flag = 0;\n                res.addFirst(sum);\n            }\n        }\n\n        if (flag == 1) {\n            res.addFirst(1);\n        }\n\n        return res;\n    }\n}\n```\n\n---\n- Time: O(max(m,n)) \n- Space: O(m+n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992112172","body":"思路：字符串 s 中的两个 c 之间用双指针法算距离，第一个 c 和最后一个 c 直接循环计算\n---\n```java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        // 1. 统计 c 的个数并且将 c 对应的值置为0\n        char[] chs = s.toCharArray();\n        int length = chs.length;\n        int[] res = new int[length];\n        List<Integer> boundaries = new ArrayList<>();\n        for (int i = 0; i < length; i++) {\n            if (chs[i] == c) {\n                res[i] = 0;\n                boundaries.add(i);\n            } else {\n                res[i] = -1;\n            }\n        }\n        if (boundaries.isEmpty()) return res;\n        // 2. 值为0的下标，两两一对，利用双指针法将其范围内的值置为离其最近的举例\n        for (int i = 1; i < boundaries.size(); i++) {\n            getShortestDistance(res, boundaries.get(i - 1), boundaries.get(i));\n        }\n        // 3. 处理第一个0和最后一个0\n        int first = boundaries.get(0);\n        int value = 0;\n        while (first >= 0) {\n            res[first--] = value++;\n        }\n\n        int last = boundaries.get(boundaries.size() - 1);\n        value = 0;\n        while (last < length) {\n            res[last++] = value++;\n        }\n\n        return res;\n    }\n\n    // 计算数组在 [start,end] 范围内举例边界较短的举例\n    private void getShortestDistance(int[] nums, int start, int end) {\n        int value = 0;\n        while (start < end) {\n            nums[start++] = value;\n            nums[end--] = value;\n            value++;\n        }\n        if (start == end) nums[start] = value;\n    }\n}\n```\n---\n- Time: O(2N)\n- Space: O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993086622","body":"# 思路\n用数组模拟栈，从数组尾部添加、弹出，increase的时候，从第0个元素到第 min(k, arr.size) 元素增加 val\n\n# 代码\n```java\nclass CustomStack {\n    int capacity;\n    int count;\n    List<Integer> myStack;\n\n    public CustomStack(int maxSize) {\n        this.capacity = maxSize;\n        this.count = 0;\n        this.myStack = new LinkedList<>();\n\n    }\n\n    public void push(int x) {\n        if (this.count < this.capacity) {\n            this.count++;\n            this.myStack.add(x);\n        }\n    }\n\n    public int pop() {\n        if (this.count == 0) {\n            return -1;\n        }\n        // 弹出栈顶元素\n        int remove = this.myStack.remove(--this.count);\n        return remove;\n    }\n\n    public void increment(int k, int val) {\n        if (k > this.count) {\n            k = this.count;\n        }\n        for (int i = 0; i < k; i++) {\n            this.myStack.set(i, this.myStack.get(i) + val);\n        }\n    }\n}\n```\n\n# 复杂度\n- Time: O(N)\n- Space: O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hzgwebgit":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991824949","body":"思路\n数组尾数与k 逐项相加，大于10 则进位\n\n代码\n\nvar add = function(num, k) {\n    const res = [];\n    const len = num.length;\n    for (let i = len - 1; i >= 0; --i) {\n        let sum = num[i] + k % 10;\n        k = Math.floor(k / 10);\n        if (sum >= 10) {\n            k++;\n            sum -= 10;\n        }\n        res.push(sum);\n    }\n    for (; k > 0; k = Math.floor(k / 10)) {\n        res.push(k % 10);\n    }\n    res.reverse();\n    return res;\n};\n\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(1)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992185429","body":"思路\n找到C在S中的所有索引，通过对比S[i]在C Array中最小的偏移量得到结果更新arr[i]。\n\n代码\njavascript\nvar shortestToChar = function(s, c) {\n   const sArr = s.split('')\n   const len = sArr.length\n   const resArr = []\n   const arr = []\n   for(let i = 0;i<len;i++){\n       if(s[i] == c){\n          resArr.push(i) \n       }\n   }\n   for (let i = 0; i < len; i++) {\n       arr[i] =resArr.reduce((cur, item) => {\n            return Math.min(cur, Math.abs(i - item))\n        },100)\n    }\n    return arr\n};\n**复杂度分析**\n- 时间复杂度：O(MN)，其中N为S的length，M为C在S中的数量。\n- 空间复杂度：O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"brent-liu":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991825083","body":"### 思路\n\t1. 创造一个空列表，用来存储结果\n\t2. 取出num列表的每一个数字，按照位次和K对应的位次相加，如果超过10就进位，获得num和k在每一个位次上的和\n\t3. 将每一位次的和按照相应的顺序append到list中，就得到结果\n### 代码\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> res = new ArrayList<Integer>();\n        int n = num.length;\n        for (int i = n-1; i >= 0; --i){\n            int sum = num[i] + k % 10;\n            k /= 10;\n            if (sum >= 10){\n                k ++;\n                sum -= 10;\n            }\n            res.add(sum);\n        }\n        for (; k > 0; k /= 10){\n            res.add(k % 10);\n        }\n        Collections.reverse(res);\n        return res;    \n    }\n}\n```\n**复杂度分析**\n- 时间复杂度：O(max(O, logk)) \n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992112514","body":"### 思路\n\t1. 显示字符串s中存在字符c的位置i\n\t2. 从前往后遍历字符串s，记录每个位置从前往后数与i的距离\n\t3. 从后往前遍历字符串s，记录每个位置从后往前数与s的距离\n\t4. 取两个距离取最小值\n\n### 代码\nclass Solution {\n    public int[] shortestToChar(String S, char C) {\n        int N = S.length();\n        int[] ans = new int[N];\n        int prev = Integer.MIN_VALUE / 2;\n\n        for (int i = 0; i < N; ++i) {\n            if (S.charAt(i) == C) prev = i;\n            ans[i] = i - prev;\n        }\n\n        prev = Integer.MAX_VALUE / 2;\n        for (int i = N-1; i >= 0; --i) {\n            if (S.charAt(i) == C) prev = i;\n            ans[i] = Math.min(ans[i], prev - i);\n        }\n\n        return ans;\n    }\n}\n\n### 复杂度分析\n- 时间复杂度：O(N)\n- 空间复杂度：O(N)\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hdyhdy":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991825388","body":"思路：\n首先设立一个存放答案的切片。\n接着让数据数组从最后一位开始向前遍历，同时与k数的余数相加。\n相加完判断该值的大小，如果大于十输入到答案切片的时候要减十。\n最后再对答案切片做一个反转。\n\n```\nfunc addToArrayForm(num []int, k int) []int {\n    ans := make([]int,0)\n    for i := len(num) - 1; i >=0; i -- {\n        tem := num[i] + k % 10\n        k = k / 10\n        if tem >= 10 {\n            ans = append(ans,tem - 10)\n            k ++ \n        }else {\n            ans = append(ans,tem )\n        }   \n    }\n    for ; k > 0; k /= 10 {\n        ans = append(ans, k%10)\n    }\n    reverse(ans)\n    return ans \n}\n\nfunc reverse(num []int) {\n    for i, n := 0, len(num); i < n/2; i++ {\n        num[i], num[n-1-i] = num[n-1-i], num[i]\n    }\n}\n```\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992030869","body":"思路：两次遍历，前后遍历，设立更新目标字符的位置。然后在两次遍历得出的相对位置中找到最小值。\n```\nfunc shortestToChar(s string, c byte) []int {\n    n := len(s)\n    res := make([]int, n)\n    left, right := math.MinInt32/2, math.MaxInt32/2\n\n    for i :=0; i < n ;i++ {\n        if s[i] == c{\n            left = i\n        } \n        res[i] = i - left\n    }\n    for i := n-1;i >= 0;i -- {\n        if s[i] == c {\n            right = i\n        }\n        res[i] = min(res[i], right-i)\n    }\n    return res\n}\n\nfunc min(a, b int) int {\n    if a > b {\n        return b\n    }else {\n        return a\n    }\n}\n```\n时间空间复杂度都为n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993081170","body":"思路：结构体添加一个变量c，用于记录需要操作的位置。push和pop需要注意的地方在注意变量c在不同值的情况下操作是不一样的。\n```\ntype CustomStack struct {\n    stack []int\n    c int\n}\n\n\nfunc Constructor(maxSize int) CustomStack {\n    return CustomStack{\n        stack : make([]int,maxSize),\n        c : 0,\n    }\n}\n\n\nfunc (this *CustomStack) Push(x int)  {\n    if this.c < len(this.stack){\n        this.stack[this.c] = x\n        this.c ++ \n    }\n}\n\n\nfunc (this *CustomStack) Pop() int {\n    if this.c != 0 {\n\t\tthis.c--\n\t\treturn this.stack[this.c]\n\t}\n\treturn -1\n}\n\n\nfunc (this *CustomStack) Increment(k int, val int)  {\n    if k > this.c {\n\t\tfor i := 0; i < this.c; i++ {\n\t\t\tthis.stack[i] += val\n\t\t}\n\t} else {\n\t\tfor i := 0; i < k; i++ {\n\t\t\tthis.stack[i] += val\n\t\t}\n\t}\n\n}\n\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * obj := Constructor(maxSize);\n * obj.Push(x);\n * param_2 := obj.Pop();\n * obj.Increment(k,val);\n */\n```\n复杂度：\n时间：初始化、Pop和Push都为1，inc循环，所以最多为k\n空间：创建了maxsize大小的，所以空间为maxsize","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"simbafl":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991825575","body":"-- java版\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> res = new ArrayList<Integer>();\r\n        int n = num.length;\r\n        for(int i=n-1;i>=0;--i){\r\n            int sum = num[i] + k % 10;\r\n            k = k /10;\r\n            if(sum >= 10){\r\n                k += 1;\r\n                sum -=10;\r\n            }\r\n            res.add(sum);\r\n        }\r\n        for(; k>0; k/=10){\r\n            res.add(k%10);\r\n        }\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n}\r\n```\r\n-- python版\r\n```py\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        res = []\r\n        for i in range(len(num)-1, -1, -1):\r\n            k += num[i] \r\n            res.insert(0, k%10)\r\n            k //= 10\r\n        while k:\r\n            res.insert(0, k%10)\r\n            k //= 10\r\n        return res\r\n```\r\n\r\n```py\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        res = []\r\n        for n in num[::-1]:\r\n            k += n \r\n            res.insert(0, k%10)\r\n            k //= 10\r\n        while k:\r\n            res.insert(0, k%10)\r\n            k //= 10\r\n        return res\r\n```\r\n说到底还是遍历，时间复杂度：O(max(k, len(num)))","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992440289","body":"-- java\r\n```java\r\nclass Solution {\r\n    public int[] shortestToChar(String s, char c){\r\n        int n = s.length();\r\n        int[] ans = new int[n];\r\n        int prev = Integer.MIN_VALUE / 2;\r\n        for(int i=0;i<n;++i){\r\n            if(s.charAt(i) == c){prev = i;}\r\n            ans[i] = i - prev;\r\n        }\r\n        prev = Integer.MAX_VALUE / 2;\r\n        for(int i=n-1; i>=0; --i){\r\n            if (s.charAt(i) == c){prev = i;}\r\n            ans[i] = Math.min(ans[i], prev-i);\r\n        }\r\n        return ans;\r\n    }\r\n}\r\n```\r\n\r\n-- python\r\n```py\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        prev = float('-inf')\r\n        ans = []\r\n        for i, x in enumerate(s):\r\n            if x == c:\r\n                prev = i \r\n            ans.append(i-prev)\r\n        prev = float('inf')\r\n        for j in range(len(s)-1, -1, -1):\r\n            if s[j] == c:\r\n                prev = j\r\n            ans[j] = min(ans[j], prev-j)\r\n        return ans\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rzhao010":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991825675","body":"**思路：**\r\nAdding up by digits.\r\nIn the array, we start from the very end element.\r\nFor the integer k, each time we use the last digit (k % 10),\r\nif the sum is bigger than 9, add 1 to k(so we don't need another var to record it).\r\nAfter the loop, deal with the case k > 0 (maybe k is too big or we have addup).\r\n\r\n**代码**\r\n```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> res = new ArrayList<>();\r\n        int n = num.length;\r\n        for (int i = n - 1; i >= 0; i--) {\r\n            int sum = num[i] + k % 10;\r\n            k /= 10;\r\n            if (sum > 9) {\r\n               k += 1;\r\n               sum -= 10;\r\n            }\r\n            res.add(sum);\r\n        }\r\n        for (; k > 0; k /= 10) {\r\n            res.add(k % 10);\r\n        }\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n}\r\n```\r\n\r\n**Time Complexity**\r\nTime: O(n), one for loop; \r\nSpace: O(n), use one arraylist","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991971762","body":"**Thoughts**\r\n1. Get all indices of c, go through s to compare i with indices of c\r\n2. Traverse s from head and tail side, record the last index of c , so `i - prev` and `prev - i` is the distance for each traverse, at last compare and select the smaller one\r\n\r\n**Code**\r\n```java\r\n    public int[] shortestToChar(String s, char c) {\r\n        int n = s.length();\r\n        ArrayList<Integer> list = new ArrayList<>();\r\n        int[] res = new int[n];\r\n        int p = 0; \r\n        for (int i = 0; i < n; i++) {\r\n            if (s.charAt(i) == c) {\r\n                list.add(i);\r\n            }\r\n        }\r\n        for (int i = 0; i < n; i++) {\r\n            if (p < list.size() - 1 && Math.abs(list.get(p) - i) > Math.abs(list.get(p + 1) - i)) {\r\n                p++;\r\n            }\r\n            res[i] = Math.abs(list.get(p) - i);\r\n        }\r\n        return res;\r\n    }\r\n```\r\n\r\n```java\r\n    public int[] shortestToChar(String s, char c) {\r\n        int n = s.length();\r\n        int[] res = new int[n];\r\n        // in case out of boundry \r\n        int prev = Integer.MIN_VALUE / 2;\r\n        for (int i = 0; i < n; i++) {\r\n            if (s.charAt(i) == c) {\r\n                prev = i;\r\n            }\r\n            res[i] = i - prev;\r\n        }\r\n        prev = Integer.MAX_VALUE / 2;\r\n        for (int i = n - 1; i >= 0; i--) {\r\n            if (s.charAt(i) == c) {\r\n                prev = i;\r\n            }\r\n            res[i] = Math.min(prev - i, res[i]);\r\n        }\r\n        return res;\r\n    }\r\n```\r\n**Time Complexity**\r\n* Time: O(n)\r\n* Space: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-992900427","body":"**Thoughts**\r\n\r\nUsing two stack to stimulate the customStack, so for PUSH and POP, we can just go with the same operations. The second Stack will be used to hold the POP of first Stack, then we use an var to count and compare with k.\r\n\r\n**Code**\r\n\r\n```java\r\n    Stack<Integer> stack;\r\n    Stack<Integer> stack2 = new Stack<Integer>();\r\n    int s;\r\n\r\n    public CustomStack(int maxSize) {\r\n        stack = new Stack<Integer>();\r\n        s = maxSize;\r\n    }\r\n    \r\n    public void push(int x) {\r\n        if (stack.size() < s) {\r\n            stack.push(x);\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n    \r\n    public int pop() {\r\n        if (stack.size() == 0) {\r\n            return -1;\r\n        }\r\n        return stack.pop();\r\n    }\r\n    \r\n    public void increment(int k, int val) {\r\n        int count = 0;\r\n        if (k > stack.size()) {\r\n            while (stack.size() > 0) {\r\n                int tmp = stack.pop();\r\n                stack2.push(tmp + val);\r\n            }\r\n            while (stack2.size() > 0) {\r\n                int tmp = stack2.pop();\r\n                stack.push(tmp);\r\n            }\r\n        } else {\r\n            while (stack.size() > 0) {\r\n                int tmp = stack.pop();\r\n                stack2.push(tmp);\r\n            }\r\n            while (stack2.size() > 0) {\r\n                int tmp = stack2.pop();\r\n                count++;\r\n                if (count <= k) {\r\n                    stack.push(tmp + val);\r\n                } else {\r\n                    stack.push(tmp);\r\n                }\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n**Time Complexity**\r\n* Time: PUSH and POP O(1), increment O(k)\r\n* Space: O(n), n is the size of the stack","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sendsproject":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991825885","body":"思路：使用数列式两数相加模板，注意carry 的进位和取模操作 \r\n\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        p1 = len(num) -1 \r\n        carry = 0 \r\n        results = []\r\n        while p1 >=0 or k != 0 or carry>0:\r\n            add1 = num[p1] if p1 >=0 else 0 \r\n            add2 = k %10\r\n            sum = add1 + add2 + carry\r\n            carry = 1 if sum >= 10 else 0\r\n            sum = sum - 10 if sum >= 10 else sum\r\n            results.append(sum)\r\n            p1 -= 1\r\n            k //= 10\r\n        return results[::-1]\r\n\r\n时间复杂度 O(N)\r\n空间复杂度 O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991972064","body":"解题思路：\r\n\r\n方法1： \r\n\r\n遍历列表两次，第一次遍历的时候储存所有c字符出现的位置，第二次遍历计算距离c字符下标的距离\r\n\r\n```python\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        #pos 储存每个c出现的位置\r\n        pos, res = [],[]\r\n        for i in range(len(s)):\r\n            if s[i]==c:\r\n                pos.append(i)\r\n        \r\n        #p指针在pos数组\r\n        p =0\r\n        # 再次遍历字符串\r\n        for i in range(len(s)):\r\n            # 如果当前i 小于pos[0],说明这个字符出现在第一个c字符的前面\r\n            # 那么直接用pos[0] - i \r\n            #这里pos[0] 储存的是character c 在S中出现的下标， 所以可以直接减\r\n            if i < pos[0]:\r\n                res.append(pos[0]-i)\r\n            # 如果当前i大于pos最后一个位置，说明这个字符出现在最后一个c字符的后面\r\n            #那么直接用i-pos[-1]\r\n            elif i > pos[-1]:\r\n                res.append(i - pos[-1])\r\n            # 如果就是字符就是c，那么数值为0，同时给p+1 为下一步做准备\r\n            elif i == pos[p]:\r\n                res.append(0)\r\n                p+=1\r\n            ##在两个c之间，所以返回距离的最小值\r\n            else:\r\n                res.append(min(pos[p]-i,i-pos[p-1]))\r\n        return res\r\n```\r\n\r\n时间复杂度O(N)\r\n空间复杂度O(N)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993157125","body":"暴力解，前缀和没看懂答案 -贴一个暴力解答案\r\n\r\n```python\r\nclass CustomStack(object):\r\n\r\n    def __init__(self, maxSize):\r\n        self.st = []\r\n        self.count = 0\r\n        self.maxSize = maxSize\r\n\r\n    def push(self, x):\r\n        if self.count <self.maxSize:\r\n            self.st.append(x)\r\n            self.count+=1\r\n\r\n    def pop(self):\r\n        if self.count==0:\r\n            return -1\r\n        self.count-=1\r\n        return self.st.pop()\r\n\r\n    def increment(self, k, val):\r\n        for i in range(0, min(self.count,k)):\r\n            self.st[i]+= val\r\n\r\n\r\n时间复杂度O(1), increment -- O(N)\r\n空间复杂度O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luoxingbiao":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991828392","body":"**思路：**\n\n各位相加，从低到高位计算。nums数组从nums.length-1的位置开始遍历，每次遍历都与当前k的个位值相加，并加上当前一个进位值，\n在判断是否大于9，更新进位值。\n\n细节处理：当k的位数大于nums.length时，在遍历完nums数组后还要处理剩下的k，直到k为0。如果最后进位值为一，要在ans数组头部加1。\n\n**代码：**\n```\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        \n        List<Integer> ans = new LinkedList<Integer>();\n\n        int jinwei = 0;\n        for(int i = num.length - 1;i >= 0;i--){\n            int a = num[i] + (k % 10) + jinwei;\n            if(a >= 10){\n                jinwei = 1;\n                a %= 10;\n            }\n            else{\n                jinwei = 0;\n            }\n            ans.add(0,a);\n            k = k / 10;\n        }\n\n        while(k != 0){\n            if(jinwei != 0){\n                int a = (k % 10) + jinwei;\n                if(a >= 10){\n                    jinwei = 1;\n                    a %= 10;\n                }\n                else{\n                    jinwei = 0;\n                }\n                ans.add(0, a);\n            }\n            else{\n                ans.add(0, k % 10);\n            }\n\n            k = k / 10;\n\n        }\n\n        if(jinwei != 0){\n            ans.add(0,1);\n        }\n\n        return ans;\n\n\n    }\n}\n```\n\n**复杂度**\n\n时间复杂度：O(max(nums.length,len(k))),因为List是用LinkedList实现，所以在链表头部插入元素的时间复杂度为O(1)。\n\n空间复杂度：O(ans.size())。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992063676","body":"**思路：**\n\n双指针法，left表示当前字符左边第一个字符c的位置，right表示当前字符右边第一个字符c的位置。遍历该字符串，计算每个字符到left和right的距离，把较小值存在ans数组对应位上。当i大于right时，更新left和right的值。\n\n细节处理：当right == length，只有左侧有字符c，对每个元素只需计算abs(i - left)。\n\n**代码**\n```\nclass Solution {\n\n    public int[] shortestToChar(String s, char c) {\n        int length = s.length();\n        int[] ans = new int[length];\n        int left = 0, right = 1;\n        while(left < length && s.charAt(left) != c){\n            left++;\n        }\n        while(right < length && s.charAt(right) != c){\n            right++;\n        }\n\n        for(int i = 0;i < length;i++){\n            if(i > right){\n                if(right != length){\n                    left = right;\n                    right++;\n                    while(right < length && s.charAt(right) != c){\n                        right++;\n                    }\n                }\n            }\n\n            if(right == length){\n                ans[i] = Math.abs(left - i);\n            }\n            else{\n                ans[i] = Math.min(Math.abs(left-i),Math.abs(right - i));\n            }\n        }\n\n        return ans;\n\n    }\n}\n```\n\n**复杂度分析**\n\n时间复杂度:O(n) 只需要遍历一遍字符串且s.charAt()的复杂度为O(1)。\n空间复杂度:O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993108546","body":"**思路**\n\n用一个数组模拟栈，top指针指向当前栈顶。\n\n**代码**\n\n```\nclass CustomStack {\n\n    int[] data;\n    int top;\n    public CustomStack(int maxSize) {\n        data = new int[maxSize];\n        top = -1;\n    }\n    \n    public void push(int x) {\n        if(top < data.length - 1){\n            data[++top] = x;\n        }\n    }\n    \n    public int pop() {\n        int peek = -1;\n        if(top >= 0){\n            peek = data[top--];\n        }\n        return peek;\n    }\n    \n    public void increment(int k, int val) {\n        for(int i = 0; i < Math.min(k, top + 1);i++){\n            data[i] += val;\n        }\n    }\n}\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack obj = new CustomStack(maxSize);\n * obj.push(x);\n * int param_2 = obj.pop();\n * obj.increment(k,val);\n */\n```\n\n**复杂度**\n\n时间复杂度：push(),pop()在O(1)时间内完成，increment在O(n)的时间内完成。故时间复杂度为O(n)。\n空间复杂度：O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"linyang4":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991828416","body":"## 代码\n```JavaScript\nconst addToArrayForm = (num, k) => {\n    const result = []\n    let carry = 0 // 是否进位\n    for(let i = num.length - 1; i >= 0 || k > 0; i--) {\n        const numItem = num[i] || 0\n        let sum = numItem + (k % 10) + carry\n        if (sum >= 10) {\n            sum = sum - 10\n            carry = 1\n        } else {\n            carry = 0\n        }\n        k = Math.floor(k / 10)\n        result.push(sum)\n    }\n    if (carry === 1) {\n        result.push(1)\n    }\n    return result.reverse()\n};\n```\n\n## 复杂度分析\nM是num的长度, N是k的长度\n- 时间复杂度: O(max(M, logN))\n- 空间复杂度: O(max(M, N))\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992359109","body":"## 思路\r\n1. 创建一个index数组, 用于记录字符 c 在字符串 s 中出现的所有位置\r\n2. 循环字符串 s, 计算 s 中的每一个字符与 index 数组中的每一个 index 相减的绝对值, 然后取所有绝对值中最小的一个作为该字符与目标字符 c 的最短路径\r\n\r\n## 代码\r\n```JavaScript\r\nconst shortestToChar = (s, c) => {\r\n    const result = []\r\n    const cIndexs = []\r\n    // 第一次循环, 记录c在s中所有的位置\r\n    for(let i = 0; i < s.length; i++) {\r\n        if (s[i] === c) {\r\n            cIndexs.push(i)\r\n        }\r\n    }\r\n    // 第二次循环, 计算最短距离\r\n    for (let i = 0; i < s.length; i++) {\r\n        if (s[i] === c) { \r\n            result.push(0)\r\n        } else {\r\n            let minDis =  Math.abs(cIndexs[0] - i)\r\n            for(let j = 1; j < cIndexs.length; j++) {\r\n                const dis = Math.abs(cIndexs[j] - i)\r\n                if (minDis > dis) {\r\n                    minDis = dis\r\n                }\r\n            }\r\n            result.push(minDis)\r\n        }\r\n    }\r\n    return result\r\n};\r\n```\r\n\r\n## 复杂度\r\n- 时间复杂度: O(M*N), N为字符串 s 的长度, M为字符 c 在字符串 s 中出现的次数\r\n- 空间复杂度: O(N), N为字符 c 在字符串 s 中出现的次数","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993102889","body":"## 思路\n1. 构造函数: 创建数组保存栈的值, 并且创建一个变量用于记录数组最大容纳数量\n2. push操作: 先比较数组的长度和最大容纳数量, 如果2个值相等, 不进行任何操作, 否则把数据添加到数组末尾\n3. pop操作: 先判断数组是否为空, 为空就返回-1, 否则移除数组最后一位的数据并返回\n4. inc操作: 取数组的长度和k中较小的进行遍历, 然后进行加等操作\n\n## 代码\n```JavaScript\nvar CustomStack = function(maxSize) {\n    this._data = []\n    this._maxSize = maxSize\n};\n\nCustomStack.prototype.push = function(x) {\n    if (this._data.length !== this._maxSize) {\n        this._data.push(x)\n    }\n};\n\nCustomStack.prototype.pop = function() {\n    if (this._data.length !== 0) {\n        return this._data.pop()\n    } else {\n        return -1\n    }\n};\n\nCustomStack.prototype.increment = function(k, val) {\n    for(let i = 0; i < Math.min(k, this._data.length); i++) {\n        this._data[i] = this._data[i] + val\n    }\n};\n```\n\n## 复杂度\n### 时间复杂度\n- push: O(1)\n- pop: O(1)\n- inc: O(min(K, N)),","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"charlestang":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991829254","body":"思路：\r\n从最后一位开始，模拟竖式加法，逐位向前求和。\r\n\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        n = len(num)\r\n        p = n - 1\r\n        carry = 0\r\n        while k > 0 or p >= 0:\r\n            last = k % 10\r\n            new = carry + last + (num[p] if p >= 0 else 0)\r\n            if p >= 0:\r\n                num[p] = new % 10\r\n            else:\r\n                num.insert(0, new % 10)\r\n            carry = new // 10\r\n            k = k // 10\r\n            p = p - 1\r\n        if carry == 1:\r\n            num.insert(0, 1)\r\n        return num\r\n```\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992080862","body":"## 思路\n1. 找出 c 的下标的数组，复杂度 O(n) 遍历一次，这个下标数组是天然有序的；\n2. 从头开始，每个字母的下标去 1 里找出的下标数组里找插入位置，然后比较两侧的距离，选小的。复杂度  O(n log(n))\n总体复杂度 n log(n)\n\n## 代码\n```python\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        indices = [i for i, ci in enumerate(s) if ci == c]\n        res = []\n        for i, ch in enumerate(s):\n            if ch == c:\n                res.append(0)\n            else:\n                insert = bisect.bisect_left(indices, i)\n                cur = insert if insert < len(indices) else insert - 1\n                pre = insert - 1 if insert > 0 else 0\n                res.append(min(abs(i-indices[cur]), abs(i-indices[pre])))\n        return res\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993204166","body":"###  思路\n\n用两个变量记录最大值和当前长度。\n\n### 代码\n```python\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.curSize = 0\n        self.stack = []\n\n\n    def push(self, x: int) -> None:\n        if self.curSize < self.maxSize:\n            self.stack.append(x)\n            self.curSize += 1\n\n    def pop(self) -> int:\n        if self.curSize > 0:\n            self.curSize -= 1\n            return self.stack.pop()\n        else:\n            return -1\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(min(k, self.curSize)):\n            self.stack[i] += val\n\n```\n\n**复杂度分析**\n\n时间复杂度，push 和 pop 都是 O(1)\ninc 复杂度是 O(k)\n空间复杂度是 O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"flower-f":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991829635","body":"### 解题思路\n题型：模拟\n思路：模拟加法运算，大于或等于 10 就向前进位\n\n### 代码\n\n```typescript\nfunction addToArrayForm(num: number[], k: number): number[] {\n    let carry = 0; // 记录进位\n    let i = num.length - 1; // 记录当前 num 数字的指针\n    const res = []; // 结果\n\n    // 当 i >= 0 或 k > 0 或 carry > 0 的时候，说明需要继续进行加法\n    while(i >= 0 || k > 0 || carry > 0) {\n        const k_add = k > 0 ? k % 10 : 0; // k 提供的加数\n        const num_add = i >= 0 ? num[i] : 0; // num 提供的加数\n        const sum = k_add + num_add + carry; // 求和\n        res.push(sum % 10); // 存储结果\n        carry = Math.floor(sum / 10); // 计算进位\n\n        i--;\n        k = Math.floor(k / 10);\n    }\n\n    return res.reverse();\n};\n```\n\n### 复杂度\n时间：O(max(n, m))\n空间：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992054660","body":"### 解题思路\n使用双指针，因为对于一个点来说，影响距离的字符 c 最多只有两个（当两个 c 在该点的不同方向）。\n具体思路见代码注释。\n\n### 代码\n\n```typescript\nfunction shortestToChar(s: string, c: string): number[] {\n    const arr: number[] = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === c) {\n            arr.push(i); // 存储所有的字符 c 位置\n        }\n    }\n\n    const res: number[] = [];\n    let cur = 0; // 当前选择的下标\n    let index1, index2; // 双指针\n    if (arr.length === 1) {\n        index1 = index2 = arr[0];\n    } else {\n        index1 = arr[cur], index2 = arr[++cur];\n    }\n\n    for (let i = 0; i < s.length; i++) {\n        // 当超越了 index2 指针的时候，就需要交换指针了\n        // 此处需要考虑数组边界\n        if (i > index2 && cur + 1 <= arr.length - 1) {\n            index1 = index2;\n            index2 = arr[++cur];\n        }\n\n        const dist1 = Math.abs(index1 - i);\n        const dist2 = Math.abs(index2 - i);\n        res.push(Math.min(dist1, dist2));\n    }\n\n    return res;\n};\n```\n\n### 复杂度\n时间复杂度 O(n)\n空间复杂度 O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993190380","body":"### 解题思路\n使用数组模拟栈\n\n### 代码\n\n```typescript\nclass CustomStack {\n    maxSize: number;\n    stack: number[];\n\n    constructor(maxSize: number) {\n        this.maxSize = maxSize;\n        this.stack = [];\n    }\n\n    push(x: number): void {\n        if(this.stack.length < this.maxSize) {\n            this.stack.push(x);\n        }\n    }\n\n    pop(): number {\n        if (this.stack.length === 0) {\n            return -1;\n        }\n        return this.stack.pop();\n    }\n\n    increment(k: number, val: number): void {\n        let needPop = Math.min(k, this.stack.length); // 需要弹出栈顶的元素数量\n\n        for(let i = 0; i < needPop; i++) {\n            this.stack[i] = this.stack[i] + val;\n        }\n    }\n}\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */\n```\n\n### 复杂度\n时间 O(k)\n空间 O(maxSize)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gaominghao":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991829645","body":"### 思路\n本来的思路是直接算，然后翻转，遇到几个问题\n1. 数据会超过int的范围，需要用BigInteger(Java)\n2. 循环次数过多\n然后看了题解，将k当成一个整体与每一位运算\n### 代码\n\n\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n\t\tList<Integer> result = new ArrayList<>();\n\t\tfor(int i = num.length - 1; i >= 0; i--) {\n\t\t\tint temp = (num[i] + k) % 10;\n\t\t\tk = (k + num[i])/10;\n\t\t\tresult.add(temp);\n\t\t}\n\t\twhile(k!=0) {\n\t\t\tresult.add(k%10);\n\t\t\tk = k/10;\n\t\t}\n\t\tCollections.reverse(result);\n\t\treturn result;\n    }\n}\n```\n\n**复杂度分析**\n- 时间复杂度：O(Max(N,logK))，其中 N 为数组长度。\n- 空间复杂度：O(1)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992082947","body":"### 思路\n粗暴做法，直接选出所有的C，然后一个个比较，取最小值，看题解之后发现可以先找出在右边的最小值，再找出在左边的最小值\n\n### 代码\n```java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n\t\tint N = s.length();\n\t\tint[] ans = new int[N];\n\t\tint pre = -N;\n\t\tfor(int i = 0; i<N;i++) {\n\t\t\tif(s.charAt(i) == c) pre = i;\n\t\t\tans[i] = i-pre;\n\t\t}\n\t\tpre = 2*N;\n\t\tfor(int i = N-1; i>=0;i--) {\n\t\t\tif(s.charAt(i) == c) pre = i;\n\t\t\tans[i] = Math.min(ans[i],pre-i);\n\t\t}\n\t\treturn ans;\n    }\n}\n\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(1)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993123932","body":"### 思路\n栈具有先进后出的特性，可以用数组来实现\n### 代码\n```java\nclass CustomStack {\n    int[] stack;\n    int maxSize = 0;\n    int size = 0;\n\n    public CustomStack(int maxSize) {\n        this.stack = new int[maxSize];\n        this.maxSize = maxSize;\n    }\n    \n    public void push(int x) {\n        if(size<maxSize) {\n            this.stack[size] = x;\n            size++;\n        }\n    }\n    \n    public int pop() {\n        if(size>0) {\n            int result = stack[size -1];\n            size --;\n            return result;\n        }\n        return -1;\n    }\n    \n    public void increment(int k, int val) {\n        for(int i = 0; i < k && i<size; i++) {\n            stack[i] = stack[i]+ val;\n        }\n    }\n}\n```\n### 时空复杂度\n时间复杂度\npush O(1) pop O(1) increment O(min(K,N))\n空间复杂度\nO(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"awesomelittle76":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991830816","body":"思路\n大整数的存储\n从高位到低位存，方便进位\n例：123456789 -> [9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n相加\n用代码模拟两数相加\n[A3, A2, A1, A0] + [B2, B1, B0]\n-> C0 = A0 + B0 如果 C0 > 10，则进位\n-> C1 = A1 + B1 + t(有进位则为1，否则为0)\n-> C2 = A2 + B2 + t\n-> C3 = A2 + t\n\nTS语法部分\nTS中的Number数据类型并不是int，所以在取余数的时候，要额外做取整\n\n代码\n\nfunction addToArrayForm(num: number[], k: number): number[] {\n  num.reverse();\n  for (let i = 0; i < num.length; i++) {\n    k += num[i];\n    num[i] = k % 10;\n    k = (k / 10) | 0;\n  }\n  while (k > 0) {\n    num.push(k % 10);\n    k = (k / 10) | 0;\n  }\n  num.reverse();\n  return num;\n}\n\n\n分析\n时间复杂度：O(n)\n空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992346123","body":"思路\n设想\n1. 对每一个位置，找到左边最近的 c，再找到右边最近的 c\n2. 计算左右分别距离是多少，取最小值\n步骤\n1. 从左到右遍历字符串，用 j 来表示当前最后一个 c 在什么位置，就可以求得第 i 个元素，左边最近的 c 的距离\n2. 同理从右到左遍历字符串，求得右边最近的 c 的位置\n3. 取 min\n注意点\n1. ts中，生成填充数组如果直接 new Array(5) 仅仅是具有length属性，遍历的时候依然是空的，需要 fill 具体的值\n2. for loop中，计算距离要想清楚是 i-j 还是 j-i，当从左向右遍历时，找到是左侧最近的 c，j <= i，反之 j >= i\n3. for loop 中，维护 j 可以写在第一个 for 分句里，for (let i = 0, j = -1 ... ) 这样，和写在外面 let j=-1 是一样的，这样更简洁\n\n代码\nfunction shortestToChar(s: string, c: string): number[] {\n    const n = s.length\n    let res:number[] = new Array(n).fill(-1)\n    for (let i = 0, j = -1; i < n; i++) {\n        if (s[i] === c) j = i\n        if (j !== -1) res[i] = i - j\n    }\n    for (let i = n-1, j = -1; i >=0; i--) {\n        if (s[i] === c) j = i\n        if (j !== -1) res[i] === -1 ? res[i] = j - i : res[i] = Math.min(j - i, res[i])\n    }\n    return res\n};\n分析\n时间复杂度：O(2n)\n时间复杂度：O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"arya-03":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991831460","body":"**代码1**\r\n初始版本，除了代码短，没有优点。执行用时：4928 ms, 在所有 Python3 提交中击败了6.65%的用户，内存消耗：15.6 MB, 在所有 Python3 提交中击败了27.26%的用户。\r\n```\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        len_A=len(num)\r\n        sum=0\r\n        sum_a=0\r\n        for i in range(len_A):\r\n            sum_a=sum_a+num[i]*pow(10,(len_A-1-i))\r\n        sum=sum_a+k\r\n        result=list(map(int, str(sum)))\r\n        return result\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bluetomlee":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991833123","body":"```\r\n// train of thought：\r\n// Add up each number.Then fill the next one\r\n// the first step is traverse the array ,then the index value add then k of index number.\r\n// the second step is check boundary condition to ensure all numbers added.because num's array size is correct, but not sure k is correct\r\n// the third step is reversing array\r\n\r\n// complexity analysis：O(n)\r\n\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n        vector<int> res;\r\n        int size = num.size();\r\n        for(int n = size - 1; n >= 0; n--) {\r\n            int sum = num[n] + k % 10;\r\n            k /= 10;\r\n            if (sum >= 10) {\r\n                // for next loop to complement\r\n                k++;\r\n                sum = sum % 10;\r\n            }\r\n            res.push_back(sum);\r\n        }\r\n\r\n        for (; k > 0; k /= 10) {\r\n            res.push_back(k % 10);\r\n        }\r\n        reverse(res.begin(), res.end());\r\n        return res;\r\n    }\r\n};\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992556798","body":"```\n// thought:\n// double pointer，\n// i record c's index\n// j record current loop index\n// complexity analysis: O(n)\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        vector <int>res;\n        int length = s.size();\n        int i = 0;\n        for (int k = 0; k < length; k++) {\n            if (s[k] == c) {\n                i = k;\n            }\n        }\n        for (int k = 0; k < length; k++) {\n            if (s[k] == c) {\n                i = k;\n                res.push_back(0);\n            } else if (s[k] != c) {\n                res.push_back(abs(i) - abs(k));\n            }\n        }\n        return res;\n    }\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"stackvoid":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991833487","body":"## 思路\n\n- 建一个新数组，并从末尾遍历原始数组。\n- new[i]=(old[j]+k)%10   k=(old[j]+k)/10 是整个解题的核心。\n- 注意边界，返回正确结果即可。\n\n## 代码\n\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        int[] cur = new int[num.length + 5];\n        int i = num.length - 1, j = 0;\n        for (; i >= 0; i--, j++) {\n            cur[j] = (k + num[i]) % 10;\n            k = (k + num[i]) / 10;\n        }\n        while (k != 0) {\n            cur[j++] = k % 10;\n            k = k / 10;\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int indexR = 0, indexCur = j - 1; indexR < j; indexR++, indexCur--) {\n            result.add(cur[indexCur]);\n        }\n        return result;\n    }\n}\n```\n\n\n\n## 算法分析\n\n时间复杂度：2次遍历数组，时间复杂度为O(N)\n\n空间复杂度：O(N)\n\nN 为 数组长度或K的最大值。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992078285","body":"## 思路\n\n- 遍历数组 寻找数组s中字符c出现的位置。\n- 遍历数组 寻找数组当前字符与mark中的距离 并取最小值\n- 返回结果数组即可\n\n## 代码\n\n```java\n\nimport java.util.ArrayList;\nimport java.util.function.Consumer;\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        ArrayList<Integer> mark = new ArrayList<>();\n        char[] chars = s.toCharArray();\n        //1.遍历数组 寻找数组s中字符c出现的位置\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == c) {\n                mark.add(i);\n            }\n        }\n        //2.遍历数组 寻找数组当前字符与mark中的距离 取最小值\n        int[] result = new int[chars.length];\n        for (int j = 0; j < chars.length; j++) {\n            int distance = Integer.MAX_VALUE;\n            for (int k = 0; k < mark.size(); k++) {\n                int disTmp = Math.abs(j - mark.get(k));\n                if (disTmp < distance) {\n                    distance = disTmp;\n                }\n            }\n            result[j] = distance;\n        }\n        return result;\n    }\n}\n```\n\n\n\n## 复杂度分析\n\n时间复杂度：2次遍历数组，其中第二次遍历数组，还需再遍历中间结果数组，时间复杂度为O(N^2)\n\n空间复杂度：O(N)\n\nN 为 数组长度。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993194248","body":"### 思路\n\n- push和pop注意边界即可\n- inc 从栈底(数组0号)开始遍历，依次加上对应的val即可，注意 for 循环里的边界条件即可\n\n### 代码\n\n```java\nclass CustomStack {\n    int[] stack;\n    int maxSize;//数组最大长度\n    int curIndex;//当前数组下标\n\n    public CustomStack(int maxSize) {\n        stack = new int[maxSize];\n        this.maxSize = maxSize;\n        curIndex = -1;\n    }\n\n    public void push(int x) {\n        if (curIndex >= maxSize - 1) {\n            return;\n        }\n        curIndex++;\n        stack[curIndex] = x;\n    }\n\n    public int pop() {\n        if (curIndex < 0) {\n            return -1;\n        }\n        int resultValue = stack[curIndex];\n        curIndex--;\n        return resultValue;\n    }\n\n    public void increment(int k, int val) {\n        //栈底开始遍历\n        for (int index = 0; index < k && index <= curIndex; index++) {\n            stack[index] = stack[index] + val;\n        }\n    }\n}\n\n```\n\n### 复杂度分析\n\n- push：时间复杂度O(1)  空间复杂度O(1)\n- pop：时间复杂度O(1)  空间复杂度O(1)\n- inc：时间复杂度O(k)  空间复杂度O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cszys888":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991834012","body":"## 思路\r\n1. 转换num成一个integer，叫做int_num\r\n2. 利用python内置加法求和 int_num和k，得到 int_result\r\n3. 创建一个空数组，利用除法将int_result 转换成数组\r\n\r\n## 代码\r\n```\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        # transform num to an integer\r\n        int_num = 0\r\n        for digit in num:\r\n            int_num = int_num*10 + digit\r\n        \r\n        int_result = int_num + k\r\n\r\n        result = []\r\n        while int_result // 10 > 0:\r\n            result.append(int_result % 10)\r\n            int_result = int_result// 10\r\n        result.append(int_result)\r\n        result.reverse()\r\n        return result\r\n```\r\n\r\n## 复杂度分析\r\ntime complexity: o(N)\r\nspace complexity: o(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991992449","body":"## 思路\n1. 扫描s，记录c出现的位置，存在叫做locations的list里面\n2. 遍历locations里面记录的位置，根据每个位置去计算它周围与它距离最近的点的距离。这个过程也会正好遍历一次s字符串\n\n## 代码\n```\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        locations = []\n        n = len(s)\n        for i in range(n):\n            if s[i] == c:\n                locations.append(i)\n        \n        result = []\n        for i in range(locations[0]):\n            result.append(abs(locations[0] - i))\n        for idx in range(1, len(locations)):\n            mid = (locations[idx]+locations[idx - 1])//2\n            for i in range(locations[idx-1],mid+1):\n                result.append(abs(locations[idx-1] - i))\n            for i in range(mid+1,locations[idx]):\n                result.append(abs(locations[idx] - i))\n        for i in range(locations[-1], n):\n            result.append(abs(locations[-1] - i))\n        \n        return result\n```\n\n## 复杂度分析\n时间复杂度：O(N)\n空间复杂度: O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993017938","body":"## 思路\n用O(1)的时间复杂度实现所有的操作，除了increment function\n\n## 代码\n\n```\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.stack = []\n\n    def push(self, x: int) -> None:\n        if len(self.stack)<=self.maxSize - 1:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if not self.stack:\n            return -1\n        else:\n            val = self.stack[- 1]\n            self.stack.pop()\n            return val\n\n\n    def increment(self, k: int, val: int) -> None:\n        if k > len(self.stack):\n            k = len(self.stack)\n        for idx in range(k):\n            self.stack[idx] = self.stack[idx] + val\n```\n\n## 复杂度\n时间复杂度:\nCustomStack: O(1)\npush: O(1)\npop: O(1)\nincrement: O(N)\n空间复杂度：\nO(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rootdavid":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991834365","body":"```cpp\n// 参考题解：https://leetcode-cn.com/problems/add-to-array-form-of-integer/solution/989-ji-zhu-zhe-ge-jia-fa-mo-ban-miao-sha-8y9r/\n\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n      int n = num.size();\n      \n      vector<int> res;\n      int sum = 0, carry = 0;\n      int i = n - 1;\n\n      // 从后往前遍历是因为符合加法运算逻辑\n      while (i >= 0 || k != 0) {\n        // 对齐计算位数，补0\n        int x = i >= 0 ? num[i] : 0;\n        // %10 取个位\n        int y = k != 0 ? k % 10 : 0;\n\n        sum = x + y + carry;\n\n        carry = sum / 10;\n\n        i--;\n        k /= 10;\n\n        res.push_back(sum % 10);\n        \n      }\n\n      // 计算最后一位的时候，可能有进位问题，有进位的话补入结果数组\n      if (carry != 0) res.push_back(carry);\n\n      // res数组是倒序的，所以需要反转\n      reverse(res.begin(), res.end());\n\n      return res;\n      \n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992473664","body":"```cpp\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n      int n = s.size();\n\n      // 初始化最小值，除2因为怕最大整数越界\n      int prev = INT_MIN / 2;\n      vector<int> res(n);\n\n      for (int i = 0; i < n; i++) {\n        if (s[i] == c) prev = i;\n        res[i] = i - prev;\n      }\n\n      prev = INT_MAX / 2;\n\n      for (int i = n - 1; i >= 0; i--) {\n        if (s[i] == c) prev = i;\n        res[i] = min(res[i], prev - i);\n      }\n\n      return res;\n      \n    }\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangzichengtech":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991835034","body":"## 题目地址(989. 数组形式的整数加法)\n\nhttps://leetcode-cn.com/problems/add-to-array-form-of-integer/\n\n## 题目描述\n\n```\n对于非负整数 X 而言，X 的数组形式是每位数字按从左到右的顺序形成的数组。例如，如果 X = 1231，那么其数组形式为 [1,2,3,1]。\n\n给定非负整数 X 的数组形式 A，返回整数 X+K 的数组形式。\n\n \n\n示例 1：\n\n输入：A = [1,2,0,0], K = 34\n输出：[1,2,3,4]\n解释：1200 + 34 = 1234\n\n\n示例 2：\n\n输入：A = [2,7,4], K = 181\n输出：[4,5,5]\n解释：274 + 181 = 455\n\n\n示例 3：\n\n输入：A = [2,1,5], K = 806\n输出：[1,0,2,1]\n解释：215 + 806 = 1021\n\n\n示例 4：\n\n输入：A = [9,9,9,9,9,9,9,9,9,9], K = 1\n输出：[1,0,0,0,0,0,0,0,0,0,0]\n解释：9999999999 + 1 = 10000000000\n\n\n \n\n提示：\n\n1 <= A.length <= 10000\n0 <= A[i] <= 9\n0 <= K <= 10000\n如果 A.length > 1，那么 A[0] != 0\n```\n\n## 关键点\n\n-多次利用三元运算符来判断决定变量的值，进位算是难点  \n\n## 代码\n\n- 语言支持：Java\n\nJava Code:\n\n```java\n\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n          int carry = 0;\n        List<Integer> result = new LinkedList<>();\n        int i = num.length-1;\n        while (k>0 || i>=0){\n            int x = i <0 ?0:num[i];\n            int y = k%10;\n            k = k/10;\n            int sum = x+y+carry >=10 ? x+y+carry-10:x+y+carry;\n            result.add(sum);\n            carry = x+y+carry >= 10 ? 1:0;\n            i--;\n        }\n        if(carry == 1){\n            result.add(carry);\n        }\n\n        Collections.reverse(result);\n        return result;\n    }\n}\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(n)$\n- 空间复杂度：$O(1)$\n\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992418443","body":"\n## 题目地址(821. 字符的最短距离)\n\nhttps://leetcode-cn.com/problems/shortest-distance-to-a-character/\n\n## 题目描述\n\n```\n给你一个字符串 s 和一个字符 c ，且 c 是 s 中出现过的字符。\n\n返回一个整数数组 answer ，其中 answer.length == s.length 且 answer[i] 是 s 中从下标 i 到离它 最近 的字符 c 的 距离 。\n\n两个下标 i 和 j 之间的 距离 为 abs(i - j) ，其中 abs 是绝对值函数。\n\n \n\n示例 1：\n\n输入：s = \"loveleetcode\", c = \"e\"\n输出：[3,2,1,0,1,0,0,1,2,2,1,0]\n解释：字符 'e' 出现在下标 3、5、6 和 11 处（下标从 0 开始计数）。\n距下标 0 最近的 'e' 出现在下标 3 ，所以距离为 abs(0 - 3) = 3 。\n距下标 1 最近的 'e' 出现在下标 3 ，所以距离为 abs(1 - 3) = 2 。\n对于下标 4 ，出现在下标 3 和下标 5 处的 'e' 都离它最近，但距离是一样的 abs(4 - 3) == abs(4 - 5) = 1 。\n距下标 8 最近的 'e' 出现在下标 6 ，所以距离为 abs(8 - 6) = 2 。\n\n\n示例 2：\n\n输入：s = \"aaab\", c = \"b\"\n输出：[3,2,1,0]\n\n\n \n\n提示：\n1 <= s.length <= 104\ns[i] 和 c 均为小写英文字母\n题目数据保证 c 在 s 中至少出现一次\n```\n\n## 分析\n\n-  利用两个指针，双指针法，并且建立两个长度为s.length的数组空间，一个指针从左往右遍历，同时往一个数组中存值，如果遇到目标字母，则往向数组对应位置存入0，如果不是目标字母，就往数组中存入上一个数组的值再加1，另一个指针从右往左遍历同理，最后比较两个数组中相同下标的值，小的值留下并存入第一个数组中，得到最后要求的数组。需要注意的是两个指针遍历开始时第一个元素如果是目标字母则赋值为0，不是则赋值为1000。(因为遍历的时候如果没有出现目标字母，无法判断该字母到目标字母的距离，只能等相反方向遍历的指针来计算其到最近的目标字母的距离)，具体请见代码。\n\n## 代码\n\n- 语言支持：Java\n\nJava Code:\n\n```java\n\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n         int len = s.length();\n        int[] left = new int[len];\n        int[] right = new int[len];\n        left[0] = s.charAt(0) == c ?0:1000;\n        for (int i = 1; i < s.length(); i++) {\n            left[i] = s.charAt(i) == c?0:left[i-1]+1;\n        }\n        right[len-1] = s.charAt(len-1) == c ?0:1000;\n        for (int i = len-2; i >=0; i--) {\n            right[i] = s.charAt(i) == c?0:right[i+1]+1;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            left[i] = Math.min(left[i],right[i]);\n        }\n        return left;\n    }\n}\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(n)$\n- 空间复杂度：$O(n)$\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993207467","body":"\n## 题目地址(1381. 设计一个支持增量操作的栈)\n\nhttps://leetcode-cn.com/problems/design-a-stack-with-increment-operation/\n\n## 题目描述\n\n```\n请你设计一个支持下述操作的栈。\n\n实现自定义栈类 CustomStack ：\n\nCustomStack(int maxSize)：用 maxSize 初始化对象，maxSize 是栈中最多能容纳的元素数量，栈在增长到 maxSize 之后则不支持 push 操作。\nvoid push(int x)：如果栈还未增长到 maxSize ，就将 x 添加到栈顶。\nint pop()：弹出栈顶元素，并返回栈顶的值，或栈为空时返回 -1 。\nvoid inc(int k, int val)：栈底的 k 个元素的值都增加 val 。如果栈中元素总数小于 k ，则栈中的所有元素都增加 val 。\n\n \n\n示例：\n\n输入：\n[\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]\n输出：\n[null,null,null,2,null,null,null,null,null,103,202,201,-1]\n解释：\nCustomStack customStack = new CustomStack(3); // 栈是空的 []\ncustomStack.push(1);                          // 栈变为 [1]\ncustomStack.push(2);                          // 栈变为 [1, 2]\ncustomStack.pop();                            // 返回 2 --> 返回栈顶值 2，栈变为 [1]\ncustomStack.push(2);                          // 栈变为 [1, 2]\ncustomStack.push(3);                          // 栈变为 [1, 2, 3]\ncustomStack.push(4);                          // 栈仍然是 [1, 2, 3]，不能添加其他元素使栈大小变为 4\ncustomStack.increment(5, 100);                // 栈变为 [101, 102, 103]\ncustomStack.increment(2, 100);                // 栈变为 [201, 202, 103]\ncustomStack.pop();                            // 返回 103 --> 返回栈顶值 103，栈变为 [201, 202]\ncustomStack.pop();                            // 返回 202 --> 返回栈顶值 202，栈变为 [201]\ncustomStack.pop();                            // 返回 201 --> 返回栈顶值 201，栈变为 []\ncustomStack.pop();                            // 返回 -1 --> 栈为空，返回 -1\n\n\n \n\n提示：\n\n1 <= maxSize <= 1000\n1 <= x <= 1000\n1 <= k <= 1000\n0 <= val <= 100\n每种方法 increment，push 以及 pop 分别最多调用 1000 次\n```\n\n## 关键点\n\n-  index代表的是栈中元素的个数，\n\n## 代码\n\n- 语言支持：Java\n\nJava Code:\n\n```java\n\npackage com.wzc;\n\n    class CustomStack {\n        int[] stack;\n        int index;\n        public CustomStack(int maxSize) {\n             stack = new int[maxSize];\n             index = 0;\n        }\n\n        public void push(int x) {\n            if (index == stack.length){\n               return;\n            }\n            stack[index++] = x;\n        }\n\n        public int pop() {\n            if (index == 0){\n                return -1;\n            }\n            return stack[--index];\n        }\n\n        public void increment(int k, int val) {\n            k = Math.min(k,index);\n            for (int i = 0; i < k; i++) {\n                stack[i] = stack[i]+val;\n            }\n        }\n    }\n\n\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack obj = new CustomStack(maxSize);\n * obj.push(x);\n * int param_2 = obj.pop();\n * obj.increment(k,val);\n */\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(1)$\n- 空间复杂度：$O(n)$\n\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"alexno1no2":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991835437","body":"思路：\n先用reduce计算num对应数值，\n然后加上k后转成iterable的str对象\n再利用map从高位到低位依次转成整数，\n最后转成list\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        return list(map(int, str(k+reduce(lambda a, b: a*10+b, num))))","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992498036","body":"* 暴力破解\n* 先找出字符c在字符串s中的下标\n* 然后计算s中每个字母到c下标的距离中的最短的那个\n```\n class Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        c_idx = [ i for i in range(len(s)) if s[i] == c ]\n        return [ min(abs( i - j )  for j in c_idx) for i in range(len(s)) ]\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993048405","body":"题解\n使用数组模拟栈，用一个变量 top 来记录当前栈顶的位置。\n对于 push 操作，首先判断当前元素的个数是否达到上限，如果没有达到，就把 top 后移一个位置并添加一个元素。\n对于 pop 操作，首先判断当前栈是否为空，非空返回栈顶元素并将 top 前移一位，否则返回 -1。\n对于 inc 操作，直接对栈底的最多 k 个元素加上 val。\n代码\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stk = [0] * maxSize\n        self.top = -1\n\n    def push(self, x: int) -> None:\n        if self.top != len(self.stk) - 1:\n            self.top += 1\n            self.stk[self.top] = x\n\n    def pop(self) -> int:\n        if self.top == -1:\n            return -1\n        self.top -= 1\n        return self.stk[self.top + 1]\n\n    def increment(self, k: int, val: int) -> None:\n        lim = min(k, self.top + 1)\n        for i in range(lim):\n            self.stk[i] += val\n分析\n时间复杂度：初始化（构造函数）、push 操作和 pop 操作的渐进时间复杂度为 O(1)，inc 操作的渐进时间复杂度为 O(k)。\n空间复杂度：这里用到了一个长度为 maxSize 的数组作为辅助空间，渐进空间复杂度为 O(maxSize)。\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"myleswork":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991835905","body":"### 思路\n\n因为A.length最大为10000，所以不能采用类型转换来做，只能采用模拟的办法\n\n设置i作为进位，若对应位与i一起相加后大于10，说明有进位，就将i设置为1，结果对10取余；若小于10则直接进行下一高位的计算。\n\n我设置的条件时num和k同时大于0，若跳出说明至少有一个参数已经到了最高位了，那么未到最高位的参数就以基本相同的思路继续计算。\n\n### 代码\n\n```c++\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n       int key = num.size()-1;\n       int i = 0;\n       while(key>=0 && k){\n           num[key] = i + num[key] + k%10;\n           i = 0;\n           if(num[key] >= 10){\n               i = 1;\n               num[key] %= 10;\n           }\n           k /= 10;\n           key--;\n       }\n       //当k比num长时\n           while(k){\n               int sum = k%10+i;\n               num.insert(num.begin(),sum%10);\n               i = sum/10;\n               k /= 10;\n           }\n       \n       //当num比k长时\n           while(key>=0){\n                num[key] = i + num[key] + k%10;\n                i = 0;\n                if(num[key] >= 10){\n                    i = 1;\n                    num[key] %= 10;\n           }\n               key--;\n           }\n       \n       if(i) num.insert(num.begin(),1);\n       return num;\n       //如果num的长度大于k，那到这里就结束了\n    }\n};\n```\n\n**复杂度分析**\n\n时间复杂度：O(max(numlen,klen))  (numlen为num的长度，klen为k的长度)；\n\n空间复杂度：O(max(numlen,klen))","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992043684","body":"### 思路\n\n遍历每一个字符，对当前字符设左右双指针，返回较近c和当前字符距离。\n有一点需要注意，可能左指针或右指针在向左向右遍历时，会遍历到字符头和尾，此时就需要处理距离异常的问题。通过下面这行代码就能确保得到最短且正确（某一指针遍历到边界但另一指针仍在找c这一情况）的距离：\n\n```cpp\nres.push_back(max(abs(i-left),abs(i-right)));\n```\n\n### 代码\n\n```cpp\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        int len = s.length();\n        vector<int> res;\n        for(int i = 0;i<len;i++){\n            int left = i;\n            int right = i;\n            while(s[left]!=c && s[right]!=c){\n                if(left>0) left--;\n                if(right<len) right++;\n            }\n            res.push_back(max(abs(i-left),abs(i-right)));\n        }\n        return res;\n    }\n};\n```\n\n**复杂度分析**\n\n时间复杂度：O(n^2)\n空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993098877","body":"### 思路\n\n用数组模拟栈\n\n栈有两种，一种是top指向栈顶元素，另一种是top指向栈顶元素上一空间。我模拟的是第一种。\n\n### 代码\n\n```cpp\nclass CustomStack {\npublic:\n    //用数组模拟栈，便于实现inc\n    //移动top指针从而实现\n    vector<int> Stack;  //栈\n    int top;            //栈顶指针\n\n    CustomStack(int maxSize) {\n        Stack.resize(maxSize);\n        top = -1;\n    }\n    \n    void push(int x) {\n        if(top!=Stack.size()-1){\n            ++top;\n            Stack[top] = x;\n        }\n    }\n    \n    int pop() {\n        if(top == -1) return -1;\n        --top;\n        return Stack[top+1];\n    }\n    \n    void increment(int k, int val) {\n        for(int i = 0;i<k && i<Stack.size();i++){\n            Stack[i] += val;\n        }\n    }\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack* obj = new CustomStack(maxSize);\n * obj->push(x);\n * int param_2 = obj->pop();\n * obj->increment(k,val);\n */\n```\n\n**复杂度分析**\n\npush：O(1)\n\npop：O(1)\n\nincrement：O(n)\n\n### 有个问题\n\n```cpp\nvoid push(int x) {\n        if(top!=Stack.size()-1){\n            ++top;\n            Stack[top] = x;\n        }\n    }\n//if里面的语句用!=就是对的\n//if里面的语句用<就错了\n//我不理解\n```\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"devil-lin":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991836687","body":"```\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int> res;\n\n        int n = num.size();\n        for(int i = n - 1; i >= 0 || k; i --)\n        {\n            if(i >= 0)\n                k += num[i];\n            res.push_back(k % 10);\n            k /= 10;\n        }\n\n        reverse(res.begin(), res.end());\n\n        return res;\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992604905","body":"```\nclass Solution {\n    public int[] shortestToChar(String S, char C) {\n        int N = S.length();\n        int[] ans = new int[N];\n        int prev = Integer.MIN_VALUE / 2;\n\n        for (int i = 0; i < N; ++i) {\n            if (S.charAt(i) == C) prev = i;\n            ans[i] = i - prev;\n        }\n\n        prev = Integer.MAX_VALUE / 2;\n        for (int i = N-1; i >= 0; --i) {\n            if (S.charAt(i) == C) prev = i;\n            ans[i] = Math.min(ans[i], prev - i);\n        }\n\n        return ans;\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-992689479","body":"链表或者数组都可以\n没啥好说的，两三分钟就完了\n\n```\nclass CustomStack {\npublic:\n    vector <int> v;\n    int top, maxsize;\n\n    CustomStack(int maxSize) {\n        v.resize(maxSize);\n        maxsize = maxSize;\n        top = -1;\n    }\n    \n    void push(int x) {\n        if(top == maxsize - 1) return;\n        v[++ top] = x;\n    }\n    \n    int pop() {\n        if(top == -1) return -1;\n        top --;\n        return v[top + 1];\n    }\n    \n    void increment(int k, int val) {\n        int lim = min(k, top + 1);\n        for(int i = 0; i < lim; i ++) v[i] += val;\n    }\n};\n\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"spacker-343":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991838535","body":"### 思路\r\n\r\n首先得想法是把两个数加起来，再依次取出个位，添加进结果中，但是这样会溢出。\r\n于是选择从后往前遍历数组，末尾数字相加后添加进结果集中，同时判断一下有没有进位。\r\n最后还要看看 k 和进位等于 0 没有，如果没有还要继续添加进结果集中。\r\n添加数字时，要保证顺序，所以每次插入在数组开头，也就是 0 的索引位置，使用 LinkedList 而不是 ArrayList 会提升插入的性能\r\n\r\n### 代码\r\n\r\n\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> res=new LinkedList<>();\r\n        int carry=0;\r\n        for(int i=num.length-1; i>=0; i--){\r\n            int sum=0;\r\n            sum=num[i]+k%10+carry;\r\n            k/=10;\r\n            carry=sum/10 > 0 ? 1:0;\r\n            sum%=10;\r\n            res.add(0, sum);\r\n        }\r\n        while(k!=0){\r\n            int sum=k%10+carry;\r\n            carry=sum/10 > 0 ? 1:0;\r\n            sum%=10;\r\n            k/=10;\r\n            res.add(0, sum);\r\n        }\r\n        if(carry!=0){\r\n            res.add(0, 1);\r\n        }\r\n        return res;\r\n    }\r\n}\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(N)\r\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992038217","body":"### 思路\r\n第一眼感觉用双指针能做，找到第一个 c 字符出现位置和第二个 c 字符出现位置，然后分别求出到当前 i 的距离，再进行比较，如果没出现第二个 c 字符（也就是 right2 == s.length() ），那么就直接取第一个 c 字符到当前 i 的距离就好。\r\n\r\n### 代码\r\n```java\r\nclass Solution {\r\n    public int[] shortestToChar(String s, char c) {\r\n        int[] res=new int[s.length()];\r\n        int right=0;\r\n        int right2=1;\r\n        while(right<s.length() && s.charAt(right)!=c){\r\n            right++;\r\n        }\r\n        while(right2<s.length()&&s.charAt(right2)!=c){\r\n            right2++;\r\n        }\r\n        for(int i=0; i<res.length; i++){\r\n            // 如果索引i大于第二个c字符所在位置则更新right和right2\r\n            if(i>right2){\r\n                if(right2!=s.length()){\r\n                    right=right2;\r\n                    right2=right+1;\r\n                    while(right2<s.length()&&s.charAt(right2)!=c){\r\n                        right2++;\r\n                    }\r\n                }\r\n            }\r\n            if(right2==s.length()){\r\n                // 说明此时只有right指针在c字符上\r\n                res[i]=Math.abs(right-i);\r\n            }else{\r\n                res[i]=Math.min(Math.abs(right-i), right2-i);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}\r\n```\r\n\r\n### 复杂度\r\n时间复杂度：O(N)\r\n空间复杂度：O(1)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993121333","body":"### 思路\r\n由于栈容量大小固定，因此考虑使用数组来模拟，并用一个index指针指向栈顶元素\r\n### 代码\r\n```java\r\nclass CustomStack {\r\n\r\n    int[] customStack;\r\n    int index;\r\n\r\n    public CustomStack(int maxSize) {\r\n        customStack=new int[maxSize];\r\n        index=-1;\r\n    }\r\n    \r\n    public void push(int x) {\r\n        if(index==customStack.length-1){\r\n            return;\r\n        }\r\n        customStack[++index]=x;\r\n    }\r\n    \r\n    public int pop() {\r\n        if(index==-1){\r\n            return -1;\r\n        }\r\n        int res=customStack[index];\r\n        customStack[index--]=0;\r\n        return res;\r\n    }\r\n    \r\n    public void increment(int k, int val) {\r\n        int inc=Math.min(index+1, k);\r\n        for(int i=0; i<inc; i++){\r\n            customStack[i]+=val;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### 复杂度\r\n时间复杂度: O(1) push pop O(min(index+1, k)) increment\r\n空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"de0002ou":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991842436","body":"### 思路\n\n把数字转换成数组，对应位相加传入新数组，考虑进位情况\n\n### 代码\n\n\n```python（此处换成你的语言，比如js，py 等）\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        list_k = []\n        while k > 0:\n            temp = k%10\n            list_k.insert(0,temp)\n            k-=temp\n            k/=10\n        res = []\n        add_up = 0\n        while list_k and num:\n            i = list_k.pop()+num.pop()\n            if i+add_up< 10:\n                res.insert(0,int(i+add_up))\n                add_up = 0\n            else:\n                res.insert(0,int(i-10+add_up))\n                add_up = 1\n        while list_k and not num:\n            i = list_k.pop()\n            if i+add_up< 10:\n                res.insert(0,int(i+add_up))\n                add_up = 0\n            else:\n                res.insert(0,int(i-10+add_up))\n                add_up = 1\n        while num and not list_k:\n            i = num.pop()\n            if i+add_up< 10:\n                res.insert(0,int(i+add_up))\n                add_up = 0\n            else:\n                res.insert(0,int(i-10+add_up))\n                add_up = 1\n        while not num and not list_k:\n            if add_up == 1:\n                res.insert(0,1)\n            return res\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度，需要遍历整个数组。\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992191538","body":"### 思路\n\n从左到右遍历然后从右到左遍历，取距离的最小值\n\n### 代码\n\n\n```python（此处换成你的语言，比如js，py 等）\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        pre = float('-inf')\n        res = []\n        for i,number in enumerate(s):\n            if number == c:\n                pre = i\n            res.append(i - pre)\n        pre = float('inf')\n        for j in range(len(s)-1, -1, -1):\n            if s[j] == c:\n                pre = j\n            res[j] = min(res[j], pre - j)\n        return res\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993216818","body":"### 思路\n\n队列实现，按要求来\n### 代码\n\n\n```python（此处换成你的语言，比如js，py 等）\nclass CustomStack:\n    def __init__(self, maxSize: int):\n\n        self.stack = []\n        self.maxSize = maxSize\n\n    def push(self, x: int) -> None:\n        if len(self.stack)< self.maxSize:\n            self.stack.append(x)\n        else:\n            pass\n\n    def pop(self) -> int:\n        if len(self.stack) == 0:\n            return -1\n        else:\n            return self.stack.pop()\n\n    def increment(self, k: int, val: int) -> None:\n        x = min(k,len(self.stack))\n        for i in range(x):\n            self.stack[i] = self.stack[i] + val\n```\n\n**复杂度分析**\n时间复杂度：push和pop操作的渐进时间复杂度为O(1)O(1), inc操作的渐进时间复杂度为O(k)O(k)\n空间复杂度：用到了一个maxSize的数组作为辅助空间，渐进空间复杂度为O(maxSize)O(maxSize)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"judyzhou95":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991842636","body":"### 思路\n\n先把k与个位相加。从低到高逐位检查是否大于等于十。如果是，则算出carry on (n // 10) 并加入到前一位，以及当前位保留的值 (n %= 10)。到了最高位如果还大于等于10 则需要在前面手动增加位数，并继续进行计算carry on 和保留值。\n\n### 代码\n\n\n```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        num[-1] += k\n        \n        i = len(num) - 1\n        \n        while i > 0 and num[i] > 9:\n            num[i-1] += num[i] // 10\n            num[i] %= 10\n            i -= 1\n            \n        while num[0] > 9:\n            num = [num[0] // 10] + num\n            num[1] = num[1] % 10\n            \n        return num\n        \n ```\n### 复杂度\nTime Complexity: O(len(num)) \n\nSpace Complexity: O(1)\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992254880","body":"### 思路\n\n从左往右、从右往左遍历数组两遍，分别计算出当前位置距离左边target character（如果存在）的最短的距离，以及右边target character的最短距离，并取较小的那个存入答案。计算时可以加入dp思想。\n\n\n### 代码\n\n```python\n\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        n = len(s)\n        \n        res = [0 if cha == c else n for cha in s]\n        for i in range(1, n):\n            res[i] = min(res[i], res[i-1] + 1)\n            \n        for i in range(n-2, -1, -1):\n            res[i] = min(res[i], res[i+1]+1)\n            \n        return res\n```\n\n### 复杂度\nTime: O(n)\n\nSpace: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993313421","body":"### 思路\nstack是有限制的array 可以push, pop操作可以直接用array的function来做。\n\n### 代码\n\n```python\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack = []\n        self.maxSize = maxSize\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.maxSize:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if self.stack:\n            return self.stack.pop()\n        else:\n            return -1\n\n    def increment(self, k: int, val: int) -> None:        \n        for i in range(min(len(self.stack), k)):\n            self.stack[i] += val\n\n```\n\n### 复杂度\n\npush, pop的Time Complexity 都是 O(1)\n\nincrement 的Time Complexity是O(k)\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"blankpathfind":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991843440","body":"### 思路\n\nv1\n笨方法，先把list转成字符串，字符串转成int，相加之后结果转字符串，字符串拆开成list，害\n\n### 代码\n\n\n```\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        num = [str(i) for i in num]\n        num = \"\".join(num)\n        num = int(num)\n        num = str(num+k)\n        num = [int(i) for i in num]\n        return num\n\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(N)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992597115","body":"### 思路\n\n开始想的是遍历，看两边最近的e,后来改成生成一个list存放e所在的index然后再遍历一遍list看最近的abs()\n\n### 代码\n\n\n```\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        inlist = []\n        outlist = []\n        for i,s_i in enumerate(s):\n            if s_i == c:\n                inlist.append(i)\n        for i in range(len(s)):\n            tmp = [abs(l-i) for l in inlist]\n            outlist.append(min(tmp))\n        return outlist\n\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(2N)，其中 N 为数组长度。\n- 空间复杂度：O(2N)，空间复杂度较高","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tangjy149":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991843767","body":"### 思路\n我是从末位数的方面来考虑，因为需要进行整数的加法，那么k+arr[len-1]%10的值一定是最终和的末位数，那么便从数组的最后一位开始遍历，与k进行相加并取模放入ans数组（因为是从末尾开始，因此需要insert插入到ans的首位）\n\n### Code\n```c++\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int> ans;\n        int len = num.size()-1;\n        for(int i=len;i>=0;i--){\n            k=k+num[i];\n            ans.insert(ans.begin(),k%10);\n            k/=10;\n        }\n        // 此处的处理是为了防止k过大的情况\n        if(k){\n            while(k>9){\n                ans.insert(ans.begin(),k%10);\n                k/=10;\n            }\n            ans.insert(ans.begin(),k);\n        }\n        return ans;\n    }\n};\n```\n\n### 复杂度分析\n时间复杂度：O(n)（主要花销在遍历)  \n\n空间复杂度：O(n)(开辟了新的数组用于存储结果)","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993110188","body":"### 思路\n用数组进行模拟即可，c++的vector本身就有push_back和pop_back的使用方式，但该题需注意，需要对添加的数进行计数，因为本身数组的大小已经被限制了maxsize，因此不能通过数组的size进行判断数据（应该），所以我添加了count进行计算当前数组已经有多少数据，来对pop和push情况进行判断\n\n### 代码\n```c++\nclass CustomStack {\npublic:\n    int count;// 计数\n    vector<int> helper;\n    CustomStack(int maxSize) {\n        helper.resize(maxSize);\n        count=0;\n    }\n    \n    void push(int x) {\n        if(count<helper.size()){\n            helper[count]=x;\n            count++;\n        }\n    }\n    \n    int pop() {\n        if(--count<0){\n            count=0;\n            return -1;\n        }\n        return helper[count];\n    }\n    \n    void increment(int k, int val) {\n        for(int i=0;i<min(k,count);i++){\n            helper[i]+=val;\n        }\n    }\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack* obj = new CustomStack(maxSize);\n * obj->push(x);\n * int param_2 = obj->pop();\n * obj->increment(k,val);\n */\n```\n\n### 复杂度\n时间复杂度：push=O(1) pop=O(1) increment=O(n)  ","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lannyx":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991846050","body":"### 思路\r\n\r\niterate the array and integer from right to left, sum up and store in the ArrayList.\r\nuse a carry variable to store the tens.\r\nreverse the ArrayList in the end.\r\n\r\n### 代码\r\n\r\n\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        int len = num.length - 1;\r\n        List<Integer> res = new ArrayList<>();\r\n        int carry = 0;\r\n\r\n        while(len >= 0 || k != 0){\r\n            int x = len < 0 ? 0 : num[len];\r\n            int y = k == 0 ? 0 : k % 10;\r\n\r\n            int sum = carry + x + y;\r\n            res.add(sum % 10);\r\n            carry = sum / 10;\r\n            \r\n            len--;\r\n            k = k / 10;\r\n        }\r\n\r\n        if (carry > 0) res.add(1);\r\n\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n}\r\n\r\n\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(N)，其中 N 为数组长度。\r\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992149394","body":"### 思路\r\n\r\n从左到右，然后从右到左遍历两遍\r\n找到C并记录它和S[i]的距离，最后取最小值\r\n\r\n### 代码\r\n\r\n\r\n```java\r\nclass Solution {\r\n    public int[] shortestToChar(String s, char c) {\r\n        int[] res = new int[s.length()]; // create new array to store answer\r\n        int dummy = Integer.MIN_VALUE/2; // initiate a variable as the min value to store char c\r\n                                         // /2 to avoid index out of bound\r\n\r\n        for(int i = 0; i < s.length(); i++){ // from left to right\r\n            if(s.charAt(i) == c) dummy = i;  // find first c, store it and calculate the next number \r\n            res[i] = i - dummy;\r\n        }\r\n\r\n        dummy = Integer.MAX_VALUE;            // from right to left\r\n        for(int i = s.length() - 1; i >= 0; i--){ \r\n            if(s.charAt(i) == c) dummy = i;\r\n            res[i] = Math.min(res[i], dummy - i);  // compare to find the min and store it\r\n        }\r\n        return res;\r\n\r\n    }\r\n}\r\n\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(N)，其中 N 为数组长度。\r\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993170998","body":"### 思路\n\n用数组模拟栈\n\n### 代码\n\n\n```java\nclass CustomStack {\n    int[] stack;\n    int top;\n\n    public CustomStack(int maxSize) {\n        stack = new int[maxSize];\n        top = -1;\n    }\n    \n    public void push(int x) {\n        if(top < stack.length - 1){\n            top++;\n            stack[top] = x;\n        }\n    }\n    \n    public int pop() {\n        if(top == -1){\n            return -1;\n        }else{\n            top--;\n            return stack[top + 1];\n        }\n\n    }\n    \n    public void increment(int k, int val) {\n        int limit = Math.min(k, top+1);\n        for(int i = 0; i < limit; i++){\n            stack[i] = stack[i] + val;\n        }\n    }\n}\n\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(k)\n- 空间复杂度：O(maxSize)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nweass":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991846310","body":"## 思路\n\n考虑到需要进位，需要的位数可能发生变化，新增一个List储存结果\n\n双指针遍历两个整数，使用一个add记录进位\n\n类似题目有大数加减法\n\n## 代码\n\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        int i = num.length - 1;\n        int j = 0;\n        int add = 0;\n        ArrayList<Integer> resList = new ArrayList<>();\n        while(i >= 0 || k > 0 ||add != 0){\n            int x = i < 0 ? 0 : num[i];\n            int y = k == 0 ? 0 : k % 10;  \n\n            int result = x + y + add;\n            add = result /10;\n            resList.add(result % 10);\n            i--;\n            k = k / 10;\n        }\n        Collections.reverse(resList);\n        return resList;\n    }\n}\n```\n\n## 复杂度分析\n\n空间：使用了一个新建List保存结果，List大小为num[]或k的位数 O(n)\n\n时间：遍历一遍num[] 长度n或k的位数m中最大的一个，O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yugaoh":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991848642","body":"class Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        int carry  = 0;//进位\n        int i = num.size() - 1;\n        vector<int> vec;\n\n        while(i >= 0 || k != 0)\n        {\n            int n1 = i >= 0 ? num[i] : 0;\n            int n2 = k >= 0 ? k % 10 : 0;\n\n            int value = n1 + n2 + carry;\n            vec.push_back(value % 10);\n            carry = value / 10;\n\n            --i;\n            k = k / 10;\n        }\n\n        if(carry != 0)\n            vec.push_back(carry);\n        \n        reverse(vec.begin(), vec.end());\n\n        return vec;\n    }\n};","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992079459","body":"#思路\n\n先找到字符串中的第一个char c，令right指向这个位置，则从数组开始至第一个c的最近距离都是abs(i-right)\n然后令left指向right，则left到right之间的距离都是abs(j - left)和abs(j - right)的最小值\n最后是最后一个char c右边的部分，left指向这个最后的char c，则右边部分的最短距离都是abs(j - left)\n\n#代码\n\n```c++\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        int len = s.length();\n        vector<int> vec;\n        int left = 0;\n        int right = 0;\n\n        for(int i = 0; i < len; i++)\n        {\n            if(c == s[i])\n            {\n                right = i;\n                break;\n            } \n        }\n\n        for(int j = 0; j < right; j++)\n        {\n            vec.push_back(abs(j - right));  \n        }\n        left = right;\n\n        for(int i = left; i < len; i++)\n        {\n            if(c == s[i])\n            {\n                right = i;\n                for(int j = left; j < right; j++)\n                {\n                    int tmp = abs(j - left) < abs(j - right) ? abs(j - left) : abs(j - right);\n                    vec.push_back(tmp);\n                }\n                left = right;   \n            }  \n        }\n\n        if(left <= len - 1)\n        {\n            for(int i =left; i < len; i++)\n            {\n                vec.push_back(abs(i - left));\n            }\n        }\n\n        return vec;\n    }\n};\n```\n\n#复杂度\n\n时间复杂度O(n2)\n\n空间复杂度O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dahaiyidi":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991849235","body":"## Question\n\nhttps://leetcode-cn.com/problems/add-to-array-form-of-integer/\n\n对于非负整数 X 而言，X 的数组形式是每位数字按从左到右的顺序形成的数组。例如，如果 X = 1231，那么其数组形式为 [1,2,3,1]。\n\n给定非负整数 X 的数组形式 A，返回整数 X+K 的数组形式。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/add-to-array-form-of-integer\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n\n### Note\n\n- 思路不难：将数字从最后一位开始计算加法\n- 注意进位\n- 注意有一方先遍历完毕的情况\n\n### Complexity\n\n- 时间O：max(n, logk)\n- 空间O：1 (返回值不计算在内)\n\n## Python\n\n```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        res = []\n        \n        for i in  range(len(num) - 1, -1, -1):\n            add = num[i] + k % 10  # k包含进位信息\n            k = k // 10\n\n            if add >= 10:\n                add -=10\n                k += 1 # 将进位1加到k上\n\n            res.append(add % 10)\n\n        # 若k不是零\n        while k != 0:\n            res.append(k % 10)\n            k = k // 10\n        \n        return res[::-1]\n```\n\n## C++\n\n```C++\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int> res;\n        for(int i = num.size() - 1; i >= 0; i--){\n            int add = num[i] + k % 10;\n            k /= 10;\n            if (add >= 10){\n                k++;\n                add = add - 10;\n            }\n\n            res.push_back(add % 10);\n        }\n        while (k != 0){\n            res.push_back(k % 10);\n            k /= 10;\n        }\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};\n```\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992490670","body":"From : https://github.com/dahaiyidi/awsome-leetcode\r\n\r\n## Question \r\n\r\n#### [989. 数组形式的整数加法](https://leetcode-cn.com/problems/add-to-array-form-of-integer/)\r\n\r\n对于非负整数 `X` 而言，*`X`* 的*数组形式*是每位数字按从左到右的顺序形成的数组。例如，如果 `X = 1231`，那么其数组形式为 `[1,2,3,1]`。\r\n\r\n给定非负整数 `X` 的数组形式 `A`，返回整数 `X+K` 的数组形式\r\n\r\n### Note\r\n\r\n- 思路不难，重要的是不要被题目吓到\r\n- 从left到right扫一遍，从right 到left扫一遍，两者取最小值\r\n\r\n### Complexity\r\n\r\n- 时间O：N\r\n- 空间O：1\r\n\r\n### Python\r\n\r\n```python\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        num_s = len(s)\r\n        res = [-1] * num_s  # res 最终的值必<num_s， 也可以使用Integer.MAX_VALUE / 2\r\n\r\n        # 从left到right扫一遍，从right 到left扫一遍，两者取最小值\r\n        \r\n        n = num_s\r\n        for i in range(num_s):\r\n            if s[i] == c:\r\n                n = 0\r\n            res[i] = n\r\n            n += 1\r\n        \r\n        n = num_s\r\n        for i in range(num_s -1, -1, -1):\r\n            if s[i] == c:\r\n                n = 0\r\n            res[i] = min(res[i], n)\r\n            n += 1\r\n        \r\n        return res\r\n\r\n```\r\n\r\n### C++\r\n\r\n```C++\r\nclass Solution {\r\npublic:\r\n    vector<int> shortestToChar(string s, char c) {\r\n        int num_s = s.size();\r\n        vector<int> res(num_s, num_s);\r\n\r\n        int n = num_s;\r\n        for(int i = 0; i < num_s; i++){\r\n            if(s[i] == c){\r\n                n = 0;\r\n            }\r\n            res[i] = n;\r\n            n++;\r\n        }\r\n\r\n        n = num_s;\r\n        for(int i = num_s - 1; i >= 0; i--){\r\n            if(s[i] == c){\r\n                n = 0;\r\n            }\r\n            res[i] = min(res[i], n);\r\n            n++;\r\n        }\r\n\r\n        return res;\r\n    }\r\n};\r\n```\r\n\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liuzekuan":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991849933","body":"思路\n1 定义常量n，同时遍历两个数组，从末尾开始遍历，条件是两个指针的索引同时大于等于0， 将对应索引上的值相加再加上n与10取模值， 取模结果记入集合中，整除结果赋值给n\n\n2 1的循环跳出，说明此时其中一个数组已经到头了，遍历当前索引大于0的数组，将当前的索引的值 加上n 添加到集合，剩下的值依次加入到集合，循环结束，输出结果。 3.最后一个输出的数若取整为1要进一位。\n\n关键点\n循环的条件，取模，取整 集合容器的选取：方便从头部插入数据的集合，链表 边界问题：最后一个输出的数若取整为1要进一位\n\n代码\n语言支持：Java\nJava Code:\n\n\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        //选取Linked集合从头部插入数据\n        LinkedList<Integer> linkedList =new LinkedList<>();\n        //定义常量n,记整除结果\n        String kStr=\"\"+k;\n        int n=0;\n        int i=num.length-1;\n        int j=kStr.length()-1;\n        while(i>=0&&j>=0){\n            int temp=num[i]+Integer.valueOf(\"\"+kStr.charAt(j));\n            //将对应索引上的值相加再加上n与10取模值， 取模结果记入集合中，整除结果赋值给n\n            linkedList.addFirst((temp+n)%10);\n            n=(temp+n)/10;\n            i--;\n            j--;\n        }\n        //说明k已经遍历完，单独遍历剩下的数据\n        while(i>=0){\n            //将对应索引上的值加上n与10取模值， 取模结果记入集合中，整除结果赋值给n\n            linkedList.addFirst((num[i]+n)%10);\n            n=(num[i]+n)/10;\n            i--;\n        }\n        //说明num已经遍历完，单独遍历剩下的数据\n        while(j>=0){\n            //将对应索引上的值加上n与10取模值， 取模结果记入集合中，整除结果赋值给n\n            linkedList.addFirst((Integer.valueOf(\"\"+kStr.charAt(j))+n)%10);\n            n=(Integer.valueOf(\"\"+kStr.charAt(j))+n)/10;\n            j--;\n        }\n        //边界问题，最后一个存在数值进1\n        if(n==1){\n            linkedList.addFirst(1);\n        }\n        return linkedList;\n    }\n}\n\n复杂度分析\n\n令 n 为数组长度。\n\n时间复杂度：O(n)  n为两个数组中较长的长度\n空间复杂度：O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"alfie100":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991850071","body":"\n### 最低位相加模拟\n\n#### 思路\n模拟加法：A + k\n\n`当前位 = （A的当前位 + k） % 10`\n\n`当前位的进位 = （A的当前位 + k） // 10`\n\n这样可将 k 整体看作为进位，省略了变量carry\n\n#### 代码[Python]\n```Python []\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n\n        res = []\n        while num or k:     # 若num未遍历完，【或】k未遍历完（k>0）\n            x = (num.pop() if num else 0) + k   # 若num未遍历完，pop一下；否则，设为0\n            k = x // 10\n            res.append(x%10)\n        \n        return res[::-1]\n```\n\n**复杂度分析**\n- 时间复杂度：$O(\\max(n, \\log k))$，其中 $n$ 为数组长度。\n- 空间复杂度：$O(\\max(n, \\log k))$，其中 $n$ 为数组长度。开辟了新的存储空间。\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991929448","body":"### 正向遍历 + 反向遍历\r\nLeetCode 原题连接：[821. 字符的最短距离](https://leetcode-cn.com/problems/shortest-distance-to-a-character/)\r\n### 思路\r\n对于每个字符 s[i] 找出其距离左边及右边下一个目标字符 C 的距离，左右距离中的较小值即为答案。\r\n\r\n`从左往右遍历：`\r\n假设上一个 C 出现的位置为 pre，则当前 i 位置的字符距离 $C$ 的距离为 i-pre （pre <= i）；\r\n\r\n`从右往左遍历：`\r\n假设上一个 C 出现的位置为 pre，则当前 i 位置的字符距离 C 的距离为 pre-i （i <= pre）；\r\n\r\n\r\n### 代码 【Python】\r\n\r\n```python []\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n\r\n        n = len(s)\r\n        ans = []\r\n\r\n        # 正序遍历\r\n        pre = -n    # 设为较小的 -n 即可（距离的最大值不可能超过n）\r\n        for (i, ch) in enumerate(s):\r\n            if ch == c:\r\n                pre = i\r\n            ans.append(i-pre)\r\n\r\n        # 逆序遍历\r\n        pre = 2*n   # 设为较大的 2*n 即可（距离的最大值不可能超过n）\r\n        for i in range(n-1, -1, -1):\r\n            if s[i] == c:\r\n                pre = i\r\n            ans[i] = min(ans[i], pre-i)\r\n        \r\n        return ans\r\n\r\n```\r\n\r\n\r\n\r\n**复杂度分析**\r\n\r\n- 时间复杂度：O(n)，其中 n 为字符 s 长度。\r\n\r\n- 空间复杂度：O(n)。\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-992623543","body":"【Python】**直接模拟 ：**\r\n\r\n```Python []\r\nclass CustomStack:\r\n\r\n    def __init__(self, maxSize: int):\r\n        self.stack = []\r\n        self.max_size = maxSize\r\n\r\n\r\n    def push(self, x: int) -> None:\r\n        if len(self.stack) < self.max_size:\r\n            self.stack.append(x)\r\n\r\n\r\n    def pop(self) -> int:\r\n        if len(self.stack) >= 1:\r\n            return self.stack.pop()\r\n        else:\r\n            return -1\r\n\r\n\r\n    def increment(self, k: int, val: int) -> None:\r\n        for i in range(min(len(self.stack), k)):\r\n            self.stack[i] += val\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(k)，其中 k 为增量函数 inc(int k, int val) 中的元素个数 k 。\r\n- 空间复杂度：O(maxSize), 其中 maxSize 为栈中最多能容纳的元素数量。\r\n\r\n\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ryan0218":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991850174","body":"class Solution {\n\npublic List addToArrayForm(int[] num, int k)\n {\n\nList res = new ArrayList();\n\nint n = num.length;\n\nfor (int i = n-1; i >= 0; --i)\n{\n\nint sum = num[i] + k % 10;\n\nk /= 10;\n\nif (sum >= 10)\n{\n\nk ++;\n\nsum -= 10;\n}\n\nres.add(sum);\n}\n\n\nfor (; k > 0; k /= 10)\n{\n\nres.add(k % 10);\n}\n\nCollections.reverse(res);\n\nreturn res;\n}\n}\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wodong0012":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991850483","body":"判断k是否倒序遍历数组，在与k % 10 相加 之后在将k /10 ， 在判断结果>10 ，++k并且将结果-10，在存入数组中\n同时k的位数会大于数组长度，需要加一个循环插入大于的数据\n\n```c++\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int> results = vector<int>();\n        int listSize = num.size();\n        int temp;\n        for (int i = listSize - 1; i >= 0; i--)\n        {\n            if (k != 0)\n            {\n                temp = num[i] + k % 10;\n                k /= 10;\n                if (temp >= 10)\n                {\n                    ++k; // 进位\n                    temp -= 10;\n                }\n            }\n            else\n            {\n                temp = num[i];\n            }\n            results.push_back(temp);\n        }\n        while (k > 0)\n        {\n            results.push_back(k % 10);\n            k /= 10;\n        }\n\n        reverse(results.begin(), results.end());\n\n        return results; \n    }\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992559080","body":"先获取到每一个e的位置。并保存到数组中。\n再次遍历字符串，进入循环后拿到当前位置的位置，在判断位置集合是否只有1个数量，有就直接添加到结果集合中。\n没有就比较大小存入结果集合中。\n```c++\n\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        vector<int> cI = vector<int>();\n        vector<int> outRes = vector<int>();\n\n        for (int i = 0; i < s.length(); ++i)\n        {\n            if (s[i] == c)\n            {\n                cI.push_back(i);\n            }\n        }\n        int index = 0;\n        for (size_t i = 0; i < s.length(); ++i)\n        {\n            int oneNum = cI[0] - i;\n            oneNum = abs(oneNum);\n            if (cI.size() == 1)\n            {\n                outRes.push_back(oneNum);\n                continue;\n            }\n            \n            int twoNum = cI[1] - i;\n            twoNum = abs(twoNum);\n            if (oneNum <= twoNum)\n                outRes.push_back(oneNum);\n            else\n                outRes.push_back(twoNum);\n\n\n            if (i > cI[0] && i >= cI[1]) // 不会抛越界异常\n            {\n                cI.erase(cI.begin());\n            }\n        }\n\n        return outRes;\n    }\n};\n\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"junbuer":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991851273","body":"思路\n\n逐位相加，每次记录进位carry，直到k和num的每一位数都处理完，最后反转结果数组\n\n代码\n\n    class Solution(object):\n        def addToArrayForm(self, num, k):\n            \"\"\"\n            :type num: List[int]\n            :type k: int\n            :rtype: List[int]\n            \"\"\"\n            i = len(num) - 1\n            n = []\n            carry = 0\n            while k or (i >= 0) or carry:\n                if i >= 0:\n                    sum_ = num[i] + k % 10 + carry\n                else:\n                    sum_ = k % 10 + carry\n                n.append(sum_ % 10)\n                carry = sum_ // 10\n                k //= 10\n                i -= 1\n            n.reverse()\n            return n\n\n复杂度\n\n+ 时间复杂度 (max(n,  len(k)))\n+ 空间复杂度 O(n)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992204112","body":"### 思路\n\n两次遍历取最小值：\n\n+ 正向遍历，计算当前字符与左边最近的字符c的距离\n+ 反向遍历，计算当前字符与右边最近的字符c的距离\n\n最后输出两次遍历的距离的最小值\n\n### 代码\n```python\n    class Solution(object):\n        def shortestToChar(self, s, c):\n            \"\"\"\n            :type s: str\n            :type c: str\n            :rtype: List[int]\n            \"\"\"\n            pre = float('-inf')\n            dis = []\n            for i in range(len(s)):\n                if s[i] == c: \n                    pre = i\n                dis.append(i - pre)\n            pre = float('inf')\n            for i in range(len(s) - 1, -1, -1):\n                if s[i] == c:\n                    pre = i\n                dis[i] = min(dis[i], pre - i)\n            return dis\n```\n### 复杂度分析\n\n+ 时间复杂度：O(n)， 两次遍历\n+ 空间复杂度：O(n)\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993270558","body":"### 思路\n\n使用数组模拟，将数组的末尾作为栈顶\n\n### 代码\n\n```python\nclass CustomStack(object):\n\n    def __init__(self, maxSize):\n        \"\"\"\n        :type maxSize: int\n        \"\"\"\n        self.Stack = [] \n        self.maxSize =maxSize\n\n    def push(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: None\n        \"\"\"\n        if len(self.Stack) < self.maxSize:\n            self.Stack.append(x)\n        \n    def pop(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        if len(self.Stack):\n            return self.Stack.pop()\n        else:\n            return -1\n\n    def increment(self, k, val):\n        \"\"\"\n        :type k: int\n        :type val: int\n        :rtype: None\n        \"\"\"\n        for i in range(min(k, len(self.Stack))):\n            self.Stack[i] += val\n\n```\n\n### 复杂度分析\n\n+ 时间复杂度：push和pop为O(1)，increment为O(k)\n+ 空间复杂度：O(maxSize)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lonkang":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991852775","body":"// 使用BigInt偷个懒\n```js\nvar addToArrayForm = function(A, K) {\n  let N = '';\n  A.forEach( e =>{\n    N = N+e\n  })\n\n  return String(BigInt(N) + BigInt(K)).split('').map(e => Number(e))\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992551403","body":"### 思路：\n参考官方题解算双向遍历\n\n### 代码：\n```js\nvar shortestToChar = function (S, C) {\n  var res = Array(S.length).fill(0);\n\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === C) continue;\n\n    let l = i,\n      r = i,\n      tmp = Infinity;\n\n    while (l >= 0) {\n      if (S[l] === C) {\n        tmp = Math.min(tmp, i - l);\n        break;\n      }\n      l--;\n    }\n\n    while (r < S.length) {\n      if (S[r] === C) {\n        tmp = Math.min(tmp, r - i);\n        break;\n      }\n      r++;\n    }\n\n    res[i] = tmp;\n  }\n  return res;\n};\n```\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wbcz":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991853411","body":"1.数组A转换成整数，\n2.A和K再求和\n3.每位数分开\n4.再生成新数组\n\nJavaScript:\n\nConst getNewSum =（A，K）=>{\n  return（Number（ A.join（，））+K).split（，）\n}\n\n时间复杂度  O(n)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992619409","body":"时间换空间\n\nfunction shortDistance(S, C) {\n  let arrIndexs = []\n  let resNewArr = []\n  for(let i=0; i< S.length; i++) {\n    if(S[i] == C) {\n      arrIndexs.push(i)\n    }\n  }\n\n  for(let i=0; i< S.length; i++) {\n    if(S[i] == C) {\n      resNewArr[i] = 0\n    }\n    \n    for(const index of arrIndexs) {\n      resNewArr[i] = Math.abs(index -i)\n    } \n  }\n  return resNewArr\n}\n\n下标组成的数组长度为K, 字符串长度为N,时间复杂度O(K+N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aakk474548":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991855322","body":"## 思路\n\n#### 这不就是数组转成字符串加完再转成数组吗？<br/>\n\n结论：大整数算不了。估计这就是题的意义之一，大整数如何存储和加减运算\n\n#### 两层循环，从后向前逐位比。<br/>\n\n结论：想想觉得蠢，应该不至于。\n\n#### 看题解看一半<br/>\n\n思路偷到了：从num的最后一位开始加，加完了个位存起来，突突突接着往前加。<br/>\n脑子： ‘我会了‘，手：’你会个屁‘。\n\n#### 遇到几个问题再看题解之后再来<br/>\n\n- 边界：边界是num的长度或k的长度，两者共同决定循环次数，也就是最终数组长度。k.length>num.length时，得把k一位一位补完，k.length<num.length时要把num一位一位补完。<br/>\n- k的变化：全程就是对k的相加、取值和算出下一个k。相加就是num遍历结束前，k每次要和num[i]相加。取值就是k相加完取出个位。下一个k就是 除10 取整。<br/>\n- 空间：能不能不多创建那个数组。好像不能，原数组操作，向数组头添加，会增加时间复杂度。<br/>\n- 提示：提示真有用啊。再看提示其实就明白了，1就是两个正经整数，2 按位加的时候你放心做加法，没想着在这再坑你一道。\n\n## 代码\n\n```javascript\nvar addToArrayForm = function(num, k) {\n    const n = num.length;\n    const res = []\n    for(let i = n - 1; i >=0 || k != 0; i--){\n        if(i >=0){\n        \t// 相加\n            k += num[i]            \n        }\n        // 取值\n        res.push(k % 10)\n        // 下一个k\n        k = Math.floor(k / 10)\n    }\n    res.reverse()\n    return res\n};\n```\n\n## 复杂度\n时间:   O(n) <br/>\n空间:   O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992523517","body":"## 思路\n\n#### 暴力解法\n1. 先遍历一遍，把所有的位置存放在一个数组arr中\n2. 遍历s，把每个i，都拿去和arr遍历比对，计算出最小值\n3. 将最小值存储在 res 数组中\n\n#### 正反双指针\n1. 遍历两次，先从左到右，再从右到做。\n2. 先声明一个最小的整数prev当作无穷小数。\n3. 从左向右循环，遇到c则将索引赋值给prev。结果数组res每次赋值为i - prev。不用考虑前几个没遇到c的情况，一会从右向左会处理的。题干也保证了一定有c。\n4. 再将prev设置为最大整数。\n5. 从右向左循环，遇到c则将索引赋值给prev。结果数组res每次赋值为，res[i]和 prev - i 的最小值。\n\n## 代码\n\n```javascript\n    var shortestToChar = function(s, c) {\n        const len = s.length;\n        //声明成最小安全数\n        let prev = -Number.MAX_SAFE_INTEGER;\n        // 结果\n        const res = []\n        // 从左向右\n        for(let i = 0; i < len; i++){\n            if (s.charAt(i) == c) prev = i;\n            res[i] = i - prev;\n        }\n        // 此时结果大概为[-9999999999,-9999999999, 0,1,2,3,4]\n        //把prev设置为最大\n        prev = Number.MAX_SAFE_INTEGER;\n        // 从右向左\n         for(let i = len - 1; i >= 0; i--){\n\n            if (s.charAt(i) == c) prev = i;\n            // 取最小值\n            res[i] = Math.min(res[i], prev - i);\n        }\n        return res\n    };\n```\n\n## 复杂度\n时间复杂度: O(N)\n空间复杂度: O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wujunhong-max":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991855361","body":"## 思路\n1. 逐位相加，将数组的每一位和整数的每一位相加，若得到的数大于等于10，则进位\n2. 将得到的数放进新数组中，转置数组\n## 代码\n\n```cpp\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n\n    vector<int> num1;\n    int n= num.size();\n    for(int i = n-1; i>=0; i--)  // vector数组是从左往右的，num[0]是最左边的数\n    {\n        int sum = num[i]+k%10;  // 逐位相加\n        k /= 10;\n        if(sum>=10)\n        {\n            k++;\t\t\t// 进位加1\n        }\n        num1.push_back(sum%10);\n        sum = 0;\n    }\n    while(k>0)\t\t// 考虑整数k比数组 位数多 的情况\n    {\n        num1.push_back(k%10);\n        k /= 10;\n    }\n    reverse(num1.begin(), num1.end());  // 数组反转\n    return num1;\n    }\n};\n```\n\n## 复杂度\n\n时间复杂度：O(n)\n\n空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992505294","body":"## 思路\n\n1. 将出现字符的下标数字存在数组a中\n2. 遍历字符串，将每个字符下标与整个数组a比较，将最短距离存进answer数组中\n## 代码\n\n暴力解法：\n\n```cpp\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        vector<int> a;\n\n        for(int i=0; i<s.size(); i++)\n        {\n            if(s[i] == c)\n                a.push_back(i);  // 将出现字符的下标数字存在数组a中\n        }\n\n        vector<int> answer;\n        for(int i=0; i<s.size(); i++)  // 遍历字符串\n        {\n            int num = s.size();\n            for(int j=0; j< a.size(); j++)   // 将每个字符下标与整个数组a比较，将最短距离存进answer数组中\n            {\n                num = min(num, abs(a[j]-i));\n            }\n            answer.push_back(num);\n        }\n        return answer;\n    }\n};\n```\n\n\n\n## 复杂度\n\n时间复杂度：O(n^2)\n\n空间复杂度：O(1)\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pengfeicchen":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991857243","body":"class Solution {\n    public List<Integer> addToArrayForm(int[] num, int K) {\n        List<Integer> res = new LinkedList<>();\n        for (int i = num.length - 1; i >= 0; --i) {\n            res.add(0, (num[i] + K) % 10);\n            K = (num[i] + K) / 10;\n        }\n        while (K > 0) {\n            res.add(0, K % 10);\n            K /= 10;\n        }\n        return res;\n    }\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992175534","body":"class Solution {\n    public int[] shortestToChar(String S, char C) {\n        char[] cc = S.toCharArray();\n        int[] result = new int[cc.length];\n        List<Integer> index = new ArrayList<>();\n        for(int i=0;i<cc.length;i++){\n            if(cc[i]==C){\n                index.add(i);\n                System.out.print(i);\n            }\n        }\n        int count=0;\n        for(int i=0;i<cc.length;i++){\n            if(i==index.get(count)){\n                if(count<index.size()-1){\n                    count++;\n                }\n                result[i] = 0;\n            }else if(count==0 && i<index.get(count)){\n                result[i] = index.get(count)-i;\n            }else if(count==index.size()-1 && i>index.get(count)){\n                result[i] = i - index.get(count);\n            }else if(count>0){\n                if(i-index.get(count-1) < index.get(count)-i){\n                    result[i] = i-index.get(count-1);\n                }else{\n                    result[i] = index.get(count)-i;\n                }\n            }\n        }\n        return result;\n    }\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993223866","body":"// time:O(n) space:O(n)\npublic int[] arr;\n    public int size;\n    public int max;\n    public _1381_DesignaStackWithIncrementOperation(int maxSize) {\n        size = 0;\n        max = maxSize;\n        arr = new int[1001];\n    }\n    \n    public void push(int x) {\n        if (size < max) {\n            arr[size++] = x;\n        }\n    }\n    \n    public int pop() {\n        if (size < 1) return -1;\n        int res = arr[size - 1];\n        size--;\n        return res;\n    }\n    \n    public void increment(int k, int val) {\n        int j = k < size ? k : size;\n        for (int i = 0; i < j; i++) {\n            arr[i] += val;\n        }\n    }","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"stonehit":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991858521","body":"## 思路\r\n逐位相加，记录进位，计算后头插到结果数组\r\n\r\n## 代码\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> res = new ArrayList<>();\r\n        int carry = 0;\r\n        for(int i = num.length - 1;i >= 0 || k > 0;i--){\r\n            int dec = (k % 10) + carry;\r\n            dec += i >= 0 ? num[i] : 0;\r\n            k = k / 10;\r\n            carry = 0;\r\n            if(dec >= 10){\r\n                carry = 1;\r\n                dec = dec % 10;\r\n            }\r\n            res.add(0,dec);\r\n        }\r\n        if(carry != 0)  res.add(0,1);\r\n        return res;\r\n    }\r\n\r\n\r\n}\r\n```\r\n## 复杂度\r\n空间O(N)\r\n时间O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992550562","body":"## 思路\r\n前后各遍历一次，记录为C的索引位置\r\n## 代码\r\n```java\r\nclass Solution {\r\n    public int[] shortestToChar(String S, char C) {\r\n        int[] res = new int[S.length()];\r\n        int index = -S.length();\r\n        for(int i = 0;i<S.length();i++){\r\n            if(S.charAt(i) == C){\r\n                index = i;\r\n                res[i] = 0;\r\n            }else{\r\n                res[i] = i-index;\r\n            }\r\n        }\r\n        index = 10000;\r\n        for(int j = S.length() - 1;j>=0;j--){\r\n            if(S.charAt(j) == C){\r\n                index = j;\r\n            }else{\r\n                res[j] = Math.min(index-j,res[j]);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}\r\n```\r\n\r\n## 复杂度\r\n时间O(N)\r\n空间O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ggohem":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991860708","body":"### 思路：\n\n将对应元素从个位起往前依次相加，当有进位时，需要考虑进位，这里我为了方便使用了链表的数据结构，把数组num和k都放到了两个链表上，依次遍历两个链表，并把结果存在一个新的链表上\n\n### 代码：\n\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        LinkedList<Integer> list1 = new LinkedList<>();\n        LinkedList<Integer> list2 = new LinkedList<>();\n        LinkedList<Integer> list3 = new LinkedList<>();\n        for (int i : num) {\n            list1.addLast(i);\n        }\n        while (k != 0) {\n            list2.addFirst(k % 10);\n            k /= 10;\n        }\n        int carried = 0;\n        while (list1.size()!=0||list2.size() != 0 || carried != 0) {\n            int n1 = list1.size() != 0 ? list1.removeLast() : 0;\n            int n2 = list2.size() != 0 ? list2.removeLast() : 0;\n            int sum = n1 + n2 + carried;\n            int inser = sum % 10;\n            carried = sum / 10;\n            list3.addFirst(inser);\n        }\n        return list3;\n    }\n}\n```\n\n### 时空复杂度：\n\n- 时间复杂度： O(max(n,len(k)) \n- 空间复杂度：O(n)\n- 这里不是很会分析\n\n\n\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992070313","body":"### 思路：\n\n遍历一边字符串将所有元素进行比较进而选中待比较元素，再将其向前向后分别进行遍历查找最近的字符c，设置两个标记flag1和flag2。当只有一边出现了字符c，则肯定有一边的距离为0，此时flag1和flag2必有一个是false，这是我们选用左边距离和右边距离的最大值(把没出现c的那一边剔除)；当两边都有字符c，此时flag1和flag2都为true，这时选用左边距离和右边距离的最小值(两边都有距离)\n\n### 代码\n\n```java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int[] dis = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            char temp = s.charAt(i);\n            boolean flag1 = false, flag2 = false;\n            int distance_1 = 0, distance_2 = 0;\n            for (int left = i; left >= 0; left--) {\n                char temp1 = s.charAt(left);\n                if (temp1 == c) {\n                    distance_1 = Math.abs((i - left));\n                    flag1 = true;\n                    break;\n                }\n            }\n            for (int right = i; right <= s.length() - 1; right++) {\n                char temp2 = s.charAt(right);\n                if (temp2 == c) {\n                    distance_2 = Math.abs((i - right));\n                    flag2 = true;\n                    break;\n                }\n            }\n            int distance = flag1 && flag2 ? Math.min(distance_1, distance_2) : Math.max(distance_1, distance_2);\n            dis[i] = distance;\n        }\n        return dis;\n    }\n}\n```\n\n### 时空复杂度：\n\n- 时间复杂度：*O*(*N*^2）\n- 空间复杂度：*O*(*N*)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bigboom666":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991861963","body":"### 思路\n- k转为数组，处理两个数组的相加。\n- 双指针移动计算两个数组，标志位处理进位，结果存入stack，最后转为list\n\n### 代码\n```java\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        int[] numK = intToArray(k);\n        int a = num.length - 1;\n        int b = numK.length - 1;\n        boolean isUp = false;\n        Stack<Integer> stack = new Stack();\n        List<Integer> list = new LinkedList();\n        while(a>=0 || b>=0 || isUp){\n            int result = 0;\n            if(isUp){\n                result = 1;\n                isUp = false;\n            }\n            if(a <0 && b<0){\n                //result += 0;\n            }else if(a <0){\n                result += numK[b];\n            }else if(b <0){\n               result += num[a];\n            }else{\n                result += num[a] + numK[b];\n            }\n            a--;\n            b--;\n\n            if(result >= 10){\n                isUp = true;\n            }\n            stack.push(result % 10);\n            System.out.print(\"stack: [\");\n            System.out.print( result % 10);\n            System.out.print(\"]\");\n        }\n\n        while(!stack.isEmpty()){\n            list.add(stack.pop());\n        }\n        return list;\n    }\n\n    public int[] intToArray(int k) {\n        System.out.print(\"intToArray: [\");\n        String temp =  String.valueOf(k);\n        int[] result = new int[temp.length()];\n        for(int i=0; i<temp.length(); i++){\n            result[i] = Integer.parseInt(String.valueOf(temp.charAt(i)));\n             System.out.print(result[i]);\n        }\n        System.out.print(\"]\");\n        return result;\n    }\n```\n\n### 复杂度\nO(3n)  O(2n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992124867","body":"### 思路\n通过正反两次遍历，每次遍历计算当前char与前一个指定的c的下标差。\n\n### 代码\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int[] result = new int[s.length()];\n        int cIndex = -1;\n        for(int i=0; i<s.length(); i++){\n            if(s.charAt(i) == c){\n                result[i]=0;\n                cIndex = i;\n                continue;\n            }\n\n            if(cIndex == -1){\n                result[i]=-1;\n                continue;\n            }else{\n                result[i]=i-cIndex;\n            }\n        }\n\n\n        cIndex = -1;\n        for(int i=s.length()-1; i>=0; i--){\n            if(s.charAt(i) == c){\n                result[i]=0;\n                cIndex = i;\n                continue;\n            }\n            if(cIndex != -1){\n                int temp = cIndex -i;\n                if(result[i]==-1 || temp < result[i] ){\n                    result[i]=temp;\n                }\n                \n            }\n        }\n\n\n        return result;\n    }\n}\n\n### 复杂度\nO(n) O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"darkpmm":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991863806","body":"class Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        int len=num.size();\n        vector<int> ans;\n        for(int i=len-1 ; i>=0 ; --i){\n            int sum = num[i]+k%10;\n            k = k/10;\n            if(sum>=10){\n                sum = sum%10;\n                k++;\n            }\n            ans.push_back(sum);\n        }\n        while(k>0){\n            ans.push_back(k%10);\n            k=k/10;\n        }\n        reverse(ans.begin(),ans.end());\n        return ans;\n    }\n};","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pf135145":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991864094","body":"### 思路\r\n\r\n因为js在大数计算时有精度问题，因此把每一位单独计算\r\n\r\n把k转化成数组方便计数\r\n\r\n在这里为了方便所以把数组反转了\r\n\r\n考虑首位可能会出现进位问题再单独处理下\r\n\r\n\r\n### 代码\r\n\r\n``` javascript\r\nvar addToArrayForm = function(num, k) {\r\n  let over = false;\r\n  let kArr = k.toString().split('');\r\n  let index = 0;\r\n  let newArr = [];\r\n  num.reverse();\r\n  kArr.reverse();\r\n  while (index < num.length || index < kArr.length) {\r\n      let i = num[index] || 0\r\n      let k = Number(kArr[index]) || 0\r\n      let res = i + k\r\n      if (index > 0 && over) {\r\n          res += 1\r\n      }\r\n      if (res >= 10) {\r\n          over = true;\r\n          newArr.push(res - 10)\r\n      } else {\r\n          over = false;\r\n          newArr.push(res)\r\n      }\r\n      index ++\r\n  }\r\n  if (over) newArr.push(1);\r\n  return newArr.reverse()\r\n};\r\n\r\n```\r\n\r\n### 复杂度\r\n\r\n时间复杂度： o(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992271708","body":"### 思路\n\n把长字符串转成数组A\n\n先存储目标字符在数组中出现的位置存储为数组B\n\n循环数组A，对比每项和数组B首个数字的差值，若小于零，则取第二位对比两个差值的绝对值，取小的，注意下是否数组B已取完\n\n### 解题\n\n```js\nvar shortestToChar = function(s, c) {\n  let sArr = s.split('');\n  let tarArr = []\n  sArr.forEach((o, idx) => {\n    if (o === c) tarArr.push(idx)\n  })\n  let newArr = []\n  sArr.forEach((o, idx) => {\n    let tarIdx = tarArr[0]\n    if (idx > tarIdx) {\n      if (tarArr.length ==1 || idx - tarIdx < tarArr[1] - idx) {\n        newArr.push(idx - tarIdx)\n      } else {\n        tarArr.shift()\n        newArr.push(tarArr[0] - idx)\n      }\n    } else {\n      newArr.push(tarIdx - idx)\n    }\n  })\n  return newArr\n};\n```\n\n### 复杂度\n\n时间复杂度：O(n)\n\n空间复杂度：O(n)？","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luhnn120":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991865405","body":"### 思路\n逐位相加的思路，记录进位数。遍历完k和数组，遍历过程中，数组超出范围时，以0代替当次累加。遍历完毕后，如果存在进位，则将进位数增加到首部。\n### 代码\n```\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n  let i = num.length - 1, carry = 0,res = [];\n  while (i >= 0 || k > 0) { \n    let sum = ( i < 0 ? 0 : num[i] ) + k%10 + carry;\n    if (sum >= 10) {\n      carry = 1;\n      sum = sum % 10;\n    } else { \n      carry = 0\n    }\n    res.push(sum)\n    i--;\n    k = parseInt(k/10)\n  }\n  if (carry === 1) { \n    res.push(carry)\n  }\n  return res.reverse();\n};\n```\n### 复杂度\n时间复杂度：O(MAX(M,N)) M 数组长度，N k长度\n\n空间复杂度：O(MAX(M,N)) M 数组长度，N k长度","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992496590","body":"### 思路\n正反遍历数组，得到两种情况的距离值取最小值。若目标元素下标为pre，则从左到右遍历得到左邻目标元素距离为pre-i，从右到左遍历的得到右邻目标元素距离为i-pre。注意两次pre的初始值，由于数组长度在1到10^4。取初始值为±(10^4+1),使不存在目标元素时值为最大。\n### 代码\n```\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\n var shortestToChar = function(s, c) {\n  const length = s.length,result = [];\n  let pre = -Math.pow(10,4) - 1\n  for(let i = 0; i < length; i++){\n    if(s[i] === c){\n      pre = i\n    }\n    result.push(i-pre)\n  }\n  pre = Math.pow(10,4) + 1\n  for(let i = length-1; i >=0; i--){\n    if (s[i] === c) { \n      pre = i\n    }\n    let range = pre - i;\n    if (result[i] > range) {\n      result[i] = range\n    }\n  }\n  return result;\n};\n```\n### 复杂度\n时间复杂度：O(N)\n空间复杂度：O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"demo410":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991866798","body":"#### 思路\r\n\r\n* 从后往前遍历num数组，同时通过取余获得K的最后一位数，将两个数相加，注意进位。如果两个数的位数不一致，通过补0来继续相加。\r\n\r\n#### 代码\r\n\r\n```java\r\npublic static List<Integer> addToArrayForm(int[] num, int k) {\r\n        Stack<Integer> result = new Stack<>();\r\n        List<Integer> finalResult = new ArrayList<>();\r\n        int l = num.length;\r\n        boolean carry  = false;\r\n\r\n        while (l != 0 || k != 0){\r\n            int a = 0, b = k % 10;\r\n\r\n            if(l != 0) a = num[--l];\r\n\r\n            k /= 10;\r\n\r\n            int c = a + b;\r\n\r\n            if(carry) {\r\n                c += 1;\r\n                carry = false;\r\n            }\r\n\r\n            if(c >= 10) carry = true;\r\n            result.push(c % 10);\r\n        }\r\n\r\n        if (carry) result.push(1);\r\n        while (!result.empty()) finalResult.add(result.pop());\r\n        return result;\r\n    }\r\n```\r\n\r\n#### 复杂度\r\n\r\n* 时间复杂度：时间复杂度主要取决于数组的长度N和K的位数，即O(max(N, len(k)))\r\n* 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992158995","body":"### 思路\n\n* l指向数组中左侧的c的位置，r指向数组中右侧c的位置，计算`Math.min(r - i, i - l)`,注意边界情况\n\n### 代码\n\n```java\n    public static int[] shortestToChar(String s, char c) {\n        int[] result = new int[s.length()];\n        int l = 0, r = 0;\n\n        while (r != s.length()) {\n\n            for (r = l + 1; r < s.length(); r++) {\n                if (s.charAt(r) == c) break;\n            }\n\n            for (int i = l; i < r; i++) {\n                if (l == 0 && s.charAt(0) != c) result[i] = r - i;\n\n                else if (r == s.length() && s.charAt(r - 1) != c) result[i] = i - l;\n\n                else {\n                    result[i] = Math.min(r - i, i - l);\n                }\n            }\n\n            l = r;\n        }\n        return result;\n    }\n```\n\n### 复杂度\n\n* 时间复杂度：O(N)\n* 空间复杂度：O(N)\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993130891","body":"### 思路\n\n* 维护一个diff数组，diff[min(K, maxSize)] 代表对数组的前多少个元素相加，在pop的时候将diff数组中的值与栈顶的值相加\n\n### 代码\n\n```java\n  private final int[] innerStack;\n    private final int[] diff;\n    private final int maxSize;\n    private int length;\n\n    public CustomStack(int maxSize) {\n        this.innerStack = new int[maxSize];\n        this.diff = new int[maxSize];\n        this.maxSize = maxSize;\n        this.length = 0;\n    }\n\n    public void push(int x) {\n        if (this.length == this.maxSize) return;\n\n        this.innerStack[this.length++] = x;\n\n    }\n\n    public int pop() {\n        if (this.length == 0) return -1;\n        int res = innerStack[this.length - 1] + diff[this.length - 1];\n\n        if (this.length > 1){\n            diff[this.length - 2] += diff[this.length - 1];\n        }\n        diff[--this.length] = 0;\n\n        return res;\n    }\n\n    public void increment(int k, int val) {\n        int maxInc = Math.min(k, this.length);\n        if (this.length > 0)\n            diff[maxInc - 1] += val;\n    }\n```\n\n### 复杂度\n\n* 时间复杂度：pop、push、increment都是O(1)\n* 空间复杂度：O(maxSize)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"didiyang4759":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991867259","body":"思路：\r\nA 的当前位 + B 的当前位 + 进位， 最后判断是否还有进位\r\n\r\n```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] A, int K) {\r\n        int n = A.length;\r\n        List<Integer> res = new ArrayList<>(); \r\n        int i = n - 1, sum = 0, carry = 0;\r\n        while (i >= 0 || K != 0) {  \r\n            int x = i >= 0 ? A[i]: 0;\r\n            int y = K != 0 ? K % 10 : 0;              \r\n            sum = x + y + carry;\r\n            carry = sum / 10;\r\n            K = K / 10;\r\n            i--;\r\n            res.add(0, sum % 10);\r\n        }\r\n        if (carry != 0) res.add(0, carry);\r\n        return res;\r\n    }\r\n}\r\n```\r\n","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993216884","body":"class CustomStack {\r\n    int[] stack;\r\n    int top;\r\n\r\n    public CustomStack(int maxSize) {\r\n        stack = new int[maxSize];\r\n        top = -1;\r\n    }\r\n    \r\n    public void push(int x) {\r\n        if (top != stack.length - 1) {\r\n            ++top;\r\n            stack[top] = x;\r\n        }\r\n    }\r\n    \r\n    public int pop() {\r\n        if (top == -1) {\r\n            return -1;\r\n        }\r\n        --top;\r\n        return stack[top + 1];\r\n    }\r\n    \r\n    public void increment(int k, int val) {\r\n        int limit = Math.min(k, top + 1);\r\n        for (int i = 0; i < limit; ++i) {\r\n            stack[i] += val;\r\n        }\r\n    }\r\n}","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zzrebas":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991867485","body":"# Day 1-[989. 数组形式的整数加法](https://leetcode-cn.com/problems/add-to-array-form-of-integer/)\n\n## 思路\n遍历数组A，取出每个元素转换为字符串，再拼在一起，然后转为int整形，再与整数K相加，得出的结果再转为字符串，再遍历每一个元素输出到新的数组中。\n\n\n## 代码(python)\n```python\ndef fun(A,K):\n    a=''.join(str(x) for x in A)\n    b=int(a)+K\n    out=[]\n    for i in str(b):\n        out.append(int(i))\n    print(out)\n\nA = [1,2,0,0]\nK = 34\nfun(A,K)    #[1, 2, 3, 4]\nfun(A = [2,7,4], K = 181)   #[4, 5, 5]\nfun(A = [2,1,5], K = 806)   #[1, 0, 2, 1]\nfun(A = [9,9,9,9,9,9,9,9,9,9], K = 1)   #[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n```\n\n## 复杂度\n**时间复杂度：** O(n)，n为数组A的长度。\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992248450","body":"### 思路\n1. 先找到字符C在字符串S中的所有的索引位置。\n2. 构建一个新的数组，数组长度为len(S)，对应所有C的索引位置设为0，其他元素先设为None。\n3. 再根据C的索引在对应新数组中0的位置进行排序：\n    - 最左边的0，向左排序\n    - 最右边的0，向右排序\n    - 中间位置的0，向两个0的中间排序\n\n### 代码(Python)\n```python\ndef fun(S,C):\n    C_index=[]\n    out_list=[]\n    for n,i in enumerate(S):\n        out_list.append(None)\n        if i ==C:\n            C_index.append(n)\n            out_list[n]=0\n\n    #从第一个字符C向左排序\n    for n,i in enumerate(range(C_index[0]+1)[::-1]):\n        out_list[n]=i\n    # print(out_list)   #[3, 2, 1, 0, None, 0, 0, None, None, None, None, 0, None, None]\n\n    #从最后一个字符C向右排序\n    for n,i in enumerate(out_list[C_index[-1]:]):\n        out_list[C_index[-1]+n]=n\n    # print(out_list)     #[3, 2, 1, 0, None, 0, 0, None, None, None, None, 0, 1, 2]\n\n    #中间的字符C,向两个C的中间排序\n    for i in range(len(C_index)-1):\n        subtract=C_index[i+1]-C_index[i]\n        if subtract%2==0:\n            division=subtract//2\n        else:\n            division=(subtract-1)//2\n        for j in range(1,division+1):\n            out_list[C_index[i]+j]=j\n            out_list[C_index[i+1]-j]=j\n\n    print(out_list)\n\nS = \"loveleetcodedf\"\nC = 'e'\nfun(S,C)    #[3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0, 1, 2]\n```\n\n### 复杂度分析\n- 时间复杂度： \n- 空间复杂度：\n\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hacker90":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991868483","body":"\n思路：\n-\n按位相加，长度先以已知数组为标准处理\n\n\n代码\n-\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n       \n  \n       int i = 0;\n       int sum = 0;\n       vector<int> res;\n       if(k == 0)return num;\n       for(i = num.size()-1;(i>=0);--i)\n       {\n           sum = num[i] + k%10;\n           k = k/10;\n           if(sum >= 10 ){\n               k = k + 1;\n               sum = sum - 10;\n           }\n           res.push_back(sum);\n       }\n        for(;k>0;k = k/10) {\n    \n               res.push_back(k%10);\n          \n        }\n        reverse(res.begin(),res.end());\n       return res;\n    }\n};\n\n\n复杂度分析\n-\n\n空间复杂度：O(n)\n\n\n时间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992577643","body":"### 思路\n\n题目是计算到指定字符的绝对距离，考虑到字符有在左边，有在右边，即从左开始遍历，有从右开始遍历，遍历中取两者最小值即求解\n\n当从左开始遍历，没有找到字符默认距离为字符串长度\n当从右开始遍历，为保持没找到时为最大值，设置为字符串的2倍(确保第一个没找到，值为保持字符串长度)\n### 代码\n\n\n```cpp\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        \n        int len = s.size();\n        int i;\n        int p_match = -len;\n        \n        vector<int> res(len,len);\n        for(i = 0;i<len;i++) {\n            if(s[i]==c)p_match = i;\n            res[i] = min(res[i],i-p_match);\n        }\n        int rlen = 2*len;\n        for(i = len-1;i>=0;i--) {\n            if(s[i]==c)rlen = i;\n            res[i] = min(res[i],rlen-i);\n        }\n        cout<<res[0];\n        return res;\n    }\n};\n\n\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(1)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"alvinzhouoops":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991869153","body":"如果直接在数组A上做加法和进位，如果和的长度大于A，需要在A前面插入元素，在数组中不太好实现，所以还是要用新的数组来存放。\npython\nclass Solution{\n    def AddListAndInt(int[] A, int K):\n        n = len(A)\n        sum = A[0]\n        for i in range(1, n):\n            sum += sum*10 + A[i]\n       sum = sum + K\n       tem = []\n       while(sum > 0):\n           item = sum%10\n           tem.append(item)\n           sum = sum//10\n       return tem[::-1]\n     \n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992020789","body":"\r\n```\r\nClass Solution:\r\n    def getDisFromStr(self, String, C):\r\n        n = len(String)\r\n        res = [n for _ in range(n)]\r\n        l = r = 0\r\n        for r in range(n):\r\n            if String[r] == C:\r\n                while l <= r:\r\n                    res[l] = r - l\r\n                    l += 1\r\n       r = n -1\r\n       for l in range(n-1, -1, -1):\r\n           if String[l] == C:\r\n               while r >= l:\r\n                   res[r] = min(res[r], r-l)\r\n                   r -= 1\r\n      return res\r\n```\r\n\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993261850","body":"class CustomStack:\n\n    def __init__(self, size: int):\n        self.st = []\n        self.cnt = 0\n        self.size = size\n\n    def push(self, x: int) -> None:\n        if self.cnt < self.size:\n            self.st.append(x)\n            self.cnt += 1\n\n\n    def pop(self) -> int:\n        if self.cnt == 0: return -1\n        self.cnt -= 1\n        return self.st.pop()\n\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(0, min(self.cnt, k)):\n            self.st[i] += val","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fredxxj":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991869799","body":"# 用python处理起来非常简单，先试试\n\n```\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        n = 0\n        for i in num:\n            n = n * 10 + i\n        n += k\n        return [int(ch) for ch in str(n)]\n```\n\n\n\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992549208","body":"### 思路：先得到所有字符的索引列表，然后从头开始遍历，建立下边界和上边界两个变量，如果当前索引小于上边界，则不需要调整边界，否则将上边界改为下边界，上边界取索引当中的下一个值，另外处理好索引两端即可\n\n```python\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        len_s = len(s)\n        dis = [i for i in range(len_s) if s[i] == c]\n        j = 0\n        lower, upper = - 2 * len_s, dis[j]\n        result = []\n        for i in range(len_s):\n            if i > upper:\n                lower = upper\n                if j < len(dis) - 1:\n                    j += 1\n                    upper = dis[j]\n                else:\n                    upper = 2 * len_s\n            result.append(min(upper - i, i - lower))\n        return result\n```\n\n\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chenyaohn":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991870273","body":"### 思路\n\n从n-1至0开始遍历A数组，将其与K对应位置上的进行累加（通过取余获取K各个位置上的值,K%10,(int)(k/10)），如大于等于10则需进位+1，flag为进位标志。\n当K位数大于A数组长度时，需将K的剩余位置的值也添加至结果集合中，同时也需要判断进位。\n最后当A数据与K全部遍历完毕后，如还有进位，则需于结果集合中再度添加1。\n\n### 代码\n\n\n```java\npublic List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> list = new ArrayList<Integer>();\n        boolean flag = false; // 判断是否需要进位+1\n        for (int i = num.length-1; i >=0 ; i--) {\n                if(k==0){\n                    int curValue = flag ? num[i]+1:num[i];\n                    flag = curValue>=10;\n                    list.add(flag?curValue-10:curValue);//进位则加1\n                }else {\n                    int n = k % 10;//k最后一位\n                    int curValue = flag ? num[i]+n+1:num[i]+n;\n                    flag = curValue>=10;\n                    list.add(flag ?curValue-10:curValue);\n                    k /= 10;\n                }\n            }\n\n        while (k!=0){//num数组已累加完毕，k未累加完毕\n            int n = k%10;//k最后一位\n            int curValue = flag ? n+1:n;\n            flag = curValue>=10;\n            list.add(flag?curValue-10:curValue);\n            k/=10;\n        }\n        //k已累加完毕，仍然需要进位，则结果list add 1（如9+1=10这种情况）\n        if(k==0&&flag){\n            list.add(1);\n        }\n        Collections.reverse(list);\n        return list;\n    }\n```\n\n**复杂度分析**\n- 时间复杂度：O(max(A,K))，其中 A 为数组A长度,k为k位数。\n- 空间复杂度：O(1)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992216549","body":"### 思路\n最开始思路是获取s[i]到s中每个c字符位置，取最短的长度。实际上这里增加了很多重复比较，导致时间复杂度变高。\n查看官网题解，O(N)时间复杂度的思路是从左至右找出上一次c字符出现位置，并获取其距离，再从右至左找出上一次c字符出现位置获取其距离，与从左至右的距离比较，最终结果取最短的那个。\n### 代码\n```java\n//O(n^2>)时间复杂度\npublic int[] shortestToChar(String s, char c) {\n        int [] res = new int[s.length()];\n        for (int i = 0; i < res.length; i++) {\n            res[i] = 105;\n            for (int j = 0; j < s.length() && res[i] != 0; j++) {\n                if(s.charAt(j)==c && Math.abs(i-j)<=res[i]){\n                    res[i] = Math.abs(i-j);\n                }\n            }\n\n        }\n        return res;\n    }\n//O(n)时间复杂度\n public int[] shortestToChar2(String s, char c) {\n        int [] res = new int[s.length()];\n        int prev = 105;\n        for (int i = 0; i < res.length; i++) {\n\n            if(s.charAt(i)==c){\n                prev = i;\n            }\n            res[i] = Math.abs(i-prev);\n        }\n\n        for (int i = res.length-1; i >=0 ; i--) {\n            if(s.charAt(i)==c){\n                prev = i;\n            }\n            res[i] =Math.min(Math.abs(i-prev),res[i]);\n        }\n        return res;\n    }\n```\n### 复杂度\n时间复杂度： O(n <sup>2</sup> )\n空间复杂度： O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"eliassama":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991872005","body":"## 整体思路\n\n整个题可以看作是一个纯粹的数字相加的题，因为不管是数字还是数组，都是有序。\n\n如1024这个数，不管是number类型的1024还是数组类型的 [1,0,2,4]都是一样的，不同的只是展现形式。\n\n所以这道题的关键点在于采用哪种形式进行计算，以及如何转换为最终要的数组形式。其实计算反而不重要。\n\n在解题时需要注意下溢出问题，这个题的测试用例是会有大数的，部分编程语言是不支持大数的 ( 如js的int32只支持18位以内的精确大数 ) ，所以计算要取巧。\n\n\n\n### 解题思路\n\n采用古老而笨拙的按位进制法，即以numArray作为遍历条件，从最低位到最高位依次与k的最低位到最高位进行相加。\n\n在相加的过程中有些东西需要注意：\n\n+ 因为每次相加都是单位数相加，所以最大的值为18 ( 9 + 9 )。而每个元素只能承载单位数，所以会向前进一，所以实际最大值为19 ( 9 + 9 + 1 )。但是这个数不会超过19。所以要考虑两点：\n  + 除了个位数外，如果上次相加的数有进位的，则每次相加时都要加上进位。\n  + 如果每次相加的结构需要进位的，需要记录在下一次相加时加上。\n+ 因为以numArray作为遍历条件，所以可能会出现下列两种情况从而导致溢出问题，需要考虑进去：\n  + k的值的位数可能会比numArray的位数大，比如[2,1]和3600。\n  + 两个数相加，最后要整体向前进一位，比如[9,9,9]和1\n\n\n\n#### 版本一\n\n##### Code\n\n```typescript\nfunction addToArrayForm(numArray: number[], k: number): number[] {\n\n    const KStr: string = String(k)\n    let numArrayIndex: number = numArray.length - 1\n    let KStrIndex: number = KStr.length - 1\n    let lastNum:number = 0\n\n    for(;numArrayIndex > -1; --numArrayIndex, --KStrIndex){\n        numArray[numArrayIndex] += (parseInt(KStr[KStrIndex]) || 0) + lastNum\n        lastNum = 0\n        if(numArray[numArrayIndex] > 9){\n            numArray[numArrayIndex] -= 10\n            lastNum = 1\n        }\n    }\n    \n    if(KStrIndex > -1){\n        let overflowStr: string = String(parseInt(KStr.substring(0, KStrIndex + 1)) + lastNum)\n        KStrIndex = overflowStr.length - 1\n        lastNum = 0\n        const overflowArray: number[] = []\n        for(;KStrIndex > -1; --KStrIndex){\n            overflowArray.push(parseInt(overflowStr[KStrIndex]))\n        }\n        overflowArray.reverse()\n        numArray = [...overflowArray,...numArray]\n    }\n\n    if(lastNum === 1){\n        numArray = [1,...numArray]\n    }\n\n    return numArray\n};\n```\n\n\n\n##### 复杂度分析\n\n- 时间复杂度：O(N)，其中 N 为 numArray 或 k 的最大长度。\n- 空间复杂度：O(N)，其中 N 为 numArray 加 k 的长度，并有可能会在此基础上 + 1。\n\n\n\n#### 版本二\n\n##### Code\n\n```typescript\nfunction addToArrayForm(numArray: number[], k: number): number[] {\n\n    const kArray: string[] = String(k).split(\"\")\n    let kIndex: number = kArray.length - 1\n    let nIndex: number = numArray.length - 1\n    const resultArray: number[] = []\n\n    let lastNum:number = 0\n    for(;kIndex > -1 || nIndex > -1 ; --kIndex, --nIndex){\n        let result = (parseInt(kArray[kIndex]) || 0) + (numArray[nIndex] || 0) + lastNum\n        lastNum = 0\n        if(result > 9){\n            result -= 10\n            lastNum = 1\n        }\n        resultArray.push(result)\n\n        if(kIndex <= 0 && nIndex <= 0 && lastNum === 1){\n            resultArray.push(1)\n        }\n\n    }\n    \n    return resultArray.reverse()\n};\n```\n\n\n\n##### 复杂度分析\n\n- 时间复杂度：O(N)，其中 N 为 numArray 或 k 的最大长度。\n- 空间复杂度：O(N)，其中 N 为 numArray 或 k 的最大长度，并有可能会在此基础上 + 1。","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"noperoc":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991873365","body":"\n## 题目地址(989. 数组形式的整数加法)\n\nhttps://leetcode-cn.com/problems/add-to-array-form-of-integer/\n\n## 题目描述\n\n```\n对于非负整数 X 而言，X 的数组形式是每位数字按从左到右的顺序形成的数组。例如，如果 X = 1231，那么其数组形式为 [1,2,3,1]。\n\n给定非负整数 X 的数组形式 A，返回整数 X+K 的数组形式。\n\n \n\n示例 1：\n\n输入：A = [1,2,0,0], K = 34\n输出：[1,2,3,4]\n解释：1200 + 34 = 1234\n\n\n示例 2：\n\n输入：A = [2,7,4], K = 181\n输出：[4,5,5]\n解释：274 + 181 = 455\n\n\n示例 3：\n\n输入：A = [2,1,5], K = 806\n输出：[1,0,2,1]\n解释：215 + 806 = 1021\n\n\n示例 4：\n\n输入：A = [9,9,9,9,9,9,9,9,9,9], K = 1\n输出：[1,0,0,0,0,0,0,0,0,0,0]\n解释：9999999999 + 1 = 10000000000\n\n\n \n\n提示：\n\n1 <= A.length <= 10000\n0 <= A[i] <= 9\n0 <= K <= 10000\n如果 A.length > 1，那么 A[0] != 0\n```\n\n## 前置知识\n\n- \n\n## 公司\n\n- \n\n## 思路\n- 模拟竖式 逐位相加  \n## 关键点\n\n-  最后一位剩余进位别忘了加\n\n## 代码\n\n- 语言支持：Java\n\nJava Code:\n\n```java\n\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        ArrayList<Integer> kk = new ArrayList<>();\n        while(k != 0){\n            int tmp = k % 10;\n            k = k / 10;\n            kk.add(0,tmp);\n        }\n        int ml = num.length;\n        int kl = kk.size();    \n        ArrayList<Integer> ans = new ArrayList<>();  \n        int flag = 0;\n        while(ml != 0 && kl != 0){\n            int tmp = num[ml-1] + kk.get(kl-1) + flag;\n            if(tmp >= 10){\n                flag = 1;\n                tmp -= 10;\n            }\n            else\n                flag = 0;\n            ans.add(0, tmp);\n            kl--;\n            ml--;\n        } \n        if(ml != 0){\n            for(int i = ml-1; i>=0 ; i--){\n                int tmp = num[i];\n                if(flag == 1){\n                    tmp++;\n                    flag = 0;\n                }\n                if(tmp == 10){\n                    tmp = 0;\n                    flag = 1;\n                }\n                ans.add(0, tmp);\n            }\n        }else if(kl != 0){\n            for(int i = kl-1; i>=0 ; i--){\n                int tmp = kk.get(i);\n                if(flag == 1){\n                    tmp++;\n                    flag = 0;\n                }\n                if(tmp == 10){\n                    tmp = 0;\n                    flag = 1;\n                }\n                ans.add(0, tmp);\n            }\n        }\n        if(flag == 1){\n            ans.add(0, 1);\n        }\n        return ans;\n    }\n}\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(n)$\n- 空间复杂度：$O(n)$\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992375175","body":"\n## 题目地址(821. 字符的最短距离)\n\nhttps://leetcode-cn.com/problems/shortest-distance-to-a-character/\n\n## 题目描述\n\n```\n给你一个字符串 s 和一个字符 c ，且 c 是 s 中出现过的字符。\n\n返回一个整数数组 answer ，其中 answer.length == s.length 且 answer[i] 是 s 中从下标 i 到离它 最近 的字符 c 的 距离 。\n\n两个下标 i 和 j 之间的 距离 为 abs(i - j) ，其中 abs 是绝对值函数。\n\n \n\n示例 1：\n\n输入：s = \"loveleetcode\", c = \"e\"\n输出：[3,2,1,0,1,0,0,1,2,2,1,0]\n解释：字符 'e' 出现在下标 3、5、6 和 11 处（下标从 0 开始计数）。\n距下标 0 最近的 'e' 出现在下标 3 ，所以距离为 abs(0 - 3) = 3 。\n距下标 1 最近的 'e' 出现在下标 3 ，所以距离为 abs(1 - 3) = 2 。\n对于下标 4 ，出现在下标 3 和下标 5 处的 'e' 都离它最近，但距离是一样的 abs(4 - 3) == abs(4 - 5) = 1 。\n距下标 8 最近的 'e' 出现在下标 6 ，所以距离为 abs(8 - 6) = 2 。\n\n\n示例 2：\n\n输入：s = \"aaab\", c = \"b\"\n输出：[3,2,1,0]\n\n\n \n\n提示：\n1 <= s.length <= 104\ns[i] 和 c 均为小写英文字母\n题目数据保证 c 在 s 中至少出现一次\n```\n\n## 前置知识\n\n- \n\n## 公司\n\n- 暂无\n\n## 思路\n\n遍历每一个位置与记录字符的所有位置的大小填入ans中，初步写一下，n方有点高 应该有更低的做法\n\n## 关键点\n\n-  \n\n## 代码\n\n- 语言支持：Java\n\nJava Code:\n\n```java\n\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        char[] cs = s.toCharArray();\n        List<Integer> list = new ArrayList<>();\n        for(int i = 0; i<s.length(); i++){\n            if(cs[i] == c){\n                list.add(i);\n            }\n        }\n        int[] ans = new int[s.length()];\n        for(int i = 0; i<ans.length; i++){\n            ans[i] = 999;\n        }\n        for(int i = 0; i<list.size(); i++){\n            for(int j = 0; j<s.length(); j++){\n                ans[j] = Math.abs(j - list.get(i)) < ans[j] ? Math.abs(j - list.get(i)) : ans[j];\n            }\n        }\n        return ans;\n    }\n}\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(n^2)$\n- 空间复杂度：$O(n)$\n\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"honeymeng-hub":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991874119","body":"//leetcode submit region begin(Prohibit modification and deletion)\n//遍历nums[]转化为数值，再遍历返回数组\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        //idea1 ： FAILED，java中int最大2^32-1,（10位数）\n//        long tmp = 0;\n//        for (int i = num.length - 1, r = 1; i >= 0; i--) {\n//            tmp += num[i] * r;\n//            r = r * 10;\n//        }\n//        tmp = tmp + k;\n//        //从数值里取出元素放入链表\n//        String s = Long.toString(tmp);\n//        //String s1 = Integer.toString();\n//        ArrayList<Integer> list = new ArrayList<>();\n//        for (int j = 0; j < s.length(); j++) {\n//            int c = (int)s.charAt(j);\n//            list.add(Integer.parseInt(s1.valueOf(s.charAt(j))));\n//        }\n//        return list;\n        //看完答案想法二：位运算，位置对象相加，进位加在上一位\n        //评论区发现：num[]末尾+k ，取末尾添加到链表再抛弃末尾\n        //时间复杂度：O（n）数组长度\n        //空间复杂度：O（n）\n        LinkedList<Integer> list = new LinkedList<>();\n        int len = num.length;\n        int lastNum = k;\n        int i = len -1;\n        while (i >= 0 || lastNum > 0) {\n            if (i >= 0) {\n                lastNum += num[i];\n            }\n            //取余放入链表\n            list.addFirst(lastNum % 10);\n            //看看有没有进位(有就迭代，无就是0还是迭代)\n            lastNum /= 10;\n            i--;\n        }\n        return list;\n    }\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992572641","body":"class Solution {\n    public int[] shortestToChar(String s, char c) {\n        //方法1：最小数组=====IDEA：每个字符 距离左 右字符的距离，较小的为答案\n        //从前向后遍历，记录i与左边边c的距离，从后向前遍历记录i与右边c距离，之后比较 num【i】存的数值，取小的\n        int len = s.length();\n        int[] ans = new int[len];\n        //定义迭代变量（c的初始位置）pre=Integer.MIN_VALUE / 2 （这里的数值不要紧，num【i】正反遍历会比较的）\n        int symbolC = Integer.MIN_VALUE / 2;\n        //正向遍历\n        for (int i = 0; i < len; i++) {\n            if (s.charAt(i) == c) symbolC = i;\n            ans[i] = i - symbolC;\n        }\n\n        //反向遍历\n        symbolC = Integer.MAX_VALUE / 2;\n        for (int i = len - 1; i >= 0; i--) {\n            if (s.charAt(i) == c) symbolC = i;\n            ans[i] = Math.min(symbolC - i, ans[i]);\n        }\n        return ans;\n    }\n}","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shu-weiran":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991880602","body":"# 思路\n将K表示为数组，两个数组逐位相加。考虑进位。最后对数组取反。\n\n\n```\nclass Solution:\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\n        K = list(map(int,str(K)))\n        \n        res = []\n        i,j = len(A)-1,len(K)-1\n        carry = 0\n\n        while i >= 0 and j >= 0:\n            res.append(A[i] + K[j] + carry)\n            res[-1],carry = res[-1] % 10, res[-1] // 10\n            i -= 1\n            j -= 1\n        while i >= 0:\n            res.append(A[i] + carry)\n            res[-1],carry = res[-1] % 10, res[-1] // 10\n            i -= 1\n        while j >= 0:\n            res.append(K[j] + carry)\n            res[-1],carry = res[-1] % 10, res[-1] // 10\n            j -= 1\n\n        if carry:\n            res.append(1)\n\n        return res[::-1]\n```\n\n# 时间复杂度O(n)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bryanmiracle":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991882687","body":"### 思路\r\n将数组和 k的对应项从右至左以此相加，进位时carry + 1；\r\n### 代码\r\n```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> res = new ArrayList<>();\r\n        int carry = 0;\r\n        int l1 = num.length - 1;\r\n\r\n        while (l1 >= 0 || k != 0) {\r\n            int x = l1 < 0 ? 0 : num[l1];\r\n            int y = k == 0 ? 0 : k % 10;\r\n\r\n            int sum = x + y + carry;\r\n            res.add(sum % 10);\r\n            carry = sum / 10;\r\n            l1--;\r\n            k = k / 10;\r\n        }\r\n        if (carry != 0) res.add(carry);\r\n        Collections.reverse(res);\r\n        return res;\r\n\r\n    }\r\n}\r\n```\r\n### 复杂度分析\r\n**时间复杂度：O(N)**\r\n**空间复杂度：O(1)**","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992592481","body":"### 思路\r\n进行两次遍历\r\n### 代码\r\n```\r\nclass Solution {\r\n    public int[] shortestToChar(String S, char C) {\r\n        int N = S.length();\r\n        int[] ans = new int[N];\r\n        int prev = Integer.MIN_VALUE / 2;\r\n\r\n        for (int i = 0; i < N; ++i) {\r\n            if (S.charAt(i) == C) prev = i;\r\n            ans[i] = i - prev;\r\n        }\r\n\r\n        prev = Integer.MAX_VALUE / 2;\r\n        for (int i = N-1; i >= 0; --i) {\r\n            if (S.charAt(i) == C) prev = i;\r\n            ans[i] = Math.min(ans[i], prev - i);\r\n        }\r\n\r\n        return ans;\r\n    }\r\n}\r\n```\r\n### 复杂度分析\r\n时间复杂度：O(N)\r\n空间复杂度：O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"riuusee":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991883145","body":"### 思路\n\n模拟一位位相加，处理进位，处理被加数、加数为0的情况\n\n### 代码\n\n```java\npublic class Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> result = new ArrayList<Integer>();\n        int c = 0;  //进位\n        for (int i = num.length-1; i >= 0; i--) {   //倒着一位位相加\n            int a = num[i] + k%10 + c;\n            if (a > 9){\n                c = 1;\n                a -= 10;\n                if (i == 0 && (k/10 == 0)){ //存在进位且加数为0\n                    result.add(a);\n                    result.add(1);\n                    break;\n                }\n            }else {\n                c = 0;\n            }\n            result.add(a);\n            k /= 10;\n            while (i==0 && k > 0){ //被加数为0加数不为0\n                int b = k%10 + c;\n                if (b > 9){\n                    if(b==10 && (k/10 == 0)){ //进位\n                        result.add(0);\n                        result.add(1);\n                        break;\n                    }\n                    b -= 10;\n                    c =1;\n                }else {\n                    c = 0;\n                }\n                result.add(b);\n                k /= 10;\n            }\n        }\n        Collections.reverse(result);  //反转\n        return result;\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度: O(N)\n- 空间复杂度: O(N)\n\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992538326","body":"### 思路\n\n分别向前后遍历找相同字符\n\n### 代码\n\n```java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int n = s.length();\n        int[] ans = new int[n];\n\n        for (int i = 0; i < n; i++){\n            int t = 10001;\n            for (int j = i; j < n; j++) {\n                if (s.charAt(j) == c){\n                    int a = j - i;\n                    if (a < t){\n                        t = a;\n                    }\n                    break;\n                }\n            }\n            for (int j = i - 1; j >= 0; j--) {\n                if (s.charAt(j) == c){\n                    int a = i - j;\n                    if (a < t){\n                        t = a;\n                    }\n                    break;\n                }\n            }\n            ans[i] = t;\n        }\n\n        return ans;\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度: O(N*N)\n- 空间复杂度: O(N)\n\n\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kevinworkspace":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991884524","body":"```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        LinkedList<Integer> list = new LinkedList<>();\n        int i = num.length - 1;\n        int x = 0;\n        int add = 0;\n        while (i >= 0 || k > 0 || add == 1) {\n            if (i >= 0) x = num[i];\n            else x = 0;\n            int res = (x + k % 10 + add) % 10;\n            add = (x + k % 10 + add) / 10;\n            list.addFirst(res);\n            i --;\n            k /= 10;\n        }\n        return list;\n    }\n}\n```\n时间复杂度: O(N)\n空间复杂度: O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992410373","body":"```java\npublic int[] shortestToChar(String s, char c) {\n        int[] res = new int[s.length()];\n        int index = Integer.MIN_VALUE / 2;\n        for (int i=0; i<s.length(); i++) {\n            if (s.charAt(i) == c) {\n                index = i;\n            }\n            else res[i] = i - index;\n        }\n        index = Integer.MAX_VALUE / 2;\n        for (int i=s.length()-1; i>=0; i--) {\n            if (s.charAt(i) == c) {\n                index = i;\n            }\n            else res[i] = Math.min(index - i, res[i]);\n        }\n        return res;\n    }\n```\n\n时间复杂度: O(N)\n空间复杂度: O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luo-frontend":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991887936","body":"JavaScript\r\n思路：\r\n1、遍历数组，从高到低，每项加上K\r\n2、如果res >= 10, 将 k % 10，得到个位保留在num得当前下标，并计算Math.floot(k% 10),得到除个位外的数值res2\r\n例如 num = [1,2,3,4], k= 1234\r\n第一次循环：num[3] === 4, 4 + 1234 = 1238\r\nk% 10 = 8，push到新数组\r\nMath.floot(k% 10) = 123\r\n令k= 123，继续循环\r\n第二次循环：num[2] === 3, 3 + 123 = 126 \r\nk% 10 = 6，push到新数组\r\nMath.floot(k% 10) = 12\r\n令k= 12，继续循环\r\n...\r\n最后得到数组[2,4,6,8]\r\n需要注意的是，这里继续循环的条件不一定循环完整个数组，而是，循环完整个数据或循环完k，即 i >= 0  || k > 0\r\n因为k不一定是和数组的length相同，当满足上面两个条件中的一个即可以继续循环\r\n```\r\nvar addToArrayForm = function(num, k) {\r\n    const res = [];\r\n    const n = num.length;\r\n    for (let i = n - 1; i >= 0 || k > 0; --i, k = Math.floor(k / 10)) {\r\n        if (i >= 0) {\r\n            k += num[i];\r\n        }\r\n        res.push(k % 10);\r\n    }\r\n    res.reverse();\r\n    return res;\r\n};\r\n```\r\n时间复杂度O(max(n,log k))","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992075508","body":"思路:\r\n1、遍历字符串s, 将字符串中每一项 === c的下标存成数组arr\r\n2、遍历字符串s, 计算字符串中每一项和数组arr每一项的间距,保留最小值,并存在result数组\r\n```\r\nvar shortestToChar = function(s, c) {\r\n    const res = []\r\n    const indexArr = []\r\n    for(let i = 0; i < s.length; i++) {\r\n        if(s[i] === c) {\r\n            indexArr.push(i)\r\n        }\r\n    }\r\n    for(let i = 0; i < s.length; i++) {\r\n        let index = 1000\r\n        let a = 0\r\n        indexArr.forEach((item) => {\r\n            let b = Math.abs(i - item)\r\n            if(b <= index) {\r\n                a = b\r\n                index = b\r\n            } else {\r\n                a = index\r\n            }\r\n        })\r\n        res[i] = a\r\n    }\r\n    return res\r\n};\r\n```\r\n时间复杂度:O(nm) m为数组arr的长度,即c在字符串中下标的数组","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993082455","body":"JavaScript\r\n思路:\r\n1、利用JS的push、pop方法,原理很简单,但是时间复杂度高,因为如果初始化没有给数组每项赋值,然后每次push都会是O(n)的时间,因为每次都需要重新申请地址.\r\n2、修改JS的push、pop方法,每次操作记录当前下标,这样能将push方法、pop方法降低O(1)的时间复杂度\r\n```\r\n/**\r\n * @param {number} maxSize\r\n */\r\nvar CustomStack = function(maxSize) {\r\n    this.maxSize = maxSize\r\n    this.stack = []\r\n};\r\n\r\n/** \r\n * @param {number} x\r\n * @return {void}\r\n */\r\nCustomStack.prototype.push = function(x) {\r\n    if(this.stack.length < this.maxSize) {\r\n        this.stack.push(x)\r\n    }\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nCustomStack.prototype.pop = function() {\r\n    return this.stack.length > 0 ? this.stack.pop() : -1\r\n};\r\n\r\n/** \r\n * @param {number} k \r\n * @param {number} val\r\n * @return {void}\r\n */\r\nCustomStack.prototype.increment = function(k, val) {\r\n    for(let i = 0; i < k && i < this.stack.length; i ++) {\r\n        this.stack[i] += val\r\n    }\r\n};\r\n\r\n/**\r\n * Your CustomStack object will be instantiated and called as such:\r\n * var obj = new CustomStack(maxSize)\r\n * obj.push(x)\r\n * var param_2 = obj.pop()\r\n * obj.increment(k,val)\r\n */\r\n```\r\n```\r\n/**\r\n * @param {number} maxSize\r\n */\r\nvar CustomStack = function(maxSize) {\r\n    this.maxSize = maxSize\r\n    this.curIndex = 0\r\n    this.stack = []\r\n};\r\n\r\n/** \r\n * @param {number} x\r\n * @return {void}\r\n */\r\nCustomStack.prototype.push = function(x) {\r\n    if(this.stack.length < this.maxSize) {\r\n        this.stack[this.curIndex] = x\r\n        this.curIndex++\r\n    }\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nCustomStack.prototype.pop = function() {\r\n    if(this.curIndex === 0) {\r\n        return -1\r\n    }\r\n    const res = this.stack[this.curIndex - 1]\r\n    this.stack.length-- \r\n    this.curIndex--\r\n    return res\r\n};\r\n\r\n/** \r\n * @param {number} k \r\n * @param {number} val\r\n * @return {void}\r\n */\r\nCustomStack.prototype.increment = function(k, val) {\r\n    for(let i = 0; i < k && i < this.stack.length; i ++) {\r\n        this.stack[i] += val\r\n    }\r\n};\r\n\r\n/**\r\n * Your CustomStack object will be instantiated and called as such:\r\n * var obj = new CustomStack(maxSize)\r\n * obj.push(x)\r\n * var param_2 = obj.pop()\r\n * obj.increment(k,val)\r\n */\r\n```\r\n提交时证明我对于思路1的push、pop的时间复杂度是错误的,可能由于V8的优化,思路1比思路2快.\r\n时间复杂度: \r\npush:O(1)\r\npop:O(1)\r\nincrement:O(min(n, k)), n为数组长度","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jie-zi":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991888153","body":"思路：\r\n转换成两个vector，逐个按位相加，注意k可能比num长，因此要加上k比num长的部分\r\n```\r\nvector<int> addToArrayForm(vector<int>& num, int k) {\r\n    vector<int> res;\r\n    int n=num.size();\r\n    for(int i=n-1;i>=0;i--){\r\n        int sum=num[i]+k%10;\r\n        k=k/10;\r\n        if(sum>=10){\r\n            sum=sum-10;\r\n            k++;\r\n        }\r\n        res.push_back(sum);\r\n    }\r\n    while(k){\r\n        res.push_back(k%10);\r\n        k=k/10;\r\n    }\r\n    reverse(res.begin(),res.end());\r\n    return res;\r\n    }\r\n```\r\n\r\n时间复杂度O(n)\r\n空间复杂度O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992490541","body":"此题不难求解，难点在于对每一种情况的分类讨论，边界可能只有一个，也可能存在多个\r\n```\r\nint n=s.size();\r\n        vector<int> res(n, 0), index;\r\n        for (int i = 0; i < n; i++) {\r\n\t\t    if (s[i] == c) index.push_back(i);\r\n\t    }\r\n\t    int j = 0;\r\n\t   for (int i = 0; i < n; i++) {\r\n\t        //若果只有一个边界\r\n\t\t    if (index.size() == 1) res[i] = abs(i - index[j]);\r\n\t\t    //若果有多个边界\r\n\t\t    else {\r\n\t\t\t    //小于左边界\r\n\t\t\t    if (i < index[j]) res[i] = abs(i - index[j]);\r\n\t\t\t    //大于右边界\r\n\t\t\t    else if(i > index[j+1]) res[i] = abs(i - index[j+1]);\r\n\t\t\t    //在左右边界中间\r\n\t\t\t    else if (index[j] <= i && i < index[j + 1]) \r\n\t\t\t\t    res[i] = min(abs(i - index[j]), abs(i - index[j + 1]));\t\r\n\t\t\t    //正好等于右边界，j需要＋1，注意j别超出边界\r\n\t\t\t    else if(i==index[j+1]){\r\n\t\t\t\t    res[i] = 0;\r\n\t\t\t\t    if (j < index.size() - 2) j++;\r\n\t\t\t    }\r\n\t\t    }\r\n\t    }\r\n        return res;\r\n```\r\n时间复杂度O(n) \r\n空间复杂度O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xjhcassy":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991891005","body":"#### 思路\n\n1. 采用LinkedList双向链表\n2. 将k依次加上num的各位，并取出最后一位\n\n代码\n\n```java\npublic List<Integer> addToArrayForm(int[] num, int k) {\n\n        int len = num.length;\n        int lastNum = k;\n        LinkedList<Integer> ret= new LinkedList<>();\n\n        int i = len-1;\n        while(i >=0 || lastNum > 0){\n            if(i >= 0){\n                lastNum+=num[i];\n            }\n            ret.addFirst(lastNum%10);\n            lastNum/=10;\n            i--;\n        }\n\n        return ret;\n\n    }\n```\n\n复杂度分析\n\n时间复杂度O(N);","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992419299","body":"### 思路\n\n1. 先找出字符c在字符串中的索引；\n2. 再循环找出字符串中每个字符到该字符的最短距离\n\n\n\n### 代码\n\n```java\npublic int[] shortestToChar(String s, char c) {\n        ArrayList<Integer> index = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == c){\n                index.add(i);\n            }\n        }\n        int[] answer = new int[s.length()];\n        int shortest = 0;\n        for (int i = 0; i < s.length(); i++) {\n            shortest = Math.abs(i - index.get(0));\n            for (int j = 1; j < index.size(); j++) {\n                if(Math.abs(i - index.get(j)) < shortest){\n                    shortest = Math.abs(i - index.get(j));\n                }\n            }\n            answer[i] = shortest;\n        }\n\n        return answer;\n    }\n```\n\n\n\n### 复杂度分析\n\n时间复杂度：O(N^2)，当找出的index在2最差情况下为所有的索引都包含时，此时复杂度达到O(N^2);\n\n空间复杂度：在最差情况下，需要开创N大小的ArrayList，所以空间复杂度为O(N); ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993324962","body":"### 思路\n\n1. 使用LinkedList实现Stack；\n\n\n\n### 代码\n\n```java\nclass CustomStack {\n    private int maxSize;\n    private LinkedList<Integer> stack;\n\n    public CustomStack(int maxSize) {\n        this.stack = new LinkedList<>();\n        this.maxSize = maxSize;\n    }\n\n    public void push(int x) {\n        if(stack.size() >= maxSize){\n            return;\n        }\n        stack.addLast(x);\n    }\n\n    public int pop() {\n        if(stack.size() == 0){\n            return -1;\n        }\n        return stack.removeLast();\n    }\n\n    public void increment(int k, int val) {\n        int num = Math.min(k, stack.size());\n        for (int i = 0; i < num; i++) {\n            stack.set(i, stack.get(i) + val);\n        }\n    }\n}\n```\n\n\n\n### 复杂度分析\n\n时间复杂度：O(min(k, stack.size));\n\n空间复杂度：O(1); ","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aladingzl":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991893686","body":"### 思路\n\n从低位开始，将 A 的每一位与 K 的每一位相加，和大于10时，记录进位 “+1”，将和放到数组中，考虑 K 的长度大于 A 的情况，最后将数组翻转，返回结果\n\n### 代码\n\n```javascript\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n   const res = [];\n   for(let i = num.length - 1; i >= 0; i--) {\n       let sum = num[i] + k % 10;\n       k = Math.floor(k / 10);\n       if(sum >= 10) {\n           k++;\n           sum -= 10;\n       } \n       res.push(sum);\n   }\n   for(; k > 0; k = Math.floor(k / 10)) {\n       res.push(k % 10);\n   }\n   res.reverse();\n   return res;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：O(N)\n- 空间复杂度：O(N)\n\n","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993084427","body":"### 思路\n\n用数组模拟一个栈，根据条件进行出栈跟入栈的操作，判断 k 与 length 的大小，对相应数量的元素进行增加 val 的操作\n\n### 代码\n\n```javascript\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n    this.stack = [];\n    this.maxSize = maxSize;\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if(this.stack.length < this.maxSize) {\n        this.stack.push(x);\n    }\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    const ret = this.stack.pop();\n    if(!ret) return -1;\n    return ret; \n    \n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    for(let i = 0; i < k && i < this.stack.length; i++) {\n        this.stack[i] += val;\n    }\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */\n```\n\n**复杂度分析**\n\n- 时间复杂度：pop 和 push 操作 时间复杂度为 O(1) 增量操作的时间复杂度为 O(k)\n- 空间复杂度：O(maxSize)\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangdi-1291":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991893964","body":"-思路：从低位到高位依次计算，逐位将数字加在一起。任何时候，若加法的结果大于等于10，则进位为1。\r\n\r\n\r\n-代码:\r\n###\r\nclass Solution:\r\n\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n\r\n        n = len(num)\r\n\r\n        ans = list()\r\n\r\n        carry = 0\r\n\r\n        for i in range(n):\r\n\r\n            res = k % 10\r\n\r\n            sum = num[n-i-1] + res + carry\r\n\r\n            carry = 0\r\n\r\n            k //= 10 \r\n\r\n            if sum >= 10:\r\n\r\n                carry = 1\r\n\r\n                sum = sum % 10\r\n\r\n            ans.append(sum)\r\n\r\n        if k % 10 == 0 and k // 10 == 0 and carry == 1:\r\n\r\n            ans.append(1)\r\n\r\n        else:\r\n\r\n            while k % 10 != 0 or k // 10 != 0:\r\n\r\n                sum = k % 10 + carry\r\n\r\n                carry = 0\r\n\r\n                k //= 10\r\n\r\n                if sum >= 10:\r\n\r\n                    carry = 1\r\n\r\n                    sum = sum % 10\r\n\r\n                ans.append(sum)\r\n\r\n            if k % 10 == 0 and k // 10 == 0 and carry == 1:\r\n\r\n                ans.append(1)\r\n\r\n        ans.reverse()\r\n\r\n        return ans\r\n\r\n-时间复杂度：O(max(len(num), num_k)), num_k 是k的位数。\r\n-空间复杂度：O(max(len(num), num_k)), num_k 是k的位数。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992108370","body":"### 思路\n对于每个字符 S[i]，试图找出距离向左或者向右下一个字符 C 的距离。答案就是这两个值的较小值。\n\n### 代码\n\n\n```\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> list[int]:\n        \n        n = len(s)\n        ans = list()\n        \n        for i in range(n):\n            l = i - 1\n            r = i\n            ri = li = 10**4\n            while r < n:\n                if s[r] == c:\n                    ri = r-i\n                    break\n                r += 1\n            while l >= 0:\n                if s[l] == c:\n                    li = i-l\n                    break\n                l -= 1\n            ans.append(min(ri, li))\n        return ans\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"offrande":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991894204","body":"第一天，慢慢学。。。复杂的思路想不出来\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        return [int(s) for s in str(int(\"\".join(list(map(str,num))))+k)]\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992415962","body":"思路：\n从头遍历，每次遇到c，就以c为中心向两边扩散，直到边界或者遇到第二个c停止。扩散时距离+1。距离取min(扩散距离，当前距离）\n\n代码：\n```python\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        distance = [float('inf') for _ in range(len(s))]\n        for i in range(len(s)):\n            ch = s[i]\n            if ch == c:\n                distance[i] = 0\n                while -1 < i-1 and distance[i-1] != c:\n                    distance[i-1] = min(distance[i-1], distance[i]+1)\n                    i -= 1\n                while i+1 < len(s) and distance[i+1] != c:\n                    distance[i+1] = min(distance[i+1], distance[i]+1)\n                    i += 1\n        return distance\n\n```\n\n时间：O(n^2)\n空间：O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kandejiandefeng":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991895510","body":"思路：把整数k裁成数组，两个倒叙 ，数组length大的循环，位数相加\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n    let kArr = k.toString().split('').map(item => parseInt(item));\n    let maxArr, minArr, a = 0;\n    if(kArr.length > num.length) {\n        maxArr = kArr.reverse();\n        minArr = num.reverse();\n    }else {\n        minArr = kArr.reverse();\n        maxArr = num.reverse();\n    }\n    const minLen = minArr.length\n    return maxArr.reduce((arr, item, index) => {\n        const n = index > minLen - 1 ? 0 : minArr[index];\n        arr.push((item + n + a) % 10);\n        a = Math.floor((item + n + a) / 10)\n        if(index === maxArr.length - 1 && a === 1) {\n            arr.push(1);\n        }\n        return arr;\n    }, []).reverse()\n};","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992310988","body":"思路：找出第一个相同字符的索引，然后当前字符索引到c字符索引的差和当前字符和上一个索引的的差比较\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function(s, c) {\n    let resArr = [];\n    let n = 0; \n    let str = s;\n    let i, len = s.length;\n    for(i = 0; i < len; i++) {\n        const indexc = str.indexOf(c);\n        const index = i - n;\n        if(n === 0) {\n            resArr.push(indexc - index);\n        }else if(indexc < 0){\n            resArr.push(index + 1);\n        }else {\n            resArr.push(Math.min(indexc - index, index + 1));\n        }\n        if(indexc - index === 0) {\n            str = str.slice(indexc + 1);\n            n += indexc + 1;\n        }\n    }\n    return resArr;\n};\n时间复杂度：O(N)\n空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993076299","body":"```\r\n/**\r\n * @param {number} maxSize\r\n */\r\nvar CustomStack = function(maxSize) {\r\n    this.value = new Array();\r\n    this.size = maxSize;\r\n};\r\n\r\n/** \r\n * @param {number} x\r\n * @return {void}\r\n */\r\nCustomStack.prototype.push = function(x) {\r\n    if(this.value.length < this.size) {\r\n        this.value.push(x)\r\n    }\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nCustomStack.prototype.pop = function() {\r\n    if(this.value.length === 0) {\r\n        return -1;\r\n    } else {\r\n        return this.value.pop();\r\n    }\r\n};\r\n\r\n/** \r\n * @param {number} k \r\n * @param {number} val\r\n * @return {void}\r\n */\r\nCustomStack.prototype.increment = function(k, val) {\r\n    let i = 0;\r\n    for(i; i < k; i++) {\r\n        if(!this.value[i]) {\r\n            break;\r\n        }\r\n        this.value[i] += val;\r\n    }\r\n};\r\n\r\n/**\r\n * Your CustomStack object will be instantiated and called as such:\r\n * var obj = new CustomStack(maxSize)\r\n * obj.push(x)\r\n * var param_2 = obj.pop()\r\n * obj.increment(k,val)\r\n */\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rmadridxdh":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991896853","body":"### 代码\n```Python\nclass Solution:\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\n        return list(map(int,str(int(''.join(map(str,A))) + K)))\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992518963","body":"### 思路\n对于每个字符 S[i]，试图找出距离向左或者向右下一个字符 C 的距离。答案就是这两个值的较小值\n### 代码\n`python\nclass Solution(object):\n    def shortestToChar(self, S, C):\n        prev = float('-inf')\n        answer = []\n        for i, x in enumerate(S):\n            if x == C: prev = i\n            answer.append(i - prev)\n\n        prev = float('inf')\n        for i in xrange(len(S) - 1, -1, -1):\n            if S[i] == C: prev = i\n            answer [i] = min(answer [i], prev - i)\n\n        return answer\n`\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 NN 是 S 的长度，我们需要遍历字符串两次。\n- 空间复杂度：O(N)O(N)，answer 数组的大小。","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zzzpppy":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991898319","body":"思路：\r\n使用arraylist做为新数组存最后的值，从后遍历数组中的每一位数，分别与k的个位相加，如果有进位则用一个carry存进位，每一位最后的值就是k的个位+A数组的值+carry，最后当k为0且A遍历完之后，如果carry有进位则要加入新数组，然后因为新数组是从个位加进新数组中的，最后的结果便要把它反过来。\r\n\r\n代码：\r\npublic List<Integer> addToArrayForm(int[] A, int K) {\r\n    List<Integer> res = new ArrayList<>();\r\n    int carry = 0;\r\n    int l1 = A.length - 1;\r\n    while (l1 >= 0 || K != 0) {\r\n        int x = l1 < 0 ? 0 : A[l1];\r\n        int y = K == 0 ? 0 : K % 10;\r\n\r\n        int sum = x + y + carry;\r\n        res.add(sum % 10);\r\n        carry = sum / 10;\r\n\r\n        l1--;\r\n        K = K / 10;\r\n    }\r\n    if (carry != 0) res.add(carry);\r\n    Collections.reverse(res);\r\n    return res;\r\n}\r\n\r\n时间复杂度：O（n）\r\n空间复杂度：O（n）","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992485915","body":"**思路**：\r\n两次遍历，首先从左边遍历得到第一次的距离值，然后再从右边遍历得到右边值，两个值比较最小的变小最终结果\r\n**代码**\r\n```\r\nclass Solution {\r\n    public int[] shortestToChar(String s, char c) {\r\n        int[] res = new int[s.length()];\r\n        int pre = Integer.MIN_VALUE/2;\r\n        for(int i = 0 ; i < s.length();i++){\r\n            if(s.charAt(i) == c)\r\n            pre = i;\r\n            res[i] = i-pre;\r\n        }\r\n        pre = Integer.MAX_VALUE/2;\r\n        for(int i = s.length()-1; i >=0;i--){\r\n            if(s.charAt(i) == c)\r\n            pre = i;\r\n            res[i] = Math.min(res[i], pre - i);\r\n        }\r\n        return res;\r\n    }\r\n}\r\n```\r\n**复杂度**\r\n时间复杂度 O(N)\r\n空间复杂度O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"uniqlell":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991899440","body":"``` java\n/**\n使用一个字母表示进位情况\n */\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer>list = new ArrayList<>();\n        int n = num.length;\n        int f = 0;\n        while(k>0||n>0){\n           int  yu = k%10;\n           int sum = 0;\n           if(n>0)\n             sum = num[n-1]+yu+f;\n            else sum = yu+f;\n            f  =0;\n            list.add(0,sum%10);\n            if(sum>9)\n            f  = 1;\n            n--;\n            k = k/10;\n        }\n        if(f>0)\n        list.add(0,f);\n        return list;\n    }\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992543934","body":"### 思路\n#### 思路一：使用双指针\n- 1.以当前字符为中心，向两边展开，先遇到的为最小的，得到abs(minus)\n- 2.遍历所有的字符\n- 时间复杂度o（n2）\n- 空间复杂度o（n）\n``` \nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int n = s.length();\n        int l,r;\n        int arr[] = new int[n];\n        for(int i=0;i<n;i++){\n            l = i;\n            r = i;\n           while(l>=0&&s.charAt(l)!=c)l--;\n           while(r<n&&s.charAt(r)!=c)r++;\n           if(l<0)arr[i] = r-i;\n           else if(r>=n)arr[i] = i-l;\n           else arr[i] = Math.min(i-l,r-i);\n        }\n        return arr;\n    }\n}\n```\n\n#### 思路二：两次遍历\n- 1.记录左边最近的或者没有的话记为-999\n- 2.记录右边最近的或者没有的话记为最大值\n- 时间复杂度o（n）\n- 空间复杂度o（n）\n``` java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int n = s.length();\n        int arr[] = new int[n];\n        int temp = -999;\n        for(int i=0;i<n;i++){\n            if(s.charAt(i)==c){\n                temp = i; \n            }\n            arr[i] = i-temp;\n        }        \n        temp = 20000;\n        for(int i=n-1;i>=0;i--){\n            if(s.charAt(i)==c){\n                temp = i;\n            } \n            arr[i] = Math.min(arr[i],temp-i);\n        }\n        return arr;\n    }\n}","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"alongchong":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991900063","body":"###思路\r\n从后往前加，然后翻转\r\n###代码\r\n```JAVA\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n    List<Integer> ans = new ArrayList<Integer>();\r\n        int l = num.length ;\r\n        int m = 0;\r\n        for (int i = l-1 ; i >= 0 ; i--){\r\n             m = num[i] + k % 10 ;\r\n             k /= 10;\r\n             if (m >= 10){\r\n                 k++;\r\n                 m -=10;\r\n             }\r\n             ans.add(m);\r\n        }\r\n          for (; k > 0; k /= 10) {\r\n           ans.add(k % 10);\r\n        }\r\n        Collections.reverse(ans);\r\n        return ans;        \r\n   }\r\n}\r\n```\r\n***复杂度分析***\r\n时间复杂度：$0(N)$\r\n空间复杂度：$0(N)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992597026","body":"###思路\n这题想了30分钟，想不出。思路来自于题解\n###代码\n```JAVA\nclass Solution {\n    public int[] shortestToChar(String S, char C) {\n        int N = S.length();\n        int[] ans = new int[N];\n        int prev = Integer.MIN_VALUE / 2;\n\n        for (int i = 0; i < N; ++i) {\n            if (S.charAt(i) == C) prev = i;\n            ans[i] = i - prev;\n        }\n\n        prev = Integer.MAX_VALUE / 2;\n        for (int i = N-1; i >= 0; --i) {\n            if (S.charAt(i) == C) prev = i;\n            ans[i] = Math.min(ans[i], prev - i);\n        }\n\n        return ans;\n    }\n}\n\n```\n***复杂度分析***\n时间复杂度：$0(N)$\n空间复杂度：$0(N)$","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tesla-1i":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991900400","body":"```\nclass Solution:\n    def addToArrayForm(self, num, k) :\n        res = []\n        for n in num[::-1]:\n            k += n \n            res.insert(0, k%10)\n            k //= 10\n        while k:\n            res.insert(0, k%10)\n            k //= 10\n        return res\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992300306","body":"```\r\nclass Solution:\r\n    def shortestToChar(self, s, c):\r\n        pre = float('-inf')\r\n        res = []\r\n        for i,number in enumerate(s):\r\n            if number == c:\r\n                pre = i\r\n            res.append(i - pre)\r\n        pre = float('inf')\r\n        for j in range(len(s)-1, -1, -1):\r\n            if s[j] == c:\r\n                pre = j\r\n            res[j] = min(res[j], pre - j)\r\n        return res\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"z1ggy-o":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991901442","body":"### 思路\r\n\r\n从末位相加即可。\r\n\r\n---\r\n\r\n实现的很差。放出来当个反例。\r\n\r\n我在实现的时候眼睛紧盯着两个数组进行来进行构建，然后想要把答案存放在已有的两个数组之一。\r\n\r\n但是这样的实现需要许多的边际确认，让代码变得十分复杂。\r\n而且在最后的结果有进位的情况下，还是要对数组进行扩容，然后做 rotation。\r\n得不偿失。\r\n\r\n### 代码\r\n\r\n\r\n```cpp\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& A, int K);\r\nprivate:\r\n    vector<int> int_to_arr(int n);\r\n};\r\n\r\nvector<int> Solution::addToArrayForm(vector<int>& A, int K)\r\n{\r\n    int carry;\r\n    int sum;\r\n    int idx_a, idx_b;\r\n    vector<int> a, b;\r\n\r\n    // edge case\r\n    if (K == 0)\r\n        return A;\r\n    \r\n    // 1. convert K to array format.\r\n    vector<int> K_arr = int_to_arr(K);\r\n    \r\n    // K can be greater than A\r\n    if (K_arr.size() > A.size()) {\r\n        a = A;\r\n        b = K_arr;    \r\n    } else {\r\n        a = K_arr;\r\n        b = A;\r\n    }\r\n\r\n    // 2. Add small number to large number from the last digit to the highest digit.\r\n    //    The result can have (A.lenght + 1) digits\r\n    idx_a = a.size() - 1;\r\n    idx_b = b.size() - 1;\r\n    carry = 0;\r\n\r\n    // add all digit \r\n    int len = a.size();\r\n    for (int i = 0; i < len; i++) {\r\n        sum = a[idx_a] + b[idx_b] + carry;\r\n        if (sum <= 9) {\r\n            b[idx_b] = sum;\r\n            carry = 0;\r\n        } else {\r\n            b[idx_b] = sum - 10;\r\n            carry = 1;\r\n        }\r\n        idx_a--;\r\n        idx_b--;\r\n    }\r\n\r\n    if (carry == 0)\r\n        return b;\r\n\r\n    if (idx_a == idx_b) {\r\n        b.insert(b.begin(), carry);\r\n        return b;\r\n    }\r\n\r\n    // add the last carry to b\r\n    while (carry != 0 && idx_b >= 0) {\r\n        sum = b[idx_b] + carry;\r\n        if (sum <= 9) {\r\n            b[idx_b] = sum;\r\n            carry = 0;\r\n        } else {\r\n            b[idx_b] = sum - 10;\r\n            carry = 1;\r\n        }\r\n        idx_b--;\r\n    }\r\n    \r\n    if (carry) {\r\n        b.insert(b.begin(), carry);\r\n    }\r\n    return b;\r\n}\r\n\r\nvector<int> Solution::int_to_arr(int n)\r\n{\r\n    int r;\r\n    vector<int> arr;\r\n\r\n    while (n != 0) {\r\n        r = n % 10;\r\n        n = n / 10;\r\n        arr.push_back(r);\r\n    }\r\n\r\n    reverse(arr.begin(), arr.end());\r\n    return arr;\r\n}\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(N)，其中 N 为较长数组的长度。\r\n- 空间复杂度：O(N)","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993143487","body":"### 思路\r\n\r\n用 array 实现 stack。没什么特别的。\r\n\r\n### 代码\r\n\r\n```cpp\r\nclass CustomStack {\r\npublic:\r\n    CustomStack(int maxSize) {\r\n        capacity = maxSize;\r\n        top = 0;\r\n        arr = new int[maxSize];\r\n    }\r\n    \r\n    void push(int x) {\r\n        if (is_full()) {\r\n            return;\r\n        }\r\n\r\n        arr[top++] = x;\r\n    }\r\n    \r\n    int pop() {\r\n        if (is_empty())\r\n            return -1;\r\n        \r\n        top--;\r\n        return arr[top];\r\n    }\r\n    \r\n    void increment(int k, int val) {\r\n        int len = k > top ? top : k;\r\n\r\n        for (int i = 0; i < len; i++) {\r\n            arr[i] += val;\r\n        }\r\n    }\r\n\r\nprivate:\r\n    int capacity;\r\n    int top;\r\n    int *arr;\r\n\r\n    bool is_full() {\r\n        return top == capacity;\r\n    }\r\n\r\n    bool is_empty() {\r\n        return (top - 1) < 0;\r\n    }\r\n};\r\n```\r\n\r\n### 复杂度\r\n\r\n- 空间：O(M). M is the capacity of the stack\r\n- 时间：O(1) for push, pop. O(k) for increment, k is the number of elements that we need to increase value.","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"orderkk":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991902776","body":"function fn(arr, number) {\n    let a1 = Number(arr.join(''));\n    let result = BigInt(a1) + BigInt(number)\n    return String(result).split('')\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992584465","body":"var shortestToChar = function (s, c) {\n  let length = s.length\n  let arr = new Array(length).fill(length)\n  let array = s.split('');\n\n  for (let i = 0; i < length; i++) {\n    for (let j = i; j < length; j++) {\n      if (array[j] === c) {\n        arr[i] = j - i\n        break\n      }\n    }\n  }\n  for (let i = length - 1; i >= 0; i--) {\n    for (let j = i; j >= 0; j--) {\n      if (array[j] === c && arr[i] > i - j) {\n        arr[i] = i - j\n        break\n      }\n    }\n  }\n  return arr\n};","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dudongli":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991903064","body":"思路：,将num和k从个位起逐位相加，最终然后反转res即可。\nfor i in range(len(num)-1,-1, -1):\n            A = num[i] + k % 10\n            k = k // 10\n            if A >= 10:\n                k += 1\n            res.append(A%10)\n        while k >0:\n            res.append(k%10)\n            k = k // 10\n        res.reverse()\n        return(res)\n时间复杂度O（n）","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cureforu":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991904791","body":"### 思路\n\n模拟竖式计算\n\n### 代码\n\n\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> res = new LinkedList<>();\n        int idx = num.length-1;\n        int carry = 0;\n        while (idx >= 0 || k > 0) {\n            int x = idx >= 0 ? num[idx] : 0;\n            int y = k > 0 ? k % 10 : 0;\n            int sum = x+y+carry;\n            res.add(0, sum%10);\n            carry = sum / 10;\n            idx--;\n            k /= 10;\n        }\n        if (carry == 1) {\n            res.add(0, 1);\n        }\n        return res;\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：O(N)\n- 空间复杂度：O(N)\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992260956","body":"```java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int slow = 0;\n        int preFast = -1;\n        int[] res = new int[s.length()];\n        for (int fast = 0; fast < s.length(); fast++) {\n            if (s.charAt(fast) != c) {\n                continue;\n            }\n            while (slow <= fast) {\n                if (preFast == -1 || slow-preFast > fast-slow) {\n                    res[slow] = fast - slow;\n                    slow++;\n                }else {\n                    res[slow] = slow - preFast;\n                    slow++;\n                }\n            }\n            preFast = fast;\n        }\n        while (slow < s.length()) {\n            res[slow] = slow-preFast;\n            slow++;\n        }\n        return res;\n    }\n}\n```\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lilililisa1998":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991905659","body":"思路：先把数字k转化为数组，然后比较两个数组的长度，用0将较短的数组填充到与长数组等长，然后进行等位相加\r\nclass Solution(object):\r\n    def addToArrayForm(self, num, k):\r\n \r\n        L_k = []\r\n        while (k / 10 != 0):\r\n            L_k.append(k % 10)\r\n            k=int(k / 10)\r\n        num= list(reversed(num))\r\n        ln=len(num)\r\n        lk=len(L_k)\r\n        if lk>ln:\r\n            q=[0]*(lk-ln)\r\n            num.extend(q)\r\n        elif lk==ln:\r\n            num.append(0)\r\n        else:\r\n            q=[0]*(ln-lk)\r\n            L_k.extend(q)\r\n\r\n        for i in range(len(num)-1):\r\n            w=num[i] + L_k[i]\r\n            num[i]=w%10\r\n            num[i+1]=int(w/10)+num[i+1]\r\n        if num[len(num)-1]==0:\r\n            num=num[:-1]\r\n        num = list(reversed(num))\r\n        return num\r\n\r\n时间复杂度O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992068957","body":"思路：构建关于c的词典，存储c的坐标，然后遍历s，让s中的坐标和c的坐标相减，选择绝对值最小的\r\ndef shortestToChar( s, c):\r\n    \"\"\"\r\n    :type s: str\r\n    :type c: str\r\n    :rtype: List[int]\r\n    \"\"\"\r\n    dc=dict(name=c)\r\n    q=[]\r\n    for i in  range(len(s)): #构建关于c的词典\r\n        if(s[i] == c):\r\n            q.append(i)\r\n            dc['name']=q\r\n    \r\n    b=[]\r\n    for i in range(len(s)):\r\n        a = []\r\n        for j in dc['name']:\r\n            a.append(abs(j-i))\r\n            k=min(a)\r\n        b.append(k)\r\n    return b\r\n\r\n时间复杂度：O（n^3）","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"macvh":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991905870","body":"class Solution(object):\r\n    def addToArrayForm(self, num, k):\r\n        \"\"\"\r\n        :type num: List[int]\r\n        :type k: int\r\n        :rtype: List[int]\r\n        思路：类似于大数相加，先把数字k转化为数组，\r\n        \"\"\"\r\n        L_k = []\r\n        while (k / 10 != 0):\r\n            L_k.append(k % 10)\r\n            k=int(k / 10)\r\n        num= list(reversed(num))\r\n        ln=len(num)\r\n        lk=len(L_k)\r\n        if lk>ln:\r\n            q=[0]*(lk-ln)\r\n            num.extend(q)\r\n        elif lk==ln:\r\n            num.append(0)\r\n        else:\r\n            q=[0]*(ln-lk)\r\n            L_k.extend(q)\r\n\r\n        for i in range(len(num)-1):\r\n            w=num[i] + L_k[i]\r\n            num[i]=w%10\r\n            num[i+1]=int(w/10)+num[i+1]\r\n        if num[len(num)-1]==0:\r\n            num=num[:-1]\r\n        num = list(reversed(num))\r\n        return num","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992461416","body":"思路：构建关于c的词典，存储c的坐标，然后遍历s，让s中的坐标和c的坐标相减，选择绝对值最小的\r\n'''\r\n\r\ndef shortestToChar( s, c):\r\n    \"\"\"\r\n    :type s: str\r\n    :type c: str\r\n    :rtype: List[int]\r\n    \"\"\"\r\n    dc=dict(name=c)\r\n    q=[]\r\n    for i in  range(len(s)): #构建关于c的词典\r\n        if(s[i] == c):\r\n            q.append(i)\r\n            dc['name']=q\r\n\r\n    b=[]\r\n    for i in range(len(s)):\r\n        a = []\r\n        for j in dc['name']:\r\n            a.append(abs(j-i))\r\n            k=min(a)\r\n        b.append(k)\r\n    return b","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"callmeeliza":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991907902","body":"## 思路\n新增temp数组存上次计算的进位1，每次取三个数组的末位数进行相加，取余数存进res数组中，直到三个数组都空的时候，计算结束\n## 代码\n```javascript\nvar addToArrayForm = function(num, k) {\n    let cur = String(k).split('');\n    let res = [];\n    let temp = []\n    while(num.length > 0 || cur.length > 0 || temp.length > 0) {\n        let a = Number(num.pop() || 0);\n        let b = Number(cur.pop() || 0);\n        let c = Number(temp.pop() || 0);\n        if(a + b + c >= 10) {\n            res.unshift((a+ b + c)%10);\n            temp.push(1);\n        } else {\n            res.unshift(a+b+c)\n        }\n    }\n    return res\n};\n```\n## 复杂度分析\n-时间复杂度：O(n)，其中n为num和k的最大长度\n-空间复杂度：O(n)，其中n为num和k的最大长度或最大长度+1","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992262098","body":"## 思路\n将字符串S以字符C为界划分成字符串数组，首尾注意特殊处理，中间的字符串以中点为界分别计算距左右两边的距离\n##代码\n```javascript\nvar shortestToChar = function(s, c) {\n  let arr = s.split(c);\n  let res = [];\n  arr.forEach((str, index) => {\n    for (let i = 0; i < str.length; i++) {\n      switch (true) {\n        case index === arr.length - 1:\n        case index !== 0 && i < Math.ceil(str.length / 2):\n          res.push(i + 1);\n          break;\n        case index === 0:\n        case i >= Math.ceil(str.length / 2):\n          res.push(str.length - i);\n          break;\n      }\n    }\n    if (index < arr.length - 1) res.push(0);\n  });\n  return res;\n};\n```\n## 复杂度\n时间复杂度：O(n)\n空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993324968","body":"## 思路\n没什么复杂思路，主要靠js的数组的push和pop\n## 代码\n```javascript\nvar CustomStack = function(maxSize) {\n    size = maxSize;\n    arr = [];\n};\n\nCustomStack.prototype.push = function(x) {\n    if(arr.length < size) {\n        arr.push(x)\n    }\n};\n\nCustomStack.prototype.pop = function() {\n    if(arr.length === 0) {\n        return -1;\n    } else {\n        return arr.pop();\n    }\n};\n\nCustomStack.prototype.increment = function(k, val) {\n    for(let i=0;i<k&&i<arr.length;i++){\n        arr[i]+=val\n    }\n};\n```\n## 复杂度\n时间复杂度：O(n)\n空间复杂度：O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tiquiero":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991910240","body":"### 思路\n把数组A从后开始循环，整数K也从个位数开始，把两个相加，\n如果大于10有进位，把进位存carry变量，结果res存数组。\n每次循环把carry一起相加，最后反转res数组。\n\n### 代码\n\n```js\nvar addToArray = function(A, K) {\n    const res = [];\n    let i = A.length - 1, carry = 0;\n    while (i >=0 || K != 0) {\n        const x = i >= 0 ? num[i] : 0;\n        const y = K != 0 ? K % 10 : 0;\n        const sum = x + y + carry;\n\n        res.push(sum % 10);\n        carry = Math.floor(sum / 10);\n        i--;\n        K = Math.floor(K / 10);\n    }\n    if (carry) res.push(carry);\n    return res.reverse();\n}\n```\n\n** 复杂度分析 **\n- 时间复杂度O（n）\n- 空间复杂度O（n）","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992580358","body":"***思路\r\n设置左右两个变量，表示从两边开始最近一个和目标字符的距离，然后取他们的最小值存在res中。\r\n\r\n```js\r\nvar shortestToChar = function(s, c) {\r\n  let res = [];\r\n  for (let i = 0; i < s.length; i++) {\r\n    // left为i元素距离左边最近的一个C的距离；right为i元素距离右边最近的一个C的距离\r\n    let left = 0, right = 0;\r\n\r\n    while(left >= 0 && right < s.length ) {\r\n      if (s[i - left] === c || s[i + right] === c) {\r\n        res[i] = Math.min(left, right);\r\n        break;\r\n      }\r\n      left++;\r\n      right++;\r\n    }\r\n  }\r\n  return res;\r\n};\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993315555","body":"*** 思路\n利用JS的数组来实现push和pop，最后一个根据规则相加val。\n\n```js\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function (maxSize) {\n  this.list = [];\n  this.maxSize = maxSize;\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function (x) {\n  if (this.list.length < this.maxSize) this.list.push(x);\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function () {\n  return this.list.length ? this.list.pop() : -1;\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function (k, val) {\n  let length = Math.min(k, this.list.length);\n  for (let i = 0; i < length; i++) {\n    this.list[i] += val;\n  }\n};\n```\n时间复杂度：push、pop：O(1)， increment：O(k)\n空间复杂度：O(maxSize)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lifuquan1208":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991910622","body":"思路：首先循环数组的，取得数组的末位进行相加之后的取余，放进结果数组，然后对相加后的结果除10去掉末位，循环结束后需要把相加的最后结果放进结果的集合中。\n代码：\n  class Solution {\n\n​    public List<Integer> addToArrayForm(int[] num, int k) {\n\n​         List<Integer> result = new ArrayList<Integer>();\n\n​        int len=num.length-1;\n\n​        for (int i=len; i>=0;i--){\n\n​            int temp=num[i]+k;\n\n​            result.add(temp%10);\n\n​             k=temp/10;\n\n​        }\n\n​        while(k!=0){\n\n​            result.add(k%10);\n\n​            k=k/10;\n\n​        }\n\n​        Collections.reverse(result);\n\n​        return result;\n\n​    }\n\n时间复杂度：0（n)\n空间复杂度：0（n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992414881","body":"### 思路：\n首先循环数组获取所有字符C出现的位置放在集合中，然后定义两个变量变量一个为一个的前一次出现的字符C的集合下标，然后根据前后与数组下标的绝对值比较，得出数值放到结果集中。\n\n### 代码：\n``` java \n public int[] shortestToChar(String s, char c) {\n        int[] answer = new int[s.length()];\n        int j=0;\n        int k=0;\n        int result=0;\n        ArrayList<Integer> cValue = new ArrayList<Integer>();\n        for (int i = 0; i < s.length(); i++) {\n            if(s.charAt(i)==c){\n                cValue.add(i);\n            }\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if(Math.abs(cValue.get(j) -i)<=Math.abs(cValue.get(k) -i)){\n                result=Math.abs(cValue.get(j) -i);\n            }else{\n                result=Math.abs(cValue.get(k) -i);\n            }\n            answer[i]= result;\n            if(result == 0&& cValue.size()>1 && j+1<=cValue.size()-1){\n                k=j;\n                j=j+1;\n            }\n        }\n        return  answer;\n}\n```\n**复杂度分析**\n- 时间复杂度：o(n²）\n- 空间复杂度：o(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"weijie-he":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991911734","body":"## 思路\n\n模拟真正的加法计算过程\n\n从后往前依次逐位相加，如果 >=10 则进位\n\n\n\n## 代码\n\n```java\npublic List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> result = new ArrayList<>();\n        int len = num.length;\n        for (int i = len - 1;i >= 0;i--){\n            int a = num[i] + k % 10;\n            k /= 10;\n            // 如果和 > 10，需要进位\n            if (a >= 10 ){\n                k++;\n            }\n            result.add(a % 10);\n        }\n\n        // 上面循环做完，只求了结果后len位的值，由于可能进位，所以k可能还有很多位\n        for (; k > 0; k /= 10) {\n            result.add(k % 10);\n        }\n\n        Collections.reverse(result);\n        return result;\n\n    }\n```\n\n\n## 复杂度分析\n\n- 时间复杂度：O(N)，遍历数组的时间\n- 空间复杂度：O(N)，存储 result 的空间\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992232798","body":"## 思路\n\n中心扩展法\n\n左右双指针往两边走\n\n\n\n## 代码\n\n```java\n    public int[] shortestToChar(String s, char c) {\n        return solution1(s,c);\n    }\n\n    /**\n     *  中心扩展法\n     *  左右双指针往两边走\n     *\n     *  时间复杂度：O(N^2)，N 为 S 的长度，两层循环。\n     *  空间复杂度：O(N)\n     *\n     * @param s\n     * @param c\n     * @return\n     */\n    private int[] solution1(String s, char c) {\n        char [] arr = s.toCharArray();\n        int[] distance = new int[s.length()];\n\n        for (int i = 0; i < s.length(); i++){\n            if (arr[i] == c){\n                continue;\n            }\n\n            int left = i;\n            int right = i;\n            // 这边是或的关系，只要有一头没到顶，就继续走\n            // 在循环内部用 if 来控制指针的加减\n            while (left>=0 || right < s.length()){\n                if(arr[left] == c){\n                    distance[i] = i - left;\n                    // 找到后，别忘了立马跳出循环\n                    break;\n                }\n\n                if(arr[right] == c){\n                    distance[i] = right - i;\n                    break;\n                }\n\n                if (left>0){\n                    left--;\n                }\n\n                if (right<s.length()-1){\n                    right++;\n                }\n            }\n        }\n\n        return distance;\n    }\n```\n\n\n## 复杂度分析\n\n- 时间复杂度：O(N^2)，N 为 S 的长度，两层循环。\n- 空间复杂度：O(N)\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"seventeencui":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991915088","body":"### 思路\r\n先反转，然后模拟加法运算。\r\n### 代码\r\n```\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n        reverse(num.begin(), num.end());\r\n\r\n        for (auto& x: num) {\r\n            k += x;\r\n            x = k % 10;\r\n            k /= 10;\r\n        }\r\n        while (k) num.push_back(k % 10), k /= 10;\r\n\r\n        reverse(num.begin(), num.end());\r\n        return num;\r\n    }\r\n};\r\n\r\n```\r\n### 复杂度分析\r\n时间复杂度 O(n)\r\n空间复杂度 O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992590965","body":"### 思路\r\n两次遍历\r\n### 代码\r\n```\r\nclass Solution {\r\npublic:\r\n    vector<int> shortestToChar(string s, char c) {\r\n        int n = s.size();\r\n        vector<int> res(n, INT_MAX);\r\n        for(int i = 0, j = -1; i < n; i ++) {\r\n            if(s[i] == c) {\r\n                j = i;\r\n            }\r\n            if(j != -1) {\r\n                res[i] = i - j;\r\n            }\r\n        }\r\n        for(int i = n - 1, j = -1; i >= 0; i --) {\r\n            if(s[i] == c) {\r\n                j = i;\r\n            }\r\n            if(j != -1) {\r\n                res[i] = min(res[i], j - i);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n};\r\n```\r\n### 复杂度分析\r\n时间复杂度 O(n)\r\n空间复杂度 O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fornobugworld":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991916230","body":"### 思路\n\n参考了题解中两数相加通用模板\n\n### 代码\n\n\n```py（此处换成你的语言，比如js，py 等）\ndef addToArrayForm(self, A: List[int], K: int) -> List[int]:\n    res = []\n    i, carry = len(A) - 1, 0\n    while i >= 0 or K != 0:\n        x = A[i] if i >= 0 else 0\n        y = K % 10 if K != 0 else 0\n\n        sum = x + y + carry\n        res.append(sum % 10)\n        carry = sum // 10\n\n        i -= 1\n        K //= 10\n    if carry != 0: res.append(carry)\n    return res[::-1]\n\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992583548","body":"### 思路\n\n参考标答，从左向右一次，只记录前一个C和自己的距离，再从右向左一次，两次取最小值\n\n### 代码\n\n\n```py（此处换成你的语言，比如js，py 等）\nclass Solution(object):\n    def shortestToChar(self, S, C):\n        prev = float('-inf')\n        ans = []\n        for i, x in enumerate(S):\n            if x == C: prev = i\n            ans.append(i - prev)\n\n        prev = float('inf')\n        for i in xrange(len(S) - 1, -1, -1):\n            if S[i] == C: prev = i\n            ans[i] = min(ans[i], prev - i)\n\n        return ans\n\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhouxsss":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991917000","body":"### 思路\n数组倒叙和加数 K 的个位数相加，K 减掉个位数模10后进位\n\n### 复杂度分析\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(1)\n\n### 代码\n\n```js\nfunction addToArrayForm(A, K) {\n  var ALen = A.length\n  if(!ALen) return []\n  // 进位\n  var add = 0\n  var res = []\n  for(let i = ALen - 1; i >= 0; i--) {\n    var basic = K % 10\n    // K % 10 个位数\n    var sum = A[i] + basic + add\n    if(sum >= 10) {\n      sum = sum - 10\n      add = 1\n    } else {\n        add = 0\n    }\n    res.unshift(sum)\n    K = (K - basic)/10\n  }\n  // 如果还有加项或者没加完的K的剩下位数，则直接连接\n  if(K || add) {\n    res = (K + add).toString().split('').concat(res)\n  }\n  return res\n}\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992529575","body":"### 思路\n对于每一个字母来说可能会有离左边最近的字符和离右边最近的字符。\n正向遍历一遍找出左边最近距离，反向遍历一遍右边最近的字符，对比求出最短距离。\n\n### 复杂度\n时间复杂度 O(n)，n为数组长度\n空间复杂度 O(n)，n为数组长度\n\n### 代码\n```js\n  /**\n   * @param {string} S\n   * @param {character} C\n   * @return {number[]}\n   */\n  function shortestToChar(S, C) {\n    var len = S.length\n    var res = new Array(len)\n    var arr = S.split('')\n    var dis = 10001\n    // 正向遍历\n    for(var i = 0; i < len; i++) {\n      if(S[i] === C) {\n        dis = 0\n      } else {\n        dis ++\n      }\n      res[i] = dis\n    }\n    var dis = 10001\n    // 反向遍历\n    for(var i = len - 1; i >= 0; i--) {\n      if(S[i] === C) {\n        dis = 0\n      } else {\n        dis ++\n      }\n      res[i] = Math.min(res[i], dis)\n    }\n    return res\n  }\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hoye1113":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991917040","body":"思路：\r\n从k的个位和数组的最后元素入手，k先模10拿到个位，与数组最后一位相加后结果放入res数组，\r\n接着k/=10处理除去个位，继续拿十位数，与数组倒数第二个元素相加，如果有进位则返到k值\r\nk还小于0不需要进位且A数组没有值的情况，则环循环结束。\r\n\r\n代码：js语言\r\n\r\nvar addToArrayForm = function(A, K) {\r\n  let i = A.length - 1\r\n  let res = []\r\n  while (i >= 0 || K){\r\n    K += (A[i] || 0)\r\n    res.push( K % 10 )\r\n    K = K / 10 | 0\r\n    i--\r\n    }\r\n    return res.reverse()\r\n};\r\n\r\n\r\n复杂度分析：\r\n时间复杂度O（n）\r\n空间复杂度O（n）","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992606180","body":"语言：js\r\n\r\n思路1:找到C在S中的所有索引，通过对比S[i]在CArray中最小的偏移量得到结果更新res[i]。\r\n\r\n```js\r\nvar shortestToChar = function (S, C) {\r\n    const res = Array(S.length)\r\n    const indexArr = []\r\n    for (let i = 0; i < S.length; i++) {\r\n        if (S[i] === C) {\r\n            indexArr.push(i)\r\n        }\r\n    }\r\n    for (let i = 0; i < S.length; i++) {\r\n        res[i] = indexArr.reduce((tmp, item) => {\r\n            return Math.min(tmp, Math.abs(i - item))\r\n        }, 10000)\r\n    }\r\n    return res\r\n};\r\n```\r\n\r\n复杂度分析:  (n为S的legth，m为C在S中的数量)\r\n\r\n时间复杂度：O(nm)O(nm)    空间复杂度：O(nm)O(nm)\r\n\r\n\r\n\r\n思路2:中心扩展法，定义一个diff变量，让diff逐渐增加，直到两侧有一侧找到C。将diff值push到res中。\r\n\r\n```js\r\nvar shortestToChar = function(S, C) {\r\n    const res = [] // 定义返回的数组\r\n    for (let i = 0; i < S.length; i++) {\r\n        let diff = 0; // 定义指针偏移量\r\n        while ((i - diff >= 0 || i + diff < S.length) && S[i - diff] != C && S[i + diff] != C) {\r\n            diff ++\r\n        }\r\n        res.push(diff)\r\n    }\r\n    return res\r\n};\r\n```\r\n\r\n复杂度分析:( n为S的length)\r\n\r\n时间复杂度：O(n^2)  空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gaoyi86":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991918034","body":"### 思路\n\n从低位到高位计算，注意进位和边界处理。\n\n### 代码\n\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> res = new LinkedList<>();\n        int n = num.length;\n        for (int i = n - 1; i >= 0; i--) {\n            res.add(0, (num[i] + k) % 10);\n            k = (num[i] + k) / 10;\n        }\n\n        while (k > 0) {\n            res.add(0, k % 10);\n            k /= 10;\n        }\n\n        return res;\n    }\n}\n```\n\n**复杂度分析**\n\\- 时间复杂度：O(1)\n\\- 空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ivangin":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991918630","body":"#### 思路：\r\n从右向左进行加法，记录进位，同时兼容超出num总位数的情况。使用LinkedList，参考链表头插法，减少后续转置操作。\r\n#### 代码\r\n```java \r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        int i = num.length - 1;\r\n        LinkedList<Integer> ans = new LinkedList<>();\r\n        while (k > 0 || i >= 0) {\r\n            if (i >= 0){\r\n                k += num[i--];\r\n            }    \r\n            ans.addFirst(k % 10);\r\n            k /= 10;\r\n        }\r\n        return ans;\r\n    }\r\n}\r\n\r\n```\r\n\r\n#### 复杂度分析\r\n时间复杂度  O(max(m,n))，m是数组num的长度，n是k数位的个数\r\n空间复杂度 O(1)","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993206075","body":"#### 思路：\r\n使用数组和一个栈顶指针，同时注意初始化指针为-1的情况下，出入栈的指针操作。\r\n\r\n#### 代码：\r\n\r\n```java \r\nclass CustomStack {\r\n\r\n    private int[] stack;\r\n    private int top;\r\n    private int maxSize;\r\n    public CustomStack(int maxSize) { // CustomStack(int maxSize)：用 maxSize 初始化对象，maxSize 是栈中最多能容纳的元素数量，栈在增长到 maxSize之后则不支持 push 操作。\r\n        this.stack = new int[maxSize];\r\n        this.top = -1;\r\n        this.maxSize = maxSize;\r\n    }\r\n\r\n    public void push(int x) {//如果栈还未增长到 maxSize ，就将 x 添加到栈顶。\r\n        if (top == stack.length - 1){\r\n        return;\r\n        }\r\n        stack[++top] = x;\r\n\r\n    }\r\n\r\n    public int pop() {//弹出栈顶元素，并返回栈顶的值，或栈为空时返回 -1 。\r\n        if (top == -1) return -1;\r\n        return stack[top--];\r\n    }\r\n\r\n    public void increment(int k, int val) {//栈底的 k 个元素的值都增加 val 。如果栈中元素总数小于 k ，则栈中的所有元素都增加 val 。\r\n        int num  = Math.min(k - 1, top);\r\n        if (num >= 0){\r\n        for (int i = 0; i <= num; i++) {\r\n            stack[i] += val;\r\n        }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Your CustomStack object will be instantiated and called as such:\r\n * CustomStack obj = new CustomStack(maxSize);\r\n * obj.push(x);\r\n * int param_2 = obj.pop();\r\n * obj.increment(k,val);\r\n */\r\n\r\n```\r\n\r\n#### 复杂度分析\r\n时间复杂度 push\\pop->O(1) ; incr->O(k)\r\n空间复杂度 O(maxSize)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guoling0019":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991918971","body":"## 思路\n从右向左开始，数组的最后一位与k的最后一位相加，如果和小于10，放入新数组，如果大于10，取余，向左进一位\n\n\n## 代码\n\n- 语言支持：JavaScript\n\nJavaScript Code:\n\n```javascript\n\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n    let sumArr = []\n\n        for(let i=num.length-1;i>=0;--i){\n            let sum = num[i]+k%10\n            k=Math.floor(k/10)\n            if(sum>=10){\n                k++\n                sum-=10\n            }\n            sumArr.push(sum)\n        }\n        for(;k>0;k=Math.floor(k/10)){\n            sumArr.push(k%10)\n        }\n        \n        return sumArr.reverse()\n};\n\n```\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992172020","body":"## 思路\r\n\r\n-  从当前元素开始分别向左右两边查询与目标元素是否相同，计算距离，取最小值\r\n\r\n## 代码\r\n\r\n- 语言支持：JavaScript\r\n\r\nJavaScript Code:\r\n\r\n```javascript\r\n\r\n/**\r\n * @param {string} s\r\n * @param {character} c\r\n * @return {number[]}\r\n */\r\nvar shortestToChar = function(s, c) {\r\n    let arr = []\r\n        for(let i=0,len=s.length;i<len;i++){\r\n            if(s[i]==c){\r\n                arr[i]=0\r\n            }\r\n            let prev=i,next=i,shorttest=Infinity;\r\n            while(prev>=0){\r\n                if(s[prev]==c){\r\n                    shorttest = Math.min(shorttest,i-prev);\r\n                    break;\r\n                }\r\n                prev--\r\n            }\r\n            while(next<s.length){\r\n                if(s[next]==c){\r\n                    shorttest=Math.min(shorttest,next-i);\r\n                    break\r\n                }\r\n                next++\r\n            }\r\n            arr[i]=shorttest;\r\n        }\r\n        return arr\r\n};\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：O(n^2)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993224262","body":"## 代码\n\n- 语言支持：JavaScript\n\nJavaScript Code:\n\n```javascript\n\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n    this.max=maxSize;\n    this.stk=[]\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if(this.stk.length<this.max){\n        this.stk.push(x)\n    }\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    let res = this.stk.pop()\n    return res==null?-1:res\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    for(let i=0;i<this.stk.length;i++){\n        if(i<k){\n            this.stk[i]+=val\n        }\n    }\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：push和pop为O(1)、increment为O(n)\n- 空间复杂度：O(1)\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"extra-man":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991920337","body":"### 思路\r\n自己想的贼复杂，还不对，最后看的力扣的答案\r\n### 代码\r\n//自己写不出来，抄的答案，\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> res = new ArrayList<Integer>();\r\n        int n = num.length;\r\n        for (int i = n - 1; i >= 0; --i) {\r\n            int sum = num[i] + k % 10;\r\n            k /= 10;\r\n            if (sum >= 10) {\r\n                k++;\r\n                sum -= 10;\r\n            }\r\n            res.add(sum);\r\n        }\r\n        for (; k > 0; k /= 10) {\r\n            res.add(k % 10);\r\n        }\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n}\r\n### 复杂度分析\r\n时间复杂度：O(\\max(n,\\log k))O(max(n,logk))，其中 nn 为数组的长度。\r\n\r\n空间复杂度：O(1)O(1)\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"a1exlism":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991921856","body":"### 思路\r\n\r\n注意范围, 还有两处边界\r\n\r\n### 代码\r\n\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\r\n        for i in range(len(A)-1, -1, -1):\r\n            K += A[i]\r\n            A[i] = K % 10\r\n            K //= 10\r\n        while(K > 0):\r\n            A.insert(0, K % 10)\r\n            K //= 10\r\n        return A\r\n```\r\n\r\n**复杂度分析**\r\n\r\n- 时间复杂度：O(N)，其中 N 为数组长度。\r\n- 空间复杂度：O(N) (包括数组A大小)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992617976","body":"### 思路\n\n- 记忆化解决多个 c 问题, 保存之前的状态;\n- prev 遍历两个方向保证 minimum\n\n### 代码\n\n```python\ndef shortestToCharOfficial(S: str, C: str) -> List[int]:\n        prev = float('-inf')\n        ans = []\n        # L -> R\n        for i, v in enumerate(S):\n            if v == C:\n                prev = i\n            ans.append(i-prev)\n        # print(ans)\n        # R -> L TIPS: INF\n        prev = float('inf')\n        for i in range(len(S)-1, -1, -1):\n            if S[i] == C:\n                prev = i\n            ans[i] = min(ans[i], prev-i)\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度: O(|S|), |S| 为 str 长度\n- 空间复杂度: O(|S|)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yetfan":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991922535","body":"\n**思路**\n\n数字小的直接用加法\n\n数字大的，要考虑和k的加法和进位，超过k就只考虑进位\n\n**代码**\n\n```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n\n        if len(num) <= len(str(k)):\n            return [int(j) for j in list(str(int(\"\".join([str(i) for i in num])) + k))]\n\n\n        k = [int(i) for i in list(str(k))]\n        c = 0\n        for j in range(len(num)-1,len(num)-len(k)-1,-1):\n            n = num[j] + k[j-len(num)+len(k)] + c\n            num[j] = n % 10\n            c = n // 10\n\n        for j in range(len(num)-len(k)-1,-1,-1):\n            print(j)\n            print(num[j],c)\n\n            if c == 0:\n                return num\n            else:\n                n = num[j] + c\n                num[j] = n % 10\n                c = n // 10\n\n        if c == 1:\n            return [1] + num\n        else:\n            return num\n```\n\n**复杂度分析**\n\n时间 O(n) 加过k之后，如果没有进位会提前结束\n\n空间 O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992616644","body":"**思路**\r\n\r\n标记最近的位置进行遍历\r\n\r\n**代码**\r\n\r\n\r\n```python\r\nclass Solution(object):\r\n    def shortestToChar(self, S, C):\r\n        prev = float('-inf')\r\n        ans = []\r\n        for i, x in enumerate(S):\r\n            if x == C: prev = i\r\n            ans.append(i - prev)\r\n\r\n        prev = float('inf')\r\n        for i in xrange(len(S) - 1, -1, -1):\r\n            if S[i] == C: prev = i\r\n            ans[i] = min(ans[i], prev - i)\r\n\r\n        return ans\r\n```\r\n\r\n**复杂度**\r\n\r\n时间 O(N)\r\n空间 O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jackzcai":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991922549","body":"//1，不可将A数组遍历得到sumA，与K做加法得到和，原因：A数组的长度可能很长，整数越界；\r\n//2，将K与A倒序的每个元素相加得到和，将和取模得到每个元素，插入到新数组中。\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] A, int K) {\r\n        int len = A.length;\r\n        int lastNum =K;\r\n        LinkedList<Integer> ret= new LinkedList<>();\r\n        int i = len-1;\r\n        while(i >=0 || lastNum > 0){\r\n            int tmp = lastNum % 10 + (i >= 0 ? A[i] : 0);\r\n            ret.addFirst(tmp%10);\r\n            lastNum = lastNum / 10 + tmp / 10;\r\n            i--;\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"helloxkw":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991922639","body":"思路：\n从k的个位和数组的最后元素入手，k先模10拿到个位，与数组最后一位相加后结果放入res数组，\n接着k/=10处理除去个位，继续拿十位数，与数组倒数第二个元素相加，如果有进位则返到k值\nk还小于0不需要进位且A数组没有值的情况，则环循环结束。\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        //用LinkedList不断从头将位数和加入index 0\n        List<Integer> res = new LinkedList<>();\n        int n = num.length;\n        for (int i = n - 1; i >= 0; i--) {\n            //从末尾往前扫，加和取余的值\n            res.add(0, (num[i] + k) % 10);\n            //更新k存进位carry\n            k = (num[i] + k) / 10;\n        }\n\n        // post-possing: 处理k位数大于num的情况剩下的部分\n        // Time = O(log(k))\n        while (k > 0) {\n            res.add(0, k % 10);\n            k /= 10;\n        }\n\n        return res;\n    }\n}\n\n复杂度分析\n时间复杂度 O(max(m,n))，m是数组num的长度，n是k数位的个数\n空间复杂度 O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992615919","body":"class Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        int len = s.length();\n        vector<int> record;\n        vector<int> ans(len);\n        for (int i = 0; i < len; i++) {\n            if (s[i] == c) record.push_back(i);\n        }\n        \n        for (int i = 0; i < len; i++) {\n            int temp = INT_MAX;\n            for (int k = 0; k < record.size(); k++) {\n                temp = min(temp, abs(i - record[k]));\n            }\n            ans[i] = temp;\n        }\n        return ans;\n    }\n};","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mongoczk":[{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/1#issuecomment-991924489","body":"思路：\r\n逐位相加：逐位将数字加在一起，若加法结果大于等于10，则需要进位\r\n代码：**JavaScript**\r\n```javascript \r\n var addToArrayForm = function(num, k) {\r\n  const arr = []\r\n  const len = num.length\r\n  for( let i = len-1; i >= 0; i-- ){\r\n    let sum = num[i] + k % 10;\r\n    k = Math.floor(k / 10);\r\n    if( sum >= 10){\r\n      k++;\r\n      sum -= 10 \r\n    }\r\n    arr.push(sum)\r\n  }\r\n  for(; k > 0; k = Math.floor( k / 10)){\r\n    arr.push(k % 10)\r\n  }\r\n  return arr.reverse();\r\n};\r\n```\r\n\r\n复杂度分析\r\n时间复杂度：O(N)，其中 N为数组的长度。\r\n空间复杂度：O(1), 除了返回值以外，使用了一个常数记录数组的长度。","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992616476","body":"### 思路\r\n+ 使用两次遍历，找到每个字符分别离左边和右边最近的的字符c的距离，取最小值\r\n+ 初始化记录距离的数组，每个元素值为数组长度-1，即最大距离\r\n+ 从左向右遍历： 存储数组元素到左边最近的字符c的距离，遇到字符c时更新下标\r\n+ 从右向左遍历： 比该数组元素到右边最近的字符c的距离与记录的距离，取最小值，遇到字符c时更新下标\r\n\r\n### 代码 —   **JavaScript**\r\n```javascript\r\n var shortestToChar = function(s, c) {\r\n  s = s.split('')\r\n  let len = s.length\r\n  let prev = len-1\r\n  let distance = new Array(len).fill(prev)\r\n  for(let i=0; i< len; i++){\r\n    if(s[i] == c){\r\n      distance[i] = 0\r\n      prev = i\r\n    }else{\r\n      distance[i] =  Math.abs(i-prev)\r\n    }\r\n  }\r\n  for(let i=len-1; i>=0; i--){\r\n    if(s[i] == c){\r\n      distance[i] = 0\r\n      prev = i\r\n    }else{\r\n      distance[i] = Math.min(Math.abs(i-prev),distance[i])\r\n    }\r\n  }\r\n  return distance\r\n};\r\n\r\n```\r\n\r\n**复杂度分析**\r\n+ 时间复杂度：O(n)：两次循环，n为字符串长度\r\n+ 空间复杂度：O(n): 除返回值外，使用了一个数组，长度为字符串长度，空间为 O(n)\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shao-nuoya":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991959157","body":"# 思路\r\n正向及反向遍历\r\n注意初始时第一个c的位置的设定\r\n# 代码\r\n\r\n```python\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        n =  len(s)\r\n        left = float('-inf')\r\n        ans = [0 for _ in range(n)]\r\n        for i in range(n):\r\n            if s[i] == c:\r\n                left = i\r\n                ans[i] = 0\r\n            else:\r\n                ans[i] = i - left\r\n\r\n        right = float('inf')\r\n        for i in range(n-1, -1, -1):\r\n            if s[i] == c:\r\n                right = i\r\n            else:\r\n                ans[i] = min(right -i, ans[i])\r\n\r\n        return ans\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-992981152","body":"# 类的用法\n# Code\n```python\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.stack = []\n\n    def push(self, x: int) -> None:\n        if len(self.stack)<self.maxSize:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if self.stack:\n            ans = self.stack[-1]\n            del self.stack[-1]\n            return ans\n        return -1\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(min(k, len(self.stack))):\n            self.stack[i] += val\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yangziqi1998666":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991978597","body":"- 时间复杂度：O(n*m)\n- 空间复杂度：O(n)   \n /**\n     * 暴力解法\n     * 既然我们需要找到最短距离，那么首先应该获取到该字符在字符串 s 中的所有下标位置。\n     * 使用O(n)的时间遍历一次字符串，并将等于目标字符的下标添加至动态数组location。\n     * 创建 res 数组，长度为s.length()\n     * 再次遍历s的过程中，再遍历location集合\n     * 寻找距离i最近的距离，并存入res中\n     *\n     * @param s\n     * @param c\n     * @return\n     */\n    public int[] shortestToChar(String s, char c) {\n        ArrayList<Integer> location = new ArrayList<Integer>();\n        for (int i=0; i < s.length(); i++){\n            if (s.charAt(i) == c)\n                location.add(i);\n        }\n\n        int[] res = new int[s.length()];\n        int min,dis;\n\n        for ( int i=0; i< s.length(); i++){\n            min = Integer.MAX_VALUE/2;\n            for (int j=0; j < location.size(); j++){\n                dis = Math.abs(location.get(j)-i);\n                if (dis<min){\n                    min = dis;\n                    res[i] = min;\n                }\n            }\n        }\n        return res;\n    }","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-992811814","body":"```java\nclass CustomStack {\n    private int maxSize;\n    private int[] stack;\n    private int pointer;\n\n\n    public CustomStack(int maxSize) {\n        this.maxSize = maxSize;\n        this.pointer = -1;\n        stack = new int[maxSize];\n    }\n    \n    public void push(int x) {\n        if (pointer != maxSize-1){\n            pointer++;\n            stack[pointer] = x;\n        }\n\n    }\n    \n    public int pop() {\n        if (pointer == -1)\n            return -1;\n        pointer--;\n        return stack[pointer+1];\n\n    }\n    \n    public void increment(int k, int val) {\n        for(int i = 0; i <= pointer && i < k; i++){\n            stack[i] += val;\n        }\n    }\n}\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack obj = new CustomStack(maxSize);\n * obj.push(x);\n * int param_2 = obj.pop();\n * obj.increment(k,val);\n */\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"blessinglr":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991978913","body":"class Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        pos = [-float('inf')]\n        for idx, char in enumerate(s):\n            if char == c:\n                pos.append(idx)\n        pos.append(float('inf'))\n        i = 1\n        res = []\n        for idx, char in enumerate(s):\n            if idx == pos[i]:\n                i += 1\n                res.append(0)\n                continue\n            res.append(min(pos[i]-idx, idx-pos[i-1]))\n        return res","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-992696272","body":"```python\r\nclass CustomStack:\r\n    def __init__(self, maxSize: int):\r\n        self.maxSize = maxSize\r\n        self.lst = []\r\n        self.idx = 0\r\n        \r\n    def push(self, x: int) -> None:\r\n        if self.idx < self.maxSize:\r\n            self.idx += 1\r\n            self.lst.append(x)\r\n\r\n    def pop(self) -> int:\r\n        if self.idx == 0:\r\n            return -1\r\n        self.idx -= 1\r\n        return self.lst.pop()\r\n\r\n    def increment(self, k: int, val: int) -> None:\r\n        for i in range(min(k, len(self.lst))):\r\n            self.lst[i] += val\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"frederickfan":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991984254","body":"# Idea: \r\nWe can set a left pointer pointing to the left occurrence of the character c and set a right pointer pointing to the right occurrence of the character c. Then we iterate the array, for each element we encountered, we check the distance between itself and the left pointer and also check the distance between itself and the right pointer. The minimum one of those two distances will be the result for the current character. \r\n\r\n# Code: \r\n```python\r\nclass Solution(object):\r\n    def shortestToChar(self, s, c):\r\n        \"\"\"\r\n        :type s: str\r\n        :type c: str\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        n = len(s)\r\n        l = 0 if s[0] == c else n\r\n        r = s.find(c, 0)\r\n        res = [0 for _ in range(n)]\r\n        \r\n        for i in range(n):\r\n            res[i] = min(abs(i - l), abs(r - i))\r\n            \r\n            if i == r:\r\n                l = r \r\n                r = s.find(c, l + 1)\r\n                \r\n        \r\n        return res\r\n\r\n```\r\n# Complexity\r\n* Time: O(N)\r\n* Space: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-992935560","body":"# Idea: \r\nUse the python list to simulate stack. The only feature we need to add is to increase last k elements by val. \r\n\r\n# Code: \r\n```python\r\nclass CustomStack:\r\n\r\n    def __init__(self, maxSize: int):\r\n        self.array = []\r\n        self.n = maxSize \r\n        \r\n\r\n    def push(self, x: int) -> None:\r\n        if len(self.array) < self.n: \r\n            self.array.append(x)\r\n        \r\n        \r\n\r\n    def pop(self) -> int:\r\n        if not self.array:\r\n            return -1\r\n        return self.array.pop()\r\n\r\n    def increment(self, k: int, val: int) -> None:\r\n        length = min(k, len(self.array))\r\n        \r\n        for i in range(length):\r\n            self.array[i] += val\r\n        \r\n```\r\n# Complexity\r\nTime:  Push: O(1) Pop: O(1) Increment: O(min(k, n))\r\nSpace: O(n)\r\n\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"moirobinzhang":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-991989214","body":"思路：\n从前往后 以及 从后往前两次遍历\n第一次遍历result[i]记录i位置字符与前一个c的距离\n第二次遍历result[i]比较Min(result[i], i位置字符和后一个c的距离）\n\n代码：\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        result = []\n        \n        flag_index = len(s) - 1        \n        for i in range(len(s)):\n            if (s[i] == c):\n                flag_index = i\n            result.append(abs(flag_index - i))\n                       \n        flag_index = 0\n        for i in range(len(s) -1, -1, -1):\n            if (s[i] == c):\n                flag_index = i\n            result[i] = min(result[i], abs(flag_index - i ))\n        \n        return result\n\n复杂度分析:\n时间复杂度O（N）\n空间复杂度O（N）","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-992923831","body":"Idea:\nUse List to simulate Stack\n\nCode:\n\npublic class CustomStack {\n\n    public List<int> cList {get; set;}\n    public int maxCount {get; set;}\n    \n    public CustomStack(int maxSize) {\n        cList = new List<int>();\n        maxCount = maxSize;        \n    }\n    \n    public void Push(int x) {\n        if (cList.Count >= maxCount)\n            return;\n        \n        cList.Add(x);\n    }\n    \n    public int Pop() {\n        if (cList == null || cList.Count == 0)\n            return -1;\n        \n        int popValue = cList[cList.Count - 1];\n        cList.RemoveAt(cList.Count - 1);\n        return popValue;\n    }\n    \n    public void Increment(int k, int val) {\n        if (cList == null || cList.Count == 0)\n            return;\n        \n        int len = cList.Count >= k ? k : cList.Count;\n        \n        for (int i = 0; i < len ; i++)\n            cList[i] += val;\n    }\n}\n\n\nComplexity\nT: Push: O(1), Pop: O(1), Increment: O(N)\nS: O(n)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"declan92":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992054950","body":"## 思路\n最短距离->两个值之间较小值\n1. 关键字将数组分成n段子数组,子数组最小索引最大索引均为关键字,且中间无关键字;\n2. 最短距离是距离最小索引和最大索引中的较小值\n3. 从左往右遍历得出距离左边关键字距离,从右往左遍历得出距离右边关键字的距离并比较两者大小\n4. 由于 1 <= s.length <= 10000,左指针初始值可以设置为Integer.MIN_VALUE+10000,不然会超过int范围;\n## java\n```\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int[] ans = new int[s.length()];\n        int leftPos = Integer.MIN_VALUE + 10000;\n        for(int i = 0;i < s.length(); i++){\n            if(s.charAt(i)==c){\n                leftPos = i;\n            }\n            ans[i] = i - leftPos;\n        }\n        int rightPos = Integer.MAX_VALUE;\n        for(int i = s.length() - 1;i >=0;--i){\n            if(s.charAt(i)==c){\n                rightPos = i;\n            }\n            ans[i] = Math.min(rightPos - i,ans[i]);\n        }\n        return ans;\n    }\n}\n```\n## 复杂度\n时间:O(n),n为数组长度;    \n空间:O(n),ans[]长度","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993038951","body":"思路\n1. 使用数组实现,第一位的值保存栈顶位置指针,数组尾部为栈顶;\n2. 初始化:数组长度maxSize+1,ans[0] = 0,size = maxSize;\n3. push(val):数组尾部增加值,栈顶指针++;\n4. pop():数组尾部弹出值,栈顶指针--;\njava\n```\nclass CustomStack {\n    private int[] ans;\n    private size;\n\n    public CustomStack(int maxSize) {\n        ans = new int[maxSize+1];\n        size = maxSize;\n        ans[0] = 0;\n    }\n    \n    public void push(int x) {\n        if(ans[0] < size){\n            ans[++ans[0]] = x;\n        }\n    }\n    \n    public int pop() {\n        if(ans[0] > 0){\n            int res = ans[ans[0]];\n            ans[ans[0]--] = 0;\n            return res;\n        }\n        return -1;\n    }\n    \n    public void increment(int k, int val) {\n        int min = Math.min(ans[0],k);\n        for(int i = 1;i <= min; i++){\n            ans[i] = ans[i] + val;\n        }\n    }\n}\n```\n复杂度:      \n时间:Custom(int maxSize): O(1); push(int x):O(1);  pop():O(1); increment(int k, int val):O(n),n为栈深;      \n额外空间:O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jiaqiliu37":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992127456","body":"```\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        prev = float(\"-inf\")\n        ans = []\n        for i, char in enumerate(s):\n            if char == c:\n                prev = i\n            ans.append(i - prev)\n        \n        prev = float(\"inf\")\n        for i in range(len(s) -1, -1, -1): \n            if s[i] == c:\n                prev = i\n            ans[i] = min(ans[i], prev-i)\n            \n        return ans\n```\nTC：O(N)\nSC:  O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993158786","body":"```\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack = []\n        self.size = maxSize\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.size:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if not self.stack:\n            return -1\n        else: \n            return self.stack.pop()\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(min(k,len(self.stack))):\n            self.stack[i] += val\n```\nTime complexity Increment O(n) Others O(1)\nSpace complexity O(n)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yhccode1999":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992376691","body":"## 思路：\r\n\r\n- 先利用list集合储存 c 字符出现的位置；\r\n- 再判断 s 字符串中每个字符与所有 c 字符的距离，取最小值\r\n\r\n```java\r\nclass Solution {\r\n    public int[] shortestToChar(String s, char c) {\r\n        int n = s.length();\r\n        int[] res = new int[n];\r\n        Arrays.fill(res,10001);\r\n        List<Integer> list = new ArrayList<>();\r\n        for (int i=0;i<n;i++) {\r\n            if (s.charAt(i) == c) list.add(i);\r\n        }\r\n        int len = list.size();\r\n        for (int i=0;i<n;i++) {\r\n            for (int j=0;j<len;j++) {\r\n                res[i] = Math.min(res[i], Math.abs(i-list.get(j)));\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}\r\n```\r\n\r\n- 空间复杂度 O(n)\r\n- 时间复杂度 O(n2)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993097849","body":"## 思路：用数组实现\r\n- nowIndex 代表当前元素的位置，-1 为栈空\r\n- maxSize 为栈最大，nowIndex == maxSize - 1 时，栈满\r\n- 每 push 一次，nowIndex 往后移动一位\r\n- 每 pop 一次，nowIndex 往前移动一位\r\n- increment 时，遍历 i 从 0 开始，需要满足 i < k && i <= nowIndex\r\n\r\n## java\r\n```java\r\nclass CustomStack {\r\n    int maxSize = 0;\r\n    int nowIndex = -1;\r\n    int[] arr;\r\n    public CustomStack(int maxSize) {\r\n        this.maxSize = maxSize;\r\n        arr = new int[maxSize];\r\n    }\r\n    \r\n    public void push(int x) {\r\n        if (nowIndex == maxSize-1) {\r\n            return;\r\n        }\r\n        arr[++nowIndex] = x;\r\n    }\r\n    \r\n    public int pop() {\r\n        if (nowIndex == -1) {\r\n            return -1;\r\n        }\r\n    }\r\n    \r\n    public void increment(int k, int val) {\r\n        for (int i=0;i<k && i<=nowIndex;i++) {\r\n            arr[i] += val;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Your CustomStack object will be instantiated and called as such:\r\n * CustomStack obj = new CustomStack(maxSize);\r\n * obj.push(x);\r\n * int param_2 = obj.pop();\r\n * obj.increment(k,val);\r\n */\r\n```\r\n\r\n## 复杂度分析\r\n1. 时间复杂度 \r\n- push O(1)\r\n- pop O(1)\r\n-  increment:O(k)最大O(n)\r\n2. 空间复杂度\r\n- O(maxSize)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aobasyp":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992404415","body":"思路：\r\n先从前往后再从后往前两次遍历\r\ntmp记录c出现的位置\r\n第一次遍历从前往后,temp[i]存放s中i位置字符与前一个c的距离\r\n第二次从后往前遍历比较取较小的\r\n\r\n```\r\n`class Solution {\r\n    public int[] shortestToChar(String s, char c) {\r\n        int[] ans = new int[s.length()];      \r\n        int i = 0, j = s.length() - 1, tmp = -1;\r\n        while (i < s.length()) {\r\n            if (s.charAt(i) == c) {\r\n                ans[i] = 0;\r\n                tmp = i;\r\n            } \r\n            if (tmp != -1) {\r\n                ans[i] = i - tmp;\r\n            } else {\r\n                ans[i] = s.length() + 1;\r\n            }\r\n            \r\n            i++;\r\n        }\r\n        tmp = -1;\r\n        while (j >= 0) {\r\n            if (s.charAt(j) == c) {\r\n                ans[j] = 0;\r\n                tmp = j;\r\n            }\r\n            if (tmp != -1) ans[j] = Math.min(ans[j], tmp - j);\r\n            \r\n            j--;\r\n        }\r\n        \r\n        return ans;\r\n    }\r\n}`\r\n```\r\n\r\n时间：O(N)\r\n空间：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993219442","body":"思路\n用一个数组\npush和pop需要注意边界\ninc 从栈底(数组0号)开始遍历，依次加上对应的val，注意 for 循环里的边界条件\n代码\n'''\nclass CustomStack {\n    int[] stack;\n    int maxSize;//数组最大长度\n    int curIndex;//当前数组下标\n\n    public CustomStack(int maxSize) {\n        stack = new int[maxSize];\n        this.maxSize = maxSize;\n        curIndex = -1;\n    }\n\n    public void push(int x) {\n        if (curIndex >= maxSize - 1) {\n            return;\n        }\n        curIndex++;\n        stack[curIndex] = x;\n    }\n\n    public int pop() {\n        if (curIndex < 0) {\n            return -1;\n        }\n        int resultValue = stack[curIndex];\n        curIndex--;\n        return resultValue;\n    }\n\n    public void increment(int k, int val) {\n        //栈底开始遍历\n        for (int index = 0; index < k && index <= curIndex; index++) {\n            stack[index] = stack[index] + val;\n        }\n    }\n}\n'''\n\n复杂度分析\n\npush：时间复杂度O(1) 空间复杂度O(1)\npop：时间复杂度O(1) 空间复杂度O(1)\ninc：时间复杂度O(N) 空间复杂度O(1)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"caohaha":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992410758","body":"```C++\r\nclass Solution \r\n{\r\npublic:\r\n    vector<int> shortestToChar(string s, char c) \r\n    {\r\n        int n = s.size();\r\n\r\n        vector<int> res(n, n-1);\r\n        // 从左往右开始遍历\r\n        if(s[0] == c)\r\n            res[0] = 0;\r\n        for (int i = 1; i < n; i++)\r\n        {\r\n            if(s[i] != c)\r\n                res[i] = res[i-1]+1;\r\n            else\r\n                res[i] = 0;\r\n        }\r\n\r\n        // 从右往左开始遍历\r\n        if(s[n-1] == c)\r\n            res[n-1] = 0;\r\n        for (int i = n-2; i >= 0; --i)\r\n        {\r\n            res[i] = min(res[i], s[i] != c ? res[i+1] + 1 : 0);\r\n        }\r\n\r\n        return res;\r\n    }\r\n};\r\n```\r\n- 时间复杂度O(n)\r\n- 空间复杂度O(n)\r\n\r\n\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kite-fly6618":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992416737","body":"### 思路\n两边遍历，取当前位置与前一个C字符 prev之间的更新prev,取两次遍历后中较小的那个。\n\n### 代码\n\n```js\n/**\n * @param {string} S\n * @param {character} C\n * @return {number[]}\n */\nvar shortestToChar = function(S, C) {\n    let res = [];\n    let left = [];\n    let right = []\n    let prev = -Infinity;    \n    for (let i = 0; i < S.length; i++) {\n        if (S.charAt(i) == C) {\n            prev = i;\n        }\n        left[i] = i - prev;\n    }\n    prev = Infinity;\n    for (let i = S.length - 1; i >= 0; i--) {\n        if (S.charAt(i) == C) {\n            prev = i;\n        }\n        right[i] = prev -i;\n    }\n    for (let i  = 0; i < S.length;i ++) {\n        res[i] = Math.min(left[i],right[i])\n    }\n    return res;\n};\n```\n### 复杂度\n时间复杂度： O(n)  \n空间复杂度： O(n)  \n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xuhzyy":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992418103","body":"思路：\n1. 第一次遍历，从前往后遍历，记录距离列表1;   \n2. 第二次遍历，从后往前遍历，记录距离列表2;   \n3. 比较两个列表，取最小值即为所求答案。    \n\n代码\n\n\tclass Solution(object):\n\t\tdef shortestToChar(self, s, c):\n\t\t\t\"\"\"\n\t\t\t:type s: str\n\t\t\t:type c: str\n\t\t\t:rtype: List[int]\n\t\t\t\"\"\"\n\t\t\tprev = float('-inf')\n\t\t\tans = []\n\t\t\tfor i in range(len(s)):\n\t\t\t\tif s[i] == c:\n\t\t\t\t\tprev = i\n\t\t\t\tans.append(i-prev)\n\n\t\t\tprev = float('inf')\n\t\t\tfor i in range(len(s)-1,-1,-1):\n\t\t\t\tif s[i] == c:\n\t\t\t\t\tprev = i\n\t\t\t\tans[i] = min(ans[i], prev-i)\n\n\t\t\treturn ans\n\n时间复杂度: O(N)  \n空间复杂度: O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993306334","body":"### 思路\n通过数组来模拟构拟栈的操作\n\n\n### 代码\n\tclass CustomStack(object):\n\n\t\tdef __init__(self, maxSize):\n\t\t\t\"\"\"\n\t\t\t:type maxSize: int\n\t\t\t\"\"\"\n\t\t\tself.stack = []\n\t\t\tself.maxSize = maxSize\n\n\t\tdef push(self, x):\n\t\t\t\"\"\"\n\t\t\t:type x: int\n\t\t\t:rtype: None\n\t\t\t\"\"\"\n\t\t\tif len(self.stack) < self.maxSize:\n\t\t\t\tself.stack.append(x)\n\n\t\tdef pop(self):\n\t\t\t\"\"\"\n\t\t\t:rtype: int\n\t\t\t\"\"\"\n\t\t\tif len(self.stack) == 0:\n\t\t\t\tres = -1\n\t\t\telse: \n\t\t\t\tres = self.stack[-1]\n\t\t\t\tself.stack = self.stack[:-1]\n\t\t\treturn res\n\n\t\tdef increment(self, k, val):\n\t\t\t\"\"\"\n\t\t\t:type k: int\n\t\t\t:type val: int\n\t\t\t:rtype: None\n\t\t\t\"\"\"\n\t\t\tfor i in range(k):\n\t\t\t\tif i + 1 > len(self.stack):\n\t\t\t\t\tbreak\n\t\t\t\tself.stack[i] += val\n\n**复杂度分析**\n- 时间复杂度：O(N)\n- 空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiao-xiao-meng-xiang-jia":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992455220","body":"int N = S.length();\n        int[] ans = new int[N];\n        int prev = Integer.MIN_VALUE / 2;\n\n        for (int i = 0; i < N; ++i) {\n            if (S.charAt(i) == C) prev = i;\n            ans[i] = i - prev;\n        }\n\n        prev = Integer.MAX_VALUE / 2;\n        for (int i = N-1; i >= 0; --i) {\n            if (S.charAt(i) == C) prev = i;\n            ans[i] = Math.min(ans[i], prev - i);\n        }\n\n        return ans;\n\n时间复杂度：O(N)\n空间复杂度：O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"biaohuazhou":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992513597","body":"###思路\n从前遍历并求出每个下标到目标的距离  再从后遍历\n最后比较两个遍历的最小值  \n###代码\n```JAVA\n    class Solution {\n        public int[] shortestToChar(String s, char c) {\n\n            int[] ans = new int[s.length()];\n            int tmp = -1;\n            //从前往后\n            for (int i = 0; i < s.length(); i++) {\n                if (s.charAt(i) == c) {\n                    ans[i] = 0;\n                    tmp = i;\n                }\n                if (tmp != -1) {\n                    ans[i] = i - tmp;\n                } else {\n                    ans[i] = s.length() + 1;\n                }\n            }\n            tmp = -1;\n            for (int j = s.length() - 1; j >= 0; j--) {\n                if (s.charAt(j) == c) {\n                    ans[j] = 0;\n                    tmp = j;\n                }\n                if (tmp != -1) {\n                    ans[j] = Math.min(tmp - j, ans[j]);\n                }\n            }\n            return ans;\n        }\n    }\n```\n***复杂度分析***\n时间复杂度：$0(N)$ ，N是数组S的长度\n空间复杂度：$0(N)$，N是数组ans的长度","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993088581","body":"###思路\n使用数组实现栈\n###代码\n```JAVA\n    class CustomStack {\n        private int[] stack;\n        private int maxSize;\n        private int curSize;\n\n        public CustomStack(int maxSize) {\n            stack = new int[maxSize];\n            this.maxSize = maxSize;\n            curSize = 0;\n        }\n\n        public void push(int x) {\n            if (curSize < maxSize) {\n                stack[curSize++] = x;\n            }\n        }\n\n        public int pop() {\n            if (curSize == 0) {\n                return -1;\n            }\n            return stack[--curSize];\n        }\n\n        public void increment(int k, int val) {\n            k = Math.min(k, curSize);\n            for (int i = 0; i < k; i++) {\n                stack[i] = stack[i]+val;\n\n            }\n\n        }\n    }\n```\n***复杂度分析***\n时间复杂度：\npush：O(1)\npop:O(1)\nincrement:O(k)\n空间复杂度：$O(k)$","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"codingpitaya":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992528699","body":"## 题目\n\n[821. 字符的最短距离](https://leetcode-cn.com/problems/shortest-distance-to-a-character/)\n\n## 解题思路\n\n> 先遍历一遍字符串 `s` 找到所有 `c` 字符，并记录 `c` 字符出现的数组下标，然后遍历字符串 `s` 计算所有字符距离的最小值。将结果返回。\n\n## 题解\n\n```js\nvar shortestToChar = function(s, c) {\n    let result = new Array(s.length).fill(0);\n    let locations = [];\n    for(let i = 0; i < s.length; i++) {\n        if(s[i] === c) {\n            locations.push(i);\n        }\n    }\n    for(let i = 0; i < s.length; i++) {\n        if(s[i] !== c) {\n            let locate = Infinity;\n            for(let j = 0; j < locations.length; j++) {\n                locate = Math.min(locate, Math.abs(i - locations[j]));\n            }\n            result[i] = locate\n        }\n    }\n    return result;\n};\n```\n\n- 时间复杂度:  O(N*K) `N` 为 字符串 `s` 的长度，`K` 为字符串 `s` 中 `c` 字符出现的次数。\n\n- 空间复杂度:  O(K)   `K` 为存储数组下标的辅助数组。","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pwqgithub-cqu":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992579590","body":"暴力解法:\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        vector<int> a;\n\n        for(int i=0; i<s.size(); i++)\n        {\n            if(s[i] == c)\n                a.push_back(i);  \n        }\n\n        vector<int> answer;\n        for(int i=0; i<s.size(); i++)  // 遍历字符串\n        {\n            int num = s.size();\n            for(int j=0; j< a.size(); j++)  \n            {\n                num = min(num, abs(a[j]-i));\n            }\n            answer.push_back(num);\n        }\n        return answer;\n    }\n};\n\n时间复杂度:N*N\n空间复杂度:N","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rex-zh":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992600011","body":"### 思路  \n1. 遍历找到第一个c，并记录位置  \n1. 遍历结果数组至上述位置，为c之前及其自身索引赋距离值  \n1. 从上述位置的下一个开始继续遍历，使用gap计算两个c之间的间距，同时作为当前索引的距离值，若出现c则反向遍历gap/2个索引重新赋更近的距离值  \n1. 遍历完毕返回结果  \n### 代码  \n```java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int[] answer = new int[s.length()];\n        int gap = 0;\n        int k = 0;\n        for(; k<s.length() ; k++){\n            if(s.charAt(k) == c) break;\n        }\n        for(int i=0; i<=k; i++){\n            answer[i] = k-i;\n        }\n        for(int i=k+1; i<s.length(); i++){\n            if(s.charAt(i)==c){\n                for(int j=i; j>=i-gap/2; j--){\n                    answer[j]=i-j;\n                }\n                gap=0;\n            }else{\n                gap++;\n                answer[i]=gap;\n            }\n        }\n        return answer;\n    }\n}\n```  \n### 复杂度分析  \n- 时间复杂度：O(N)，N为字符串长度  \n- 空间复杂度：也许O(N)  ","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yutong-dai":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992604942","body":"\n# 思路\n\nforward + backward pass\n\nrecord the current char location\n\n# 代码\n\n```python\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n\n        n = len(s)\n        ans = []\n\n        #forward\n        last_seen = -n    \n        for (i, cur_char) in enumerate(s):\n            if cur_char == c:\n                last_seen = i\n            ans.append(i-last_seen)\n\n        #backward\n        last_seen = 2*n   \n        for i in range(n-1, -1, -1):\n            if s[i] == c:\n                last_seen = i\n            ans[i] = min(ans[i], last_seen-i)\n        \n        return ans\n```        \n\n# 复杂度分析\n\n* 时间复杂度：O(N)\n* 空间复杂度：O(N)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993055568","body":"\n# 代码\n\nclass CustomStack:\n\n```python\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.size = 0\n        self.lst = [None] * maxSize\n\n    def push(self, x: int) -> None:\n        if self.size < self.maxSize:\n            self.lst[self.size] = x\n            self.size += 1\n\n    def pop(self) -> int:\n        if self.size == 0:\n            return -1\n        else:\n            item = self.lst[self.size-1]\n            self.size -= 1\n            return item\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(min(k, self.size)):\n            self.lst[i] += val\n```\n\n# 复杂度:\n\n时间\n\n* push: O(1)\n* pop: O(1)\n* increment: O(n)\n\n空间复杂度：\n\n* push: O(2)            \n* pop: (1)\n* increment: O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tian-pengfei":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992610167","body":"```c++\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        vector<int> re(s.length(),10000);\n\n        for (int i =0 ;i<s.length();i++){\n\n            if(s[i] == c){\n                re[i] = 0;\n                for (int j =0 ;j<s.length();j++){\n                    if(re[j]>abs(j-i)){\n                        re[j]=abs(j-i);\n                    }\n                }\n            }\n\n\n        }\n\n        return  re;\n    }\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rmbdream":[null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/2#issuecomment-992638943","body":"## Note\nc的位置pre未知时距离为无穷远，即先将距离赋予超大数。左右遍历，右遍历时距离为i-pre，左遍历时为pre-i\n## Code\n```java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int n = s.length();\n        int[] ans = new int[n];\n        \n        // /2防止越界\n        int pre = Integer.MIN_VALUE / 2;\n        for (int i = 0; i < n; i++) {\n            if (s.charAt(i) == c) {\n                pre = i;\n            }\n            ans[i] = i - pre;\n        }\n        pre = Integer.MAX_VALUE;\n        for (int i = n - 1; i > -1; i--) {\n            if (s.charAt(i) == c) {\n                pre = i;\n            }\n            ans[i] = Math.min(ans[i], pre - i);\n        }\n        return ans;\n    }\n}\n```\n## Complexity\n- time: O(n)\n- space: O(n)","onTime":false},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fayepei":[null,null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993010039","body":"class CustomStack {\r\n    int top;\r\n     public CustomStack(int maxSize){\r\n        int[] stack=new int[maxSize];\r\n        top=-1;\r\n     }\r\n    \r\n     public void Push(int x) { //no need to return, for the void method\r\n         if(top!=stack.length-1){\r\n             top++;\r\n             stack[top]=x;\r\n         }\r\n     }\r\n     public int Pop() {\r\n        if(top=-1){\r\n            return -1;\r\n        }--top;\r\n         return stack[top+1];\r\n         \r\n        \r\n     }\r\n     public void Increment(int k, int val) {\r\n         int limit=Math.min(k,top+1);\r\n        for(int i=0;i<limit;i++){\r\n            stack[i]=stack[i]+val;\r\n        } \r\n         \r\n     }      \r\n}","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"herbertpan":[null,null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993114123","body":"### 思路\n没什么特别的，标准的用array 模拟stack\n1. top指针表示 栈顶\n2. bottom 指针表示 栈底\n3. size 表示 当前栈大小：push pop 操作相关\n4. array[maxSize + 1]做内部数据结构：为什么+1，模拟stack full时top指针的位置\n\n### 代码\n```java\nclass CustomStack {\n    private int maxSize;\n    private int size;\n    private int top;\n    private int bot;\n    \n    private int[] stack;\n    \n    public CustomStack(int maxSize) {\n        this.size = 0;\n        this.top = 0;\n        this.bot = 0;\n        \n        this.maxSize = maxSize;\n        this.stack = new int[maxSize+1];\n    }\n    \n    public void push(int x) {\n        if (this.size == this.maxSize) {\n            // do nothing\n        } else {\n            this.stack[this.top++] = x;\n            this.size++;\n        }\n    }\n    \n    public int pop() {\n        if (this.size == 0) {\n            return -1;\n        } else {\n            this.top--;            \n            this.size--;\n            return this.stack[this.top];\n        }\n    }\n    \n    public void increment(int k, int val) {\n        if (k > this.maxSize) {\n            k = this.maxSize;\n        }\n        \n        for (int i = this.bot; i < k && i < this.top; i++) {\n            this.stack[i] += val;\n        }\n    }\n}\n\n```\n\n**复杂度分析**\n- 时间复杂度：push,pop都是O(1), increment是O(min(K, maxSize))\n- 空间复杂度：O(maxSize)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"amberma626":[null,null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993185619","body":"思路：Use array to record maxSize and simulate stack\r\n代码：\r\n```python3\r\nclass CustomStack:\r\n\r\n    def __init__(self, maxSize: int):\r\n        self.stack = [] \r\n        self.maxSize = maxSize\r\n        \r\n    def push(self, x: int) -> None:\r\n        if len(self.stack) < self.maxSize:\r\n            self.stack.append(x)       \r\n\r\n    def pop(self) -> int:\r\n        if len(self.stack) <= 0 :\r\n            return -1\r\n        else:\r\n            return self.stack.pop()        \r\n\r\n    def increment(self, k: int, val: int) -> None:\r\n        if k <= len(self.stack):\r\n            for i in range(k):\r\n                self.stack[i] += val \r\n            \r\n        else:\r\n            self.stack = [x+val for x in self.stack]\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"phybrain":[null,null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993251967","body":"### 思路\n\n数组实现\n\n### 代码\n\n\n```python\n\nclass CustomStack:\n\n    def __init__(self, size: int):\n        self.st = []\n        self.cnt = 0\n        self.size = size\n\n    def push(self, x: int) -> None:\n        if self.cnt < self.size:\n            self.st.append(x)\n            self.cnt += 1\n\n\n    def pop(self) -> int:\n        if self.cnt == 0: return -1\n        self.cnt -= 1\n        return self.st.pop()\n\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(0, min(self.cnt, k)):\n            self.st[i] += val\n\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"testeducative":[null,null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993270910","body":"## 代码\n```c++\nclass CustomStack {\npublic:\n    int maxS;\n    vector<int> stack;\n    CustomStack(int maxSize) {\n        maxS=maxSize;\n    }\n    \n    void push(int x) {\n        if(stack.size()<maxS)\n            stack.push_back(x);\n    }\n    \n    int pop() {\n        if(stack.size()==0)\n            return -1;\n        int back=stack.back();\n        stack.pop_back();\n        return back;\n    }\n    void increment(int k, int val) {\n        int bottom=k;\n        if(stack.size()<k)\n            bottom=stack.size();\n        for(int i=0;i<bottom;i++)\n        {\n            stack[i]+=val;\n        }\n    }\n};\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"littleworker":[null,null,{"url":"https://github.com/leetcode-pp/91alg-6-daily-check/issues/4#issuecomment-993329296","body":"### 思路\n\n使用TypeScript，栈采用数组进行模拟，直接使用数组的push 和 pop方法，在push和pop时进行长度判断\n\n### 代码\n\n\n```typescript\nclass CustomStack {\n    private arr:number[] =[];\n    private maxSize:number=0;\n    constructor(maxSize: number) {\n      this.maxSize = maxSize\n    }\n\n    push(x: number): void {\n      if(this.arr.length < this.maxSize){\n        this.arr.push(x);\n      }\n    }\n\n    pop(): number {\n        return  this.arr.pop() || -1\n    }\n\n    increment(k: number, val: number): void {\n      const maxNum = Math.min(this.arr.length,k)\n      for(let i=0;i<maxNum;i++){\n        this.arr[i] += val;\n      }\n    }\n}\n```\n\n**复杂度分析**\n- 时间复杂度：\n  push,pop: O(1)，其中 N 为数组长度。\n  inc: O(Max(K,N))，其中 K 为操作元素长度，N为数组长度。\n- 空间复杂度：O(N)，其中 N 为数组长度。","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}