{"michaelxi3":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1184635948","body":"# Idea\r\nArray Iteration，从后往前进位\r\n# Code\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        LinkedList<Integer> res = new LinkedList<>();\r\n        int index = num.length - 1;\r\n        \r\n        while (index >= 0 || k!=0) {\r\n            \r\n            if (index >= 0) {\r\n                k = num[index] + k;\r\n                index--;\r\n            }\r\n            // k != 0 时都要继续loop！因为有进位的 special case！\r\n            res.addFirst(k % 10);\r\n            k = k / 10;\r\n        }\r\n        \r\n        return res;\r\n    }\r\n}\r\n```\r\n# Complexity\r\n- Time: O(N)\r\n- Space: O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"darknightwriter":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1184674932","body":"## 思路\n注意 k 、num数组、以及进位问题即可。\n- Java：数组遍历\n- Python： 字符串偷懒\n\n## 解题\nJava:\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        LinkedList<Integer> arr = new LinkedList<>();\n        int index = num.length - 1;\n        int plus = 0;\n        while (k > 0 || plus != 0 || index > -1) {\n            int mod = k % 10 + plus;\n            k /= 10;\n            if (index > -1) {\n                mod += num[index--];\n            }\n            arr.addFirst(mod % 10);\n            plus = mod / 10;\n        }\n        return arr;\n    }\n}\n```\nPython:\n```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        n = reduce(lambda x, y: x * 10 + y, num) + k\n        return [0] if n == 0 else [int(i) for i in str(n)]\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"findlayzhou":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1184759423","body":"**智商不够，硬解来凑**\n\n----------------------\n\n> 思路：把整数转成数组，同时创建一个长度+1的备用数组防止溢出，各位分别做十进制加法，不溢出则截断数组返回答案。\n\n------------\n\n*代码*\n\n```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\n\n/**\n * @author boyu\n */\npublic class Solution {\n    static int[] addArrAndInt(int[] nums,int k){\n        ArrayList<Integer> al = new ArrayList<>();\n        do{\n            al.add(k % 10);\n        }while ((k /= 10) > 0);\n        Collections.reverse(al);\n        int[] arr = new int[al.size()];\n        for (int i = 0; i < al.size(); i ++) {\n            arr[i] = al.get(i);\n\n        }\n        return addTwoArr(nums, arr);\n    }\n    static int[] addTwoArr(int[] arr1, int[] arr2){\n        int tag = 0;\n        int t;\n        int ptr1 = arr1.length;\n        int ptr2 = arr2.length;\n        int[] res = new int[Math.max(ptr1, ptr2) + 1];\n        Arrays.fill(res, 0);\n        for (int i = res.length - 1; i >= 0 ; i --) {\n            if(ptr1 < 1 && ptr2 < 1) {\n                res[i] = tag;\n                break;\n            }else if(ptr1 < 1){\n                t = arr2[-- ptr2] ;\n            }else if(ptr2 < 1){\n                t = arr1[-- ptr1] ;\n            }else {\n                t = arr1[-- ptr1] + arr2[-- ptr2];\n            }\n            res[i] = (t + tag) % 10;\n            if (t + tag >= 10){\n                tag = 1;\n            }else {\n                tag = 0;\n            }\n        }\n        if ( res[0] != 1 ){\n            return Arrays.copyOfRange(res, 1, res.length);\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] arr= {9, 9, 9};\n        int k = 1;\n        System.out.println(\"{9, 9, 9} + 1 = \" + Arrays.toString(Solution.addArrAndInt(arr, k)));\n    }\n}\n```\n\n--------------\n\n***萌新刚接触算法没思路求大佬们轻喷，后续会努力学习大佬解法，献丑了。***\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"laofuwf":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1184788930","body":"```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        s = \"\"\n        for i in num:\n            s += str(i)\n            \n        answer = int(s) + k\n        \n        return  \"\".join(str(answer))\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lbc546":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1184790165","body":"## Add Entire K to the first column to the right and carry over ```addend // 10``` to the next (left) column\n## Python Solution\n```\nclass Solution(object):\n    def addToArrayForm(self, num, k):\n        index = len(num) - 1\n        add = k\n        result = []\n        \n        # Iterate from right end of the array\n        while index >= 0 or add > 0:\n             # Whenever not at the end of the array, add the digit\n             if index >= 0:\n                add += num[index]\n            add, mod = divmod(add, 10)\n            result.insert(0, mod)\n            index -= 1\n        return result\n```\n## Complexity\nTime: O(n)   Space: O(n) where n is the length of the array num","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zch-bit":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1184793730","body":"## Go Solution\r\nAdd the last digit of k to the last element in `num` as `sum`, then drop the last digit of k(k=k/10); eventually, check if k is equal to zero, if not, convert it to a new array and attach the num to the end.\r\n\r\n```go\r\nfunc addToArrayForm(num []int, k int) []int {\r\n\ti := len(num) - 1\r\n\tfor i >= 0 || k > 0 {\r\n\t\tif i > 0 && k > 0 {\r\n\t\t\tsum := num[i] + k%10\r\n\t\t\tnum[i] = sum\r\n\t\t\tk = k / 10  // drop the last element of k\r\n\r\n\t\t\tif sum > 9 {\r\n\t\t\t\tnum[i] = sum % 10\r\n\t\t\t\tk++ //  add carry(1) to k\r\n\t\t\t}\r\n\t\t\ti--\r\n\t\t} else if i >= 0 {\r\n\t\t\tbreak\r\n\t\t} else {\r\n\t\t\tnum = append([]int{k % 10}, num...) \r\n\t\t}\r\n\t}\r\n\r\n\treturn num\r\n}\r\n```\r\n\r\n## Complexity: \r\nTIme: O(n)\r\nSpace: O(n) where m is the max between the length of num and k.","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"frankelzeng":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1184838625","body":"## Idea\r\nKeep in mind that string is just a list of char, then there is no need to do decimal manipulation but can simply use six-stage conversion: \r\n1. convert int list to char list\r\n2. join char list into singe word\r\n3. convert the single word to int\r\n4. add int with k\r\n5. convert the sum to string\r\n6. map string to int list\r\n## Python Code\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        num_int = int(\"\".join(map(str, num)))\r\n        re = num_int + k\r\n        return list(map(int, str(re)))\r\n```\r\n## Complexity\r\nSpace: O(N)\r\nTime: O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xingzhaodev":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1184887447","body":"**Swift Solution**\r\n\r\n思路：\r\nK作为位数累加然后进位\r\n代码：\r\n```\r\n\r\n    func addToArrayForm(_ num: [Int], _ k: Int) -> [Int] {\r\n        if num.isEmpty { return [] }\r\n        \r\n        var k = k, ans = [Int](), i =  num.count - 1, carry = 0\r\n        while i >= 0 || k > 0 {\r\n            var sum = (i >= 0 ? num[i] : 0) + (k > 0 ? k % 10 : 0) + carry\r\n            ans.append(sum % 10)\r\n            carry = sum / 10\r\n            i -= 1\r\n            k /= 10 \r\n        }\r\n        \r\n        if carry > 0 {\r\n            ans.append(carry)\r\n        }\r\n        \r\n        return Array(ans.reversed())\r\n    }\r\n```\r\n\r\n复杂度：\r\n时间复杂度： O（n）\r\n空间复杂度: O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joeymoso":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1184914351","body":"```python3\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n\r\n        idx = len(num) - 1\r\n        while k > 0 and idx >= 0:\r\n            if num[idx] + k % 10 < 10:\r\n                num[idx] = num[idx] + k % 10\r\n                k //= 10\r\n            else:\r\n                num[idx] = (num[idx] + k % 10) % 10\r\n                k //= 10\r\n                k += 1\r\n            idx -= 1\r\n        while k:\r\n            if idx < 0:\r\n                num = [k % 10] + num\r\n                k //= 10\r\n            else:\r\n                if num[idx] + k % 10 < 10:\r\n                    num[idx] += k % 10\r\n                    k //= 10\r\n                else:\r\n                    num[idx] = 0\r\n                    k //= 10\r\n                    k += 1\r\n                idx -= 1\r\n            \r\n\r\n        return num\r\n```\r\n\r\n* Time: O(n)\r\n* Space: O(n)\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hackbl":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1184950463","body":"```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> res = new ArrayList<>();\r\n        \r\n        for (int i = num.length-1; i >= 0; i--) {\r\n            int curr = k%10 + num[i];\r\n            k /= 10;\r\n            \r\n            if (curr >= 10) {\r\n                k += 1;\r\n            }\r\n            \r\n            res.add(0, curr%10); \r\n        }\r\n        \r\n        while (k > 0) {\r\n            res.add(0, k%10);\r\n            k /= 10;\r\n        }\r\n        \r\n        \r\n        return res;\r\n    }\r\n}\r\n```\r\n* Time: O(n)\r\n* Space: O(n)\r\n* Where n is Max(num.length, k.length)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"q815101630":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185032289","body":"```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        i = 0\r\n        num = num[::-1]\r\n        while k:\r\n            mod = k % 10\r\n            k = k//10\r\n            if i < len(num):\r\n                num[i] += mod\r\n            else:\r\n                num.append(mod)\r\n            if num[i] >= 10:\r\n                if i+1 < len(num):\r\n                    num[i+1] += 1\r\n                else:\r\n                    num.append(1)\r\n\r\n                num[i] -= 10\r\n            i+=1\r\n        while i < len(num):\r\n            if num[i] >= 10:\r\n                if i+1 < len(num):\r\n                    num[i+1] += 1\r\n                else:\r\n                    num.append(1)\r\n                num[i] -= 10\r\n                i+=1\r\n            else:\r\n                break\r\n        return num[::-1]\r\n```\r\n一位一位地加并且进位 ripple adder\r\n\r\nTime O(n)\r\nSpace: O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shiyishuoshuo":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185034114","body":"explanation:\r\ntake K as a carry and use k to extract the lowest digit with K % 10 and update k with k /10 as the next higher digit\r\ncorner case is once the loop ended, if k is still > 0 need to put 1 on the leftmost digit\r\n\r\ncode\r\n```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n\r\n        int len = num.length;\r\n        List<Integer> ans = new ArrayList<>();\r\n        \r\n        for(int j = len - 1; j>=0 || k > 0; j--){\r\n            ans.add(0, (j>=0 ? num[j] + k : k) % 10);\r\n            k = (j>=0 ? num[j] + k : k) / 10;\r\n        }\r\n\r\n        return ans;\r\n\r\n    }\r\n}\r\n```\r\n\r\nTime: O(n) since iterate array once\r\nSpace: O(1)\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aouos":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185043729","body":"```js\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function (num, k) {\n  const len = num.length;\n  const stack = [];\n\n  for (let i = len - 1; i >= 0 || k > 0; i--) {\n    k = k + (num[i] || 0);\n    stack.push(k % 10);\n    k = Math.floor(k / 10);\n  }\n\n  return stack.reverse();\n};\n```\n- 时间复杂度：O(n)\n- 空间复杂度：O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"thinkfurther":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185062953","body":"```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        import math\r\n        n = max(len(num), int(math.log10(k))+1) + 1\r\n        result = [0] * n\r\n        num = [0] * (n - len(num)) + num\r\n        \r\n        carry = 0\r\n        for i in range(n - 1, -1, -1):\r\n            result[i] = num[i] + k % 10 + carry\r\n            carry = result[i] // 10\r\n            result[i] = result[i] % 10\r\n            k = k // 10\r\n            \r\n        if result[0] == 0:\r\n            return result[1:]\r\n        else:\r\n            return result\r\n```\r\n\r\n时间复杂度：O(N)\r\n空间复杂度：O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wengzhouyunfan":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185063354","body":"\n```java\n  // key point : A > 0  add digit by digit\n  // input : int A[], int k     return: int []\n  // A.length <= 10000     T: O(n) < n^2\n  // brute force : \n  //   1) get last digit from k and cur A[i]; \n  //   2) add to array, renew carry and digit; \n  //   3) check carry, return array;\n\t  public int[] addInteger(int[]A, int K){\n\t    LinkedList<Integer> list = new LinkedList<Integer>();\n\t    int curA = A.length - 1;\n\t    int curK = K;\n\t    int carry = 0;\n\t    while(curA >= 0 || curK != 0){\n\t      int sum = curA < 0 ? carry + curK%10 : carry + A[curA] + curK%10;\n\t      int digit = sum % 10;\n\t      carry = sum / 10;\n\t      list.add(digit);  // add to end O(1) \n\t      curK/=10;\n\t      curA--;\n\t    }\n\t    if(carry != 0) list.addFirst(1); // add to head O(1)\n\t    return list.stream().mapToInt(x -> x).toArray(); // can't directly turn into primitive type O(n)\n\t  }\n```\nT: O(n)\nS: O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"whisht":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185072053","body":"1. 将 num 转为 数字\r\n``` python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        t = 10\r\n        n = len(num)\r\n        res = 0\r\n        for i in range(n):\r\n            res += t**i*num[n-i-1]\r\n        res += k\r\n        print(res)\r\n        out = []\r\n        while res:\r\n            out.append(res%10)\r\n            res = res//10\r\n        return out[::-1]\r\n```\r\n时间复杂度：$O(N)$\r\n空间复杂度：$O(N)$\r\n\r\n2. 逐位相加\r\n>  ![image](https://user-images.githubusercontent.com/16497652/179130663-29ae5da6-b53c-4569-bd7c-327bf30c97e6.png)\r\n> [https://leetcode.cn/problems/add-to-array-form-of-integer/solution/989-ji-zhu-zhe-ge-jia-fa-mo-ban-miao-sha-8y9r/](url)\r\n\r\n``` python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        carry = 0\r\n        res = []\r\n        if len(num)<len(str(k)):\r\n            num = [0]*(len(str(k))-len(num))+num\r\n        n = max(len(str(k)),len(num))-1\r\n        while n>=0 or k:\r\n            sums = num[n]+k%10+carry\r\n\r\n            basic = sums%10\r\n            carry = sums//10\r\n            res.insert(0,basic)\r\n\r\n            n -= 1\r\n            k//=10\r\n        if carry:\r\n            res.insert(0,carry)\r\n            return res\r\n        else:\r\n            return res\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bzlff":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185074522","body":"### 思路\n将list→str→int → result+k → str → list\n\n### 代码\n```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        \n        result = int(''.join(map(str, num))) + k\n        \n        return [int(i) for i in str(result)]\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zzzkains":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185077761","body":"y总说这个是高精度加法\n# 高精度加法\nc++中的高精度加法一般是从低位到高位\n所以需要reverse\n然后正常加就行\n# 代码\n```C++\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        reverse(num.begin(), num.end());\n        for (int & c : num) {\n            k += c;\n            c = k % 10;\n            k /= 10;\n        }\n        while (k) num.push_back(k % 10), k /= 10;\n        reverse(num.begin(), num.end());\n        return num;\n    }\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chenmengyu":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185084170","body":"# 思路\n类似于大数相加，由于可能溢出，所以把两个数转成数组存储，从数组对应的数字低位开始相加，若同位相加大于10，需要进位。\n\n# 代码JS\n```js\nvar addToArrayForm = function(num, k) {\n    let num2 = (k + '').split('')\n    let len = Math.max(num.length, num2.length)\n    let flag = 0 // 进位标志\n    let result = []\n    num.reverse()\n    num2.reverse()\n    for (let i = 0; i < len; i++) {\n        let sum = (num[i] || 0) + (num2[i] || 0) / 1 + flag\n        flag = Math.floor(sum / 10)\n        sum = sum % 10\n        result.push(sum)\n    }\n    if (flag) {\n        result.push(flag)\n    }\n    return result.reverse()\n};\n```\n# 复杂度\n时间复杂度：O(n)  \n空间复杂度：O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"uancen":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185084621","body":"## Idea\n\n首先循环处理num，k提供加数/辅助处理进位\n\n再单独拿出一个循环处理剩下的k，直接加在num头部\n\n## Code\n\n```GO\nfunc reverse(num []int) {\n\tfor i, n := 0, len(num); i < n/2; i++ {\n\t\tnum[i], num[n-1-i] = num[n-1-i], num[i]\n\t}\n}\nfunc addToArrayForm(num []int, k int) []int {\n\tvar res_head []int\n\tvar n int = len(num)\n\ti := n - 1\n\tfor i >= 0 || k > 0 {\n\t\tif i < 0 {\n\t\t\tbreak\n\t\t}\n\t\tsum := num[i] + k%10\n\t\tk /= 10\n\t\tif sum >= 10 {\n\t\t\tsum -= 10\n\t\t\tk++ // add the 10 as 1 to k\n\t\t}\n\t\tnum[i] = sum // 0<=sum<=9\n\t\ti--\n\t}\n\tfor k > 0 {\n\t\tres_head = append(res_head, k%10)\n\t\tk /= 10\n\t}\n\treverse(res_head)\n\tnum = append(res_head, num...)\n\treturn num\n}\n```\n\n## Complexity\n\n* Time O(N)\n* Space O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nuomituxedo":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185093417","body":"## 思路\r\n1. convert to num to integer\r\n2. add k to integer to get sum\r\n3. convert sum to list of integers\r\n\r\n## 代码 （Python)\r\n\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        num_int = int(''.join(map(str, num)))\r\n        sum = num_int + k\r\n        new_num = []\r\n        for d in str(sum):\r\n            new_num.append(int(d))\r\n        return new_num\r\n```\r\n\r\n时间复杂度： O(n)\r\n空间复杂度： O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhongranherz":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185096544","body":"## 思路\n1.将 num和k从后往前相加，两者长度未知，通过 while k!=0 or i>=0 来使长度统一。\n2.每一位的累加和sum放入res中，是否进位通过carry判断。\n3.while完毕后，需要判断carry是否为零。\n\n##  python代码\n``` python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        res=[]\n        carry=0\n        i=len(num)-1\n        while k!=0 or i>=0:\n            x=num[i] if i>=0 else 0 \n            y=k%10 if k!=0 else 0\n\n            sum = x+y+carry\n            res.append(sum%10)\n            carry=sum//10\n\n            i-=1\n            k//=10\n        \n        if carry!=0: res.append(carry)\n\n        return res[::-1]\n```\n## 复杂度分析\n设N为数组长度\n时间复杂度： O(max(N，K))\n空间复杂度： O(max(N，K))","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gr52":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185097387","body":"/*\r\n思路 \r\n先将数组x遍历,用字符串类型拼接,强制转换与k相加,\r\n在csdn 找到的方法(大佬求解释,不太懂)直接将数值,转换成字符串\r\n*/\r\n//代码\r\nvar x=[1,2,3,4]\r\nvar k=54\r\nfor(var i=0,str='';i<x.length;i++){\r\n        str+=x[i]\r\n}\r\nvar A=Number(str)+k\r\n const converToArray = number => [...`${number}`].map(el => parseInt(el))\r\nconsole.log(converToArray(A) ); \r\n//复杂度：\r\n//时间复杂度： O（n）\r\n//空间复杂度: O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hydelovegood":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185097824","body":"# 整体思路\r\n1. 转换num或转换K，相加后再转换成数组\r\n2. 防止进位问题，可以将数组转换成数字，而后和k相加，再转换成数组\r\n# 代码\r\n```\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        s, m = 0, 1\r\n        ans = []\r\n        for i in num[::-1]:\r\n            s += i * m\r\n            m *= 10\r\n        s += k\r\n        for i in str(s):\r\n            ans.append(int(i))\r\n        return ans\r\n```\r\n# 复杂度分析\r\n- 时间复杂度On\r\n- 空间复杂度On","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nikojxie":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185098164","body":"## 思路\r\n每次循环，把数组的最后一位pop出来 和 K除10取余的结果相加，如果有进位再加1，K等于K/10取整，再记一下当前进位标记，开始下一次循环，直到 A为空 且 K为0 且 进位标记为false\r\n\r\n## 代码（JS）\r\n```javascript\r\nfunction addToArrayFormOfInteger(A, K) {\r\n  // res存结果，sum是每一位加的结果，addOneFlag是进位标记\r\n  let res = [], sum = 0, addOneFlag = false\r\n  while(A.length || K || addOneFlag) {\r\n    sum = (A.pop() || 0) + K % 10 + addOneFlag\r\n    K && (K = Math.floor(K / 10))\r\n    addOneFlag = sum >= 10\r\n    res.push(sum % 10)\r\n  }\r\n  return res.reverse()\r\n}\r\n```\r\n\r\n## 复杂度\r\n\r\n- 时间复杂度：O(n)\r\n- 空间复杂度：O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fangxianshen":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185100852","body":"##Go解法思路\n```\nfunc addToArrayForm(num []int,k int)(ans []int){\n\tfor i := len(num)-1;i>=0;i--{\n\t\tsum := num[i] + k%10\n\t\tk /= 10\n\t\tif sum >=10{\n\t\t\tk ++\n\t\t\tsum -= 10\n\t\t}\n\t\tans = append(ans,sum)\n\t}\n\tfor ; k>0;k/=10{\n\t\tans = append(ans,k%10)\n\t}\n\treverse(ans)\n\treturn\n}\n\nfunc reverse(num []int){\n\tfor i,n := 0,len(num);i<n/2;i++{\n\t\tnum[i],num[n-1-i] = num[n-1-i],num[i]\n\t}\n}\n```\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jokertzw":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185100878","body":"### 思路\nlist变为str再变为int然后求和后再转化为list\n### 代码\n```python\nclass Solution(object):\n    def addToArrayForm(self, num, k):\n        \"\"\"\n        :type num: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        sum = int(''.join(map(str, num))) + k\n        return [int(i) for i in str(sum)]\n```\n**复杂度分析**\n- 时间复杂度：O(n) \n- 空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cyang258":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185102829","body":"```java\npublic List<Integer> addToArrayForm(int[] num, int k) {\n        int kLength = 0;\n        int kcounter = k;\n        while(kcounter > 0){\n            kcounter /= 10;\n            kLength++;\n        }\n        int numLength = num.length;\n        List<Integer> res = new ArrayList<Integer>();\n        // find num or k whichever has smallest length as counter to loop\n        int counter = kLength > numLength ? numLength : kLength;\n        int carry = 0;\n        // add digit with digit and if exceed 10 then add 1 to carry and remainder to list\n        while(counter > 0){\n            int remainder = k % 10;\n            k /= 10;           \n            int digit = (num[numLength - 1] + remainder + carry) % 10;\n            carry = (num[numLength - 1] + remainder + carry) / 10;\n            // add remainder to each digit\n            res.add(0, digit);\n            counter--;\n            numLength--;\n        }\n        // if k is longer digit, then we add remaining k to list\n        while(k > 0){\n            int remainder = k % 10;\n            k /= 10;\n            int digit = (remainder + carry) % 10;\n            carry = (remainder + carry) / 10;\n            // add remainder to each digit\n            res.add(0, digit);\n        }\n        // if num array is longer, then we add remaining num array to list\n        while(numLength > 0){\n            int digit = (num[numLength - 1] + carry) % 10;\n            carry = (num[numLength - 1] + carry) / 10;\n            res.add(0, digit);\n            numLength--;\n        }\n        // if we have remaining carry, we add carry to list\n        if(carry > 0){\n            res.add(0, carry);\n        }\n        return res;\n    }\n```\n\n  Time Complexity: O(max(N,M)) which N is length of num array and M is digit of k  <br/>\n  Space Complexity: O(max(N, M)) since we need to store the result and it is the longest number between length num array and digit of k <br/>\n## 思路\n#### 我需要把两个数相加，那我就只需要把每个digit的数相加然后除以10，余数就是现在的digit的数，如果超过10就加入carry 加到下一个digit 比如个位上 num array是5，k的个位是6，那最终结果的个位必然是1，我们把多出来的10加到十位数就行，具体可视化参照小学加法列式子","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kernelsue":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185108946","body":"```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n\t\tLinkedList<Integer> list = new LinkedList<Integer>();\r\n    \t        int carry = 0;\r\n\t\tint i = num.length-1;\r\n    \twhile(i >= 0||k != 0){\r\n    \t\tif(k == 0 && carry == 0){\r\n    \t\t\tlist.push(num[i]);\r\n    \t\t\ti--;\r\n    \t\t\tcontinue;\r\n\t\t     }\r\n    \t\tint cur = carry + k%10;\r\n\t\tif(i >= 0)  cur += num[i];\r\n\t\tlist.push(cur%10);\r\n\t\tcarry = cur/10;\r\n\t\tk /= 10;\r\n\t\ti--;\r\n\t}\r\n    \tif(carry != 0){\r\n    \t\tlist.push(1);\r\n\t}\r\n    \treturn list;\r\n    }\r\n}\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"erikahuang":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185110660","body":"```\r\nclass Solution:\r\n    def listsum1(self, a: list[int], k: int) -> list[int]:\r\n        # 时间和空间复杂度都为O(n)\r\n        carry = 0\r\n        n = max(len(a), len(str(k))+1\r\n        res = [0] * n\r\n        a = [0] * (n-len(a)) + a\r\n\r\n        for i in range(n-1, -1, -1):\r\n            res[i] = a[i] + k % 10 + carry\r\n            carry = res[i] // 10\r\n            res[i] = res[i] % 10\r\n            k = k // 10\r\n\r\n        return res[1:] if res[0] == 0 else res\r\n\r\n    def listsum2(self, a: list[int], k: int) -> list[int]:\r\n        a = \"\".join(map(str,a))\r\n        res = int(a) + k\r\n        return list(map(int, str(res)))\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kuang-mou":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185111126","body":"### 思路\r\n由于k的位数是小于等于A数组位数的，直接利用python转化为字符进行相加\r\n### 代码\r\n```class Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        s =  int(''.join(map(str,num))) + k\r\n        return [int(i) for i in str(s)]","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"iloveqier":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185112285","body":"```\r\n/**\r\n * @param {number[]} num\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = function (num, k) {\r\n    let narr = []\r\n    // k作为每一项都加的东西，余数是要存下的值，除数是下一次要加的东西\r\n    for (let i = num.length - 1; i > -1 || k > 0; i--, k = Math.floor(k / 10)) {\r\n        // 防止num遍历到最头部的时候，k依然有值,需要继续使用\r\n        if (i > -1) {\r\n            k = k + num[i]\r\n        }\r\n        narr.unshift(k % 10)\r\n    }\r\n    return narr\r\n};\r\n```\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"duke-github":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185112936","body":"## 思路\n    将数组从后往前加给k k每次取余作为结果 /10参与下一次运算\n## 复杂度\n    时间复杂度 O(max(n,m)) m n 为数组的长度 和k的长度 空间复杂度 O(n)\n## 代码\n```java\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        LinkedList<Integer> result = new LinkedList<>();\n        for (int i = num.length - 1; i >= 0; i--) {\n            k += num[i];\n            result.addFirst(k % 10);\n            k /= 10;\n        }\n        while (k > 0) {\n            result.addFirst(k % 10);\n            k /= 10;\n        }\n        return result;\n    }\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"caterpillar-0":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185118358","body":"### 思路\r\n按位依次相加\r\n### 代码\r\n```C++\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n        vector<int>res;\r\n        for(int i=num.size()-1;i>=0 || k>0;i--,k/=10){\r\n            if(i>=0){\r\n                k+=num[i];\r\n            }\r\n            res.push_back(k%10);\r\n        }\r\n        reverse(res.begin(),res.end());\r\n        return res;\r\n    }\r\n};\r\n```\r\n### 复杂度分析\r\n* 时间复杂度：o(n)\r\n* 空间复杂度：o(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ashleyyma6":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185118412","body":"### Idea\n\nInput: an int in array form **num**, an int **k** to add\nOutput: result in array form\n\n1. array to int, add k, int to array\n   ~~2. int k to array, add array~~\n\n### Code\n\n```python\n    def addToArrayForm(self, num, k):\n        # array to int\n        int_res = int(''.join(str(n) for n in num))\n        int_res+=k\n        # int to array\n        res = [int(n) for n in str(int_res)]\n        return res\n```\n\n**Complexity Analysis**\n\n- Time Complexity: O(n)+O(n) = O(n)\n- Space Complexity: O(1)+O(n) = O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuki-yzy":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185123309","body":"# 思路\n\n将num与k末位相加，加到k上，k中自动进位，只需将k取余放入数组中即可\n\n# 代码\n\n\n```js\nvar addToArrayForm = function(num, k) {\n    let res = []\n    let len = num.length - 1\n    while(len >= 0 || k > 0) {\n        if(len >= 0) {\n            k += num[len]\n            len--\n        }\n        res.push(k % 10)\n        k = parseInt(k / 10)\n    }\n    return res.reverse()\n};\n```\n\n# 复杂度\n\n时间：O(n)\n\n空间：O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zpc7":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185132808","body":"### 思路\n一开始没考虑到大数的运算会丢失精度, 还说题目简单;\n参考的题解用了通用的方法\n### 代码 TS\n```ts\n// 一开始没有考虑到大数计算的进度丢失情况, 使用了下面的写法\n// function addToArrayForm(num: number[], k: number): number[] {\n//     const sum: number = Number(num.join('')) + k;\n\n//     return (sum + '').split('').map(item => Number(item));\n// };\n\nvar addToArrayForm = function (num: number[], k: number): number[] {\n    const res = [];\n    const n = num.length;\n\n    // 从低位加到高位, 所以采用从大到小的顺序循环\n    for (let i = n - 1; i >= 0; --i) {\n        let sum = num[i] + k % 10;\n        k = Math.floor(k / 10);\n\n        // 需要进位的情况, 将进位加在K上, 便于下一次循环\n        if (sum >= 10) {\n            k++;\n            sum -= 10;\n        }\n        res.push(sum);\n    }\n    // 考虑nums比较小, K比较大的情况, 循环结束后, K还有值, 例如:111+88888, 需要将他补充回数组\n    while (k > 0) {\n        res.push(k % 10);\n        k = Math.floor(k / 10)\n    }\n    // 不采用反转的话, 每次都需要在数组最前面插值(shift), 时间复杂度高\n    return res.reverse();\n};\n```\n### 复杂度\n时间 O(n)\n空间 O(1) ? 不太确定, 没太搞懂空间复杂度的分析, 求大佬解答","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yujian920":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185136875","body":"### 思路\r\n\r\n暴力解法：字符串转换，然后用 BigInt 转换保证大数精度不丢失\r\n### 代码\r\n\r\n\r\n```typescript（此处换成你的语言，比如js，py 等）\r\nfunction addToArrayForm(num: number[], k: number): number[] {\r\n  return (BigInt(num.join(\"\")) + BigInt(k)).toString().split(\"\").map(item => Number(item))\r\n};\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(N)，类型转换部分时间复杂度不会算，余下部分应该是 O(2*n)也就是 O(n)\r\n- 空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kiirii4":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185137931","body":"### 思路\n将num[n-1]相加赋值于k，对其结果求余，作为该位的值，k / 10 的结果再和num[n-2]相加，对其结果求余，作为该位的值，以此类推\n\n### 代码\n```C++\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int> vec;\n        int len = num.size();\n        for(int i = len - 1; 0 <= i || k >= 1; i--, k /= 10){\n            if( i >= 0){\n                k += num[i];\n            }\n            vec.push_back(k % 10);\n        }\n        reverse(vec.begin(), vec.end());\n        return vec;\n    }\n};\n```\n### 复杂度分析\n时间：O(max(n,logk) <n为输入数组长度 >\n空间：O(1) 除返回值外，所用空间为常数","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ucashurui":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185141689","body":"[Link to LeetCode Problem](https://leetcode-cn.com/problems/add-to-array-form-of-integer/)\n\n## 思路\n\n---\n\n从低位按位进行相加，记录进位，前面位置不够了插入新的位。（看了题解还是借助str来偷懒比较方便啊！）\n\n## 代码\n\n```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        carry = 0\n        count = len(num) - 1\n        while k or carry:\n            if count < 0:\n                num.insert(0,0)\n                count = 0\n            single_k = k % 10\n            k //= 10\n            num[count] += single_k + carry\n            carry = num[count] // 10\n            num[count] %= 10\n            count -= 1\n        return num\n```\n\n## 复杂度\n\n---\n\n- ****Time:**** $O(N)$，\n- ***Space:** $O(N)$*","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xixiao51":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185141987","body":"### Idea\nTake K as a carry and add it to the lowest digit, then update carry, and keep going to higher digit.\n\n\n### Code\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> res = new ArrayList<>();\n        int cur = k;\n        int i = num.length - 1;\n        while(i >= 0 || cur > 0) {\n            if(i >= 0) {\n                cur = cur + num[i--];\n            }\n            res.add(cur % 10);\n            cur /= 10; \n        }\n        \n        Collections.reverse(res);\n        return res;\n    }\n}\n```\n\n**Complexity Analysis**\n- Time complexity: O(max(n, logk)), n is the length of num\n- Space complexity: O(max(n, logk))\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"feikerwu":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185152522","body":"### 思路\r\n\r\n大数加法的阉割版，将 K 看作是每次加法的进位即可。\r\n\r\n### 代码\r\n```js\r\n/**\r\n * @param {number[]} num\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = function (num, k) {\r\n  const { length } = num;\r\n\r\n  let carry = k;\r\n  for (let i = length - 1; i >= 0; i--) {\r\n    const value = (num[i] + carry) % 10;\r\n    carry = Math.floor((num[i] + carry) / 10);\r\n    num[i] = value;\r\n  }\r\n\r\n  while (carry) {\r\n    num.unshift(carry % 10);\r\n    carry = Math.floor(carry / 10);\r\n  }\r\n\r\n  return num;\r\n};\r\n```\r\n\r\n+ 时间复杂度 $O(N + logK)$, N 为传入数据 num 的长度, K 是传入的数字，logK 表示数字K的位数\r\n+ 空间复杂度 $O(N + logK)$, N 为传入数据 num 的长度, K 是传入的数字，logK 表示数字K的位数\r\n\r\n\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"heng518":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185153547","body":"class Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int> res;\n        int len = num.size() - 1;\n        bool flag = true;\n        \n        while(len >= 0 || k > 0)\n        {\n            if(flag)\n            {\n                if(len >= 0)\n                {\n                    k += num[len];\n                    len--;\n                }\n                res.insert(res.begin(), k % 10);\n                k /= 10;\n            \n                if(k == 0)\n                    flag = false;\n            }\n            else\n            {\n                res.insert(res.begin(), num[len]);\n                len--;\n            }\n        }\n        \n        return res;\n    }\n};","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yaya-bb":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185155634","body":"\n## 题目地址()\nhttps://leetcode.cn/problems/add-to-array-form-of-integer/submissions/\n\n## 前置知识\n\n- 数组的遍历，栈\n\n\n\n## 思路\n-逐位相加\n\n\n## 代码\n\n- 语言支持：JavaScript\n\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n    let result = [];\n    const n = num.length;\n    //数组遍历循环\n    for(let i = n - 1; i>= 0; i--)\n    {\n        let sum = num[i] + k%10 ;\n        k = Math.floor(k/10);\n        if(sum >= 10)\n        {\n            k++;\n            sum -=10;\n        }\n        result.push(sum);\n    }\n    //如果出现num循环后k还有剩余则需要进行下面循环\n    for(;k>0;k = Math.floor(k/10))\n    {\n        result.push(k % 10);\n    }\n    //由于利用栈的push，所以是先进后出，所以应当将其逆序\n    result.reverse();\n    return result;\n};\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(n)$，for循环遍历\n- 空间复杂度：$O(n)$，创建新的空间存放结果","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tlntin":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185157127","body":"1. [题目链接](https://leetcode.cn/problems/add-to-array-form-of-integer/submissions/)\r\n\r\n### 简单理解\r\n- 从低位往高位计算，逢十进一。数组直接从右往左数，而数字的话，每次求10的余数，求完后除10即可。\r\n- 如果数组size不够，那就再首位插入元素1实现进1操作。\r\n- 后面发现可能k比num长。所以还需要把多余的k插入到num中。\r\n- 最后输出结果即可。可以用std::move(num)直接将值移出，防止重复拷贝，节省内存。\r\n\r\n### 最终代码\r\n```bash\r\n#include <iostream>\r\n#include <vector>\r\n\r\nusing namespace std;\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n    // 反向迭代，利用加法进位来计算\r\n    int temp = 0;\r\n    int n = num.size();\r\n    for (int i = 0; i < num.size(); ++i) {\r\n      temp = num[n - i - 1] + k % 10;\r\n      k = k / 10;\r\n      num[n - i - 1] = temp % 10;\r\n      if (temp >= 10) {\r\n        if (n - i - 2 >= 0) {\r\n          num[n - i - 2] += 1;\r\n        } else {\r\n          n += 1;\r\n          num.insert(num.begin(), 1);\r\n        }\r\n      }\r\n    };\r\n    // 补丁，k可能比Num长，需要将k剩余部分插入\r\n    while (k > 0) {\r\n      num.insert(num.begin(), k % 10);\r\n      k = k / 10;\r\n    }\r\n    return std::move(num);\r\n  }\r\n};\r\n\r\n\r\n\r\nint main() {\r\n  std::vector<int> v1 = {1,3,8};\r\n  int data = 955;\r\n  Solution s;\r\n  std::vector<int> v2 = s.addToArrayForm(v1, data);\r\n  for (const int & x: v2) {\r\n    std::cout << x << \" \";\r\n  }\r\n  std::cout << std::endl;\r\n}\r\n```\r\n\r\n### 结果\r\n![image](https://user-images.githubusercontent.com/28218658/179150726-78be3d31-e26a-4c6f-812a-8add0dae6953.png)\r\n\r\n用时：24ms，内存25.8MB。","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"richypang":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185158822","body":"## 代码（注释解析了每一步的思路）\n\nclass Solution:\n\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        #将数组转化为str形式存储\n        temp = \" \"\n        for i in num:\n            temp = temp + str(i)\n        #整数相加\n        number = int(temp) + k\n        result = []\n        for j in str(number):\n            result.append(int(j))\n        return result\n## 复杂度 \n\n时间复杂度 O(n)\n空间复杂度O(n)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fenchuiyun":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185161504","body":"### 思路\r\n目标：实现两个大非负整数相加<br>\r\n背景：像整型integer和long的数据都是有数据范围的\r\n\r\n### 代码\r\n```java\r\n    class Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n                // 先把k转换为数组\r\n        char[] chars = String.valueOf(k).toCharArray();\r\n        int maxLength = Math.max(num.length,chars.length);\r\n        int minLength = Math.max(num.length,chars.length);\r\n        int tmp = 0;\r\n        int[] result = new int[maxLength + 1];\r\n        for (int offset = 0; offset < minLength; offset++) {\r\n            int numIdx = num.length - 1 - offset;\r\n            int charsIdx = chars.length -1 - offset;\r\n            if (numIdx>=0&&charsIdx>=0){\r\n                int sum = chars[charsIdx]-'0'+num[numIdx]+tmp;\r\n                tmp = sum/10;\r\n                int y = sum%10;\r\n                result[maxLength-offset] = y;\r\n            }else if (numIdx>=0){\r\n                int sum = num[numIdx]+tmp;\r\n                tmp = sum/10;\r\n                int y = sum%10;\r\n                result[maxLength-offset] = y;\r\n            }else {\r\n                int sum = chars[charsIdx]-'0'+tmp;\r\n                tmp = sum/10;\r\n                int y = sum%10;\r\n                result[maxLength-offset] = y;\r\n            }\r\n        }\r\n        if (tmp!=0){\r\n            result[0] = tmp;\r\n        }\r\n        if (result[0]==0){\r\n            return Arrays.stream(result).skip(1).boxed().collect(Collectors.toList());\r\n        }else {\r\n            return Arrays.stream(result).boxed().collect(Collectors.toList());\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jerry-lllman":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185162752","body":"### 解题思路:\r\n从低位往高位处理\r\n1. 将 k 与 num[i] 相加, k += num[i]\r\n2. 将 k % 10 后添加到 res 中\r\n3. 每次遍历都将 k /= 10\r\n4. 返回 res\r\n\r\n### case:\r\n1. 注意 k / 10 需要处理浮点数的问题 k = Math.floor(k / 10)\r\n2. 当 i < 0 时（即num遍历完了，k仍有余值）不再需要 k += num[i]\r\n\r\n```ts\r\nfunction addToArrayForm(num: number[], k: number): number[] {\r\n  const res = []\r\n  const leng = num.length\r\n  for (let i = leng - 1; i >= 0 || k > 0; i--, k = Math.floor(k / 10)) {\r\n    if (i >= 0) {\r\n      k += num[i]\r\n    }\r\n    res.push(k % 10)\r\n  }\r\n  res.reverse()\r\n  return res\r\n};\r\n```\r\n**复杂度分析**\r\n- 时间复杂度：O(N)。\r\n- 空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nickyk319":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185163309","body":"### 思路\r\n\r\nSimulate the way we do addition manually.\r\n\r\n1. Iterate array from right to left\r\n2. Do addition between last element and integer K. \r\n3. Every time only keep the last digit of the result, and put it into a list. \r\n4. Forward the rest digits of the result to do summation with the previous element in the array. \r\n5. Repeat the above process until array out of index or the value been set to zero\r\n6. The reverse of the list will be the answer to return.\r\n\r\n### 代码\r\n\r\n\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        int len = num.length;\r\n        ArrayList<Integer> ans = new ArrayList<>();\r\n        int curVal = k;\r\n        int i = len - 1;\r\n        while (i >= 0 || curVal > 0) {\r\n            if (i >= 0) {\r\n                curVal += num[i];\r\n            }\r\n            ans.add(curVal % 10);\r\n            curVal /= 10;\r\n            i--;\r\n        }\r\n        Collections.reverse(ans);\r\n        return ans;\r\n    }\r\n}\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(N)，其中 N 为nums数组长度。\r\n- 空间复杂度：O(N)\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"herbertpan":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185163334","body":"### Idea\n每次位移一个\n### Code\n``` \npublic List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> ans = new LinkedList<>();\n        //.       0 1 2\n        // num = [2,1,5], k = 1806\n        //            |         \n        //            5.   +     6. => 11 (1 % 1) ==> [1]\n        //           |\n        //           1     +.   0   => 1 + 0 + 1 = 2 ==> 2 % 0 ==> [2, 1]\n        //         |\n        //         2.      +.   8.  => 2 + 8 + 0 = 10 => 0 % 1 ==> [0, 2, 1]\n        //.      |\n        //.      0         +.   1   ==>. 0 + 1 + 1 == > 2 % 0 ==> [2, 0, 2, 1]\n        //      |\n        int bitIndex = num.length - 1;\n        int overFlow = 0;\n        while (k != 0 || bitIndex >= 0 || overFlow != 0) {\n            int valFromNum = bitIndex >= 0 ? num[bitIndex] : 0;\n            int valFromK = k % 10;\n            k = k / 10;\n            int numVal = valFromNum + valFromK + overFlow;\n            overFlow = numVal / 10;\n            ans.add(0, numVal % 10);\n            bitIndex--;\n        }\n        \n        return ans;\n    }\n```\n\n###  complexity\nTime: O(max (N, len(K)));\nSpace: O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wsmmxmm":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185165999","body":"# 基本信息\n\n## 题号&链接\n\n****[989. 数组形式的整数加法](https://leetcode.cn/problems/add-to-array-form-of-integer/)****\n\n## 截图题面\n\n整数的 数组形式  num 是按照从左到右的顺序表示其数字的数组。\n\n例如，对于 num = 1321 ，数组形式是 [1,3,2,1] 。\n给定 num ，整数的 数组形式 ，和整数 k ，返回 整数 num + k 的 数组形式 。\n\n# UMPIRE\n\n## **U-nderstand**\n\n- `1 <= num.length <= Math.pow(10,4)`\n\n所以直接转换成integer不太行\n\n- 全都是正整数，不用考虑符号\n\n## **M-atch**\n\n从最后一位开始，一位一位加减，放进list里，然后reverse\n\n## 复杂度\n\n一次遍历 时间O(n)\n\n除结果外没有新增空间，这算O(n)?\n\n# Code\n\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> res = new ArrayList<>();\n        // int sum = 0;\n        // for(int i = 0; i < num.length; i++){\n        //     sum = sum * 10 + num[i];\n        // }\n        // sum += k;\n        // \n        // while(sum != 0){\n        //     res.add(sum % 10);\n        //     sum /= 10;\n        // }\n        // Collections.reverse(res);\n        // return res;\n\n        int pointer = num.length - 1;\n        int left = 0;\n        \n        while(pointer >= 0){\n            int temp = num[pointer] + k % 10 + left;\n            left = temp / 10;\n            temp = temp % 10;\n            res.add(temp);\n            k /= 10;\n            pointer--;\n            \n        }\n        while(k > 0){\n            int temp =  k % 10 + left;\n            left = temp / 10;\n            temp = temp % 10;\n            res.add(temp);\n            k /= 10;\n        }\n        if (left == 1){\n            res.add(left);\n        }\n        \n        Collections.reverse(res);\n        return res;\n    }\n}\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fan-svg":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185167863","body":"### 思路\n从最低位进行相加，大于10则向前一位加一\n### 代码\n``` C++\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int> res;\n        int n = num.size();\n        int sum = 0;\n\n        for(int i = n - 1; i >= 0; --i){\n            sum = num[i] + k % 10;\n            k /= 10;\n            if(sum>=10){\n                ++k;\n            }\n            res.push_back(sum%10);\n        }\n        while(k>0){\n            res.push_back(k%10);\n            k /= 10;\n        }\n\n        reverse(res.begin(),res.end());\n\n        return res;\n    }\n};\n```\n### 复杂度\n时间复杂度：O(max(n,log k))，最大不会超过O(n)\n\n空间复杂度：O(1)。使用的空间为常数\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuzejia":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185168321","body":"## 思路\n\n+ 一开始想的 数组转化数学位数进行相加  A[i] * Math.pow(10, A.length - i - 1) 结果会出现计算不准确\n+ 采用 两数组从尾部开始相加。 大于 10 进一位; 最后一位相加 大于10 数组尾部 补 1；\n\n## 题解\n```\n// 采用 两数组 对应位数相加 大于 10 进一位; 最后一位相加 大于10 数组尾部 补 1；\nfunction addToArrayForm(A: number[], K: number): number[] { \n    let list = (K+'').split('')\n    let len_A = A.length - 1;\n    let len_K = list.length - 1;\n    let result = <any>[];\n    let n = 0\n    \n    // 两数组存在值 继续执行\n    while (A[len_A] >= 0  || Number(list[len_K]) >= 0) {\n\n        // 位数之和\n        let sum = Number(list[len_K] || 0) + ( A[len_A]?A[len_A] : 0 ) + n;\n\n        // 重置 n\n        n = 0\n        // 位数之和 是否 大于 10\n        if(sum >= 10) n = 1;\n\n        // 余数添加进去\n        result.push(sum%10);\n\n        // 递减\n        len_K--\n        len_A--\n    }\n\n    // 处理最后一位结果 大于 10 \n    if(n === 1) {\n        result.push(1);\n    }\n    \n\n    return result.reverse();\n}\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sunnyyujf":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185170165","body":"#### 代码 \n\n```Python\n\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        i=len(num)-1\n        while k>0:\n            added = num[i]+k\n            num[i]=added%10  # remainder\n            k=added//10    # carry\n            i-=1\n            if i<0 and k>0:\n                num.insert(0,0)\n                i=0\n        return num\n```\n\n#### 复杂度分析\n时间复杂度： O(N)  </br>\n空间复杂度： O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"phoenixflyingsky":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185170186","body":"### Idea\n\njust add the end of two numbers\n\n### Code\n\n\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> res = new ArrayList<>();\n        int len = num.length;\n        int carry = 0;\n        int index = len - 1;\n\n        while(index >= 0 && k > 0) {\n            int temp = k % 10;\n            int total = temp + num[index] + carry;\n\n            //update\n            carry = total / 10;\n            total = total % 10;\n\n            //put the num to res\n            res.add(0, total);\n\n            //update\n            index--;\n            k = k / 10;\n        }\n\n        while(index >= 0) {\n            int total = num[index] + carry;\n\n            //update\n            carry = total / 10;\n            total = total % 10;\n\n            //put the num to res\n            res.add(0, total);\n\n            //update\n            index--;\n        }\n\n        while(k > 0) {\n            int total = k % 10 + carry;\n\n            //update\n            carry = total / 10;\n            total = total % 10;\n\n            //put the num to res\n            res.add(0, total);\n\n            //update\n            k = k / 10;\n        }\n\n        if(carry != 0) {\n            res.add(0, carry);\n        }\n\n        return res;\n\n    }\n}\n\n\n```\n\n**Complexity Analysis**\n- Time Complexity： O(N), N is the longest of the two lengths（num.length & k.length()）\n- Space Complexity： O(N)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nehchsuy":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185170845","body":"### 思路\r\n先同时加array和数字\r\n再while loop 只剩下数字或者只剩下数组的情况\r\n\r\n### 代码:\r\n\r\n\r\n\r\n          class Solution:\r\n                  def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n\r\n                       def add(index, k, num):\r\n                           carry = 0\r\n                          while index >= 0 and k:\r\n                              current = k % 10\r\n                              k = k // 10\r\n                              num[index] = num[index] + current + carry\r\n                              carry = 0\r\n                              if num[index] >= 10:\r\n                                  num[index] -= 10\r\n                                  carry = 1\r\n                              index -= 1\r\n                          \r\n                          while index >= 0 and carry:\r\n                              num[index] = num[index] + carry\r\n                              carry = 0\r\n                              if num[index] >= 10:\r\n                                  num[index] -= 10\r\n                                  carry = 1\r\n                              index -= 1\r\n                          \r\n                          k += carry\r\n                          while k:\r\n                              current = k % 10\r\n                              k = k // 10\r\n                              num = [current] + num\r\n                          return num\r\n                              \r\n                      \r\n                     return add(len(num) - 1, k, num)\r\n\r\n### 复杂度:\r\nTime: O(length of number + length of array) or O(N)\r\nSpace: O(length of number + length of array) or O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lzyxts":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185188366","body":"### Idea\n\n从后往前加，while loop中更新list&integer\n\n### Code\n\n\n```python3\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        res = []\n        digit = 0\n        \n        while num or k or digit:\n            n1 = num[-1] if num else 0\n            n2 = k%10\n\n            n = n1+n2+digit\n            \n            res.insert(0, n%10)\n            digit = 1 if n>= 10 else 0\n            \n            num = num[:-1]\n            k = k//10\n                \n        return res\n```\n\n### Complexity\n- Time：O(N)\n- Space：O(N) \n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"elainekuo":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185190357","body":"### 思路\r\n\r\n逐位相加\r\n\r\n### 代码\r\n\r\n```\r\nvar addToArrayForm = function(num, k) {\r\n    let res = [];\r\n    let len = num.length;\r\n    for(let i=len-1; i>=0;i--){\r\n        let sum = num[i] + k % 10;\r\n        k = Math.floor(k / 10);\r\n        if(sum>=10){\r\n            k++;\r\n            sum -= 10;\r\n        }\r\n        res.push(sum);  \r\n    }\r\n    for(let i =k;i>0;i=Math.floor(i/10)){\r\n        res.push(i % 10)\r\n    }\r\n    res.reverse();\r\n    return res;\r\n\r\n};\r\n```\r\n**复杂度分析**\r\n- 时间复杂度：O(N)，其中 N 为数组长度。\r\n- 空间复杂度：O(1)\r\n\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ll491119940":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185193124","body":"## 思路\n输入K数字转换成数组，将数组从末位开始，按位相加，考虑进位，最后返回相加后数组\n\n## 代码\n\n```\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n    let result = [];\n    let arrK = String(k).split('');\n    let flag = 0;\n    num.reverse();\n    arrK.reverse();\n    for(let i = 0; i < num.length || i < arrK.length; i++) {\n        var retNum = (num[i] || 0) + (+arrK[i] || 0) + flag;\n        if (retNum >= 10) {\n            retNum = retNum % 10;\n            flag = 1;\n        } else {\n            flag = 0;\n        }\n        result.push(retNum);\n    }\n\n    if(flag) {\n        result.push(1);\n    }\n    result.reverse();\n    return result\n};\n```\n## 算法复杂度\n\n+ 时间复杂度 O(n)\n+ 空间复杂度 O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"2learnsomething":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185216971","body":"## 思路\n看成是两个数组的求和，然后遍历数组，数字不断做求余和求除操作,进行类似于按位求和操作，注意进位问题即可，最后返回结果的逆序。\n\n## 代码\n```\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        ans = []\n        temp = 0\n        while num or k or temp:\n            sum_k = k % 10\n            if num:\n                n = num.pop()\n            else: n = 0\n            ans.append((n+sum_k+temp)%10)\n            k //=  10\n            temp = (n+sum_k+temp)//10\n        return ans[::-1]\n```\n## 复杂度\n时间复杂度：O(n) \n\n空间复杂度：O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ataraxyadong":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185228684","body":"### 思路\n\n从低位到高位依次拿出`num`的值和`k`相加，将所加之和与10的余数加入到`list`中，直到`k=0`。最后将所得的`list`反转后即可得到。\n\n### 代码\n\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        int length = num.length;\n        int idxVal;\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < length; i++) {\n            idxVal = num[length - 1 - i];\n            if (k != 0) {\n                list.add((idxVal + k) % 10);\n                k = (idxVal + k) / 10;\n            } else {\n                list.add(idxVal);\n            }\n            if (k != 0 && (length - 1 - i) <= 0) {\n                while (k != 0) {\n                    list.add(k % 10);\n                    k = k / 10;\n                }\n            }\n        }\n        Collections.reverse(list);\n        return list;\n    }\n}\n```\n\n### 复杂度分析\n\n\\- 时间复杂度：O(N)，其中 `N = array.length`或者是`N = array.length + k的位数`。（不确定）\n\\- 空间复杂度：O(1)，（不确定）\n\n\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wzasd":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185232708","body":"### 思路\r\n\r\n本来想用`BigInteger`来进行大数计算，然后通过字符串进行数组转换，但是发现 leetcode 无法使用`BigInteger`，所以还是使用数组单项相加即可，主要考虑进位处理，另一个方法就是单位相加，逐一推出相应单位数就行了\r\n\r\n### 代码\r\n\r\n#### 写法一\r\n```java（此处换成你的语言，比如js，py 等）\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        int len = num.length;\r\n        List<Integer> ans = new ArrayList<>();\r\n        for (int i = len - 1; i >= 0; i--) {\r\n            //数组中单项相加\r\n            int sum = num[i] + k % 10;\r\n            k = k / 10;\r\n            // 判断是否有进位的数\r\n            if (sum >= 10) {\r\n                ++k;\r\n                sum = sum - 10;\r\n            }\r\n            ans.add(sum);\r\n        }\r\n        //不确定是k大还是num代表的数据大，所以要进行两次运算\r\n        for (; k > 0; k /= 10) {\r\n            ans.add(k % 10);\r\n        }\r\n        Collections.reverse(ans);\r\n        return ans;\r\n    }\r\n```\r\n\r\n#### 写法二\r\n```java（此处换成你的语言，比如js，py 等）\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        int len = num.length;\r\n        List<Integer> ans = new ArrayList<>();\r\n        //简化上一步\r\n        for (int i = len - 1; i >= 0 || k > 0; i--, k /= 10) {\r\n            if (i >= 0) {\r\n                k = num[i] + k;\r\n            }\r\n            ans.add(k % 10);\r\n        }\r\n        Collections.reverse(ans);\r\n        return ans;\r\n    }\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(N)，其中 N 为数组长度。\r\n- 空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miluowzt":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185236293","body":"# **思路**\r\n从后往前遍历数组，按位与k相加，遇10进1（结果大于10时，进位数1加到下一位进行计算），考虑结果如果存储LinkedList的addFirst或者ArraryList最后翻转。\r\n\r\n# **代码**\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n\r\n        LinkedList<Integer> numList = new LinkedList<Integer>();\r\n        int index = num.length-1;\r\n        while (index>=0||k!=0){\r\n            if(index>=0){\r\n                k=num[index]+k;\r\n                index--;\r\n            }\r\n            numList.addFirst(k%10);\r\n            k=k/10;\r\n        }  \r\n        return numList;\r\n    }\r\n}\r\n\r\n# **复杂度分析**\r\n时间复杂度：O(n)  \r\nwhile 循环运行n次，n为数组长度\r\n空间复杂度：O(n)  \r\n创建的一个空列表，这个列表占用的内存随着while 循环的增加而增加，最大到 n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"maylinglin":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185236729","body":"## 思路\n\n---\n\n把num从list转化成str，再转化成int与k相加，最后返回list形式。\n\n## 代码\n\n```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        x = ''.join(map(str, num))\n        sum = int(x) + k\n        return list(map(int, str(sum)))   # [int(i) for i in str(sum)]\n```\n\n## 复杂度\n\n---\n\n- ****Time:**** O(N)\n- ****Space:**** O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"weijie-he":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185238518","body":"### 整体思路\n\n模拟真正的加法计算过程\n从后往前依次逐位相加，如果 >=10 则进位\n每次加在 list 末尾，再将 list 反转\n\n### 代码\n\n```java\n    private  List<Integer> leetcodeSolution(int[] num, int k) {\n        List<Integer> result = new ArrayList<>();\n        int len = num.length;\n        for (int i = len - 1;i >= 0;i--){\n            int a = num[i] + k % 10;\n            k /= 10;\n            // 如果和 > 10，需要进位\n            if (a >= 10 ){\n                k++;\n            }\n            result.add(a % 10);\n        }\n\n        // 上面循环做完，是按照数组的长度求的结果，但是 k 可能比数组多很多位，所以还需要一个 while 循环\n        for (; k > 0; k /= 10) {\n            result.add(k % 10);\n        }\n\n        Collections.reverse(result);\n        return result;\n    }\n```\n\n### 复杂度分析\n时间复杂度：O(max(n,log k))，其中 n 为数组的长度。\n空间复杂度：O(1)。除了返回值以外，使用的空间为常数。","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"brodxie":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185240028","body":"## 思路\r\n\r\n由于num可能很长，不能转int直接相加，模拟计算机的加法\r\n\r\n## 代码\r\n\r\n```python3\r\n\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n    \t# space: O(max(M, N))\r\n        res = []\r\n        i = len(num) - 1\r\n        overflow = 0\r\n        # time: O(max(M, N))\r\n        while i >= 0 or k > 0:\r\n            a = num[i] if i >= 0 else 0\r\n            b = k % 10\r\n            c = a + b + overflow\r\n            res.append(c % 10)\r\n            overflow = c // 10\r\n            i -= 1\r\n            k //= 10\r\n        if overflow:\r\n            res.append(overflow)\r\n        # time: O(max(M, N))\r\n        res.reverse()\r\n        return res\r\n```\r\n\r\n## 复杂度分析\r\nM为num.length, N为ceil(log10(k))\r\n\r\n- 时间复杂度: O(Max(M, N))\r\n- 空间复杂度: O(Max(M, N))\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"y525":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185251187","body":"class Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        res = []\r\n        carry = 0\r\n        i = 1\r\n        n = len(num)\r\n        while n-1 >= 0 or carry != 0 or k != 0:\r\n            if n-1 < 0:\r\n                number = k%10 + carry\r\n            else:\r\n                number = num[n-1] + k%10 + carry\r\n            k = k//10\r\n            carry = number//10\r\n            number = number % 10\r\n            res.append(number)\r\n            n -= 1\r\n        return res[::-1]\r\n\r\nspace complexity O(n) time complexity O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"leungogogo":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185258544","body":"# LC989. Add to Array-Form of Integer\n## Main Idea\nFirst, it looks like we can convert the array `num` to integer and add it to `k`, but `num.length <= 1E+4` so this approach will cause integer overflow. So we will have to do the addition in array form.\n\nThen the idea is to simulate the entire process, add each digit of `num` and `k` with a `carry` bit. We will terminate the loop when we run out of digits for both `num` and `k` and `carry == 0`.\n\n## Code\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        int ptr = num.length - 1, carry = 0;\n        List<Integer> ret = new ArrayList<>();\n        while (ptr >= 0 || k > 0 || carry > 0) {\n            int d1 = ptr >= 0 ? num[ptr] : 0;\n            int d2 = k % 10;\n            int sum = d1 + d2 + carry;\n            ret.add(sum % 10);\n            ptr--;\n            k /= 10;\n            carry = sum >= 10 ? 1 : 0;\n        }\n        \n        Collections.reverse(ret);\n        return ret;\n    }\n}\n```\n\n## Complexity Analysis\nTime: `O(2*max(N, log(K)))`\n* Given a number `K`, its length will be `O(log_{2}(K))`, the time complexity depends on the length of `N` and `K`, whichever is longer.\n* Notice we want to insert digits at the end of the array and then reverse it after we finish the addition (reverse takes `O(res.size())`). If we insert at the head of array, then it will take `O(n^2)` of time.\n\nSpace: `O(1)`, as we didn't use additional spaces except the return array.","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"suukii":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185259516","body":"- Time: $O(N)$, N is $max(num.size(), ceil(log(k)))$\n- Space: $O(1)$, no extra space is used apart from the output array.\n```cpp\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int> res;\n        res.reserve(num.size());\n        int p = num.size() - 1;\n\n        while (p >= 0 || k > 0) {\n            if (p >= 0) k += num[p--];\n            res.push_back(k % 10);\n            k /= 10;\n        }\n\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mirrors-cl":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185287919","body":"思路\r\n按照 正常的手写加法的逻辑做的只是好像机器化了，感觉自己好弱\r\ncode\r\n```\r\nvar addToArrayForm = function(num, k) {\r\nconst res = [] \r\nvar str = k.toString();\r\nvar arr = str.split(\"\")\r\narr = arr.map(Number)\r\nlet carry = 0;\r\nlet l1 = num.length -1\r\nlet l2 = arr.length -1\r\nwhile(l1>=0 || l2>=0){\r\n    let x = l1 < 0 ? 0 : num[l1]\r\n    let y = l2 < 0 ? 0 : arr[l2]\r\n    let sum = x + y + carry\r\n    res.push(sum % 10)\r\n    carry = Math.floor(sum/10)\r\n    l1--\r\n    l2--\r\n}\r\nif(carry != 0 )res.push(carry)\r\nreturn res.reverse()\r\n\r\n};\r\n```\r\n复杂程度\r\n 还没学会怎么算基础有些差","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xqy97":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185331610","body":"## 题目描述\nhttps://leetcode.cn/problems/add-to-array-form-of-integer/\n\n## 解题思路\n\n###逐位相加，记录进位\n\n\n####难点\n1. 数字怎么按位拆分\n   * **数字不用拆分**\n    * **num[i] + k % 10 先相加再%10**\n2. 数组和数字位数不同时怎么处理\n   * 开始打算取位数最多的，其实只用对没加完的数字单独处理\n3. 进位处理\n    * 加到数字上\n    \n####js代码\n```javascript\n  var addToArrayForm = function(num, k) {\n  const res = []\n    \n  for(let i = num.length - 1; i>=0; i--) {\n      let sum = num[i] + k % 10\n      k = Math.floor(k / 10)\n      if (sum > 9) {\n        k++\n        res.push(sum % 10)\n      } else {\n        res.push(sum)\n      }\n  }\n  while(k) {\n      res.push(k%10)\n      k = Math.floor(k/10)\n  }\n  return res.reverse()\n  \n};\n```\n####复杂度\n* 时间复杂度 O(max(num.length, log k))\n* 空间复杂度 O(1)\n\n## 加法模版\n```\n当前位 = (A 的当前位 + B 的当前位 + 进位carry) % 10\n\nwhile ( A 没完 || B 没完)\nA 的当前位\nB 的当前位\n\n    和 = A 的当前位 + B 的当前位 + 进位carry\n\n    当前位 = 和 % 10;\n    进位 = 和 / 10;\n\n判断还有进位吗\n```\n\n\n\n     \n  \n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jakkiabc":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185338763","body":"自己用进位遍历的方法没跑出来，待会再想想= =\r\n暂时用  list→str→int 来计算sum 最后再转换回list \r\nclass Solution(object):\r\n    def addToArrayForm(self, num, k):\r\n        \"\"\"\r\n        :type num: List[int]\r\n        :type k: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        n=int(''.join([str(x)for x in num]))\r\n        sum=n+k\r\n        return list(map(int,str(sum)))","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckyoneday":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185356088","body":"## 思路\r\n\r\n0 <= K <= 10000，可直接加 1，不需要大数相加\r\n\r\n## 代码 js\r\n\r\n```js\r\nvar addToArrayForm = function (num, K) {\r\n    const len = num.length || 0;\r\n    let numK = K;\r\n    const result = [];\r\n\r\n    for (let i = len - 1; i >= 0; i--) {\r\n        const a = num[i];\r\n        const b = numK % 10;\r\n       \r\n        let total = a + b;\r\n        numK = total >= 10 ? parseInt(numK / 10) + 1 : parseInt(numK / 10);\r\n        result[i] = total % 10;\r\n    }\r\n    while (numK > 0) {\r\n        result.unshift(numK % 10);\r\n        numK = parseInt(numK / 10);\r\n    }\r\n\r\n    return result;\r\n}\r\n```\r\n\r\n## 复杂度\r\n\r\n时间复杂度: O(n)\r\n空间复杂度: O(n)\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chouqin99":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185362278","body":"思路:想把数组直接转成int，然后用加法加完了，再转换回来，但是貌似不是题目要的\r\ncode：\r\n`\r\n  #!/usr/bin/env python\r\n  \"\"\"add\"\"\"\r\n  \r\n  import os\r\n  from os import sys, path\r\n  \r\n  class Add(object):\r\n  \r\n      def list2str(self, inlist):\r\n          outstr = \"\"\r\n          for i in inlist:\r\n              outstri = ''.join(str(i))\r\n              outstr = outstr + outstri\r\n          return outstr\r\n\r\n      def add(self, x, k):\r\n          str_x = self.list2str(x)\r\n          str_k = self.list2str(k)\r\n          addint = int(str_x) + int(str_k)\r\n          return addint\r\n\r\n      def str2list(self, instr):\r\n          outlist = list(instr)\r\n          return outlist\r\n\r\n      def main(self, x, k):\r\n          addint = self.add(x, k)\r\n          outlist = self.str2list(str(addint))\r\n          print outlist\r\n\r\n  if __name__ == '__main__':\r\n      x = [1,1,0,0]\r\n      k = [3,4]\r\n      r = Add()\r\n      r.main(x,k)\r\n\r\n`","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhaogeg111":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185368348","body":"解题思路\n\n- 整数的 数组形式  num 是按照从左到右的顺序表示其数字的数组。\n  例如，对于 num = 1321 ，数组形式是 [1,3,2,1] 。\n给定 num ，整数的 数组形式 ，和整数 k ，返回 整数 num + k 的 数组形式 。\n\n解题代码\n\n    int* addToArrayForm(int* num, int numSize, int k, int* returnSize){\n        int ksize = 0;//预设k的位数为0\n        int ktmp = k;\n        while(ktmp)      //得到k的位数\n        {\n            ksize++;\n            ktmp /= 10;\n        }\n        int size = numSize > ksize ? numSize + 1 : ksize + 1;   //开辟一个多+1位置的数组，防止有进位\n    \n        int* a = (int*)malloc(size*sizeof(int));\n    \n        int end = numSize - 1;//创建一个下标指向num数组的最后一个元素 \n        int carry = 0;\n        int i = 0;\n        while(end >= 0 || k > 0)   //2个有1个没有遍历完\n        {\n            if(end >= 0)\n            {\n                a[i] = carry + num[end] + k % 10;\n            }//num[end]为数组的最后一个元素 k%10 为k的最后一位\n            else\n            {\n                a[i] = carry + k % 10;\n            }\n    \n            if(a[i] >= 10)\n            {\n                a[i] = a[i] - 10;\n                carry = 1;//有进位\n            }\n            else\n            {\n                carry = 0;//carry=1表示进位为，0表示不进位\n            }\n            k /= 10;\n            end--;\n            i++;\n        }\n        if(carry == 1)\n        {\n            a[i++] = 1;\n        }\n    \n        int left = 0;\n        int right = i - 1;\n        while(left < right)\n        {\n            int tmp = a[left];\n            a[left] = a[right];\n            a[right] = tmp;\n            left++;\n            right--;\n        }//数组逆序\n    \n        *returnSize = i;\n        return a;\n    \n    }\n\n时间复杂度\n\nO（n^2)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shawnhu23":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185371267","body":"## Idea\r\niterate through the num array, add each digit to k , add the rightmost digit into the result list\r\n## Code\r\n```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> res = new ArrayList<>();\r\n        int len = num.length;\r\n        for (int i = len-1; i >= 0; i--) {\r\n            k += num[i];\r\n            res.add(k % 10);\r\n            k /= 10;\r\n        }\r\n        while (k > 0) {\r\n            res.add(k % 10);\r\n            k /= 10;\r\n        }\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n}\r\n```\r\n## Complexity\r\nTime: O(n)\r\nSpace:O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ye2222":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185386008","body":"## Code\n```c++\nvector<int> addToArrayForm(vector<int>& num, int k) {\n    int n = num.size();\n    int count = n-1;\n    vector<int> res;\n    // 因为可能不是相同位数操作，所以要确保每一位都参加运算\n    while(count >= 0 || k != 0) {\n        // 对k进行操作比较方便，进行加法运行时会遵循加减法原则\n        if(count >= 0) {\n            k += num[count];\n            count--;\n        }\n        res.insert(res.begin(), k%10);\n        k /= 10;\n    }\n    return res;\n}\n```\n## 复杂度\n- 时间复杂度：O(n) \n- 空间复杂度：O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"uyplayer":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185419128","body":"## 思路\r\n\r\n每次遍历最后一个元素和k加起来，如果大于10的话 进行近位\r\n\r\n## 代码\r\n``` go\r\n\r\nfunc addToArrayForm(num []int, k int) (ans []int) {\r\n\r\n    // 每次遍历提取最后一个元素\r\n    for i:=len(num)-1;i>=0;i-- {\r\n        // 最后一个元素和k加起来\r\n        sum := num[i] + k\r\n        k = k / 10\r\n        // 判断sum是否大于10\r\n        if sum > 10 {\r\n            k ++\r\n            sum = sum - 10\r\n        }\r\n        ans = append(ans, sum)\r\n\r\n    }\r\n\r\n    for ; k > 0; k /= 10 {\r\n        ans = append(ans, k%10)\r\n    }\r\n    reverse(ans)\r\n    return\r\n   \r\n}\r\n\r\n// 反转\r\nfunc reverse(num []int) {\r\n    for i, n := 0, len(num); i < n/2; i++ {\r\n        num[i], num[n-1-i] = num[n-1-i], num[i]\r\n    }\r\n}\r\n\r\n\r\n```\r\n\r\n## 复杂度分析\r\n- 时间复杂度：O(max(n,logk))，其中 n 为数组的长度。\r\n\r\n- 空间复杂度：O(1) ，除了返回值以外，使用的空间为常数。\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guixian001":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185422953","body":"### 思路\n\n常规思路\n先将给的数值转成数值，然后和给的 k 进行相加，再将其转换成数组\n\n### 代码\n\n```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        num_length = len(num)\n        sum = 0\n        for index, i in enumerate(num):\n            sum += i * 10 ** (num_length - index  - 1)\n        sum += k\n        return [int(i) for i in str(sum)]\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)\n- 空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"serena9":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185423747","body":"### 代码\n```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        temp = 0\n        for i in range(len(num)-1,-1,-1):\n            num[i], temp = (temp+num[i]+k%10)%10, (temp+num[i]+k%10)//10\n            k = k//10\n        l = []\n        n = []\n        k += temp\n        while k:\n            l.append(k%10)\n            k//=10\n        while l:\n            n.append(l.pop())\n        return n+num\n```\n### 复杂度分析\n时间复杂度：O（n）  \n空间复杂度：O（n）","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"junzmer":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185423785","body":"### **思路**\r\n简单直接版\r\n\r\n1. 先把数组转成数字\r\n2. 相加\r\n3. 把数字转成数组，先除10求余数，然后除10求商，结果做个反转\r\n\r\n### **代码**\r\n\r\n```python\r\nclass Solution(object):\r\n    def addToArrayForm(self, num, k):\r\n        num_sum = 0\r\n        num = num[::-1]\r\n        num_length = len(num)\r\n        for i in range(num_length):\r\n            num_sum += (10 ** i) * num[i]\r\n        all_sum = num_sum + k\r\n        result = []\r\n        while all_sum > 0:\r\n            mod = all_sum % 10\r\n            all_sum = all_sum // 10\r\n            result.append(mod)\r\n        return result[::-1]\r\n```\r\n\r\n### **复杂度**\r\n\r\n- 时间复杂度O(N) N数组长度\r\n- 空间复杂度O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hx-code":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185455662","body":"var addToArrayForm = function(num, k) {\n    let res = [];\n    let len = num.length;\n    for(let i=len-1; i>=0;i--){\n        let sum = num[i] + k % 10;\n        k = Math.floor(k / 10);\n        if(sum>=10){\n            k++;\n            sum -= 10;\n        }\n        res.push(sum);  \n    }\n    for(let i =k;i>0;i=Math.floor(i/10)){\n        res.push(i % 10)\n    }\n    res.reverse();\n    return res;\n\n};\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"admu":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185460667","body":"**思路**  \r\n一开始只能用list转数字相加方式，后来参考了进位方法：  \r\n1.1 循环判断条件当 k 和 列表都为空时候终止  \r\n1.2 取余方式每次去k的末尾值与列表末尾值进行相加，同时记录进位的值  \r\n\r\n**代码**  \r\n```python\r\nclass Solution(object):\r\n    def addToArrayForm(self, num, k):\r\n        \"\"\"\r\n        :type num: List[int]\r\n        :type k: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        res = []\r\n        carry = 0 \r\n        if len(str(k))>len(num):\r\n            num = [0]*(len(str(k))-len(num))+num\r\n        n = len(num)-1 \r\n        while n>=0 and k>=0:\r\n            i = num[n]\r\n            kk = k%10 \r\n            res.append((i+k+carry)%10)\r\n            carry = (i+kk+carry)//10 \r\n            n -= 1\r\n            k = (k-kk)//10 \r\n        if carry!=0: res.append(carry)\r\n        return res[::-1]\r\n```\r\n\r\n**复杂度分析**  \r\n1.1 时间复杂度 O(n)  \r\n1.2 空间复杂度 O(1)  ","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xxiaomm":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185468498","body":"## 思路\n\n1. Add two numbers from right to left, column by column, and record the carry.\n2. If carry > 0, add it to the next column.\n3. Add the result to the first position of the result list.\n4. Implement the loop until all digit in two numbers has been calculated, or carry = 0;\n\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> res = new ArrayList<>();\n        int i = num.length - 1, carry = 0;\n        while (i >= 0 || k > 0 || carry > 0) {\n            int val1 = i < 0 ? 0 : num[i--];\n            int val2 = k % 10;\n            int sum = val1 + val2 + carry;\n            carry = sum / 10;\n            res.add(0, sum % 10);\n            k = k / 10;\n        }\n        return res;\n    }\n}\n```\n\nTime complexity: O(n), n is the greater length of the two numbers.\nSpace complexity: O(1), not include the space of output array.\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pgquestions":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185484818","body":"## 思路\r\n\r\n1、创建一个链表数组用来存放结果  \r\n2、把数组和数字相同位数的值进行相加。直到全部计算完  \r\n3、每次计算完的数字添加在数组头部  \r\n\r\n\r\n\r\n## 代码\r\n\r\n- 语言支持：Java\r\n\r\nJava Code:\r\n\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        LinkedList<Integer> arr = new LinkedList<>();\r\n        int index = num.length - 1;\r\n        int temp = 0;\r\n        while (index >= 0 || k > 0 || temp > 0) {\r\n            int temp_data = k % 10 + temp;\r\n            k = k / 10;\r\n            if (index >= 0) {\r\n                temp_data += num[index];\r\n                index--;\r\n            }\r\n            arr.addFirst(temp_data % 10);\r\n            temp = temp_data / 10;\r\n        }\r\n        return arr;\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(n)$\r\n- 空间复杂度：$O(1)$","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"eldinzhou":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185485651","body":"```go\nfunc addToArrayForm(num []int, k int) (ans []int) {\n    for i := len(num) - 1; i >= 0; i-- {\n        sum := num[i] + k%10\n        k /= 10\n        if sum >= 10 {\n            k++\n            sum -= 10\n        }\n        ans = append(ans, sum)\n    }\n    for ; k > 0; k /= 10 {\n        ans = append(ans, k%10)\n    }\n    reverse(ans)\n    return\n}\n\nfunc reverse(num []int) {\n    for i, n := 0, len(num); i < n/2; i++ {\n        num[i], num[n-1-i] = num[n-1-i], num[i]\n    }\n}","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jiangwenzhe":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185496245","body":"### 思路\n\n本来一开始想直接使用 JavaScript 的 api 的：\n1. 计算 sum 数组的值\n2. 把值和 k 相加\n3. 把值通过 `String(number).split('').map(n => Number(n))` 转换回数组\n\n出现的问题是 `IEEE754` 编码的数字会出现精度丢失的问题\n\n所以还是老老实实的使用逐位相加的方法\n\n1. 把数组中的位置从高到底相加\n2. 如果结果大于 10 的话，把进位 1 加入下一位的计算\n\n### 代码\n\n```js\nvar addToArrayForm = function(num, k) {\n    const res = [];\n    const n = num.length;\n    for (let i = n - 1; i >= 0; --i) {\n        let sum = num[i] + k % 10;\n        k = Math.floor(k / 10);\n        if (sum >= 10) {\n            k++;\n            sum -= 10;\n        }\n        res.push(sum);\n    }\n    for (let k; k > 0; k = Math.floor(k / 10)) {\n        res.push(k % 10);\n    }\n    res.reverse();\n    return res;\n};\n```\n\n### 复杂度分析\n\n* 时间复杂度：O(n)\n* 空间复杂度：O(1)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shawnwu6688":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185508439","body":"# 989.Add to Array-Form of Integer\n\n**思路:**\n\n自己想的思路和leetcode上高赞答案差不多，但是实现起来，发现他的更优雅，果断使用他的实现思路。优雅，真的太优雅了！！！\n1. 不要用for循环，因为你不知道num,k那个长度更长，如果一开始将k转为数组来比较长度就太不优雅了！！！所以用while()\n2. 用LinkedList不要用ArrayList因为底层为链表实现的LinkedList可以头插\n3. 数组的每一位都与K整体相加，除10就是K的最新值参与下一次遍历，不用考虑进位问题\n4. 把数组相加的问题转化为对最新值处理问题，不用考虑长度和位数\n\n```java\npublic class AddToArrayFormOfInteger {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        int len = num.length;\n        int lastNum = k;\n        int i = len - 1;\n        LinkedList<Integer> result = new LinkedList<>();\n        while (i >= 0 || lastNum > 0) {\n            if (i >= 0)\n                lastNum += num[i];\n            //取模加入到数组\n            result.addFirst(lastNum % 10);\n            //更新最新值\n            lastNum /= 10;\n            i--;\n        }\n        return result;\n    }\n}\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tomtao626":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185520837","body":"## 思路\r\n\r\n> + k作为位数累加,进位\r\n\r\n##代码\r\n\r\n```go\r\nfunc addToArrayForm(num []int, k int) []int {\r\n\ti := len(num) - 1\r\n\tfor i >= 0 || k > 0 {\r\n\t\tif i > 0 && k > 0 {\r\n\t\t\tsum := num[i] + k%10\r\n\t\t\tnum[i] = sum\r\n\t\t\tk = k / 10  // drop the last element of k\r\n\r\n\t\t\tif sum > 9 {\r\n\t\t\t\tnum[i] = sum % 10\r\n\t\t\t\tk++ //  add carry(1) to k\r\n\t\t\t}\r\n\t\t\ti--\r\n\t\t} else if i >= 0 {\r\n\t\t\tbreak\r\n\t\t} else {\r\n\t\t\tnum = append([]int{k % 10}, num...)\r\n\t\t}\r\n\t}\r\n\r\n\treturn num\r\n}   \r\n```\r\n\r\n## 复杂度\r\n\r\n> + 时间复杂度: O(n)\r\n> + 空间复杂度: O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aiweng1981":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185533265","body":"#Python 3\n#Idea:对将其从列表变字符串，再变整型，完成加法，再将结果变成字符串，最后字符串换成列表。\ndef day1(A,K):\n    A0 = []\n    for i in A:\n        A0.append(str(i))\n    A1 = \"\".join(A0)\n    a1 = int(A1)\n    sm = a1 + K\n    sm1 = str(sm)\n    sm2 = []\n    for j in sm1:\n        sm2.append(int(j))\n    return sm2\nA = [1,2,0,0]\nK = 304\nday1(A,K)\n#Complexity\n#Time: O(N)\n#Space: O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"richard-lime":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185549904","body":"### 思路\r\n用数组进行累加\r\n### 代码\r\n```c++\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n        for(int i = num.size() - 1; i > -1; i--){\r\n            num[i] += k % 10;\r\n            k = k / 10;\r\n        }\r\n        while(k > 0){\r\n            num.insert(num.begin(), k % 10);\r\n            k /= 10;\r\n        }\r\n        int j = num.size() - 1;\r\n        while(j > 0){\r\n            if(num[j] >= 10){\r\n                num[j] -= 10;\r\n                num[j - 1]++;\r\n            }     \r\n            j--;\r\n        }\r\n        if(num[0] >= 10){\r\n            num[0] -= 10;\r\n            num.insert(num.begin(), 1);\r\n        }\r\n        return num;\r\n    }\r\n};\r\n\r\n```\r\n**复杂度分析**\r\n- 时间复杂度O(n)\r\n- 空间复杂度O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"acoada":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185584460","body":"## 思路\n\n```raw\nres = []\nwhile (A or B):\n    a = A 当前位\n    b = B 当前位\n    \n    sum = a + b + 进位\n    \n    进位, 当前位 = divmod(sum, 10)\n    res.insert(0, 当前位)\n\n如果还有非 0 进位， res.insert(0, carry)\n```\n\n## 代码\n\n```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        res = []\n        idx, sum_, carry = len(num) -1, 0, 0\n        while idx >= 0 or k != 0:\n            a = num[idx] if idx >= 0 else 0\n            b = k % 10 if k else 0\n\n            sum_ = a + b + carry\n            carry, curr = divmod(sum_, 10)\n            idx -= 1\n            k //= 10\n            res.insert(0, curr)\n        if carry:\n            res.insert(0, carry)\n        return res\n```\n\n## 复杂度\n\n- Time: O(N)\n- Space: O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"duanyaqi":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185585215","body":"# Day 1. [989. 数组形式的整数加法](https://leetcode.cn/problems/add-to-array-form-of-integer/)\r\n## 思路\r\n加法有以下公式：\r\n\r\n当前位 = (A 的当前位 + B 的当前位 + 进位carry) % 10   \r\n\r\n直接遍历相加即可，保存 carry，最后有 carry 额外加 1，从小到大加，最后保存的结果要翻转\r\n- 动态数组遍历数组\r\n- int 数字 `%10` 取最低位，`/10` 为了遍历下一个最低位\r\n\r\n```c++\r\nvector<int> addToArrayForm(vector<int>& num, int k) {\r\n    int carry = 0; \r\n    vector<int> res;\r\n    \r\n    // 遍历数组，进行加\r\n    for (int i = num.size() - 1; i >= 0; --i) {\r\n        int kn = k % 10;\r\n        k /= 10;\r\n\r\n        int sumn = kn + num[i] + carry;  //关键公式!!!\r\n\r\n        res.push_back(sumn % 10);\r\n        if (sumn >= 10) {\r\n            carry = 1;\r\n        } else {\r\n            carry = 0;\r\n        }\r\n    }\r\n\r\n    // 如果 k 还没处理完，继续处理 k\r\n    while (k > 0) {\r\n        int kn = k % 10;\r\n        k /= 10;\r\n\r\n        int sumn = kn + carry; //关键公式!!! 此时 num[i] 已经是 0 了\r\n\r\n        res.push_back(sumn % 10);\r\n        if (sumn >= 10) {\r\n            carry = 1;\r\n        } else {\r\n            carry = 0;\r\n        }\r\n    }\r\n\r\n    if (carry == 1) res.push_back(1);\r\n    reverse(res.begin(), res.end());\r\n\r\n    return res;\r\n}\r\n```\r\n> + 时间复杂度: O(max(n,logk))\r\n> + 空间复杂度: O(1)，常数级别，只有res\r\n\r\n\r\n## 优化\r\n\r\n发现两个循环其实是一样的，可以放在一起处理\r\n\r\n```c++\r\nvector<int> addToArrayForm(vector<int>& num, int k) {\r\n    int carry = 0;\r\n        \r\n    vector<int> res;\r\n    int i = num.size() - 1;\r\n    // 放到一起处理, 如果有一个变成 0, sumn 这里就相当于 + 0\r\n    while (i >= 0 || k > 0) {\r\n        int a = i < 0 ? 0 : num[i];\r\n        int kn = k == 0 ? 0 : k % 10;\r\n        k /= 10;\r\n\r\n        int sumn = a + kn + carry;\r\n\r\n        res.push_back(sumn % 10);\r\n        if (sumn >= 10) {\r\n            carry = 1;\r\n        } else {\r\n            carry = 0;\r\n        }\r\n        i--;\r\n    }\r\n\r\n    // 如果有进位\r\n    if (carry == 1) res.push_back(1);\r\n    reverse(res.begin(), res.end());\r\n\r\n    return res;\r\n}\r\n```\r\n\r\n没变化\r\n> + 时间复杂度: O(max(n,logk))\r\n> + 空间复杂度: O(1)，常数级别，只有res\r\n\r\n\r\n## 模板\r\n\r\n加法模板\r\n```c++\r\nwhile ( A 没完 || B 没完)\r\n    A 的当前位\r\n    B 的当前位\r\n\r\n    和 = A 的当前位 + B 的当前位 + 进位carry\r\n\r\n    当前位 = 和 % 10;\r\n    进位 = 和 / 10;\r\nend\r\n\r\n判断还有进位吗\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ccslience":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185589950","body":"# 思路\r\n\r\n```\r\n当前位 = (A 的当前位 + B 的当前位 + 进位carry) % 10\r\n\r\n```\r\n\r\n# 代码\r\n\r\n```\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& A, int K) {\r\n        int a_len = A.size() - 1, sum = 0, carry = 0;\r\n        vector<int> res;\r\n        while (a_len >= 0 || K != 0) {\r\n            int x = a_len >= 0 ? A[a_len] : 0;\r\n            int y = K != 0 ? K % 10 : 0;\r\n            sum = x + y + carry;\r\n            carry = sum / 10;\r\n            sum %= 10;\r\n            K /= 10;\r\n            a_len--;\r\n            res.push_back(sum);\r\n        }\r\n        if (carry != 0)\r\n            res.push_back(carry);\r\n        reverse(res.begin(), res.end());\r\n        return res;\r\n    }\r\n};\r\n```\r\n\r\n# 复杂度\r\n+ 时间复杂度：O(n);\r\n+ 空间复杂度：O(1);","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kaiykk":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185593642","body":"## 思路\n\n> + 思路描述\n倒着过一遍num，和k逐位相加。\n\n```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        res = []\n        idx = len(num) - 1\n        while k or idx > -1:\n            cur = k % 10 + num[idx] if idx >= 0 else k % 10\n            k //= 10\n            if cur >= 10:\n                k += 1\n                cur = cur % 10\n            res.append(cur)\n            idx -= 1\n        res.reverse()\n        return res\n```\n\n## 复杂度\n\n> + 时间复杂度: O(N)\n> + 空间复杂度: O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cachezhou0617":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185598055","body":"## 思路\r\n\r\n> + 参考题解后解答，回去查看讲义和类似题目 巩固之\r\n\r\n##代码\r\n\r\n```java\r\npublic List<Integer> addToArrayForm(int[] A, int K) {\r\n    List<Integer> res = new ArrayList<>();\r\n    int carry = 0;\r\n    int l1 = A.length - 1;\r\n    while (l1 >= 0 || K != 0) {\r\n        int x = l1 < 0 ? 0 : A[l1];\r\n        int y = K == 0 ? 0 : K % 10;\r\n\r\n        int sum = x + y + carry;\r\n        res.add(sum % 10);\r\n        carry = sum / 10;\r\n\r\n        l1--;\r\n        K = K / 10;\r\n    }\r\n    if (carry != 0) res.add(carry);\r\n    Collections.reverse(res);\r\n    return res;\r\n}\r\n\r\n\r\n```\r\n\r\n\r\n\r\n## 复杂度\r\n\r\n> + 时间复杂度: O(n)\r\n> + 空间复杂度: O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangtuo1999":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185599809","body":"## 思路\r\n把 k 转换成数组，再将 num 和 k 两个数组反转。双指针，从头到尾依次将余数插入结果数组中。\r\n\r\n## 代码\r\n```javascript\r\n/**\r\n * @param {number[]} num\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = function (num, k) {\r\n  const num1 = num.reverse();\r\n  const num2 = k\r\n    .toString()\r\n    .split(\"\")\r\n    .map((item) => parseInt(item))\r\n    .reverse();\r\n  const result = [];\r\n  let m = 0;\r\n  let n = 0;\r\n  let extra = 0;\r\n  while (m < num1.length && n < num2.length) {\r\n    const sum = num1[m++] + num2[n++] + extra;\r\n    extra = sum > 9 ? 1 : 0;\r\n    result.push(sum % 10);\r\n  }\r\n  while (m < num1.length) {\r\n    const sum = num1[m++] + extra;\r\n    extra = sum > 9 ? 1 : 0;\r\n    result.push(sum % 10);\r\n  }\r\n  while (n < num2.length) {\r\n    const sum = num2[n++] + extra;\r\n    extra = sum > 9 ? 1 : 0;\r\n    result.push(sum % 10);\r\n  }\r\n  if (extra) {\r\n    result.push(1);\r\n  }\r\n  return result.reverse();\r\n};\r\n```\r\n## 复杂度\r\n时间复杂度：O(n)\r\n空间复杂度：O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cytrue":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185613290","body":"           public List<Integer> addToArrayForm(int[] num, int k) {\n\n        List<Integer> res=new ArryList<Integer>();\n        int n=num.length;\n        for(int i=n-1;i>=0;--i)\n        {\n            int sum=num[i] + k % 10;//如果K=123这个数，那K % 10 取出来的是个数的余数，即把3取出来\n            K / =10;//相当于K=K/10；就是123除于10并取整返回，那就是往前进一位，返3去掉，返回12值给下一次用\n            if(sum>=10)//如果sum得出来的值大于10\n            {\n                k++;//把进位的值放在k上，即k进一位，加1\n                sum-=10;//把相加的值减掉进位\n            }\n            res.add(sum);\n        }\n        //如果num的位数小于K的位数，那还需要多一步处理K剩下的数\n        for(; k > 0;k / =10)//每次循环K的前进一位，如果小于0则表示已经没有数可以进位了\n        {\n            res.add(k % 10 ); //把K的余数取出来返回\n        }\n\n        Collections.reverse(res);\n        return res;\n\n    }","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckyryan-web":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185615180","body":"```ts\nfunction addToArrayForm(num: number[], k: number): number[] {\n    const res: number[] = []\n\n    // 从数组的最右边开始计算，来模拟数字相加操作\n    const len = num.length\n\n    for (let i = len - 1; i >= 0; --i) {\n        let carry = num[i] + k % 10\n\n        k = Math.floor(k / 10)\n\n        if (carry >= 10) {\n            k++\n            carry = carry - 10\n        }\n\n        res.push(carry)\n    }\n\n    while (k > 0) {\n        res.push(k % 10)\n        k = Math.floor(k / 10)\n    }\n\n    res.reverse()\n\n    return res\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"naomiwufzz":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185615532","body":"### **思路：加法问题**\n\n倒着过一遍num，和k逐位相加。\n\n1. k的位数：用取mod和地板除可以直接把k用掉的位置扔掉，同时如果要进位，直接进位到k上即可。是一种比较便捷的方式。\n2. 一开始想用先初始化n长度的list存储结果，但是其实list长度很难定，所以可以直接用reverse，reverse复杂度是O(n)\n3. 注意会有k长度比num大的情况的！并不都是k长度小于n，所以要考虑遍历完还有k或者carry的情况\n    \n\n### **代码**\n\n```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        carry = 0\n        res = []\n        for i in range(len(num)-1, -1, -1):\n            cur_n = num[i]\n            cur_add = k % 10\n            add_n = cur_n + cur_add + carry\n            res.append(add_n % 10)\n            carry = add_n // 10\n            k //= 10\n        while k or carry:\n            cur_add = k % 10\n            add_n = cur_add + carry\n            res.append(add_n % 10)\n            carry = add_n // 10\n            k //= 10\n        res.reverse()\n        return res\n\n```\n\n### **复杂度分析**\n\n- 时间复杂度：O(min(n,k)) reverse复杂度是O(n) 所以是n长度和k长度最小值\n- 空间复杂度：O(1) 没有额外空间","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liuajingliu":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185624746","body":"#### 解题思路\n  1. 低位到高位逐位将数字加在一起\n  2. 若加法的结果大于等于 1010，把进位的 11 加入到下一位的计算中\n#### 代码实现\n\n```\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n    const res = [];\n    const n = num.length;\n    for (let i = n - 1; i >= 0; --i) {\n        let sum = num[i] + k % 10;\n        k = Math.floor(k / 10);\n        if (sum >= 10) {\n            k++;\n            sum -= 10;\n        }\n        res.push(sum);\n    }\n    for (; k > 0; k = Math.floor(k / 10)) {\n        res.push(k % 10);\n    }\n    res.reverse();\n    return res;\n};\n```\n#### 复杂度分析\n- 时间复杂度: O(max(n,logk), 其中 nn 为数组的长度\n- 空间复杂度: O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miss1":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185628129","body":"### 思路\n新建一个数组，长度为num和k的长度的最大值，从num和k的末尾开始相加，得到的值赋值到新数组中，注意进位。\n\n### 代码\n```javascript\nvar addToArrayForm = function(num, k) {\n  let size = Math.max(num.length, (k + '').length);\n  let res = new Array(size);\n  let j = num.length - 1;\n  for (let i = res.length - 1; i >= 0; i--) {\n    let sum = k % 10;\n    if (j >= 0) sum += num[j];\n    if (res[i]) sum += res[i];\n    if (i === 0) {\n      res[i] = sum;\n    } else {\n      res[i] = sum % 10;\n      res[i - 1] = Math.floor(sum / 10);\n    }\n    k = Math.floor(k / 10);\n    j--;\n  }\n  if (res[0] >= 10) {\n    let s = res[0];\n    res[0] = s % 10;\n    res.unshift(Math.floor(s /10));\n  }\n  return res;\n};\n```\n\n### 复杂度\n* time: O(n)\n* space: O(n)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"johnxizhao":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185630005","body":"## 思路\r\n遍历数组，从后向前加；随时更新进位变量;\r\n最后需要注意进位是否为1\r\n\r\n```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        if(k == 0) {\r\n            return Arrays.stream(num).boxed().collect(Collectors.toList());\r\n        }\r\n        StringBuffer sb = new StringBuffer();\r\n        List<Integer> res = new ArrayList<>();\r\n        int n = num.length;\r\n        int carry = 0;\r\n        int ans = 0;\r\n        int i = n - 1;\r\n        while(i >= 0 || k != 0) {\r\n            int x = i >= 0 ? num[i] : 0;\r\n            int y =  k != 0 ? k % 10 : 0;\r\n            int sum = x + y + carry;\r\n            carry = sum / 10;\r\n            ans = sum % 10;\r\n            i--;\r\n            res.add(0, ans);\r\n            k /= 10;\r\n        }\r\n        \r\n        if(carry != 0) {\r\n            res.add(0, carry);\r\n        }\r\n        return res;\r\n    }\r\n}\r\n```\r\n\r\n## 复杂度分析\r\n时间复杂度 O(n)\r\n空间复杂度 O(n)\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"incipe-win":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185631706","body":"## 思路\r\n把 `k` 的每一位转换成一个 vector，然后进行两个 vector 相加即可。\r\n## 代码\r\n````cpp\r\nclass Solution {\r\nprivate:\r\n    vector<int> addTwo(vector<int> &num1, vector<int> &num2) {\r\n        // [1, 2, 0, 0] + [3, 4]\r\n        int size1 = num1.size() - 1, size2 = num2.size() - 1;\r\n        vector<int> ans;\r\n        int carry = 0;\r\n        while (size1 >= 0 || size2 >= 0) {\r\n            int x1 = size1 >= 0 ? num1[size1] : 0;\r\n            int x2 = size2 >= 0 ? num2[size2] : 0;\r\n            int sum = x1 + x2 + carry;\r\n            carry = sum / 10;\r\n            sum %= 10;\r\n            ans.emplace_back(sum);\r\n            --size1;\r\n            --size2;\r\n        }\r\n        if (carry) {\r\n            ans.emplace_back(carry);\r\n        }\r\n        reverse(ans.begin(), ans.end());\r\n        return ans;\r\n    }\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n        vector<int> num1;\r\n        while (k) {\r\n            num1.emplace_back(k % 10);\r\n            k /= 10;\r\n        }\r\n        reverse(num1.begin(), num1.end());\r\n        return addTwo(num, num1);\r\n    }\r\n};\r\n````\r\n## 时空复杂度\r\n时间复杂度：$O(n)$\r\n空间复杂度：$O(n)$","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"revisegoal":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185633040","body":"## 进位处理\n从低位往高位相加，并处理进位，可以用k同时存储进位信息，每次迭代有 k = (num[i] + k) / 10\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> res = new LinkedList<>();\n        int len = num.length;\n        for (int i = len - 1; i >= 0; i--) {\n            res.add(0, (num[i] + k) % 10);\n            k = (num[i] + k) / 10;\n        }\n        while (k != 0) {\n            res.add(0, k % 10);\n            k /= 10;\n        }\n        return res;\n    }\n}\n```\n\n```go\nfunc addToArrayForm(num []int, k int) []int {\n    res := make([]int, 0)\n    for i := len(num) - 1; i >= 0; i-- {\n        res = append(res, (num[i] + k) % 10)\n        k = (num[i] + k) / 10\n    }\n    for k != 0 {\n        res = append(res, k % 10)\n        k /= 10\n    }\n    for i, j := 0, len(res) - 1; i < j; i, j = i + 1, j - 1 {\n        res[i], res[j] = res[j], res[i]\n    }\n    return res\n}\n```\n- time: O(max(len(num), digit(k))，时间复杂度是和的长度n，是num和k最大的那个（可能会是max(len(num), digit(k)) + C，不过大O表示法忽略常数项C，可以不做讨论）\n- space: O(1)\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckysq999":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185637894","body":"### 思路\n两数相加\n当前位 = (A 的当前位 + B 的当前位 + 进位carry) % 10\n\n### 代码\n\n\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        int n = num.length;\n        List<Integer> res = new LinkedList<>();//LinkedList比ArrayList快\n        int i = n - 1, sum = 0, carry = 0, x = 0, y = 0;\n        while (i >= 0 || k != 0) {\n            x = i >= 0 ? num[i] : 0;\n            y = k >= 0 ? k % 10 : 0;\n            sum = x + y + carry;\n            carry = sum / 10;\n            i--;\n            k = k / 10;\n            res.add(0, sum % 10);\n        }\n        if (carry != 0) res.add(0, carry);\n        return res;\n    }\n}\n\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)\n- 空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dereklisdr":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185638851","body":"/* 思路 */\n- 两个数相加：从个位数相加(从右向左) 考虑进位 一个一个加入ArrayList入List首位\n\n/* 代码 Java */\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = num.length-1; i >= 0; i--) {\n            int current = k%10 + num[i];\n            k /= 10;\n            \n            if (current >= 10) {\n                k += 1;\n            }\n            \n            result.add(0, current%10);\n        }\n        \n        while (k > 0) {\n            result.add(0, k%10);\n            k /= 10;\n        }\n        \n        return result;\n    }\n}\n\n/* 时间和空间分析\nTime  : O(n) - 一次循环\nSpace : O(n) - 两数相加的位数\n*/","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"perfqi":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185644120","body":"常规思路：1.数组和数字相互转换；2.两数组逐位相加\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> res = new ArrayList<Integer>();\n        int n = num.length;\n        for (int i = n - 1; i >= 0; --i) {\n            int sum = num[i] + k % 10;\n            k /= 10;\n            if (sum >= 10) {\n                k++;\n                sum -= 10;\n            }\n            res.add(sum);\n        }\n        for (; k > 0; k /= 10) {\n            res.add(k % 10);\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mryao1":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185647007","body":"```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> sum = new ArrayList<Integer>();\n        int length = num.length;\n        num[length - 1] += k;\n        for (int i = length - 1; i > 0; i--) {\n            int curNum = num[i];\n            if (curNum > 9) {\n                num[i - 1] += curNum / 10;\n                num[i] %= 10;\n            }\n            sum.add(num[i]);\n        }\n        do {\n            sum.add(num[0] % 10);\n            num[0] /= 10;\n        } while (num[0] > 0);\n        Collections.reverse(sum);\n        return sum;\n    }\n}\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"likeyousmile":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185652987","body":"class Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        nstr = ''.join(map(str,num))\n        n = int(nstr)\n        res = n + k\n        return list(map(int,str(res)))","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhg1992":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185656280","body":"```go\nfunc addToArrayForm(num []int, k int) []int {\n\tvar ans []int\n\tfor i := len(num) - 1; i >= 0; i-- {\n\t\tsum := num[i] + k%10\n\t\tk /= 10\n\t\tif sum >= 10 {\n\t\t\tk++\n\t\t\tsum -= 10\n\t\t}\n\t\tans = append(ans, sum)\n\t}\n\tfor ; k > 0; k /= 10 {\n\t\tans = append(ans, k%10)\n\t}\n\treverse(ans)\n\treturn ans\n}\nfunc reverse(num []int) {\n\tfor i, n := 0, len(num); i < n/2; i++ {\n\t\tnum[i], num[n-1-i] = num[n-1-i], num[i]\n\t}\n}\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liquanluo":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185658739","body":"```c++\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        int increase = 0;\n        reverse(num.begin(), num.end());\n        int pos = 0;\n        vector<int> result;\n        while (k > 0 || pos < num.size() || increase > 0 ) {\n            auto digit = k % 10;\n            auto num_digit = pos < num.size() ? num[pos] : 0;\n            auto new_val = num_digit + digit + increase;\n            increase = new_val / 10;\n            new_val = new_val % 10;\n            result.push_back(new_val);\n            \n            ++pos;\n            k = k / 10;\n            // cout << new_val << endl;\n        }\n        \n        // cout << result.size() << endl;\n        reverse(result.begin(), result.end());\n        return result;\n        \n    }\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aq666888":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185658990","body":"### 解题思路\n\n​\t将数组的每一位倒序取出然后和k进行相加，确保k每次是个位数。\n\n​\t当前位 = (A 的当前位 + B 的当前位 + 进位carry) % 10\n\n​\t注意，AB两数都加完后，最后判断一下进位 carry, 进位不为 0 的话加在前面。\n\n​\t最后反转数组\n\n### 代码实现\n\n```java\nclass Solution {\npublic List<Integer> addToArrayForm(int[] num, int k) {\n    List<Integer> res = new ArrayList<Integer>();  \n    int carry=0; //判断进位\n    int i=num.length -1; //判断数组里的整数是否遍历结束\n    // 可以用 LinkeList，或者 ArrayList 往后加，最后反转\n\n    while (i >= 0 || k!= 0) { \n        int x = i>= 0 ? num[i]: 0;\n        int y = k!= 0 ? k % 10 : 0;\n                    \n        int sum = x + y + carry;\n        res.add(sum % 10);\n        carry =sum/10;\n        i--;\n        k=k/10;\n    }\n        if(carry !=0)res.add(carry);\n        Collections.reverse(res);\n        return res;\n       \n\t}\n}    \n```\n\n\n\n### 复杂度：\n\n```md\n时间复杂度 : O(min(n,k)) \n空间复杂度: O(n)\n```\n\n\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"samlu-ecnu":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185660112","body":"### 思路\n\n数字还原后相加，再转换为数字列表。\n\n### 代码\n\n```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        degit = 0\n        for d in num:\n            degit *= 10\n            degit += d\n        # print(degit)\n        k += degit\n        # print(k)\n\n        res = []\n        while k != 0:\n            res.append(k % 10)\n            # print(res)\n            k //= 10\n        return res[::-1]\n```\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhongxiangxiang":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185660258","body":"## 思路\r\n将num和k都转成数组（增加了额外空间，呜呜～～）并倒序，每个元素因此相加，若大于等于10，下一次相加另外再加1\r\n\r\n## 代码\r\n```js\r\nvar addToArrayForm = function(num, k) {\r\n    let arr1 = num.reverse()\r\n    let arr2 = String(k).split('').reverse().map(item => Number(item))\r\n    let i = 0\r\n    let arr = []\r\n    let extra = 0\r\n    while(i < arr1.length || i < arr2.length) {\r\n        let sum = (arr1[i] || 0) + (arr2[i] || 0) + extra\r\n        if (sum >= 10) {\r\n            arr.push(sum - 10)\r\n            extra = 1\r\n        } else {\r\n            arr.push(sum)\r\n            extra = 0\r\n        }\r\n        i++\r\n    }\r\n    if (extra === 1) {\r\n        arr.push(1)\r\n    }\r\n    \r\n    return arr.reverse()\r\n};\r\n```\r\n\r\n## 复杂度\r\n时间：O(n), 数组的reverse不知道复杂度多少\r\n空间：O(n),","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hatorimain":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185660712","body":"## 思路\n这题如果用链表做可以通过使用addFirst这个方法来降低复杂度，参考了leetcode 讨论区java的solution。\n将k加上数组的每位，然后mod10，得到的值放在linkedlist里。\n然后将k /= 10后将这个值加到下一位。\n\n## 代码\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        LinkedList<Integer> res = new LinkedList<>();\n        int len = num.length - 1;\n        while(len >= 0 || k != 0){\n            if(len >= 0)  k += num[len--];\n            res.addFirst(k % 10);\n            k = k /10;\n        }\n        \n        return res;\n    }\n}\n```\n\n## 复杂度\n时间复杂度： O(max(n, log10(k)))\n空间复杂度：O(max(n, log10(k)))\n\n时间复杂度不是数组的长度就是log10k，空间复杂度是因为我们需要开新的空间来把结果存到linkedlist里面。\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"neado":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185661466","body":"### 思路\n\n最后一个元素开始遍历，遍历到最后一个元素若是索引到了尽头，而还有进位就依据 || k>0逻辑再次运算一遍\n维护一个相加数k\n并存储计算之后的结果\n最后返回结果数组\n### 代码\n\n\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        int n=num.length;\n        LinkedList<Integer> res=new LinkedList<>();\n        for(int i=n-1;i>-1|| k>0;i--){\n            if(i>-1 ){\n                k=k+num[i];\n            }\n            Integer r=k%10;\n            res.addFirst(r);\n            k=k/10;\n        }\n        return res;\n    }\n}\n\n\n```\n\n**复杂度分析**\n- 时间复杂度(Time)：O(N)\n- 空间复杂度(Space)：O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaojunjun1110":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185663624","body":"#  思路\r\n从后往前累加，有很多边界要处理，参考了官方题解\r\n# Code\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> res = new ArrayList<Integer>();\r\n        int len = num.length;\r\n        int sum;\r\n        for(int i = len - 1; i >= 0; i--){\r\n            sum = num[i] + k % 10;\r\n            k = k /10;\r\n            if(sum >= 10){\r\n                k++;\r\n                sum -= 10;\r\n            }\r\n            res.add(sum);\r\n        }\r\n       for (; k > 0; k /= 10) {\r\n           res.add(k % 10);\r\n       }\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n}\r\n> + 时间复杂度: O(n)\r\n> + 空间复杂度:O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wxleah":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185664303","body":"### 思路\r\n1. 将整数加到数组最后一位即个位，取余作为个位\r\n2. 加和结果的整除结果进位，加到数组下一位\r\n\r\n### 代码\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        res = []\r\n        n = len(num)\r\n        i = n - 1\r\n        while i >= 0 or k > 0:\r\n            if i >= 0:\r\n                k += num[i]\r\n            res.append(k % 10)\r\n            i -= 1\r\n            k //= 10\r\n        res.reverse()\r\n        return res\r\n```\r\n\r\n### 复杂度分析\r\n- 时间复杂度：O(max(n, logk)，其中 n 为数组长度。（k有logk位数）\r\n- 空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sunl1ght":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185665340","body":"# 思路\n\n遍历数组，每次都让数组的最后一位和数字的个位求和，代码如下：\n\n- 时间复杂度O(N)，\n\n- 空间复杂度O(N)\n\n# 代码\n```Java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] A, int K) {\n        List<Integer> res = new ArrayList<>();\n        int i = A.length - 1, sum = 0, carry = 0;\n        // 循环遍历数组A，每次都将数组末尾和数字K的个位进行求和\n        while (i >= 0 || K != 0) {  \n            int x = i >= 0 ? A[i]: 0;\n            int y = K != 0 ? K % 10 : 0;\n            sum = x + y + carry;\n            carry = sum / 10;\n            K /= 10;\n            i--;\n            res.add(0, sum % 10);\n        }\n        if (carry != 0) res.add(0, carry);\n        return res;\n    }\n}\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kerrhl":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185667597","body":"### 思路\n参考了做的，倒着取取每个位数相加，单独考虑进位（没太看懂那种三个放在一起加的）\n\n### 代码\n```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        ans = []\n        \n        for i in range(len(num)-1, -1, -1):\n            all = num[i] + k % 10\n            k = k // 10\n            if all >= 10:\n                k = k + 1\n            ans.append(all % 10)\n            \n        while k > 0:\n            ans.append(k % 10)\n            k = k // 10\n        return ans[::-1]\n```\n### 复杂度\n时间复杂度: O(n)\n\n空间复杂度: O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"orangejuz":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185667727","body":"## 思路\r\n倒叙无脑加整数k\r\n## 代码\r\n```python3\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        i = 0\r\n        length = len(num)\r\n        carry = k\r\n        while(carry>0):\r\n            if i < length:\r\n                sum = num[-i-1] + carry\r\n                num[-i-1] = sum % 10\r\n                carry = sum // 10\r\n            else:\r\n                num = [carry%10] + num\r\n                carry = carry // 10\r\n            i+=1\r\n        return num\r\n```\r\n### 时间复杂度: O(n)\r\n### 空间复杂度:O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"flyzenr":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185668901","body":"```\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        l = len(num)\r\n        list_num = 0\r\n        for i in range(l):\r\n            list_num = list_num + num[i]*10^(l-(i-1))\r\n            print(num[i]*10^(l-(i-1)))\r\n        list2_num = list_num + k\r\n        str1 = str(list2_num)\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"c1f2h3":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185673058","body":"# 思路\n\n写了一下，提交不对，应该是数据溢出了，直接变为两个数相加的办法不太行\n考虑一种做法，将其变为 num 数组中的元素依次与 k 相加，第一步先末位与 k 相加，结果对 10 取余与下一位相加，当前位置保留对 10 取余\n最后考虑是否有溢出位，然后添加到 0 位置上\n```\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> res = new ArrayList<Integer>();\n        int n = num.length;\n        for (int i = n - 1; i >= 0 || k > 0; --i, k /= 10) {\n            if (i >= 0) {\n                k += num[i];\n            }\n            res.add(k % 10);\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}\n```\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dlm001128":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185673085","body":"class Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int> tmp;\n        while(k){\n            tmp.push_back(k % 10);\n            k /= 10;\n        }\n        reverse(num.begin(), num.end());\n        vector<int> res;\n        int t = 0;\n        int i = 0, j = 0;\n        for(; i < num.size() && j < tmp.size(); i++, j++){\n            res.push_back((num[i] + tmp[j] + t) % 10);\n            t = (num[i] + tmp[j] + t) / 10;\n        }\n        while(i < num.size()){\n            res.push_back((num[i] + t) % 10);\n            t = (num[i] + t) / 10;\n            i++;\n        }\n        while(j < tmp.size()){\n            res.push_back((tmp[j] + t) % 10);\n            t = (tmp[j] + t) / 10;\n            j++;\n        }\n        if(1 == t){\n            res.push_back(t);\n        }\n        int n = res.size() - 1;\n        while(0 == res[n--]){\n            res.pop_back();\n        }\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liuxy94":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185673838","body":"## 思路\r\n从低位到高位相加， 利用carry进位\r\n\r\n## 代码\r\n```python\r\nclass Solution(object):\r\n    def addToArrayForm(self, num, k):\r\n        \"\"\"\r\n        :type num: List[int]\r\n        :type k: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        carry = 0\r\n        for i in range(len(num) - 1, -1, -1):\r\n            num[i], carry = (carry + num[i] + k % 10) % 10, (carry + num[i] + k % 10) // 10\r\n            k //= 10\r\n        B = []\r\n        carry = carry + k\r\n        while carry:\r\n            B = [(carry) % 10] + B\r\n            carry //= 10\r\n        return B + num\r\n```\r\n\r\n## 复杂度分析\r\n时间复杂度： O(n)\r\n空间复杂度： O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aconcert":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185674070","body":"```typescript\nfunction addToArrayForm(num: number[], k: number): number[] {\n\n    let pow = 0;\n    let val = 0;\n    let result = []\n\n    for(let i = num.length-1; i >= 0; i++){\n        val += num[i] * Math.pow(10,pow);\n    }\n\n    val+=k;\n    \n    for(let i = 0; i < num.length -1; i++){\n        result.push(val / (Math.pow(10, num.length)));\n        num.shift();\n    }\n\n    return result;\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"linjunhe":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185675036","body":"```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        res = []\r\n        i = len(num) - 1\r\n        c = 0\r\n        while i >= 0 or k != 0:\r\n            a = num[i] if i >= 0 else 0\r\n            b = k % 10\r\n            sum = a + b + c\r\n            c   = sum // 10\r\n            res.append(sum % 10)\r\n            i = i - 1\r\n            k = k // 10\r\n        if c != 0:\r\n            res.append(c)\r\n        return res[::-1]\r\n```\r\n\r\n- 时间复杂度：O(n)\r\n- 空间复杂度：O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hyqqq22":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185675275","body":"### 思路\r\n逆序遍历数组进行相加，有两种情况：\r\n1. num数组长度大于k位数；遍历完num后k为0，相加结果一致\r\n2. num数组长度小于k位数；遍历完后k不为0，则继续将k剩余数字逐个加上\r\n\r\n注意进位，若需要进位则在k前进一位后加一\r\n\r\n### 代码\r\n\r\n\r\n```python\r\nclass Solution(object):\r\n    def addToArrayForm(self, num, k):\r\n        \"\"\"\r\n        :type num: List[int]\r\n        :type k: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        res=[]\r\n        for i in range(len(num)):\r\n            sum=num[-i-1]+k%10\r\n            k/=10\r\n            if sum>=10:\r\n                k+=1\r\n                sum-=10\r\n            res.append(sum)\r\n        while k:\r\n            res.append(k%10)\r\n            k/=10\r\n        return res[::-1]\r\n```\r\n### 复杂度分析\r\n时间复杂度: O(max(n,k))","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yibenxiao":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185677632","body":"# 【Day 1】989. 数组形式的整数加法\n\n## 代码\n\n```c++\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int> res;\n        int n = num.size();\n        for (int i = n - 1; i >= 0 || k > 0; --i, k /= 10) {\n            if (i >= 0) {\n                k += num[i];\n            }\n            res.push_back(k % 10);\n        }\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};\n```\n\n## 复杂度\n**时间复杂度**：O(max(n,log k))，其中n为数组的长度\n\n**空间复杂度**：O(1)\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"elon-lau":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185677997","body":"## 思路\n\n> + 思路描述\n\n##代码\n\n```python\n#代码\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        temp = \"\"\n        for i in num:\n            temp += str(i)\n        temp = int(temp) + k\n        print([i for i in str(temp)])\n        return [int(i) for i in str(temp)]\n```\n\n## 复杂度\n\n> + 时间复杂度: O(n)\n> + 空间复杂度: O(n)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nowkizzz":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185679498","body":"var addToArrayForm = function(num, k) {\n    const res = [];\n    const nLen = num.length;\n    for (let i = nLen  - 1; i >= 0; --i) {\n        let sum = num[i] + k % 10;\n        k = Math.floor(k / 10);\n        if (sum >= 10) {\n            k++;\n            sum -= 10;\n        }\n        res.push(sum);\n    }\n    for (; k > 0; k = Math.floor(k / 10)) {\n        res.push(k % 10);\n    }\n    res.reverse();\n    return res;\n};\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gsgtgyb":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185681120","body":"### 思路\n考虑到数组长度过长，不能进行累加后转换，采取逐位累加的方式，数组末尾累加之k上，取余。本人采取的是arraylist，参考答案后改为linkedlist\n### 代码\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n       int j = k;\n        int i = num.length -1;\n        LinkedList list = new LinkedList();\n        while (i >= 0 || j > 0) {\n            if (i>=0) {\n                j = j + num[i];\n            }\n            list.addFirst(j%10);\n            j = j / 10;\n            i--;\n        }\n        return list;\n    }\n}\n```\n### 复杂度分析\n时间复杂度：O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"irenia111":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185681843","body":"var addToArrayForm = function(A, K) {\n        const res = [];\n        const n = A.length;\n        for (let i = n - 1; i >= 0; --i) {\n        let sum = A[i] + K % 10;\n        K = Math.floor(K / 10);\n        if (sum >= 10) {\n          K++;\n            sum -= 10;\n        }\n        res.push(sum);\n      }\n        for (; K > 0; K = Math.floor(K / 10)) {\n        res.push(K % 10);\n      }\n        res.reverse();\n        return res;\n      };","onTime":false},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"suiyi8760":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185684032","body":"正向思维的暴力解法，reverse和k的分解方式还可以优化，没时间了先交卷\n```typescript\nfunction addToArrayForm(num: number[], k: number): number[] {\n    const numArrReverse = num.reverse()\n    const kArrReverse = String(k).split('').map(item=>Number(item)).reverse()\n    let needCarry:boolean = false\n    const mapObject = (numArrReverse.length>kArrReverse.length?numArrReverse:kArrReverse)\n    return mapObject.reduce<number[]>((pre,cur,index)=>{\n       const sum = (numArrReverse[index]??0)+(kArrReverse[index]??0)+(needCarry?1:0)\n       console.log(sum)\n       if(sum>=10) {\n           needCarry = true\n       } else{\n           needCarry = false\n       }\n        return [...pre,sum%10,...(mapObject.length-1===index&&needCarry?[1]:[])]\n    },[]).reverse()\n};\n```","onTime":false},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"saltychess":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1185691220","body":"思路\n---\n1、从末尾逐位取数向前做加法  \n2、设置一个变量FLAG标识是否有进位，若有则设置FLAG=1，反之为0    \n3、注意k和num长度边界值的判断  \n\n代码\n---\n``` JAVA\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        int len=num.length-1;\n        int flag=0,tmp_k=0,tmp_num=0,sum=0;\n        List<Integer> res=new ArrayList<Integer>();\n        while(k>0||len>=0){\n            tmp_num = len>=0?num[len]:0;\n            tmp_k = k>0?k:0;\n            sum=flag+tmp_num+(tmp_k%10);\n            if(sum>=10){\n                flag=1;\n                sum=sum%10;\n            }else {\n                flag = 0;\n            }\n            k=k>0?k/10:0;\n            len--;\n            res.add(0,sum);\n        }\n        if(flag==1){\n            res.add(0,flag);\n        }\n        return res;\n    }\n}\n```\n复杂度\n---\n时间复杂度：O（n）  \n空间复杂度：O（n）","onTime":false},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}