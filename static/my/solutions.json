{"azl397985856":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/32#issuecomment-835293321","body":"2121212121"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"angusgenius":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-835847052","body":"### 思路\r\n- 模拟数字加法，利用 `K` 保存进位，先将对应位置的数字相加，再进行取余操作保留结果。\r\n\r\n### 代码\r\n- Golang\r\n```go\r\nfunc addToArrayForm(A []int, K int) (ans []int) {\r\n    for i := len(A) - 1; i >= 0 || K > 0; i-- {\r\n        if i >= 0 {\r\n            K += A[i]\r\n        }\r\n        ans = append(ans, K%10)\r\n        K /= 10\r\n    }\r\n    reverse(ans)\r\n    return\r\n}\r\n\r\nfunc reverse(A []int) {\r\n    for i, n := 0, len(A); i < n/2; i++ {\r\n        A[i], A[n-1-i] = A[n-1-i], A[i]\r\n    }\r\n}\r\n```\r\n\r\n- Java\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> res = new ArrayList<Integer>();\r\n        int n = num.length;\r\n        for (int i = n - 1; i >= 0 || k > 0; --i, k /= 10) {\r\n            if (i >= 0) {\r\n                k += num[i];\r\n            }\r\n            res.add(k % 10);\r\n        }\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n}\r\n```\r\n\r\n### 复杂度分析\r\n- 时间复杂度：O(max(n, logk))，其中 n 为数组的长度。\r\n- 空间复杂度：O(1)，常数级别。"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"devil-lin":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-835849107","body":"\r\n## 代码\r\n\r\n- 语言支持：C++\r\n\r\nC++ Code:\r\n\r\n```c++\r\n\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n        vector<int> res;\r\n\r\n        int n = num.size();\r\n        for(int i = n - 1; i >= 0 || k; i --)\r\n        {\r\n            if(i >= 0)\r\n                k += num[i];\r\n            res.push_back(k % 10);\r\n            k /= 10;\r\n        }\r\n\r\n        reverse(res.begin(), res.end());\r\n\r\n        return res;\r\n    }\r\n};\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(n)$\r\n- 空间复杂度：$O(1)$\r\n\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zliu1413":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-835862900","body":"思路：add K to each digit of the num. \r\n语言：python\r\n\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        res = []\r\n        i = len(num)-1\r\n        while(i>=0 or k>0):\r\n            if i>=0:\r\n                k += num[i]\r\n            res.append(k%10)\r\n            k = k//10\r\n            i -= 1\r\n        return res[::-1]\r\n\r\n```\r\n\r\n复杂度：\r\n时间：O(max(n,logK)), logK is the how many times that K can be divided by 10 until residual is single digit\r\n空间：O(1）\r\n\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joe-the-plumber":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-835868625","body":"思路：using string to convert back and forth\r\n语言：python\r\n复杂度：\r\n时间：O(n)\r\n空间：O(n）\r\n\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        \r\n        number_int =  functools.reduce(lambda a,b : str(a)+str(b),num)\r\n        number_int = int(number_int) + k\r\n        \r\n        result_int_array = []\r\n        for i in str(number_int):\r\n            result_int_array.append(int(i))\r\n            \r\n        return result_int_array\r\n```\r\n\r\n            \r\n        "},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Critsu":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-835891780","body":"思路：add K to each digit\r\n语言：java\r\n\r\n```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> ans = new ArrayList<>();\r\n\r\n        for(int i=num.length-1; i>=0; i--){\r\n \r\n            int temp = num[i] + k;\r\n            int temp1 = temp%10;\r\n            ans.add(0, temp1);\r\n            k= temp/10;\r\n            \r\n        }\r\n\r\n        while(k>0){\r\n            ans.add(0, k%10);\r\n            k/=10;\r\n        }\r\n\r\n        return ans;\r\n    }\r\n}\r\n```"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"taojin1992":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-835892157","body":"# Logic:\r\n```\r\nGo backward from the end of num (the least significant digit) \r\nwhile num still has unprocessed digits or k still has unprocessed digits:\r\n    get k's lowest digit \r\n    update k (k = 0 would be fine)\r\n    \r\n    # add up the current sum for the current digit\r\n    if (no digit to use in num): no need to add from num \r\n    else: add up the current sum for the current digit, decrement the index in num\r\n    \r\n    get carry\r\n    insert to the sum list\r\n    \r\nif (carry == 1): insert at sum list's head\r\n```\r\n# Caveats:\r\nStart from the least significant digit in num (go backward), consider carry, what if k's len is longer/shorter, use linkedlist.addFirst()\r\n\r\n[0]\r\n23\r\n\r\n# Complexity:\r\nTime: O(max(num.length, num of digits in k))\r\n\r\nSpace: O(max(num.length, num of digits in k)) if we consider the output list; otherwise O(1)\r\n\r\n# Code:\r\n```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        LinkedList<Integer> sum = new LinkedList<>();\r\n        int index = num.length - 1;\r\n        int carry = 0;\r\n        while (index >= 0 || k != 0) {\r\n            int curDigit = k % 10;\r\n            k = k / 10;\r\n            \r\n            if (index == -1) {\r\n               curDigit += carry; \r\n            } else {\r\n                curDigit += num[index--] + carry;\r\n            }\r\n            carry = curDigit / 10;\r\n            sum.addFirst(curDigit % 10);\r\n        }\r\n        if (carry == 1) {\r\n            sum.addFirst(1);\r\n        }\r\n        return sum;\r\n    }\r\n}\r\n```"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yanjyumoso":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-835903934","body":"### 思路\r\n\r\n1. Convert the array to string\r\n2. convert the string to integer for addition. \r\n3. Convert integer to array.\r\n\r\n### 代码\r\nPython\r\n\r\n\r\n```python3\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        a = \"\"\r\n        for i in num:\r\n            a+=str(i)\r\n        x = int(a)+k\r\n        newList = [int(i) for i in str(x)]\r\n        return newList \r\n\r\n```\r\n\r\n**复杂度分析**\r\n- Time：O(n)\r\n- Space：O(n)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lilyzhaoyilu":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-835920262","body":"## LC 989. Add to Array-Form of Integer\r\n\r\n### 思路\r\n\r\n循环处理 k 和 num  \r\n让 k 的每一位和 num 对应的 digit 相加  \r\n并且记录是否需要进位  \r\n需要注意一些特殊 case 的处理\r\n\r\n### 代码 JavaScript\r\n\r\n```JavaScript\r\n/**\r\n * @param {number[]} num\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = function(num, k) {\r\n  let i = num.length - 1\r\n  let carry = false;\r\n\r\n  while(k > 0 || i >= 0){\r\n    let curDigit = k % 10\r\n    k = Math.floor(k / 10)\r\n\r\n    //此处注意可能有i <0 的情况，所以 || 0\r\n    //corner case: [0] 233\r\n    let newDigit = curDigit + (num[i]||0)\r\n\r\n    //如果需要进位\r\n    if(carry){\r\n      newDigit++\r\n      carry = false;\r\n    }\r\n\r\n    //判断是否需要进位\r\n    if(newDigit >=10){\r\n      carry = true;\r\n      newDigit = newDigit % 10\r\n    }\r\n\r\n    //同样需要处理 i< 0 的情况\r\n    i >= 0 ? num[i] = newDigit : num.unshift(newDigit)\r\n    i--\r\n  }\r\n\r\n  //最后看看是否需要进位\r\n  //corner case: [9,9] 1\r\n  if(carry) num.unshift(1)\r\n\r\n  return num;\r\n};\r\n\r\n```\r\n\r\n### 复杂度分析\r\n\r\n时间复杂度：O(Math.max(M+N)) 两个长度中的最大值 其实就是 O(N) </br>\r\n空间复杂度：O(1) 只保存了常量\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Size-of":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-835929595","body":"```javascript\r\n\r\n/**\r\n * @param {number[]} num\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = function(num, k) {\r\n  const res = []\r\n  let i = num.length - 1\r\n  let carry = 0\r\n  while (i >= 0 || k > 0 || carry > 0) {\r\n    let cur = (num[i] || 0) + k % 10 + carry\r\n    res.push(cur % 10)\r\n    carry = cur / 10 | 0\r\n    i--\r\n    k = k / 10 | 0\r\n  }\r\n  return res.reverse()\r\n};\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(max(n, logk))$\r\n- 空间复杂度：$O(1)$\r\n\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Talent-Rain":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-835930598","body":"\r\n## [989. 数组形式的整数加法](https://leetcode-cn.com/problems/add-to-array-form-of-integer/solution/bao-li-xiang-jia-by-jzsq_lyx-pon7/)\r\n\r\n### 分析\r\n1. 给定的 k 值是数字，不好按位来和数组中的值进行比对，而这里最后返回的是一个数组，所以先把数组 k 转成字符数组 -- kArr\r\n2. 根据数组长度，从地位到高位进行相加，用遍历 addOne 表示是否进位\r\n3. 每一次相加都需要判断是否超过 9, 超出时返回余数，并更新遍历 addOne\r\n4. 由于返回的 num，所以先用 ALen 遍历，遍历结束后，根据 KLen 的值判断是否还有 kArr 的值，同时还得注意次数 addOne 是否需要进位\r\n5. 时间复杂度：遍历 k 是 O(k) -- 其中 k 是 KLen，然后是遍历两个数组，所以最后 O(N),其中 N 是 Math.max(KLen,ALen)\r\n6. 空间复杂度: O(K)  -- 其中 k 是 KLen\r\n\r\n```javascript\r\n// 989. 数组形式的整数加法\r\n\r\n/**\r\n * @分析\r\n * 1. 由于最后返回的是数组形式，所以将 k 转成单个字符加到数组中比较合适\r\n * 2. 主要考察字符串切分字符，字符与数字相加转换问题\r\n */\r\n var addToArrayForm = function (num, k) {\r\n\r\n    let addOne = false // 进位\r\n    // 转成 number[]\r\n    const kArr = String(k).split('').map(str => Number(str))\r\n    let ALen = num.length, KLen = kArr.length \r\n    while (ALen--) {\r\n        let sum = num[ALen]\r\n        if (KLen) {\r\n            KLen--\r\n            sum += kArr[KLen]\r\n        }\r\n        if (addOne) {\r\n            sum++\r\n            addOne = false\r\n        }\r\n        if (sum >= 10) {\r\n            num[ALen] = sum % 10\r\n            addOne = true\r\n        } else {\r\n            num[ALen] = sum\r\n        }\r\n    }\r\n    while (KLen--) {\r\n        // 还有的值全部加到后面\r\n        let sum = kArr[KLen]\r\n        if (addOne) {\r\n            sum++\r\n            addOne = false\r\n        } \r\n        if (sum >= 10) {\r\n            num.unshift(sum % 10)\r\n            addOne = true\r\n        } else {\r\n            num.unshift(sum)\r\n        }\r\n    }\r\n    if (addOne) {\r\n        num.unshift(1)\r\n    }\r\n    return num\r\n};\r\n\r\n```"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kofzhang":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-835972664","body":"### 思路\r\n1.先转成整数\r\n2.相加\r\n3.再转成数组\r\n### 代码（Python3）\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\r\n        inta = 0\r\n        for i in A:\r\n            inta = inta*10 + i\r\n        inta = inta+K\r\n        res = []\r\n        for i in str(inta):\r\n            res.append(int(i))\r\n        return res\r\n        \r\n```\r\n### 复杂度\r\n时间复杂度：O（n）\r\n空间复杂度：O（n）"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pkuphy":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-835973571","body":"```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        sum = int(''.join(map(str, num))) + k\r\n        sum = map(int, str(sum))\r\n        return sum\r\n```"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tongxw":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-835995408","body":"### 思路\r\n\r\nwhile num[i]存在 或者 k不为0:\r\n    当前位sum = 进位 + nums[i](如果存在) + k mod 10 (如果k不为0)；\r\n    倒序遍历num，同时k = k /10;\r\n    进位 carry = sum / 10;\r\n    当前位 digit = sum mod 10;\r\n    输出数组记录digit;\r\n如果最后一位有进位，添加到输出数组中;\r\n倒序返回输出数组；\r\n\r\n\r\n### 代码\r\n```java\r\n/*\r\n * @lc app=leetcode id=989 lang=java\r\n *\r\n * [989] Add to Array-Form of Integer\r\n */\r\n\r\n// @lc code=start\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        int i = num.length - 1;\r\n        int carry = 0;\r\n        ArrayList<Integer> res = new ArrayList<>();\r\n        while (i>=0 || k != 0) {\r\n            int sum = carry;\r\n            if (i >= 0) {\r\n                sum += num[i];\r\n                i--;\r\n            }\r\n            if (k != 0) {\r\n                sum += k % 10;\r\n                k /= 10;\r\n            }\r\n\r\n            carry = sum / 10;\r\n            res.add(sum % 10);\r\n        }\r\n\r\n        if (carry > 0) {\r\n            res.add(carry);\r\n        }\r\n\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n}\r\n// @lc code=end\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(N)，其中 N 为数组长度。\r\n- 空间复杂度：O(N)，其中 N 为数组长度。\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bolunzhang2021":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836052238","body":"哈？老哥你不会是发错了吧😂\n\nxmlb88 ***@***.***> 于 2021年5月9日周日 下午9:38写道：\n\n> vector<int> addToArrayForm(vector<int>& num, int k) {\n>     vector<int> res;\n>     for (int i = num.size() - 1; i >= 0; --i) {\n>         int sum = num[i] + (k % 10);\n>         k /= 10;\n>         if (sum / 10) ++k;\n>         res.push_back(sum % 10);\n>     }\n>\n>     while (k) {\n>         res.push_back(k % 10);\n>         k /= 10;\n>     }\n>\n>     reverse(res.begin(), res.end());\n>     return res;\n> }\n>\n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836050621>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AT7X2IERQBJMNHNNMTESUQLTM42KPANCNFSM44PJ5S6A>\n> .\n>\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xmlb88":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836051481","body":"c++:\r\n```c++\r\nvector<int> addToArrayForm(vector<int>& num, int k) {\r\n    vector<int> res;\r\n    for (int i = num.size() - 1; i >= 0; --i) {\r\n        int sum = num[i] + (k % 10);\r\n        k /= 10;\r\n        if (sum / 10) ++k;\r\n        res.push_back(sum % 10);\r\n    }\r\n\r\n    while (k) {\r\n        res.push_back(k % 10);\r\n        k /= 10;\r\n    }\r\n\r\n    reverse(res.begin(), res.end());\r\n    return res;\r\n}\r\n```"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Saberfish":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836053127","body":"## 代码\r\n\r\nC++ :\r\n\r\n```c++\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n        int i=num.size()-1;\r\n        while(k>0){\r\n            k=k+num[i];\r\n            num[i]=k%10;\r\n            k=k/10;\r\n            i--;\r\n            if(i<0 && k>0){\r\n                num.insert(num.begin(),0);\r\n                i=0;\r\n            }\r\n        }\r\n        return num;\r\n    }\r\n};\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：O(n)\r\n- 空间复杂度：O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiongyujie":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836058937","body":"语言：java\r\n时间复杂度：O(9n) => O(n) ,数组插入\r\n空间复杂度：除去输出结果,空间复杂度O(1)\r\n\r\n```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> res = new ArrayList<>();\r\n        int out = 0 ;\r\n        int len = num.length;\r\n        int i = len - 1;\r\n        for(; i >= 0 && k > 0; i--){\r\n            int tmp =out + num[i] +  k % 10;\r\n            out = tmp / 10;\r\n            k = k / 10;\r\n            res.add(0, tmp % 10);\r\n        }\r\n        while(i >= 0){\r\n            int tmp = out + num[i];\r\n            out = tmp / 10;\r\n            res.add(0, tmp % 10);\r\n            i--;\r\n        }\r\n        while(k > 0){\r\n            int tmp = out + k % 10;\r\n            k = k / 10;\r\n            out = tmp / 10;\r\n            res.add(0, tmp % 10);\r\n        }\r\n        if(out > 0){\r\n            res.add(0, out);\r\n        }\r\n        return res ;\r\n    }\r\n}\r\n```"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Syan115":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836060783","body":"思路：\r\n1. 从低位起按位相加，注意进位问题\r\n2. list反转一下\r\n\r\n复杂度分析\r\n- 时间复杂度O(n)\r\n- 空间复杂度O(n)\r\n\r\n```class Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        int n = num.length;\r\n        int sum = 0;\r\n        List<Integer> res = new ArrayList<>();\r\n        // 按位相加\r\n        for(int i=n-1; i>=0; i--){\r\n            sum = num[i] + k%10;\r\n            if(sum>=10){\r\n                sum = sum%10;\r\n                k = k+10;\r\n            }\r\n            res.add(sum);\r\n            k = k/10;          \r\n        }\r\n        while(k!=0){\r\n            res.add(k%10);\r\n            k = k/10;\r\n        }\r\n\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n} \r\n\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"NorthSeacoder":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836063398","body":"## 思路\r\n利用 BigInt 计算\r\n\r\n## 代码\r\n\r\n- 语言支持：JavaScript\r\n\r\nJavaScript Code:\r\n\r\n```javascript\r\n\r\n/**\r\n * @param {number[]} num\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = function (num, k) {\r\n    \r\n    return (BigInt(num.join('')) + BigInt(k)).toString().split('')\r\n};\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：O(1),没遍历数组....\r\n- 空间复杂度：O(n), 直接把数组转成 BigInt,不确定这里对不对...."},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shizukanaskytree":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836063868","body":"\r\n## 题目地址(989. Add to Array-Form of Integer)\r\n\r\nhttps://leetcode-cn.com/problems/add-to-array-form-of-integer/\r\n\r\n## 题目描述\r\n\r\n```\r\nThe array-form of an integer num is an array representing its digits in left to right order.\r\n\r\nFor example, for num = 1321, the array form is [1,3,2,1].\r\n\r\nGiven num, the array-form of an integer, and an integer k, return the array-form of the integer num + k.\r\n\r\n \r\n\r\nExample 1:\r\n\r\nInput: num = [1,2,0,0], k = 34\r\nOutput: [1,2,3,4]\r\nExplanation: 1200 + 34 = 1234\r\n\r\n\r\nExample 2:\r\n\r\nInput: num = [2,7,4], k = 181\r\nOutput: [4,5,5]\r\nExplanation: 274 + 181 = 455\r\n\r\n\r\nExample 3:\r\n\r\nInput: num = [2,1,5], k = 806\r\nOutput: [1,0,2,1]\r\nExplanation: 215 + 806 = 1021\r\n\r\n\r\nExample 4:\r\n\r\nInput: num = [9,9,9,9,9,9,9,9,9,9], k = 1\r\nOutput: [1,0,0,0,0,0,0,0,0,0,0]\r\nExplanation: 9999999999 + 1 = 10000000000\r\n\r\n\r\n \r\n\r\nConstraints:\r\n\r\n1 <= num.length <= 104\r\n0 <= num[i] <= 9\r\nnum does not contain any leading zeros except for the zero itself.\r\n1 <= k <= 104\r\n```\r\n\r\n## 前置知识\r\n\r\n- \r\n\r\n## 公司\r\n\r\n- 暂无\r\n\r\n## 思路\r\n\r\n## 关键点\r\n\r\n-  \r\n\r\n## 代码\r\n\r\n- 语言支持：Python3\r\n\r\nPython3 Code:\r\n\r\n```python\r\n\r\nfrom typing import List \r\n\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        num_val = 0\r\n\r\n        for n in num:\r\n            num_val += n            \r\n            num_val = num_val * 10\r\n        num_val //= 10\r\n        \r\n        new_val = num_val + k\r\n        \r\n        if new_val == 0:\r\n            return [0]\r\n        \r\n        res = []\r\n        last_digit = 0\r\n            \r\n        while new_val != 0:\r\n            last_digit = new_val % 10\r\n            res.append(last_digit)    \r\n            new_val = new_val // 10\r\n\r\n        res.reverse()\r\n        return res\r\n\r\na = [0]\r\ns = Solution()\r\nres = s.addToArrayForm(a, k=0)\r\nprint(res)\r\n\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(n)$\r\n- 空间复杂度：$O(n)$\r\n\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"BeBraveBeCurious":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836072235","body":"``` Python3\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        res = []\r\n\r\n        i, carry = len(num) - 1, 0\r\n        while i >= 0 or k != 0:\r\n            x = num[i] if i >= 0 else 0\r\n            y = k % 10 if k != 0 else 0\r\n\r\n            sum = x + y + carry\r\n            res.append(sum % 10)\r\n            carry = sum // 10\r\n\r\n            i -= 1\r\n            k //= 10\r\n\r\n        if carry != 0:\r\n            res.append(carry)\r\n            \r\n        return res[::-1]\r\n```\r\n**复杂度分析**\r\nn 为数组长度\r\n- 时间复杂度：O(n)\r\n- 空间复杂度：O(n)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"watermelonDrip":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836072251","body":"## 思路\r\n- 转int 和 k 相加\r\n- 取余逐位加到res_list里\r\n\r\n## 代码\r\n\r\n- 语言支持：Python3\r\n\r\nPython3 Code:\r\n\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n         \r\n        str_num = ''.join(str(x) for x in num)\r\n        tmp = int(str_num)\r\n        int_res = tmp + k\r\n        list_res = []\r\n        if int_res == 0:\r\n            return [0]\r\n        while int_res>0:\r\n            list_res.append(int_res%10)\r\n            int_res = int_res//10\r\n        return list_res[::-1]\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(n)$\r\n- 空间复杂度：$O(n)$\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cecilia-vu":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836079487","body":"### 思路\r\n\r\n从低位按位计算，注意处理最高位进位的情况\r\n\r\n### 代码\r\n\r\n* 语言支持：c++\r\n\r\n```c++\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n        vector<int> res;\r\n        int add = 0;\r\n        for (int i = num.size() - 1; i>=0; i--) {\r\n            int digit = k % 10;\r\n            k = k / 10;\r\n            int tmp = num[i] + digit + add;\r\n            if (tmp > 9) {\r\n                res.push_back(tmp - 10);\r\n                add = 1;\r\n            } else {\r\n                res.push_back(tmp);\r\n                add = 0;\r\n            }\r\n        }\r\n        while (k > 0) {\r\n            int tmp = k % 10 + add;\r\n            if (tmp > 9) {\r\n                res.push_back(tmp - 10);\r\n                add = 1;\r\n            } else {\r\n                res.push_back(tmp);\r\n                add = 0;\r\n            }\r\n            k = k / 10;\r\n        }\r\n        if (add == 1) {\r\n            res.push_back(1);\r\n        }\r\n        reverse(res.begin(), res.end());\r\n        return res;\r\n    }\r\n};\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(N)\r\n- 空间复杂度：O(N)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Davont":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836079739","body":"### 思路\r\n1.先反转数组\r\n2.上下相加\r\n3.再反转成正常数组\r\n\r\n### 代码（JavaScript）\r\n```js\r\n/**\r\n * @param {number[]} num\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = function (num, k) {\r\n  /**\r\n   * 大数相加，先将两个数反转\r\n   */\r\n  let numAStr = num.reverse();\r\n  let numBStr = k.toString().split('').reverse();\r\n  let temp = 0;\r\n  let result = [];\r\n  for (let i = 0; i < Math.max(numAStr.length, numBStr.length); i++) {\r\n    if (!numAStr[i]) {\r\n      numAStr[i] = 0;\r\n    }\r\n    if (!numBStr[i]) {\r\n      numBStr[i] = 0;\r\n    }\r\n    result[i] = numAStr[i] + +numBStr[i] + temp;\r\n    if (result[i] > 9) {\r\n      result[i] -= 10;\r\n      temp = 1;\r\n    } else{\r\n        temp = 0;\r\n    }\r\n  }\r\n  if (temp === 1) {\r\n    result.push(temp);\r\n  }\r\n  return result.reverse();\r\n};\r\n``` \r\n\r\n        \r\n### 复杂度\r\n时间复杂度：O（n）\r\n空间复杂度：O（n）"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"LangqiZhao":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836081583","body":"### 思路\r\n\r\n把数组从末尾开始，和k进行加法运算，并通过进位更新需要加的数值。\r\n\r\n### 代码\r\n\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        ans = list()\r\n\r\n        add_value = k\r\n        for idx in range(len(num)):\r\n            val = num[len(num) - 1 - idx] + add_value\r\n            add_value = val // 10\r\n            ans.append(val % 10)\r\n\r\n            if add_value == 0:\r\n                break\r\n\r\n        while add_value > 0:\r\n            ans.append(add_value % 10)\r\n            add_value = add_value // 10\r\n\r\n        ans = ans[::-1]\r\n\r\n        if idx < len(num) - 1:\r\n            ans = num[:len(num) - idx - 1] + ans\r\n        return ans\r\n\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(N)\r\n- 空间复杂度：O(N)\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"taozi-taozi":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836083170","body":"### 思路：\r\n数组遍历\r\n### 代码：\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        re = 0\r\n        for i in num[:-1]:\r\n            re = (re + i) * 10\r\n        re = re + num[-1] + k\r\n        return [int(x) for x in str(re)]\r\n```\r\n### 复杂度分析：\r\n时间复杂度：O(N)\r\n空间复杂度：O(N)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"DIUDIU110":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836088010","body":"### 思路\r\n    模拟数字加法，利用 K 保存进位，先将对应位置的数字相加，再进行取余操作保留结果。\r\n### 程序 C++\r\n```\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& a, int k) {\r\n        vector<int>res;\r\n        vector<int>b;\r\n        while(k)\r\n        {\r\n            b.push_back(k%10);\r\n            k/=10;\r\n        }\r\n        reverse(b.begin(),b.end());\r\n        int fl=0;\r\n        int i,j;\r\n        for(i=a.size()-1,j=b.size()-1;i>=0&&j>=0;i--,j--)\r\n        {\r\n            int te=a[i]+b[j]+fl;\r\n            fl=te/10;\r\n            res.push_back(te%10);\r\n        }\r\n        while(i>=0)\r\n        {\r\n            int te=a[i]+fl;\r\n            fl=te/10;\r\n            res.push_back(te%10);\r\n            i--;\r\n        }\r\n        while(j>=0)\r\n        {\r\n            int te=b[j]+fl;\r\n            fl=te/10;\r\n            res.push_back(te%10);\r\n            j--;\r\n        }\r\n        if(fl)\r\n            res.push_back(fl);\r\n        reverse(res.begin(),res.end());\r\n        return res;\r\n    }\r\n};\r\n```\r\n### 复杂度\r\n   时间: o(max(n,m)) \r\n   空间: o(n)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rfhklwt":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836091338","body":"## 思路\r\n* 模拟竖式加法，逐位相加，并记录`carry`位\r\n```伪代码\r\nwhile ( A 没完 || B 没完)\r\n    A 的当前位\r\n    B 的当前位\r\n\r\n    和 = A 的当前位 + B 的当前位 + 进位carry\r\n\r\n    当前位 = 和 % 10;\r\n    进位 = 和 / 10;\r\n\r\n判断还有进位吗\r\n```\r\n## 代码\r\n* Python3\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        n = len(num)\r\n        res = []\r\n        i, Sum, carry = n - 1, 0, 0\r\n        \r\n        while i >= 0 or k != 0:\r\n            x = num[i] if i >= 0 else 0\r\n            y = k % 10 if k != 0 else 1\r\n\r\n            Sum = x + y + carry\r\n            # 当前位\r\n            res.append(Sum % 10)\r\n            # 进位\r\n            carry = Sum // 10\r\n            i, k = i - 1, k // 10\r\n        \r\n        # 最后检查进位是否为１\r\n        if carry > 0:\r\n            res.append(carry)\r\n        \r\n        return res[::-1]\r\n```\r\n* Julia\r\n```julia\r\nfunction add_to_array_form(num::Vector{Int}, k::Int)::Vector{Int}\r\n    n = length(num)\r\n    i, val, carry = n, 0, 0\r\n    res = Int[]\r\n\r\n    while i > 0 || k != 0\r\n        x = i > 0 ? num[i] : 0\r\n        y = k != 0 ? k % 10 : 0\r\n\r\n        val = x + y + carry\r\n        append!(res, val % 10)\r\n        carry = val ÷ 10\r\n        i, k = i - 1, k ÷ 10\r\n    end\r\n\r\n    if carry > 0\r\n        append!(res, carry)\r\n    end\r\n\r\n    return reverse(res)\r\nend\r\n```\r\n\r\n## 复杂度分析\r\n* 时间复杂度：`O(max(n,log k))`，其中`n`为数组的长度。\r\n\r\n* 空间复杂度：`O(1)`，不考虑返回数组。\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"HTian1997":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836091664","body":"思路：模拟加法\r\n\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        carry = k\r\n        for i in range(len(num) - 1, -1, -1):\r\n            num[i] += carry\r\n            carry = num[i] // 10\r\n            num[i] %= 10\r\n        \r\n        while carry:\r\n            num.insert(0, carry % 10)\r\n            carry //= 10\r\n        \r\n        return num\r\n```\r\n\r\n复杂度：time O(N), space O(N)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"terrylijiayang":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836094791","body":"**思路**\r\n两个循环。第一个循环先统一到一个数组，第二个循环再做进位处理。\r\n**代码**\r\n```\r\nvar addToArrayForm = function (A, K) {\r\n    count = 0;\r\n    len = K.toString().length;\r\n    for (let i = 0; i < len; i++) {\r\n        if (A.length < len) {\r\n            A.unshift(0);\r\n        }\r\n        count = K % 10;\r\n        K = parseInt(K / 10);\r\n        A[A.length - 1 - i] += count;\r\n    }\r\n    for (let i = 0; i < A.length; i++) {\r\n        if (A[0] > 9) {\r\n            A.unshift(0);\r\n        }\r\n        if (A[A.length - 1 - i] > 9) {\r\n            A[A.length - 2 - i]++;\r\n            A[A.length - 1 - i] = A[A.length - 1 - i] % 10;\r\n        }\r\n    }\r\n    return A;\r\n};\r\n```\r\n**复杂度**\r\n时间复杂度：O(N)\r\n空间复杂度：O(N)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Xyxy1722":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836098804","body":"思路\r\n每次取num的最后一位和k运算并保存最后一位的结果\r\n\r\n代码\r\n语言支持：Python3\r\nPython3 Code:\r\n\r\n\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        i = len(num) - 1\r\n        result = []\r\n        while(i >= 0 or k != 0):\r\n            if i >= 0:\r\n                k = k + num[i]\r\n            result.insert(0, k % 10)\r\n            k = int(k / 10)\r\n            i = i - 1\r\n        return result\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(n)$\r\n- 空间复杂度：$O(n)$\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"eachless":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836098983","body":"\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        int n =  num.length;\r\n        int cur = k;\r\n        List<Integer> ans = new ArrayList();\r\n        \r\n        int i = n;\r\n        \r\n        while(--i >=0 || cur > 0){\r\n            if( i >= 0){\r\n                cur +=num[i];\r\n            }\r\n            \r\n            ans.add(cur % 10);\r\n            cur /= 10;\r\n        }\r\n        \r\n        \r\n        Collections.reverse(ans);\r\n        return ans;\r\n    }\r\n}"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"linearindep":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836108570","body":"【思路】记住加法进位数量，一级一级加\r\n\r\n【代码】java\r\n\r\n`        int ans = 0;\r\n        List<Integer> arr = new ArrayList<Integer>();\r\n        int i = num.length-1;\r\n       \r\n        while( k>0||i>=0){  \r\n            if(i>=0){\r\n                k = num[i]+k; \r\n            } \r\n                    \r\n            int temp = k%10;\r\n            k = k/10;\r\n            arr.add(temp);\r\n            i--;\r\n        }\r\n        Collections.reverse(arr);\r\n        return arr;\r\n    }`\r\n\r\n【复杂度】时间O(n),空间O(n)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yeanli95":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836112944","body":"## 题目地址(989. 数组形式的整数加法)\r\n\r\nhttps://leetcode-cn.com/problems/add-to-array-form-of-integer/\r\n\r\n## 题目描述\r\n\r\n```\r\n对于非负整数 X 而言，X 的数组形式是每位数字按从左到右的顺序形成的数组。例如，如果 X = 1231，那么其数组形式为 [1,2,3,1]。\r\n\r\n给定非负整数 X 的数组形式 A，返回整数 X+K 的数组形式。\r\n\r\n \r\n\r\n示例 1：\r\n\r\n输入：A = [1,2,0,0], K = 34\r\n输出：[1,2,3,4]\r\n解释：1200 + 34 = 1234\r\n\r\n\r\n示例 2：\r\n\r\n输入：A = [2,7,4], K = 181\r\n输出：[4,5,5]\r\n解释：274 + 181 = 455\r\n\r\n\r\n示例 3：\r\n\r\n输入：A = [2,1,5], K = 806\r\n输出：[1,0,2,1]\r\n解释：215 + 806 = 1021\r\n\r\n\r\n示例 4：\r\n\r\n输入：A = [9,9,9,9,9,9,9,9,9,9], K = 1\r\n输出：[1,0,0,0,0,0,0,0,0,0,0]\r\n解释：9999999999 + 1 = 10000000000\r\n\r\n\r\n \r\n\r\n提示：\r\n\r\n1 <= A.length <= 10000\r\n0 <= A[i] <= 9\r\n0 <= K <= 10000\r\n如果 A.length > 1，那么 A[0] != 0\r\n```\r\n\r\n## 前置知识\r\n\r\n- \r\n\r\n## 公司\r\n\r\n- 暂无\r\n\r\n## 思路\r\nFirst Idea is to convert the array into Integer, then  sum up the array and k, then convert into desire result format.\r\n\r\nBut when array size gets larger, it is easy to get overflow when converting into integer.\r\n\r\nThen we need to go through the long way, adding bits from least significant to most significant, \r\n## 关键点\r\n\r\n-  \r\n\r\n## 代码\r\n\r\n- 语言支持：Java\r\n\r\nJava Code:\r\n\r\n```Java\r\n\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> result = new ArrayList<>();\r\n\r\n        int carry = 0;\r\n        int numindex = num.length -1;\r\n        \r\n        while(numindex >=0 || k > 0 ){\r\n            int nums = numindex >=0 ? num[numindex] : 0;\r\n            int results = k > 0 ? k % 10 : 0;\r\n                                                      \r\n            int tempval = results + nums + carry;\r\n            int remainder = tempval % 10;\r\n            \r\n            carry = tempval / 10;\r\n            \r\n            result.add(0, remainder);\r\n            numindex--;\r\n            k /=10;\r\n        }\r\n        \r\n        if(carry > 0){\r\n            result.add(0, carry);\r\n        }\r\n        \r\n        return result;\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(n)$\r\n- 空间复杂度：$O(1)$"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"minuet-red":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836115382","body":"### **题目地址(989. 数组形式的整数加法)**\r\n\r\n```\r\nhttps://leetcode-cn.com/problems/add-to-array-form-of-integer/\r\n```\r\n\r\n### **题目描述**\r\n\r\n```\r\n对于非负整数 X 而言，X 的数组形式是每位数字按从左到右的顺序形成的数组。例如，如果 X = 1231，那么其数组形式为 [1,2,3,1]。\r\n\r\n给定非负整数 X 的数组形式 A，返回整数 X+K 的数组形式。\r\n\r\n \r\n\r\n示例 1：\r\n\r\n输入：A = [1,2,0,0], K = 34\r\n输出：[1,2,3,4]\r\n解释：1200 + 34 = 1234\r\n\r\n\r\n示例 2：\r\n\r\n输入：A = [2,7,4], K = 181\r\n输出：[4,5,5]\r\n解释：274 + 181 = 455\r\n\r\n\r\n示例 3：\r\n\r\n输入：A = [2,1,5], K = 806\r\n输出：[1,0,2,1]\r\n解释：215 + 806 = 1021\r\n\r\n\r\n示例 4：\r\n\r\n输入：A = [9,9,9,9,9,9,9,9,9,9], K = 1\r\n输出：[1,0,0,0,0,0,0,0,0,0,0]\r\n解释：9999999999 + 1 = 10000000000\r\n\r\n\r\n \r\n\r\n提示：\r\n\r\n1 <= A.length <= 10000\r\n0 <= A[i] <= 9\r\n0 <= K <= 10000\r\n如果 A.length > 1，那么 A[0] != 0\r\n```\r\n\r\n### **编程语言**\r\n\r\n```\r\npython3\r\n```\r\n\r\n### **思路**\r\n\r\n```\r\n0. 数组转数字\r\n1. 数字相加\r\n2. 数字转数组\r\n```\r\n\r\n### **代码**\r\n\r\n```\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        tmp = 0\r\n        for i in num:\r\n            tmp = tmp * 10 + i   # 数组转数字\r\n        tmp += k      # 加法运算\r\n        result = []\r\n        for j in str(tmp):    # 数字转数组\r\n            result.append(int(j))\r\n        \r\n        return result\r\n```\r\n\r\n### **复杂度分析**\r\n\r\n```\r\n0. 时间复杂度：O(n)\r\n1. 空间复杂度：O(n)\r\n```\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"LexieLiu01":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836117591","body":"`\r\nclass Solution:\r\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\r\n        carry = 0\r\n        for i in range(len(A) - 1, -1, -1):\r\n        A[i], carry = (carry + A[i] + K % 10) % 10, (carry + A[i] + K % 10) // 10\r\n        K //= 10\r\n        B = []\r\n        carry = carry + K\r\n        while carry:\r\n        B = [(carry) % 10] + B\r\n        carry //= 10\r\n    return B + A\r\n\r\n`"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"HackBL":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836118591","body":"* 思路：Array从后往前遍历，每遍历一次，加上k，取总和的个位数，存入到list中。k /= 10，为下一个元素做准备。 遍历整个数组，如果k还存在数字（即 != 0)，继续遍历k，一一存入到list中\r\n* 误区：最开始使用int，把数组和k的数字相加在一起，导致integer overflow\r\n* 语言：Java\r\n```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> list = new LinkedList<>();\r\n        \r\n        for (int i = num.length-1; i >= 0; i--) {\r\n            k += num[i];\r\n            list.add(0, k % 10);\r\n            k /= 10;\r\n        }\r\n\r\n        while (k != 0) {\r\n            list.add(0, k % 10);\r\n            k /= 10;\r\n        }\r\n        return list;\r\n    }\r\n}\r\n```\r\n* 时间：O(n), n: max(nums.length, k的长度)\r\n* Space: O(n), n: max(nums.length, k的长度)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xixi-jiu":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836121004","body":"### 思路\r\n\r\n利用 加一 那道题的思路 从个位加起\r\n最后还要处理 k 大于 0 的情况\r\n例如：num = [0];k = 23 \r\n\r\n不明白为什么耗时很多 200+ms\r\n### 代码\r\n```js\r\nvar addToArrayForm = function(num, k) {\r\n    const len = num.length;\r\n    let res = [];\r\n    for (let i = len - 1;i >= 0;i--) {\r\n        let sum = num[i] + (k % 10);\r\n        k = Math.floor(k / 10);\r\n        if (sum >= 10) {\r\n            k++;\r\n            sum -= 10;\r\n            res.unshift(sum);\r\n        } else {\r\n            res.unshift(sum);\r\n        }\r\n    }\r\n    while (k > 0) {\r\n        res.unshift(k % 10);\r\n        k = Math.floor(k / 10);\r\n    }\r\n    return res;\r\n};\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(N)，其中 N 为数组长度。\r\n- 空间复杂度：O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Daniel-Zheng":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836131939","body":"### 思路\r\n\r\n\r\n### 代码(C++)\r\n```C++\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n        vector<int> res;\r\n        int length = num.size();\r\n        int current = k;\r\n        \r\n        while (--length >=0 || current > 0) {\r\n            if (length >= 0) current += num[length];\r\n            res.push_back(current % 10);\r\n            current /= 10;\r\n        }\r\n        \r\n        reverse(res.begin(), res.end());\r\n        return res; \r\n    }\r\n};\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(N)\r\n- 空间复杂度：O(N)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hannahliu-github":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836142144","body":"思路：先把str变成int；加上k；再转回str，放进list里\r\n\r\n代码：python\r\n\r\nclass Solution(object):\r\n    def addToArrayForm(self, num, k):\r\n        x = int(''.join([str(s) for s in num]))\r\n        ans = x + k\r\n        array_form = [int(s) for s in str(ans)]\r\n        return array_form\r\n\r\n复杂度分析：\r\n时间复杂度：O(N)\r\n空间复杂度：O(N)\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yunli2015":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836150346","body":"**思路**： 和add string一样，从末尾往前遍历，用sum， carry 记录\r\n**代码**：java\r\n```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        int carry = 0, sum =0;\r\n        List<Integer> list = new ArrayList<>();\r\n        if(num.length == 0) return list;\r\n        int i= num.length - 1;\r\n        while(i>=0 || k != 0) {\r\n            sum = carry;\r\n            if(i >= 0) {\r\n                sum += num[i];\r\n                i--;\r\n            }\r\n            if(k != 0) {\r\n                sum += k %10;\r\n                k = k/10;\r\n            }\r\n            list.add(0, sum %10);\r\n            carry = sum /10;\r\n        }\r\n\r\n        if(carry != 0) list.add(0, carry);\r\n        return list;\r\n    }\r\n}\r\n```\r\n\r\n**复杂度分析：**\r\n时间复杂度：O（n）\r\n空间复杂度：O（1）"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Xeraphinite":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836152663","body":"### 思路\r\n模拟即可，需要注意最终返回数组的长度\r\n\r\n### 时空复杂度\r\n**时间复杂度**：O(max(log(k), n))，只进行了一次遍历\r\n**空间复杂度**：O(1)，除了存储结果的 `vector` 之外没有用到额外的变量\r\n\r\n### Code\r\n\r\n#### C++\r\n```C++\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n      reverse(num.begin(), num.end());\r\n      int n = num.size(), i = 0;\r\n      vector<int> ans(max(n, (int)to_string(k).size()) + 1, 0);\r\n      while (i < n || k) {\r\n        ans[i] += (i < n ? num[i] : 0) + k % 10; \r\n        ans[i + 1] += ans[i] / 10, ans[i] %= 10;\r\n        k /= 10, i++;\r\n      }\r\n      if (ans.back() == 0) ans.pop_back();\r\n      return vector<int>(ans.rbegin(), ans.rend());\r\n    }\r\n};\r\n```"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sumukeio":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836153578","body":"思路：由低位到高位将数字逐位相加\r\nwhile(A没完 ||B没完)\r\n     A的当前位\r\n     B的当前位\r\n\r\n    和 = A的当前位 + B的当前位 + 进位carry;\r\n\r\n当前位  = 和 % 10;\r\n进位 = 和/10;\r\n\r\n判断还有进位么？\r\n\r\n代码：\r\nint* addToArrayForm(int* A, int ASize, int K, int* returnSize)\r\n{\r\n     int len = fmax(ASize, 5) + 1;//防止越界\r\n     int *res = (int*)malloc(sizeof(int) * len);\r\n     int i = ASize - 1;\r\n     int idx = 0;\r\n//k不为0，数组数据未处理完，继续处理\r\nwhile(k !=0 || i>=0)\r\n{\r\n    k += ( i >= 0) ? A[ i--]  : 0;\r\n    res[ --len] = k % 10;\r\n    k /= 10;\r\n    idx++;\r\n}\r\n*returnSize = idx;\r\nreturn res + len;\r\n}\r\n时间复杂度：O(n)\r\n空间复杂度：O(n)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Mvbbb":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836163931","body":"# 思路\r\n\r\n按照竖式的个位加法来相加\r\n\r\n\r\n# 代码\r\n\r\n```java\r\nclass Solution{\r\n    public List<Integer> addToArrayForm(int[] num,int k){\r\n        int len = num.length;\r\n        int lastNum = k;\r\n        int i = len-1;\r\n        LinkedList<Integer> list = new LinkedList<>();\r\n        while(i>=0||lastNum>0){  // 循环条件: 没有遍历完num或者lastNum中的数还没有全部插入到 list 中\r\n            if(i>=0){ \r\n                lastNum+=num[i]; // 加上一个个位数\r\n            }\r\n            list.addFirst(lastNum%10); // 每一次循环都需要从 lastNum 末尾取一个数放到 list 中\r\n            lastNum/=10;\r\n            i--;\r\n        }\r\n        return list;\r\n    }\r\n}\r\n```\r\n\r\n# 复杂度\r\n\r\n时间复杂度 O(n)\r\n空间复杂度 O(n)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"thisisandy":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836172220","body":"# 思路\r\n各位依次相加\r\n\r\n# 代码\r\n```typescript\r\nfunction addToArrayForm(num: number[], k: number): number[] {\r\n    const num2 = []\r\n    const result = []\r\n    let diff = k\r\n    while(diff){\r\n        const unit = diff%10\r\n        num2.unshift(unit)\r\n        diff = Math.floor(diff/10)\r\n    }\r\n    let a;\r\n    let b;\r\n    let bonus = 0;\r\n    while(bonus || num.length || num2.length){\r\n        a = num.pop() || 0 \r\n        b = num2.pop() || 0\r\n        const sum = a + b + bonus\r\n        const unit = (sum) % 10\r\n        bonus = Math.floor((sum)/10)\r\n        result.unshift(unit)\r\n    }\r\n    return result\r\n};\r\n```\r\n# 复杂度\r\n时间复杂度 O(n)\r\n空间复杂度 O(n)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangzqnb":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836191824","body":"语言： java\r\n\r\n```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        int len = num.length;\r\n\tint i = len - 1, sum = 0, carry = 0, res = 0;\r\n\tList<Integer> list = new ArrayList<>();\r\n\twhile (i >= 0 || k != 0) {\r\n\t\tsum = (i >= 0 ? num[i] : 0) + (k != 0 ? k % 10 : 0) + carry;\r\n\t\tcarry = sum / 10;\r\n\t\tres = sum % 10;\r\n\t\tlist.add(res);\r\n\t\tk /= 10;\r\n\t\ti--;\r\n\t}\r\n        if (carry!=0) list.add(carry);\r\n\tCollections.reverse(list);\r\n\treturn list;\r\n    }\r\n}\r\n```"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hengyi666":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836198313","body":"**思路：**\r\n• 判断长度\r\n• 考虑进位\r\n• 考虑越位开辟新空间\r\n• 正序输入，倒序输出\r\n### \r\n**力扣python打卡**\r\n\r\n\r\n```\r\n#include<stdio.h>\r\n#include<string.h>\r\n#include<stdlib.h>\r\nvoid  addToArrayForm(int* A, int ASize, int K)\r\n{\r\n\t//计算K的位数\r\n\tint len = 0;\r\n\tint tmp = K;\r\n\twhile (tmp)\r\n\t{\r\n\t\tlen++;\r\n\t\ttmp /= 10;\r\n\t}\r\n\t//开辟空间，注意最高位可能存在进位的情况\r\n\tint arrLen = ASize > len ? ASize + 1 : len + 1;\r\n\tint* arr = (int*)malloc(sizeof(int) * arrLen);\r\n\t//逐位相加\r\n\tint index = 0;\r\n\tint end = ASize - 1;\r\n\tint step = 0;\r\n\twhile (end >= 0 || K > 0)\r\n\t{\r\n\t\tint cursum = step;\r\n\t\tif (end >= 0)\r\n\t\t{\r\n\t\t\tcursum += A[end];\r\n\t\t}\r\n\t\tif (K > 0)\r\n\t\t{\r\n\t\t\tcursum += (K % 10);\r\n\t\t}\r\n\t\t//如果位数的值超过9需要进位\r\n\t\tif (cursum > 9)\r\n\t\t{\r\n\t\t\tstep = 1;\r\n\t\t\tcursum -= 10;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tstep = 0;\r\n\t\t}\r\n\t\tarr[index++] = cursum;\r\n\t\tend--;\r\n\t\tK /= 10;\r\n\t}\r\n\t//判断最高位是否存在进位\r\n\tif (step == 1)\r\n\t{\r\n\t\tarr[index++] = step;\r\n\t}\r\n\t//为了方便对数组进行尾插，所以数据是逆序存储，故要对数组进行逆序操作。\r\n\tint start = 0;\r\n\tend = index - 1;\r\n\twhile (start < end)\r\n\t{\r\n\t\tint tmp = arr[start];\r\n\t\tarr[start] = arr[end];\r\n\t\tarr[end] = tmp;\r\n\t\tstart++;\r\n\t\tend--;\r\n\t}\r\n\tfor (int i = 0; i < index; ++i)\r\n\t\tprintf(\"%d \", *(arr + i));\r\n}\r\n//主函数\r\nint main() {\r\n\t\tint a[10] = {};\r\n\t\tint Asize, k;\r\n\t\tprintf(\"想输入几位数组？：\\n\");\r\n\t\tscanf_s(\"%d\", &Asize);\r\n\t\tprintf(\"请输入数组：\\n\");\r\n\t\tfor (int i = 0; i < Asize; i++) {\r\n\t\t\tscanf_s(\"%d\", &a[i]);\r\n\t\t}\r\n\t\tprintf(\"请输入0~10000的整数：\\n\");\r\n\t\tscanf_s(\"%d\", &k);\r\n\taddToArrayForm(a, Asize, k);\r\n\treturn 0;\r\n}\r\n//分为1.判断位数2.逐位相加3.进位4.越位5.逆序\r\n```\r\n**复杂度**\r\n\r\n- 时间复杂度 O(n)\r\n- 空间复杂度 O(n)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nanwy":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836213176","body":"思路\r\n1.各位相加，如果进位，将k加1，把相加后的数对10取余放入数组，最后反转数组\r\n\r\n代码（js）\r\n```\r\nvar addToArrayForm = function(num, k) {\r\n    let res = [],carry=0;\r\n    for(let i=num.length-1;i>=0;i--){\r\n        let sum = num[i] + k % 10\r\n        k = k / 10 | 0\r\n        if(sum > 9){\r\n            k++\r\n        }\r\n        res.push(sum % 10)\r\n    }\r\n    while(k != 0){\r\n        res.push(k % 10)\r\n        k = k / 10 | 0\r\n    }\r\n    return res.reverse()\r\n};\r\n```\r\n        \r\n复杂度\r\n时间复杂度：O（n）\r\n空间复杂度：O（n）"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"surahe":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836217045","body":"\r\n\r\n## 思路\r\n\r\n## 关键点\r\n\r\n-  将k 转换为数组 k_arr\r\n-  比较 k_arr 和 num 长度，将其中较长的一个的长度+1，定义为 max_length\r\n-  创建数组digit，长度为max_length，用来存储进位\r\n-  将 k_arr 和 num 长度补长到与 max_length相同\r\n-  从低位开始逐位计算，超过10则在digit 对应位置进1\r\n-  如果最高为是0，去除\r\n\r\n## 代码\r\n\r\n- 语言支持：JavaScript\r\n\r\nJavaScript Code:\r\n\r\n```JavaScript\r\nvar addToArrayForm = function (num, k) {\r\n  var result = []\r\n  var k_arr = k.toString().split('')\r\n  var max_length = num.length > k_arr.length ? num.length + 1 : k_arr.length + 1\r\n  var digit = Array(max_length).fill(0)\r\n  var now_res\r\n\r\n  for (var i = num.length; i < max_length; i++) {\r\n    num.unshift(0)\r\n  }\r\n  for (var i = k_arr.length; i < max_length; i++) {\r\n    k_arr.unshift(0)\r\n  }\r\n\r\n  for (var i = max_length - 1; i >= 0; i--) {\r\n    if (digit[i] + num[i] + +k_arr[i] >= 10) {\r\n      digit[i-1] = 1\r\n      now_res = digit[i] + num[i] + +k_arr[i] - 10\r\n    } else {\r\n      now_res = digit[i] + num[i] + +k_arr[i]\r\n    }\r\n    result.unshift(now_res)\r\n  }\r\n\r\n  if (result[0] === 0) {\r\n    result.shift()\r\n  } \r\n\r\n  return result\r\n};\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(Max(num, k)+1)$\r\n- 空间复杂度：$O(n)$\r\n\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Serrust":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836227745","body":"```import java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\n/*\r\n * @lc app=leetcode id=989 lang=java\r\n *\r\n * [989] Add to Array-Form of Integer\r\n */\r\n\r\n// @lc code=start\r\nclass Solution {\r\n    /**\r\n     * Explanation:\r\n     * create an arraylist to store the answer.\r\n     * loop starting from the last element of input,\r\n     * here i use an example:\r\n     * for 123 + 912, where 123 is the integer represented by A and 912 is K\r\n     * we start with [1, 2, 3+912]. \r\n     * Then we perform the addition 3+912, leaving 915. \r\n     * The 5 stays as the digit, while we 'carry' 910 into the next column which becomes 91.\r\n     * We repeat this process with [1, 2+91, 5]. \r\n     * We have 93, where 3 stays and 90 is carried over as 9. \r\n     * Again, we have [1+9, 3, 5] which transforms into [1, 0, 3, 5].\r\n     * Complexity Analysis:\r\n     * Todo: why?\r\n     * Time: O(max(N, log K)) where N is the length of A\r\n     * Space: O(max(N,log K))\r\n     * @param A\r\n     * @param K\r\n     * @return\r\n     */\r\n    public List<Integer> addToArrayForm(int[] A, int K) {\r\n        \r\n        int N = A.length;\r\n        int temp = K;\r\n        List<Integer> ans = new ArrayList<>();\r\n        \r\n        int i = N-1;\r\n        // Note: we are not sure if the integer that A represents is larger or k is larger\r\n        while (i >= 0 || temp > 0) {\r\n            // Note: we add this if condition because i can be negative if K is larger than the integer represented by A\r\n            if (i >= 0) {\r\n                temp += A[i];\r\n            }\r\n            ans.add(temp % 10);\r\n            temp /= 10;\r\n            i -= 1;\r\n        }\r\n        Collections.reverse(ans);\r\n\r\n        return ans;\r\n    }\r\n}\r\n// @lc code=end```\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cicihou":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836239329","body":"思路：\r\n将 array -> str -> int, 相加之后重新转换成array[int]\r\n\r\n代码：\r\n\r\n> class Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        # method 1 list iteration\r\n        # return [int(j) for j in str(int(''.join([str(i) for i in num])) + k)]\r\n\r\n        # method 2, same as method 1, use for-loop explicitly to analyze the complexity\r\n        # as following, the time complexity is O(n)\r\n        # the space complexity is O(1)\r\n        res = []\r\n        for i in num:\r\n            res.append(str(i))\r\n        res = str(int(''.join(res)) + k)\r\n        res = [int(i) for i in res]\r\n        return res\r\n\r\n\r\n\r\n复杂度分析：\r\n\r\n令 n 为数组长度。\r\n时间复杂度：O(n)\r\n空间复杂度：O(1)\r\n\r\n![Uploading image.png…]()\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"absent1353":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836244897","body":"### 思路：\r\n将list转成数值，求和之后，分别取余/取除数，然后倒序输出\r\n### 代码：\r\n```\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        res = 0\r\n        for n in num:\r\n            res = res * 10 + n \r\n        res += k\r\n        result = []\r\n        while(res>=0):\r\n            num = res%10\r\n            res/=10\r\n            result.append(num)\r\n        return result[::-1]\r\n```\r\n### 复杂度\r\n时间复杂度 O(n)\r\n空间复杂度 O(n)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aouos":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836268613","body":"## 思路：\r\n从数组尾部取值与 K 相加\r\n\r\n```js\r\nvar addToArrayForm = function(num, k) {\r\n  const ans = [];\r\n  let len = num.length;\r\n\r\n  for (let i = len - 1; i >= 0 || k > 0; i--) {\r\n    if (i >= 0) {\r\n      k += num[i];\r\n    }\r\n    ans.push(k % 10);\r\n    k = parseInt(k / 10);\r\n  }\r\n\r\n  return ans.reverse();\r\n};\r\n```\r\n\r\n- 时间复杂度 O(N)\r\n- 空间复杂度 O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangyi123456":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836270960","body":"## 题目思路\r\n1.拆开每一位，用进位相加\r\n2.当前位 = (A 的当前位 + B 的当前位 + 进位carry) % 10\r\n\r\n## 代码\r\n```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        int sum = 0, carry = 0;\r\n        int i = num.length-1;\r\n        List<Integer> res = new LinkedList<Integer>();\r\n        while(i>=0 || k>0){\r\n            int x = i>=0? num[i]:0;\r\n            int y = k>0?  k%10:0;\r\n            sum = x+y+carry;\r\n            carry = sum/10;\r\n            i -= 1;\r\n            k = k/10;\r\n            res.add(0,sum%10);\r\n        }\r\n        if(carry!=0) res.add(0,carry);\r\n        return res;\r\n    }\r\n}\r\n```\r\n## 复杂度分析\r\n时间复杂度 max(n,k) n为数组长度，k为数字位数\r\n空间复杂度 max(n,k) n为数组长度，k为数字位数"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lzcyx":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836272330","body":"# c++\r\n```\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n        vector<int>ans;int carry=0;\r\n        for(int i=num.size()-1;i>=0;i--)\r\n        {\r\n            int a=k%10;k/=10;\r\n            int b=(num[i]+a+carry)%10;\r\n            carry=(num[i]+a+carry)/10;\r\n            ans.push_back(b);\r\n        }\r\n        while(k>0||carry>0)\r\n        {   int b=k%10;k/=10;\r\n            ans.push_back((b+carry)%10);\r\n            carry=(b+carry)/10;\r\n        }\r\n        reverse(ans.begin(),ans.end());\r\n         return ans;\r\n    }\r\n};\r\n```"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"linzeliang1222":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836279098","body":"## 思路\r\n\r\n-   从最低位开始加，满10用carry进1，最后还要判断最终有没有进1位\r\n\r\n### 代码\r\n\r\n\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        ArrayList<Integer> res = new ArrayList<Integer>();\r\n        int n = num.length - 1;\r\n        int carry = 0;\r\n\r\n        while (n >= 0 || k != 0) {\r\n            int a = n < 0 ? 0 : num[n];\r\n            int b = k % 10;\r\n\r\n            int temp = (a + b + carry) % 10;\r\n            carry = (a+ b + carry) / 10;\r\n            res.add(temp);\r\n            n--;\r\n            k /= 10;\r\n        }\r\n        if (carry == 1) {\r\n            res.add(1);\r\n        }\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n}\r\n```\r\n\r\n### **复杂度分析**\r\n\r\n- 时间复杂度：$O(N)$\r\n- 空间复杂度：$O(N)$"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Yvonne1231-Wang":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836281956","body":"### 解题思路\r\n将数组num的最后一位从后往前与k从个位开始依次相加，若加起来后的总数小于10则直接推入栈中；若总数大于10，则将k的进位加1，将总数减去10以后推入栈中。\r\n##需要注意点：\r\n1.不能忘记k的位数或者加起来总数的位数大于原本的数组num的长度点情况，所以数组遍历结束还要判断k是否为0了，若没有，再将k依次推入；\r\n2.不要忘记反转数组，如果改成unshift()则不用；\r\n3.最开始想的办法是将num先转换成数字，与k相加后变成字符串再变成数组，但是忽略了num长度很长变成数字后再相加会溢出的情况。\r\n\r\n### 代码\r\n\r\n```javascript\r\n/**\r\n * @param {number[]} num\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = function(num, k) {\r\n    let a,res=[];\r\n    for(let i = num.length-1; i >= 0; i--)\r\n    {\r\n        a = num[i] + k % 10;\r\n        k = Math.floor(k/10);\r\n        if(a >= 10){\r\n            ++k;\r\n            a = a-10;\r\n        };\r\n        res.push(a);\r\n    }\r\n    while(k!=0){\r\n        res.push(k%10);\r\n        k = Math.floor(k/10);\r\n    }\r\n    \r\n    return res.reverse();\r\n};\r\n```\r\n\r\n### 复杂度分析\r\n时间复杂度：O(n)\r\n空间复杂度：O(n) ----只开辟了两个新数据，a和res，其中a是常量阶的，与数据规模无关。res是一个大小与n有关的数组，所以空间复杂度为O(n)\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Liuqibaa":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836300543","body":"C++\r\n\r\n### 思路\r\n\r\n将向量编程整数，然后相加，再变成向量\r\n\r\n### 代码\r\n\r\n\r\n```c\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n        int nums = 0;\r\n        int tens = 1;\r\n        vector<int> result;\r\n        for(int i = num.size() - 1; i >= 0; i --){\r\n            nums += num[i] * tens;\r\n            tens *= 10;\r\n        }\r\n        nums += k;\r\n        while(nums){\r\n            int num1 = nums % 10;\r\n            result.push_back(num1);\r\n            nums /= 10;\r\n        }\r\n        reverse(result.begin(), result.end());\r\n        return result;\r\n    }\r\n};\r\n\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(N)，其中 N 为数组长度。\r\n- 空间复杂度：O(N)\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sitequ":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836300870","body":"**语言：python3**\r\n\r\n### 思路\r\n1.整型数组转化字符数组，再化为非负整数\r\n2.与k相加\r\n3.数字还原成字符数组，再化为整型数组\r\n\r\n### 代码\r\n```\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        num = map(str, num)\r\n        str2int = int(''.join(num)) + k\r\n        Output = list(str(str2int))\r\n        for i in range(0,len(Output)):\r\n            Output[i] = int(Output[i])\r\n        return Output\r\n```\r\n### 复杂度分析\r\n时间复杂度O(n)\r\n空间复杂度O(n)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaotuanzi999":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836303348","body":"### 思路 \r\n首先，作为小白，我的第一思路就是将数组转换真正的值，然后与k相加，最后将相加的和转化为List。\r\n```\r\n public List<Integer> addToArrayForm(int[] num, int k) {\r\n        int lenth = num.length;\r\n       List<Integer> res = new ArrayList<>();\r\n       int sum=k;\r\n        int n=1;\r\n        for (int i = lenth-1; i>=0; i--){\r\n            sum+= n*num[i];\r\n            n*=10;\r\n        }\r\n        String temp = Integer.toString(sum);\r\n        for (int i = temp.length()-1; i>=0;i--){\r\n            res.add(Integer.parseInt(temp.substring(i,i+1)));\r\n        }\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n```\r\n\r\n然而结果不尽人意。正常的数字可以得到正确的结果。但当数字特别大的时候会出现下面的情况，我还debug了查看。之后查询才知道是溢出了，超出int的精度范围。\r\n\r\n\r\n从后往前遍历数组，就是从数组的低位开始。与k进行相加，并对k与10取余，得到最低位。然后k%10得到进位。\r\n中间存在num的数组整体的小于k的情况，所以需要对i进行判断。\r\n### 代码\r\n```\r\nclass Solution {\r\n      public List<Integer> addToArrayForm(int[] num, int k) {\r\n        int lenth = num.length;\r\n        List<Integer> res = new ArrayList<>();\r\n        for (int i = lenth-1; i>=0||k>0; i--,k/=10){\r\n            // 如果num数组存在数组，因为存在k>num的情况\r\n            if (i>=0){\r\n                k+=num[i];\r\n            }\r\n            res.add(k%10);\r\n        }\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n}\r\n```"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jmaStella":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836305778","body":"## 解题思路\r\n尝试数字全拿出来然后+K再放回去，结果发现lc有很大的test case，可能就是故意不想让你用这种方法，然后 重新尝试，先把K加到最后一个A的数字，然后取%10的值，循环下去。写了第二遍了还是不能一遍写出来。。。大无语时间发生了。\r\n\r\n\r\n\r\n## 代码\r\n`\r\n    public List<Integer> addToArrayForm(int[] A, int K) {\r\n\r\n    List<Integer> newA = new ArrayList<>();\r\n\r\n    int temp = K;\r\n\r\n    for(int i = A.length-1; i>=0; i--){\r\n\r\n        temp = temp+ A[i];\r\n        newA.add(0, temp%10);\r\n        temp=temp/10;\r\n    }\r\n    while(temp !=0){\r\n        newA.add(0, temp%10);\r\n        temp=temp/10;\r\n    }\r\n    return newA;\r\n    }\r\n`\r\n以为会变得更快，结果并没有\r\n`\r\n    public List<Integer> addToArrayForm(int[] A, int K) {\r\n\r\n    List<Integer> newA = new ArrayList<>();\r\n\r\n    int temp = K;\r\n    int index = A.length-1;\r\n    while(temp !=0 || index >=0){\r\n        if(index >=0){\r\n            temp = temp+ A[index];\r\n        }    \r\n        newA.add(0, temp%10);\r\n        temp=temp/10;\r\n        index --;\r\n    }\r\n\r\n    return newA;\r\n    }\r\n`\r\n\r\n## 复杂度分析\r\n时间复杂度O(max(n, log(K)))\r\n空间复杂度O(max(n, log(K)))\r\n\r\n\r\n喜欢解析里一个人的总结，mark一下。\r\n\r\nwhile ( A 没完 || B 没完)\r\n    A 的当前位\r\n    B 的当前位\r\n\r\n    和 = A 的当前位 + B 的当前位 + 进位carry\r\n\r\n    当前位 = 和 % 10;\r\n    进位 = 和 / 10;\r\n\r\n判断还有进位吗\r\n\r\n作者：lilyunoke\r\n链接：https://leetcode-cn.com/problems/add-to-array-form-of-integer/solution/989-ji-zhu-zhe-ge-jia-fa-mo-ban-miao-sha-8y9r/\r\n来源：力扣（LeetCode）\r\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liucy0417":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836309752","body":"\r\n## 题目地址(989. 数组形式的整数加法)\r\n\r\nhttps://leetcode-cn.com/problems/add-to-array-form-of-integer/\r\n\r\n## 题目描述\r\n\r\n```\r\n对于非负整数 X 而言，X 的数组形式是每位数字按从左到右的顺序形成的数组。例如，如果 X = 1231，那么其数组形式为 [1,2,3,1]。\r\n\r\n给定非负整数 X 的数组形式 A，返回整数 X+K 的数组形式。\r\n\r\n \r\n\r\n示例 1：\r\n\r\n输入：A = [1,2,0,0], K = 34\r\n输出：[1,2,3,4]\r\n解释：1200 + 34 = 1234\r\n\r\n\r\n示例 2：\r\n\r\n输入：A = [2,7,4], K = 181\r\n输出：[4,5,5]\r\n解释：274 + 181 = 455\r\n\r\n\r\n示例 3：\r\n\r\n输入：A = [2,1,5], K = 806\r\n输出：[1,0,2,1]\r\n解释：215 + 806 = 1021\r\n\r\n\r\n示例 4：\r\n\r\n输入：A = [9,9,9,9,9,9,9,9,9,9], K = 1\r\n输出：[1,0,0,0,0,0,0,0,0,0,0]\r\n解释：9999999999 + 1 = 10000000000\r\n\r\n\r\n \r\n\r\n提示：\r\n\r\n1 <= A.length <= 10000\r\n0 <= A[i] <= 9\r\n0 <= K <= 10000\r\n如果 A.length > 1，那么 A[0] != 0\r\n```\r\n\r\n## 前置知识\r\n\r\n- 数组\r\n\r\n## 公司\r\n\r\n- 暂无\r\n\r\n## 思路\r\n\r\n- 从低位相加，组成一个新的数组\r\n\r\n## 关键点\r\n\r\n-  进位问题\r\n\r\n## 代码\r\n\r\n- 语言支持：Java\r\n\r\nJava Code:\r\n\r\n```java\r\n\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        int l = num.length;\r\n        int sum = 0;\r\n        List<Integer> arr = new ArrayList<>();\r\n        for(int i = l - 1; i>=0; i--) {\r\n            sum = num[i] + k % 10;\r\n            if(sum >= 10) {\r\n                sum =sum - 10;\r\n                k = k + 10;\r\n            }\r\n            arr.add(sum);\r\n            k = k / 10;\r\n        }\r\n        while(k != 0) {\r\n            arr.add(k % 10);\r\n            k = k / 10;\r\n        }\r\n        Collections.reverse(arr);\r\n        return arr; \r\n\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。一个for循环，时间复杂度：$O(n)$，开辟了一个新的数组内存，空间复杂度：$O(n)$。\r\n\r\n- 时间复杂度：$O(n)$\r\n- 空间复杂度：$O(n)$\r\n\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"javanlu123":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836346588","body":"# 思路\r\n1.对每个分位进行叠加（注意进位以及分位存在判断的条件）\r\n2.最后一个进位的判断\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        // 这是一个典型的使用数组（字符串）的加法魔板\r\n        // 使用双向链表储存结果集\r\n        LinkedList<Integer> res = new LinkedList<>();\r\n        int len = num.length - 1;\r\n        // 定义进位,初始默认为0\r\n        int carry = 0;\r\n        // 进行循环判断\r\n        // 数组下标以0开始，k以0为分界点\r\n        while(len>=0||k!=0){\r\n            // 定义数组num和k 的每个分位\r\n            int x = len>=0 ? num[len] : 0;\r\n            int y = k!=0 ? k%10 : 0;\r\n            int sum  = x + y + carry;\r\n            // 存入双向链表中\r\n            res.addFirst(sum % 10);\r\n            // 更新进位\r\n            carry = sum / 10;\r\n            // 分位进行移动\r\n            len--;\r\n            k /=10;\r\n        }\r\n        // 若最后的进位不为0，则头部补充\r\n        if(carry!=0){\r\n            res.addFirst(carry);\r\n        }\r\n        // 返回结果集\r\n        return res;\r\n    }\r\n}\r\n```"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"BryanMiracle":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836356594","body":"**思路**\r\n新建一个链表，存储各位相加的结果。从低位到高位，逐一相加，并将结果返回\r\n\r\n**代码**\r\n```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> res=new ArrayList<Integer>();\r\n        int n=num.length;\r\n        int sum=0,curr=0,i=n-1;\r\n        while(i>=0 || k!=0){\r\n            int x=i>=0?num[i]:0;\r\n            int y=k!=0?k%10:0;\r\n            sum=x+y+curr;\r\n            curr=sum/10;\r\n            k=k/10;\r\n            i--;\r\n            res.add(0,sum%10);\r\n        }\r\n        if(curr!=0){\r\n            res.add(0,curr);\r\n        }\r\n        return res;\r\n\r\n    }\r\n}\r\n```\r\n**复杂度分析**\r\n时间复杂度：O(N)\r\n空间复杂度：O(N)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"DoubleW2w":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836444832","body":"emmmmm，加油，这次看了答案，下次争取不看答案！！！！\r\n不知道空间复杂度怎么分析，就删除了。\r\n## 思路\r\n\r\n加法主要就是判断进位的问题。相加的选择，我们可以从低位往高位相加\r\n\r\n1. 如果没有产生进位，那什么情况才停止相加呢？比如 $123+23=146$和 $123+1234=1367$\r\n2. 如果产生进位，但没有发生数组越界的情况，比如$123+37=160 $和$123+1137=1260$\r\n3. 如果产生进位，但发生了数组越界呢？比如$999+1=1000$\r\n\r\n---\r\n\r\n第一种情况：当我们低位往高位相加的时候，`k=0`的时候或者`遍历完num`，我们就停止了相加。\r\n\r\n第二种情况：就在第一种情况的基础上，在中间增加个进位的处理，其停止的情况还是`k=0`的时候或者`遍历完num`。\r\n\r\n第三种情况：就在第二种情况的基础上，最后增加高位还有进位的处理情况。而停止还是一样的\r\n\r\n因此总结一下：\r\n\r\n来自题解区的一位大佬\r\n\r\n```java\r\n<公式>\r\n当前位 = (A 的当前位 + B 的当前位 + 进位carry) % 10\r\n\r\n<加法模板>    \r\nwhile ( A 没完 || B 没完)\r\n    A 的当前位\r\n    B 的当前位\r\n\r\n    和 = A 的当前位 + B 的当前位 + 进位carry\r\n\r\n    当前位 = 和 % 10;\r\n    进位 = 和 / 10;\r\n\r\n判断还有进位吗\r\n```\r\n\r\n\r\n\r\n## 代码\r\n\r\n- 语言支持：Java\r\n\r\nJava Code1:\r\n\r\n```java\r\n//官方题解\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        //从低位往高位相加\r\n        int n = num.length;\r\n        List<Integer> res = new ArrayList<>();\r\n        //遍历num，但k也在发生变化\r\n        for(int i = n-1;i >= 0; i--){\r\n            int sum = num[i] + k%10;\r\n            k /=10;\r\n            if(sum >= 10){\r\n                //把进位放在k上\r\n                k++;\r\n                sum -= 10;\r\n            }\r\n            res.add(sum);\r\n        }\r\n        //如果num的位数>k的位数，此时的k是为0或者是最高位的进位\r\n        for (; k > 0; k /= 10) {\r\n            res.add(k % 10);\r\n        }\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n}\r\n```\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(n)$\r\n\r\nJava Code2:\r\n\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k){\r\n        //当前位 = (A 的当前位 + B 的当前位 + 进位carry) % 10\r\n        int n = num.length;\r\n        List<Integer> res = new ArrayList<>();\r\n        int carry =0, sum =0,index = n-1;\r\n        while(index >=0 || k!=0){\r\n            // num的当前位\r\n            int x = index >=0 ? num[index] : 0;\r\n            // K的当前位\r\n            int y = k != 0 ? k%10 : 0;\r\n\r\n            sum = x + y + carry;\r\n            carry = sum / 10;\r\n            k = k / 10;\r\n            index --;\r\n            res.add(sum % 10);\r\n        }\r\n        if (carry != 0){\r\n            res.add(carry);\r\n        }\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n}\r\n```\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(n)$"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ARe99s":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836448740","body":"**思路**\r\n直接把K加到A上\r\n**代码 python**\r\n```\r\nclass Solution:\r\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\r\n        i = len(A) - 1\r\n        while K:\r\n            A[i] += K\r\n            K, A[i] = A[i] // 10, A[i] % 10\r\n            i -= 1\r\n            if i < 0 and K:\r\n                A.insert(0,0)\r\n                i = 0\r\n        return A\r\n```\r\n**时间复杂度**\r\nO(n)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"FontEndArt":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836454805","body":"\r\n## 题目地址(989. 数组形式的整数加法)\r\n\r\nhttps://leetcode-cn.com/problems/add-to-array-form-of-integer/\r\n\r\n## 题目描述\r\n\r\n```\r\n对于非负整数 X 而言，X 的数组形式是每位数字按从左到右的顺序形成的数组。例如，如果 X = 1231，那么其数组形式为 [1,2,3,1]。\r\n\r\n给定非负整数 X 的数组形式 A，返回整数 X+K 的数组形式。\r\n\r\n \r\n\r\n示例 1：\r\n\r\n输入：A = [1,2,0,0], K = 34\r\n输出：[1,2,3,4]\r\n解释：1200 + 34 = 1234\r\n\r\n\r\n示例 2：\r\n\r\n输入：A = [2,7,4], K = 181\r\n输出：[4,5,5]\r\n解释：274 + 181 = 455\r\n\r\n\r\n示例 3：\r\n\r\n输入：A = [2,1,5], K = 806\r\n输出：[1,0,2,1]\r\n解释：215 + 806 = 1021\r\n\r\n\r\n示例 4：\r\n\r\n输入：A = [9,9,9,9,9,9,9,9,9,9], K = 1\r\n输出：[1,0,0,0,0,0,0,0,0,0,0]\r\n解释：9999999999 + 1 = 10000000000\r\n\r\n\r\n \r\n\r\n提示：\r\n\r\n1 <= A.length <= 10000\r\n0 <= A[i] <= 9\r\n0 <= K <= 10000\r\n如果 A.length > 1，那么 A[0] != 0\r\n```\r\n\r\n## 思路\r\n循环判断k，k存在即代表还需要进行加法计算，每次加k的个数位，然后k抹去个数位的值，最后并判断是否有进一，有则k++。\r\n\r\n如果超出num的长度则使用unshift在数组首位增加。（其他语言如果没有动态数组的，可能需要预先申请足够的空间）\r\n\r\n## 关键点\r\n\r\n-  进一位的处理\r\n\r\n## 代码\r\n\r\n- 语言支持：JavaScript\r\n\r\nJavaScript Code:\r\n\r\n```javascript\r\n\r\n/**\r\n * @param {number[]} num\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = function (num, k) {\r\n    let i = num.length - 1\r\n    while (k > 0) {\r\n        let tmp = k % 10;\r\n        k = Math.floor((k - tmp) / 10)\r\n        if (i < 0) {\r\n            num.unshift(tmp)\r\n            // 注意是continue： [0], 10000\r\n            continue\r\n        }\r\n        // 注意是>=而不是>\r\n        if ((num[i] + tmp) >= 10) {\r\n            k++\r\n        }\r\n        num[i] = (num[i] + tmp) % 10\r\n        i--\r\n    }\r\n    return num\r\n};\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(n)$\r\n- 空间复杂度：$O(1)$\r\n\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Siomarry":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836474356","body":"- 思路\r\n每次取出K的最后一位以及数组的最后一位进行相加，并且依次进位相加.\r\n\r\n- 代码\r\n```c++\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n        //建立一个vector<int> K的数组，然后两个vector进行相加.\r\n        queue<int> Kdigit;\r\n        while(k){\r\n            Kdigit.push(k % 10);k = k / 10;\r\n        }\r\n        //第二步，将栈中的元素和num进行相加.\r\n        deque<int> ans;int endpoint = ans.size() - 1;\r\n        //设置一个最大长度的ans.\r\n        int numpoint = num.size() - 1;int plus = 0;\r\n        while(!Kdigit.empty() && numpoint >= 0){\r\n\r\n            ans.push_front((plus + Kdigit.front() + num[numpoint]) % 10);\r\n            plus = (plus + Kdigit.front() + num[numpoint]) / 10;\r\n            Kdigit.pop();numpoint--;endpoint--;\r\n        }\r\n        //结束时判断最后的条件.\r\n        while(!Kdigit.empty()){  //若数字不为空\r\n            ans.push_front((plus + Kdigit.front()) % 10);\r\n            plus = (plus + Kdigit.front()) / 10;\r\n            Kdigit.pop();\r\n        }\r\n\r\n        while(numpoint >= 0){  //若原数组不为空\r\n            ans.push_front((plus + num[numpoint]) % 10);\r\n            plus = (plus + num[numpoint]) / 10;\r\n            numpoint--;\r\n        }\r\n        if(plus)\r\n            ans.push_front(plus);\r\n\r\n        vector<int> result(ans.begin(),ans.end());\r\n        return result;\r\n    }\r\n};\r\n```\r\n- 时间复杂度\r\n    O(max(n，logk))\r\n\r\n- 空间复杂度\r\n    O(max(n,logk))\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miqpalzm":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836476818","body":"public class Solution {\r\n    public IList<int> AddToArrayForm(int[] num, int k) {\r\n        var kLen = k.ToString().Length;\r\n            int[] kArr = new int[kLen];\r\n            for (var i = kLen - 1; i >= 0; i--)\r\n            {\r\n                if (k / 10 > 0)\r\n                {\r\n                    kArr[i] = k % 10;\r\n                    k = k / 10;\r\n                }\r\n                else\r\n                {\r\n                    kArr[i] = k;\r\n                }\r\n            }\r\n\r\n            var addExtra = false;\r\n            var nLen = num.Length;\r\n            var list = new List<int>();\r\n            for (int i = nLen - 1, j = kLen - 1; i >= 0 || j >= 0; i--, j--)\r\n            {\r\n                var nValue = (i > nLen - 1 || i < 0) ? 0 : num[i];\r\n                var kValue = (j > kLen - 1 || j < 0) ? 0 : kArr[j];\r\n                var sum = nValue + kValue + (addExtra ? 1 : 0);\r\n                if (sum >= 10)\r\n                {\r\n                    addExtra = true;\r\n                    sum = sum % 10;\r\n                }\r\n                else\r\n                {\r\n                    addExtra = false;\r\n                }\r\n\r\n                list.Add(sum);\r\n            }\r\n\r\n            if (addExtra)\r\n            {\r\n                list.Add(1);\r\n            }\r\n            list.Reverse();\r\n\r\n            return list;\r\n    }\r\n}"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"15399618796":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836482820","body":"思路：逐位相加再插入到一个新的数组中\r\n\r\n`class Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n       vector<int> res;\r\n       int a=0,sum=0,b=0;\r\n       for(int i=num.size()-1;i>=0;i--){\r\n           a=k%10;\r\n           k/=10;\r\n           sum=num[i]+a;\r\n           if(sum>=10){\r\n               sum-=10;\r\n               k++;\r\n           }\r\n           res.push_back(sum);\r\n       }\r\n       while(k){\r\n           b=k%10;\r\n           k/=10;\r\n           res.push_back(b);\r\n       }\r\n       reverse(res.begin(),res.end());\r\n       \r\n       return res;\r\n    }\r\n};`\r\n\r\n时间复杂度：O(n)\r\n空间复杂度：O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"st2yang":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836486673","body":"## 思路\r\n从右到左低位循环num，将其每一位与k相加，并依次进位。如果循环完k还有剩，要记得加上。\r\n\r\n## 代码\r\n- python\r\n\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        res = []\r\n        for i in reversed(range(len(num))):\r\n            sum_ = num[i] + k\r\n            k = sum_ // 10\r\n            res.append(sum_ % 10)\r\n        res.reverse()\r\n        if k:\r\n            res = list(map(int, str(k))) + res\r\n        return res\r\n```\r\n\r\n## 复杂度\r\n- time: O(max(n，k))\r\n- space: O(max(n，k))"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Cartie-ZhouMo":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836492706","body":"### 思路\r\n从个位加起，若位数超出原数组，需要进位。\r\n\r\n### 代码\r\n\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        l = len(num)\r\n        for i in range(l-1, -1, -1):\r\n            a = num[i] + k\r\n            k, num[i] = a // 10, a % 10\r\n        arr = []\r\n        while k:\r\n            arr = [k % 10] + arr\r\n            k = k // 10\r\n        return arr + num\r\n```\r\n### 复杂度分析\r\n时间：O(N)\r\n空间：O(N)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mystoryshine":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836511738","body":"### 思路\r\n\r\n- 用空字符串拼接输入数组\r\n- 转化为整形相加\r\n- 最后再转化为字符串遍历输出\r\n\r\n### 代码\r\n\r\n\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        tmp = ''\r\n        for n in num:\r\n            tmp += str(n)\r\n        res_int = int(tmp) + k\r\n        res = [int(i) for i in str(res_int)]\r\n        return res\r\n\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(N)，其中 N 为数组长度。\r\n- 空间复杂度：O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ezrealcong":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836567186","body":"### **思路**\r\nC实现\r\n- 申请A.length+5个元素的数组空间p[]\r\n- 从后往前遍历数组p[]，计算最低位ktmp=k%10;更新kk=(int)(k/10),在遍历长度小于A.length时，p[i]=nums[i]+ktmp+进位ctmp,大于时p[i]=ktmp+ctmp\r\n- 过程中计数，直到发现nums遍历完，进位为0，k更新为0，那么计数器就是要返回的位数，然后将p指向数组对应位置上返回即可\r\n### **代码**\r\n    \r\n    int* addToArrayForm(int* num, int numSize, int k, int* returnSize){\r\n        int* p = calloc(numSize+5,sizeof(int));\r\n        int j=numSize-1;\r\n        int ktmp;//用来保存模10的值（某一位）\r\n        int atmp;//按位加未处理进位值\r\n        int ctmp=0;//保存进位\r\n        int b=0;\r\n        for(int i=numSize+4;i>=0;i--){\r\n            if(j<0&&k==0&&ctmp==0)\r\n                b++;\r\n            ktmp=k%10;\r\n            k=(int)(k/10);\r\n            if(j>=0)\r\n                atmp=num[j]+ctmp+ktmp;\r\n            else\r\n                {atmp=ctmp+ktmp;\r\n                }\r\n            p[i]=atmp%10;\r\n            ctmp=(int)(atmp/10);\r\n            j-=1;      \r\n        }    \r\n        *returnSize=numSize+5-b;\r\n        return p+b;\r\n    }\r\n### **复杂度分析**\r\n\r\n- 时间复杂度：只遍历了一遍P[]，复杂度为O(N)\r\n\r\n- 空间复杂度：基本是用于返回的空间，O(N)\r\n\r\n> "},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Huzhixin00":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836573445","body":"### 思路\r\n1. 按照最自然的想法，应该是将K的各位切分出来，即：将int类型的K转化为各位为int类型的数组，然后将K的对应位与给定数组的对应位进行相加，并考虑进位的情况。\r\n2. 上述想法需要对K进行处理，而且处理进位的逻辑会影响到下一轮更高位的相加处理，所以应考虑更为通用的算法。\r\n3. 在上述过程中，唯一不能省略的就是进位过程，因为作为”必要项“的进位过程如果可以和相加过程相结合，自然可以得出相对通用的算法。\r\n4. 如果要将进位过程与相加过程结合，那么就应该是”依次从低位开始加起，K与个位相加的结果对10取余，即个位的最终结果，而是否向上进位，则取决于k与个位相加的结果除以十，是否大于0（整数/10即意味着求高1位数的结果，因为小数点后的数字被截掉了）“。\r\n5. 反复进行第4步，即每除1次10，即求得都是K累加和的高一次幂，只要K的累加和除10结果不为零，或是数组的位数没有加到最高位，这样的循环就不会停止。\r\n\r\n### 代码（Java）\r\n```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> arr = new ArrayList<>();\r\n        for (int i = num.length - 1; i >= 0 || k > 0; i--, k = k / 10) {\r\n            if (i >= 0) {\r\n                k = k + num[i];\r\n            }\r\n            arr.add(k % 10);\r\n        }\r\n        Collections.reverse(arr);\r\n        return arr;\r\n    }\r\n}\r\n```\r\n### 复杂度\r\n时间复杂度：O(max(logK,num.length)) \r\n循环次数取决于k和数组长度的最大值，但比较值得注意的是，当K>0，但i<0时，意味着数组的最高位已经没有了，此时应该出现数组越界异常，只不过leetcode只判定到不越界为止，所以就没有考虑越界的问题。\r\n\r\n空间复杂度：O(1)\r\n没有用到额外的空间，所以空间复杂度为常数\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Gentlemancj":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836575050","body":"```var addToArrayForm = function(num, k) {\r\n  let isOverflow = false, index = num.length - 1, res = [];\r\n  while(index > -1 || k) {\r\n     const num1 = num[index] || 0, num2 = k % 10;\r\n     let sum = num1 + num2;\r\n     if(isOverflow) {\r\n          sum = sum + 1;\r\n     }\r\n      isOverflow = sum >= 10;\r\n      res.unshift(sum % 10);\r\n      k = (k / 10) | 0;\r\n      index--;\r\n      \r\n  }\r\n  if(isOverflow) res.unshift(1);\r\n  return res;\r\n};\r\n**复杂度分析**\r\n\r\n- 空间复杂度O(n)\r\n- 时间复杂度O(n) "},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"LiangZheCoder":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836576433","body":"思路：模拟进位加法，同样适用于链表\r\n```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        //用于标识数组的位置\r\n        int len = num.length - 1;\r\n        //用于标识是否发生进位\r\n        int isCarry = 0;\r\n        //统计每一轮的值，提前创建，增加效率\r\n        int val = 0;\r\n        //用于保存结果，使用头插法插入链表\r\n        List<Integer> res = new LinkedList<>();\r\n        while(len > -1 || k > 0){\r\n            if(k > 0){\r\n                val = k % 10;\r\n                k = k / 10;\r\n            }\r\n            if(len > -1){\r\n                val += num[len];\r\n            }\r\n            val += isCarry;\r\n            isCarry = val / 10;\r\n            val = val % 10;\r\n            res.add(0,val);\r\n            len--;\r\n            val = 0;\r\n        }\r\n        if(isCarry > 0){\r\n            res.add(0,1);\r\n        }\r\n        return res;\r\n    }\r\n}\r\n```\r\n\r\n\r\n时间复杂度O(n)\r\n空间复杂度O(n)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"w-z-hub":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836584325","body":"语言：java\r\n\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> ans = new ArrayList<>();\r\n\r\n        for(int i=num.length-1; i>=0; i--){\r\n \r\n            int temp = num[i] + k;\r\n            int temp1 = temp%10;\r\n            ans.add(0, temp1);\r\n            k= temp/10;\r\n            \r\n        }\r\n\r\n        while(k>0){\r\n            ans.add(0, k%10);\r\n            k/=10;\r\n        }\r\n\r\n        return ans;\r\n    }\r\n}"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Kuroky-Chen":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836597120","body":"#### 思路：逐位将数字加一起\r\n代码：javascript\r\n```\r\nvar addToArrayForm = function(num, k) {\r\n    const res = [];\r\n    const n = num.length;\r\n    for (let i = n - 1; i >= 0; --i) {\r\n        let sum = num[i] + k % 10;\r\n        k = Math.floor(k / 10);\r\n        if (sum >= 10) {\r\n            k++;\r\n            sum -= 10;\r\n        }\r\n        res.push(sum);\r\n    }\r\n    for (; k > 0; k = Math.floor(k / 10)) {\r\n        res.push(k % 10);\r\n    }\r\n    res.reverse();\r\n    return res;\r\n};\r\n\r\n```"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yulecc":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836599276","body":"思路\r\n遍历数组,不断做空k,从k的个位数开始提取 , 和数组最后一项开始相加 , 一直往前 , 和大于10, k就加1, 最后遍历k,最后反转数组\r\n\r\n关键点\r\n代码\r\n语言支持：JavaScript\r\nJavaScript Code:\r\n\r\n\r\n/**\r\n * @param {number[]} num\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = function(num, k) {\r\n    const res = [];\r\n    const n = num.length;\r\n    for (let i = n - 1; i >= 0; --i) {\r\n        let sum = num[i] + k % 10;\r\n        k = Math.floor(k / 10);\r\n        if (sum >= 10) {\r\n            k++;\r\n            sum -= 10;\r\n        }\r\n        res.push(sum);\r\n    }\r\n    for (; k > 0; k = Math.floor(k / 10)) {\r\n        res.push(k % 10);\r\n    }\r\n    res.reverse();\r\n    return res;\r\n};\r\n\r\n\r\n复杂度分析\r\n\r\n令 n 为数组长度。\r\n\r\n时间复杂度：O(n)O(n)\r\n空间复杂度：O(1)O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fyyjyx-github":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836606794","body":"### 思路\r\n\r\n先将整数数组A转为一个字符串，再将字符串转为数值类型后与整数K相加，再将得到的数值结果转为int类型的数组。\r\n\r\n### 代码\r\n\r\nPython3\r\n\r\n```\r\nclass Solution:\r\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\r\n        # 先将整数数组A转为一个字符串，再将字符串转为数值类型后与整数K相加\r\n        res_num = eval(''.join(map(str, A))) + K\r\n        # 将得到的数值结果先转为字符串，再将其转为int类型的数组\r\n        return list(map(int, str(res_num)))\r\n```\r\n\r\n### 复杂度分析\r\n\r\n- 时间复杂度：O(n)，其中 n 为数组的长度。\r\n- 空间复杂度：O(1)。"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"YuanWenLai":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836610752","body":"### 思路 \r\n \r\n数组的数值操作\r\n1、倒序遍历数组\r\n2、用一个进位数来保存溢出状态carryNum\r\n3、k值每次使用后剔除个位数的值\r\n \r\n \r\n### 代码 \r\n### js\r\n \r\n``` js\r\n \r\n    let len = num.length - 1\r\n    // 用一个进位数来保存上一位的溢出情况\r\n    let carryNum = 0\r\n    let number = []\r\n    while(len >= 0 || k!=0) {\r\n        let sum = carryNum\r\n        if(len >= 0) {\r\n            sum += num[len]\r\n            len--\r\n        }\r\n        if(k!=0) {\r\n            sum += k%10\r\n            // 剔除k的个位\r\n            k = Math.floor(k/10)\r\n        }\r\n        // 保存新的进位数\r\n        carryNum = Math.floor(sum/10)\r\n        number.unshift(sum % 10)\r\n    }\r\n    if(carryNum > 0) {\r\n        number.unshift(carryNum)\r\n    }\r\n    return number\r\n \r\n``` \r\n \r\n**复杂度分析** - 时间复杂度：O(N)，其中 N 为数组⻓度。 - 空间复杂度：O（N）"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mengwwww":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836631365","body":"```\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n        queue<int> temp;\r\n        stack<int> res;\r\n        while(k!=0){\r\n            temp.push(k%10);\r\n            k = k/10;\r\n        }\r\n        int i=num.size()-1;\r\n        int jinwei = 0;\r\n        while(i>=0 && !temp.empty()){\r\n            res.push((num[i]+temp.front()+jinwei)%10);\r\n            jinwei = (num[i]+temp.front()+jinwei)/10;\r\n            i--;\r\n            temp.pop();\r\n        }\r\n        if(i>=0){\r\n            for(int k = i;k>=0;k--){\r\n                res.push((num[k]+jinwei)%10);\r\n                jinwei = (num[k]+jinwei)/10;\r\n            }\r\n        }\r\n        if(!temp.empty()){\r\n            while(!temp.empty()){\r\n                res.push((temp.front()+jinwei)%10);\r\n                jinwei = (temp.front()+jinwei)/10;\r\n                temp.pop();\r\n            }\r\n            \r\n        }\r\n        if(jinwei>0){\r\n            res.push(jinwei);\r\n        }\r\n        vector<int> m;\r\n        while(!res.empty()){\r\n            m.push_back(res.top());\r\n            res.pop();\r\n        }\r\n        return m;\r\n    }\r\n};\r\n```"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"JohnVSD":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836632025","body":"## 思路\r\n\r\n参考了官方题解。\r\n\r\n从低位向高位依次计算。例如：123+912，计算过程是 3+2，2+1，1+9 可以得出结果为 1035；可以转换为如下代码：\r\n\r\n## 代码\r\nJavaScript\r\n\r\n```javascript\r\nvar addToArrayForm = function(num, k) {\r\n    let res = [];\r\n    let n = num.length;\r\n    \r\n    for (let i = n - 1; i>=0; i--) {\r\n        // 利用取余操作，取出k值最后一位进行加运算\r\n        let sum = num[i] + k % 10;\r\n        // 利用向下取整的方式，去掉k最后一位数，依次计算\r\n        k = Math.floor(k / 10);\r\n        \r\n        if (sum >= 10) {\r\n            k++;\r\n            sum -= 10;\r\n        }\r\n        \r\n        res.push(sum);\r\n    }\r\n    \r\n    for (; k > 0; k = Math.floor(k / 10)) {\r\n        res.push(k % 10);\r\n    }\r\n    \r\n    res.revers();\r\n    \r\n    return res;\r\n}\r\n```\r\n\r\n## 复杂度分析\r\n* 时间复杂度：O(max(n, log k))\r\n* 空间复杂度：O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"QiZhongdd":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836634467","body":"思路\r\n数组的数值操作\r\n1：新建一个数组用于存储变量\r\n2:倒序遍历数组，每个值与K的余数相加，如果和小于0，那么push这个和，如果大于0，那么push该和的个位数，K为十位数。\r\n3：依次遍历，重复第一步骤，等到遍历完后，如果k继续大于0,那么依次将k的值一个个添加进res数组。\r\n4：对结果进行翻转得到数字\r\n\r\nfunction add(num, k) {\r\n    const res = [];\r\n    const n = num.length;\r\n    for (let i = n - 1; i >= 0; --i) {\r\n        let sum = num[i] + k % 10;\r\n        k = Math.floor(k / 10);\r\n        if (sum >= 10) {\r\n            k++;\r\n            sum -= 10;\r\n        }\r\n        res.push(sum);\r\n    }\r\n    for (; k > 0; k = Math.floor(k / 10)) {\r\n        res.push(k % 10);\r\n    }\r\n    res.reverse();\r\n    return res;\r\n};\r\n\r\n复杂度分析\r\n时间复杂度：O(n)\r\n空间复杂度：O(n)\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"LS-King":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836635602","body":"### 思路\r\n\r\n重点关注进位：\r\n\r\n1. 设置中间变量digit，存放数字k、数组num和前位进位到该数位值的和（可以大于9），模10之后作为新的该数位数值，除10后的进位进入下层循环\r\n2. 对于最高位，需要考虑进位的位数增加带来的数组长度改变的问题，设置判断条件插入新的最高位，同时注意下标的改变\r\n\r\n### 代码\r\nC++\r\n```c++\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n        int length = num.size();\r\n        int index = length;\r\n        int digit = 0;\r\n        while (k != 0 || digit != 0) {\r\n            //如果上一轮循环中已更新到num最高位，则在前面添加一个数位，将其值置为0\r\n            if (index == 0) {\r\n                num.insert(num.begin(), 0);\r\n            //下标迭代，每层循环向高位移动1位\r\n            } else {\r\n                index -= 1;\r\n            }\r\n            //上层循环的进位加上本轮循环对应数位上的值构成新的待定数位新值（可能超过9）\r\n            digit += k % 10;\r\n            //k去掉最后一位，等待下一轮循环\r\n            k /= 10;\r\n            //相同数位上数字相加（可能超过9）\r\n            digit += num[index];\r\n            //取个位部分作为该数位的新值\r\n            num[index] = digit % 10;\r\n            //将超过9的部分留到下一次循环\r\n            digit /= 10;\r\n        }\r\n        return num;\r\n    }\r\n};\r\n```\r\n\r\n**复杂度分析**\r\n\r\n- 时间复杂度：O(N)，其中 N 为数组长度。\r\n- 空间复杂度：O(1)，使用传进来的源数组num的空间。\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"heartinn":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836635929","body":"思路\r\n列表转数字直接相加再转回列表\r\n\r\n代码\r\nPython3\r\n\r\nclass Solution:\r\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\r\n        return map(int,str(int(''.join(map(str,A))) + K))\r\n\r\n时间复杂度：O(n)\r\n空间复杂度：O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"UCASHurui":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836637454","body":"\r\n## 题目地址(989. 数组形式的整数加法)\r\n\r\nhttps://leetcode-cn.com/problems/add-to-array-form-of-integer/\r\n\r\n## 思路\r\n先把数组A扩展到和K相加后可能的最长长度，然后模拟加法，每次取K的最低位和A中对应位以及进位相加，然后更新进位并将K除10后取整。（其实也可以把A转换成整数后相加，考虑到其他语言可能不像python能够自动进行大数运算所以还是转换成数组相加更好）\r\n\r\n## 代码\r\n\r\n- 语言支持：Python3\r\n\r\nPython3 Code:\r\n\r\n```python\r\n\r\nclass Solution:\r\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\r\n        carry = 0\r\n        len_K, len_A = len(str(K)), len(A)\r\n        A = [0]*(max(len_A, len_K)-len_A + 1) + A\r\n        pos = len(A) - 1\r\n        while K or carry:\r\n                tmp = A[pos] + K%10 + carry\r\n                carry = tmp // 10\r\n                A[pos] = tmp%10\r\n                K = int(K/10)\r\n                pos -= 1\r\n        if A[0]==0: return A[1:]\r\n        return A\r\n\r\n\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(n)$\r\n- 空间复杂度：$O(n)$\r\n\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"BraveSage":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836638684","body":"## 题目描述\r\n\r\n```\r\n对于非负整数 X 而言，X 的数组形式是每位数字按从左到右的顺序形成的数组。例如，如果 X = 1231，那么其数组形式为 [1,2,3,1]。\r\n\r\n给定非负整数 X 的数组形式 A，返回整数 X+K 的数组形式。\r\n\r\n \r\n\r\n示例 1：\r\n\r\n输入：A = [1,2,0,0], K = 34\r\n输出：[1,2,3,4]\r\n解释：1200 + 34 = 1234\r\n示例 2：\r\n\r\n输入：A = [2,7,4], K = 181\r\n输出：[4,5,5]\r\n解释：274 + 181 = 455\r\n示例 3：\r\n\r\n输入：A = [2,1,5], K = 806\r\n输出：[1,0,2,1]\r\n解释：215 + 806 = 1021\r\n示例 4：\r\n\r\n输入：A = [9,9,9,9,9,9,9,9,9,9], K = 1\r\n输出：[1,0,0,0,0,0,0,0,0,0,0]\r\n解释：9999999999 + 1 = 10000000000\r\n \r\n\r\n提示：\r\n\r\n1 <= A.length <= 10000\r\n0 <= A[i] <= 9\r\n0 <= K <= 10000\r\n如果 A.length > 1，那么 A[0] != 0\r\n```\r\n\r\n### 思路\r\n\r\n1. 模拟数字加法，倒序遍历数组和每次取得整数K的各位数的值进行相加\r\n2. 判断当前位数的数是否大于10，如果大于10在整数k中进行+1\r\n3. 让k除以10，确保计算的位数与数组一致\r\n\r\n\r\n\r\n### 代码（两种思路一致，不过下方节省了一个while循环）\r\n\r\n- Java\r\n\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> ans = new ArrayList();\r\n        for(int i = num.length-1; i >= 0; i--){\r\n            int temp = num[i] + k%10;\r\n            ans.add(temp%10);\r\n            k /= 10;\r\n            if(temp >= 10) k++;\r\n        }\r\n        while(k != 0){\r\n            ans.add(k%10);\r\n            k /= 10;\r\n        }\r\n        Collections.reverse(ans);\r\n        return ans;\r\n    }\r\n}\r\n```\r\n\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> ans = new ArrayList();\r\n        for(int i = num.length-1; i >= 0 || k > 0; i--, k/=10){\r\n            if(i >= 0){\r\n                k += num[i];\r\n            }\r\n            ans.add(k%10);\r\n        }\r\n        Collections.reverse(ans);\r\n        return ans;\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### 复杂度\r\n\r\n时间：O(max(n,log(k))) 整数与数组长度之间取最大\r\n\r\n空间：O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"KevinWorkSpace":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836639151","body":"## 题目地址(989. 数组形式的整数加法)\r\n\r\nhttps://leetcode-cn.com/problems/add-to-array-form-of-integer/\r\n\r\n\r\n## 代码\r\n\r\n- 语言支持：Java\r\n\r\nJava Code:\r\n\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] A, int K) {\r\n        List<Integer> res = new ArrayList<>();\r\n        int index = A.length - 1;\r\n        int add = 0;\r\n        while (index >= 0 || K > 0 || add > 0) {\r\n            int a = 0;\r\n            if (index >= 0) a = A[index];\r\n            int b = K % 10;\r\n            int tmp = (a + b + add) % 10;\r\n            add = (a + b + add) / 10;\r\n            res.add(tmp);\r\n            K /= 10;\r\n            index --;\r\n        }\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n}\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(n)$\r\n- 空间复杂度：$O(1)$\r\n\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ssxgit":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836641307","body":"# 989. 数组形式的整数加法\r\n主要是需要一个进位的表示，最终要保证三个部分都加完\r\n\r\n## 代码\r\n- 语言：c++\r\n```c++\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n\r\n        vector<int> res;\r\n\r\n        int carry_bit = 0;\r\n\r\n        int loc = num.size() - 1;\r\n\r\n        while(loc>-1 || k > 0 || carry_bit > 0){\r\n            int num1 = loc>-1?num[loc]:0;\r\n            int num2 = k % 10;\r\n\r\n            int value = num1 + num2 + carry_bit;\r\n\r\n            res.emplace_back((value % 10));\r\n            carry_bit = value / 10; \r\n\r\n            --loc;\r\n            k /= 10;\r\n        }\r\n        \r\n        reverse(res.begin(),res.end());\r\n\r\n        return res;\r\n    }\r\n};\r\n```\r\n\r\n## 复杂度分析\r\n时间复杂度：O(n)\r\n空间复杂度：O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fenglei110":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836644430","body":"python\r\n\r\npython语言的设计就是太动态了，int和str可以互转。\r\n\r\n列表迭代式 + lambda表达式\r\n平时也是这样写，感觉代码很简洁。但是你要问我这样的代码有什么不足，还真答不上来。\r\n\r\n```py\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        return  list(map(int, str(int(''.join(map(str, num)))+k)))\r\n```\r\n\r\n### 复杂度\r\n时间复杂度：O(n)\r\n空间复杂度：O(n)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"1998yyh":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836644503","body":"### 思路\r\n循环数组按位相加，同时对应修改k，循环完成后当k大于0，再对k处理。\r\n### 代码\r\njavascript\r\n``` javascript\r\nvar addToArrayForm = function(num, k) {\r\n    const len = num.length;\r\n    const resultArr = [];\r\n    for(let i = len -1; i>=0;i--){\r\n        const _num = k%10;\r\n        k = Math.floor(k/10);\r\n        const sum = _num + num[i];\r\n        if(sum>9){\r\n            k++\r\n        }\r\n        resultArr.unshift(sum%10);\r\n    }\r\n    while(k>0){\r\n        resultArr.unshift(k%10)\r\n        k = Math.floor(k/10);\r\n    }\r\n    return resultArr\r\n};\r\n```\r\n### 复杂度分析\r\n时间复杂度：O(n)\r\n空间复杂度：O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joriscai":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836661706","body":"# 思路\r\n先将k转成数组，再利用双指针分别从k和num的最后一位开始按位计算。注：需要考虑最后一次进位的情况。\r\n\r\n# 代码\r\njavascript\r\n\r\n```javascript\r\n/*\r\n * @lc app=leetcode.cn id=989 lang=javascript\r\n *\r\n * [989] 数组形式的整数加法\r\n */\r\n\r\n// @lc code=start\r\n/**\r\n * @param {number[]} num\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = function(num, k) {\r\n  const kArr = (k + '').split('')\r\n  const ret = []\r\n\r\n  let i = num.length - 1\r\n  let j = kArr.length - 1\r\n  let tmp = 0\r\n  while (i >= 0 || j >= 0 || tmp) {\r\n    const count = parseInt(num[i] || 0) + parseInt(kArr[j] || 0) + tmp\r\n    ret.unshift(count % 10)\r\n    tmp = parseInt(count / 10)\r\n    i--\r\n    j--\r\n  }\r\n  return ret\r\n};\r\n// @lc code=end\r\n\r\n```\r\n\r\n# 复杂度分析\r\n时间复杂度：O(max(n, log k))，其中 n 为数组的长度。log k为k的位，即log 10(k)，10为底k的对数。\r\n空间复杂度：O(max(n, log k))。"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"q815101630":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836666773","body":"## 思路\r\n遍历数组， 因为知道在第i位 数等于 i* 10**(len(num)-1) 可以得到数组的和。分解成数组形式时，可以用python的特性转换int 和 str，也可以使用whole divde 和 modulo 一位一位得分别append 到 数组中。这里使用了第一种方法\r\n## 代码\r\nPython\r\n```\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        leng = len(num)\r\n        sum = 0\r\n        for i in num:\r\n            sum += i* 10**(leng-1)\r\n            leng-=1\r\n        return [int(i) for i in str(sum+k)]\r\n```\r\n### 复杂度分析\r\n时间：O(n)\r\n空间：O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wonderful1234":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836682410","body":"解题思路：数组的末尾与k的末尾相加，分别求出进位与余数。\r\n`class Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> list = new ArrayList<>();\r\n    int carry = 0;  \r\n    int len = num.length - 1;\r\n\r\n    while (len >= 0 || k != 0) {\r\n        int sum = 0;\r\n        if (len >= 0) {\r\n            sum += num[len];\r\n            len--;\r\n        }\r\n        sum += k % 10 + carry;\r\n        carry = sum / 10;\r\n        list.add(sum % 10);\r\n       k /= 10;\r\n    }\r\n\r\n    if (carry == 1) {\r\n        list.add(carry);\r\n    }\r\n    Collections.reverse(list);\r\n    return list;\r\n\r\n    }\r\n}`\r\n复杂度分析：\r\n时间：O(n)\r\n空间：O(n)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fzzfgbw":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836683816","body":"### 思路\r\n\r\n循环数组从最低位开始带进位累加，额外考虑k位数比较大的情况，最后处理最高位进位。\r\n\r\n\r\n### 代码\r\n\r\n\r\n```java\r\n\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        LinkedList<Integer> res = new LinkedList<>();\r\n        int c = 0;\r\n        for (int i = num.length-1; i >=0; i--) {\r\n            int add = k% 10;\r\n            k /=10;\r\n            int sum = add + num[i] +c;\r\n            if (sum>= 10) {\r\n                sum = sum%10;\r\n                c = 1;\r\n            } else {\r\n                c = 0;\r\n            }\r\n            res.addFirst(sum);\r\n        }\r\n        \r\n        while (k>0){\r\n            int add = k% 10;\r\n            k /=10;\r\n            int sum = add +c;\r\n            if (sum>= 10) {\r\n                sum = sum%10;\r\n                c = 1;\r\n            } else {\r\n                c = 0;\r\n            }\r\n            res.addFirst(sum);\r\n        }\r\n        if (c>0){\r\n            res.addFirst(c);\r\n        }\r\n        return res;\r\n    }\r\n}\r\n\r\n\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(max(N,lg k))，其中 N 为数组长度。\r\n- 空间复杂度：O(N)\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"agentzzz":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836691767","body":"### 思路\r\n\r\n将k从最后一位往前加，每次加法的结果对10取余，压入返回数组。然后除以10，与前一位相加。\r\n\r\n可能忘记讨论的情况：\r\n\r\n1. k可能比num的位数要长，因此，要确保k的剩余位数都压入结果数组\r\n2. 压入结果数组的内容是倒序的，collections.reverse()使其倒序（以前用的是C++刷题，java的collections要去了解一下）\r\n\r\n\r\n\r\n### JAVA\r\n\r\n```java\r\npublic List<Integer> addToArrayForm(int[] num, int k) {\r\n\t\tint fin = num.length - 1;\r\n\t\tList<Integer> res = new ArrayList<Integer>();\r\n\t\tint temp = 0;\r\n\t\tfor (int i = fin; i >= 0; i--) {\r\n\t\t\ttemp = num[i] + k;\r\n\t\t\tres.add(temp % 10);\r\n\t\t\tk = temp / 10;\r\n\t\t}\r\n\t\twhile (k > 0) {\r\n\t\t\tres.add(k % 10);\r\n\t\t\tk /= 10;\r\n\t\t}\r\n\t\tCollections.reverse(res);\r\n\t\treturn res;\r\n\t}\r\n```\r\n\r\n时间复杂度O(n)\r\n\r\n空间复杂度O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"oborc":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836695695","body":"### 解题思路\r\n刚开始以为这个题是大数相加的简单版，却发现其实是两个题目。\r\n直接遍历数组，用竖式相加的思路，从低位开始加起\r\n初始化一个空数组用来存放结果\r\n1.用加数加上被加数的低位，对和取余 为当前位的结果。\r\n2.对和除以10取整，作为加数向第二低位相加，重复1的步骤，直到数组遍历结束或者加数除以10取整之后为0.\r\n### javascript\r\n```javascript\r\nvar addToArrayForm = function(num, k) {\r\n    let result = [];\r\n    for(let i = num.length-1;i>=0 || k>0;i--){\r\n        if(i>=0){\r\n            k = k + num[i];\r\n        }\r\n        result.unshift(k%10);\r\n        k = Math.floor(k/10);\r\n    }\r\n    return result;\r\n};\r\n```\r\n\r\n时间复杂度:\r\no(max(N,K/10)) = > O(N),线性复杂\r\n空间复杂度:\r\no(N)= > O(N),线性复杂"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liandmin":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836696480","body":"### 思路\r\n\r\n1. 直接遍历数组，从后往前加，满10进位，放入结果数组中\r\n2. 如果 k 比数组的number更大的话，继续遍历 k，放入结果数组\r\n3. 反转结果数组返回即可\r\n\r\n### JS\r\n\r\n```\r\nvar addToArrayForm = function (num, k) {\r\n  const res = [];\r\n  const length = num.length;\r\n\r\n  for (let i = length - 1; i >= 0; i--) {\r\n    let sum = num[i] + (k % 10);\r\n    k = Math.floor(k / 10);\r\n    if (sum >= 10) {\r\n      k++;\r\n      sum -= 10;\r\n    }\r\n    res.push(sum);\r\n  }\r\n\r\n  for (; k > 0; k = Math.floor(k / 10)) {\r\n    res.push(k % 10);\r\n  }\r\n  res.reverse();\r\n\r\n  return res;\r\n};\r\n```\r\n \r\n### 复杂度分析\r\n\r\n* 时间复杂度：O(max(N,lg k))，其中 N 为数组长度。\r\n* 空间复杂度：O(N)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"edge-wzw":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836712891","body":"### 思路\r\n\r\n逐位相加\r\n\r\n首先新建一个链表，从数组num尾部和K的低位开始反向遍历，依次求和得到对应的sum，根据求和结果判断是否进位（carry=1表示进位，carry=0表示无进位），将sum对10取模后加入到链表头部。\r\n\r\n\r\n### 代码\r\n\r\n\r\n```java\r\nclass Solution {\r\n    public static List<Integer> addToArrayForm(int[] num, int k) {\r\n        LinkedList<Integer> res = new LinkedList<>();\r\n        int carry = 0;      //进位数，1表示进位，0表示无进位\r\n        int sum;    //每次求和的值\r\n        int n = num.length - 1;     //遍历数组时的索引\r\n        while (k != 0 || n >= 0){\r\n            sum = carry + (k % 10);\r\n            if (n >= 0){\r\n                sum += num[n];\r\n            }\r\n\r\n            carry = (sum > 9) ? 1:0;\r\n            res.addFirst(sum % 10);\r\n            n--;\r\n            k = k / 10;\r\n        }\r\n        if (carry == 1){res.addFirst(1);}\r\n        return res;\r\n    }\r\n}\r\n```\r\n\r\n**复杂度分析**\r\n\r\n- 时间复杂度：O(max(n, k))，其中 n 为数组长度, k为数值K的长度。\r\n- 空间复杂度：O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"SunStrongChina":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836713429","body":"> # 989. 数组形式的整数加法\r\n> ## 入选理由\r\n> 暂无\r\n> \r\n> ## 题目地址\r\n> https://leetcode-cn.com/problems/add-to-array-form-of-integer/\r\n> \r\n> ## 前置知识\r\n> * 数组的遍历\r\n> \r\n> ## 题目描述\r\n> ```\r\n> 对于非负整数 X 而言，X 的数组形式是每位数字按从左到右的顺序形成的数组。例如，如果 X = 1231，那么其数组形式为 [1,2,3,1]。\r\n> \r\n> 给定非负整数 X 的数组形式 A，返回整数 X+K 的数组形式。\r\n> \r\n>  \r\n> \r\n> 示例 1：\r\n> \r\n> 输入：A = [1,2,0,0], K = 34\r\n> 输出：[1,2,3,4]\r\n> 解释：1200 + 34 = 1234\r\n> 示例 2：\r\n> \r\n> 输入：A = [2,7,4], K = 181\r\n> 输出：[4,5,5]\r\n> 解释：274 + 181 = 455\r\n> 示例 3：\r\n> \r\n> 输入：A = [2,1,5], K = 806\r\n> 输出：[1,0,2,1]\r\n> 解释：215 + 806 = 1021\r\n> 示例 4：\r\n> \r\n> 输入：A = [9,9,9,9,9,9,9,9,9,9], K = 1\r\n> 输出：[1,0,0,0,0,0,0,0,0,0,0]\r\n> 解释：9999999999 + 1 = 10000000000\r\n>  \r\n> \r\n> 提示：\r\n> \r\n> 1 <= A.length <= 10000\r\n> 0 <= A[i] <= 9\r\n> 0 <= K <= 10000\r\n> 如果 A.length > 1，那么 A[0] != 0\r\n> \r\n\r\n\r\n> # 989. 数组形式的整数加法\r\n> ## 入选理由\r\n> 暂无\r\n> \r\n> ## 题目地址\r\n> https://leetcode-cn.com/problems/add-to-array-form-of-integer/\r\n> \r\n> ## 前置知识\r\n> * 数组的遍历\r\n> \r\n> ## 题目描述\r\n> ```\r\n> 对于非负整数 X 而言，X 的数组形式是每位数字按从左到右的顺序形成的数组。例如，如果 X = 1231，那么其数组形式为 [1,2,3,1]。\r\n> \r\n> 给定非负整数 X 的数组形式 A，返回整数 X+K 的数组形式。\r\n> \r\n>  \r\n> \r\n> 示例 1：\r\n> \r\n> 输入：A = [1,2,0,0], K = 34\r\n> 输出：[1,2,3,4]\r\n> 解释：1200 + 34 = 1234\r\n> 示例 2：\r\n> \r\n> 输入：A = [2,7,4], K = 181\r\n> 输出：[4,5,5]\r\n> 解释：274 + 181 = 455\r\n> 示例 3：\r\n> \r\n> 输入：A = [2,1,5], K = 806\r\n> 输出：[1,0,2,1]\r\n> 解释：215 + 806 = 1021\r\n> 示例 4：\r\n> \r\n> 输入：A = [9,9,9,9,9,9,9,9,9,9], K = 1\r\n> 输出：[1,0,0,0,0,0,0,0,0,0,0]\r\n> 解释：9999999999 + 1 = 10000000000\r\n>  \r\n> \r\n> 提示：\r\n> \r\n> 1 <= A.length <= 10000\r\n> 0 <= A[i] <= 9\r\n> 0 <= K <= 10000\r\n> 如果 A.length > 1，那么 A[0] != 0\r\n> ```\r\n**思路**\r\n1.将k转化为字符串\r\n2.比较k和num那个位数多，先进行少位数的求和相加\r\n3.添加更多的那几位\r\n\r\n**python**\r\n\r\n```\r\nclass Solution:\r\n    def addToArrayForm(self, num, k):\r\n        k_str=str(k)\r\n        result=[]\r\n        if len(k_str)>len(num):\r\n            len1=len(num)\r\n            len2=len(k_str)\r\n            num,k_str=k_str,num\r\n        else:\r\n            len1=len(k_str)\r\n            len2=len(num)\r\n            \r\n        value_2=0    \r\n        for i in range(-1,-len1-1,-1):\r\n            value1=int(num[i])+int(k_str[i])+value_2\r\n          \r\n            if value1>=10:\r\n                value_1=value1%10\r\n                value_2=1\r\n            else:\r\n                value_1=value1\r\n                value_2=0\r\n            result.append(value_1)\r\n        \r\n        for j in range(-len1-1,-len2-1,-1):\r\n            value1=int(num[j])+value_2\r\n            if value1>=10:\r\n                value_1=value1%10\r\n                value_2=1\r\n            else:\r\n                value_1=value1\r\n                value_2=0\r\n            result.append(value_1)\r\n        if value_2!=0:\r\n            result.append(value_2)\r\n        result.reverse()    \r\n        return result\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n**复杂度分析**\r\n时间复杂度：O(max(N,k))，其中 N 为数组长度，k为数值k的长度。\r\n空间复杂度：O(N)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"naomiwufzz":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836721643","body":"### 思路\r\n\r\n倒叙逐位加，先倒着遍历数组`num`，逐位相加，可以把要保存的进位存储到`k`里面，就不容易造成混乱。要注意的是`k`是可以比`num`大的，这里就和66加一不是很一样\r\n\r\n### 代码\r\n\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, num, k):\r\n        result = []\r\n        for i in range(len(num)-1, -1, -1):  # 先遍历num\r\n            sum = num[i] + k % 10  # 逐位相加\r\n            k = k // 10  # k降一个位数\r\n            if sum >= 10:  # 这里是一个技巧，进位的时候，不直接处理num，而是k加一\r\n                k += 1\r\n            result.append(sum % 10)  # 不用insert降低复杂度\r\n        while k > 0:  # 若k的值不为0，直接加上去即可，同时也考虑k比num大的情况\r\n            result.append(k % 10)\r\n            k = k // 10\r\n        result.reverse()\r\n        return result\r\n```\r\n\r\n### 复杂度分析\r\n\r\n- 时间复杂度：O(max(n,k)) 整数与数组长度之间取最大，为什么官方写的是log(k)？\r\n- 空间复杂度：O(1) 除了返回值result以外，使用的空间为常数。"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"newVincentFong":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836729444","body":"# Add to Array-Form of Integer\r\n\r\n## Discuss\r\n\r\n* `num` can be longer than `k`, or can be shorter than k\r\n \r\nso, the times of iterations should be the max between their lengths\r\n\r\n* save the result in the given array\r\n\r\nspace: O(n) -> O(1), less use of `splice`, better timing\r\n\r\n## Code\r\n\r\n```typescript\r\n/**\r\n * @remarks\r\n * * `num` can be longer than `k`, or can be shorter than k\r\n * \r\n * so, the times of iterations should be the max between their lengths\r\n * \r\n * * save the result in the given array\r\n * \r\n * space: O(n) -> O(1), less use of `splice`, better timing\r\n */\r\nfunction addToArrayForm(num: number[], k: number): number[] {\r\n    let shouldCarry = false\r\n    const length = Math.max(num.length, k.toString().length)\r\n    const difference = length - num.length\r\n    for (let i = length - 1; i >= 0; i--) {\r\n        const original = num[i - difference] || 0\r\n        const toAdd = k % 10\r\n        const added = original + toAdd + (shouldCarry ? 1 : 0) as number\r\n        const toSave = added % 10\r\n        if (i - difference >= 0) {\r\n            num[i- difference] = toSave\r\n        } else {\r\n            num.splice(0, 0, toSave)\r\n        }\r\n        shouldCarry = Math.floor(added / 10) === 1\r\n        k = Math.floor(k / 10)\r\n    }\r\n    if (shouldCarry) {\r\n        num.splice(0, 0, 1)\r\n    }\r\n    return num\r\n};\r\n// time O(n)\r\n// space O(1)\r\n``"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"DAXIAdaxia":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836737171","body":"### **思路：**\r\n从个位数开始，每个数从后往前依次相加\r\n\r\n### **代码：**\r\npublic class Solution {\r\n\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        ArrayList<Integer> list = new ArrayList<Integer>();\r\n        for (int i = num.length - 1; i >= 0; i--) {\r\n            int temp = num[i] + k % 10;\r\n            k /= 10;\r\n            if (temp >= 10){\r\n                k++;\r\n                temp -= 10;\r\n            }\r\n            list.add(temp);\r\n        }\r\n\r\n        while (k > 0){\r\n            list.add(k % 10);\r\n            k /= 10;\r\n        }\r\n\r\n        Collections.reverse(list);\r\n        return list;\r\n    }\r\n}\r\n\r\n### **复杂度分析：**\r\n时间复杂度：最坏的情况下，需要遍历n次，所以时间复杂度为O(n)\r\n空间复杂度：最坏的情况下，需要一个长度为(n+1)的列表来存储结果，所以空间复杂度为O(n)\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"supermeohh":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836744653","body":"\r\n## 思路\r\n进位用k通过加一保存\r\n## 代码\r\n\r\n- 语言支持：Java\r\n\r\nJava Code:\r\n\r\n```java\r\n\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        //List<Integer>初始化，需要返回值\r\n        int n = num.length;\r\n        List<Integer>res = new ArrayList<>();\r\n        //List<Integer>指的是存int类型数据的列表\r\n        for(int i = n-1;i>=0;i--){\r\n            //%（取余）和 /（取整）\r\n            //取num的最低位和k值的个位\r\n            int sum = num[i]+k%10;\r\n            //取k值的个位以上\r\n            k/=10;\r\n            if (sum>=10){\r\n                //和有进位加一\r\n                k++;\r\n                //sum-10\r\n                sum-=10;\r\n            }\r\n            //赋值到链表\r\n            res.add(sum);\r\n        }\r\n        //多余的k值位数直接加上去\r\n        for(;k>0;k/=10){\r\n            res.add(k%10);\r\n        }\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(n)$\r\n- 空间复杂度：$O(n)$\r\n\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bowlofnoodles":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836746047","body":"### 思路\r\n\r\n模拟加法按位逐位相加\r\n\r\n### 代码 js\r\n\r\n\r\n``` javascript\r\n/**\r\n * @param {number[]} num\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = function(num, k) {\r\n    const result = [];\r\n    const length = num.length;\r\n    for (let i = length - 1; i >= 0; --i) {\r\n        let sum = num[i] + k % 10;\r\n        k = Math.floor(k / 10);\r\n        if (sum >= 10) {\r\n            k++;\r\n            sum -= 10;\r\n        }\r\n        result.push(sum);\r\n    }\r\n    for (; k > 0; k = Math.floor(k / 10)) {\r\n        result.push(k % 10);\r\n    }\r\n    result.reverse();\r\n    return result;\r\n};\r\n\r\n\r\n\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(N)，其中 N 为数组长度。\r\n- 空间复杂度：忽略返回值创建的数组，O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jawn-ha":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836746634","body":"#### 思路：\r\n数组逆序遍历，然后从个位数开始相加，将结果push新数组，最后将新数组翻转\r\n要注意进位尤其是最后一位的进位还要注意k位数比num多的情况\r\n#### 代码 JS\r\n```javascript\r\nvar addToArrayForm = function(num, k) {\r\n  let res = []\r\n  for(let i = num.length-1; i>= 0; --i) {\r\n      let sum = num[i] + k%10\r\n      k = Math.floor(k / 10)\r\n\r\n      if(sum >=10) {\r\n          sum = sum % 10   \r\n          k++      \r\n        \r\n      }     \r\n\r\n      res.push(sum) \r\n  }\r\n   \r\n  for (; k > 0; k = Math.floor(k / 10)) {\r\n        res.push(k % 10);\r\n    }\r\n  for(let i =0; i<Math.floor(res.length/2); i++){\r\n      [res[i], res[res.length-1-i]] =  [res[res.length-1-i], res[i]]\r\n  }\r\n  return res\r\n};\r\n```\r\n#### 复杂度分析：\r\n+ 时间复杂度：O(n)\r\n+ 空间复杂度：O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lzdFeiFei":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836747177","body":"**思路**\r\n官方解法\r\n\r\n**代码：**\r\n\r\n```javascript\r\nvar addToArrayForm = function(num, k) {\r\n    const res = []\r\n    const n = num.length\r\n    for(let i = n-1;i>=0;i--){\r\n        let sum = num[i] + k % 10\r\n        k = Math.floor(k/10)\r\n        if(sum>=10){\r\n            k++\r\n            sum -= 10\r\n        }\r\n        res.push(sum)\r\n    }\r\n    for(;k>0;k = Math.floor(k/10)){\r\n        res.push(k % 10)\r\n    }\r\n    res.reverse()\r\n    return res\r\n};\r\n```\r\n\r\n**复杂度分析**\r\n\r\n- 时间复杂度：O(max(n,log k))，其中 n 为数组的长度。\r\n- 空间复杂度：O(1)O(1)。除了返回值以外，使用的空间为常数。\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"LASIWan":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836748306","body":"### 思路\r\n采用每一位分别相加，并判断是否进位的方法：\r\n1、声明一个空数组\r\n2、从末位开始循环数组的每一位，并与加数k按位相加\r\n3、判断是否需要进位，当和大于10时，将结果存入下一位\r\n4、通过数组方法将存入顺序颠倒即可\r\n\r\n\r\n\r\n### JavaScript\r\n```\r\nvar addToArrayForm = function(num, k) {\r\n    const res = [];\r\n    const n = num.length;\r\n    for (let i = n - 1; i >= 0; --i) {\r\n        let sum = num[i] + k % 10;\r\n        k = Math.floor(k / 10);\r\n        if (sum >= 10) {\r\n            k++;\r\n            sum -= 10;\r\n        }\r\n        res.push(sum);\r\n    }\r\n    for (; k > 0; k = Math.floor(k / 10)) {\r\n        res.push(k % 10);\r\n    }\r\n    res.reverse();\r\n    return res;\r\n};\r\n\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(N)，其中 N 为数组长度。\r\n- 空间复杂度：O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fakerbaby":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836751618","body":"## [989. 数组形式的整数加法](https://leetcode-cn.com/problems/add-to-array-form-of-integer/)\r\n\r\n难度:**简单**\r\n\r\n对于非负整数 `X` 而言，*`X`* 的*数组形式*是每位数字按从左到右的顺序形成的数组。例如，如果 `X = 1231`，那么其数组形式为 `[1,2,3,1]`。\r\n\r\n给定非负整数 `X` 的数组形式 `A`，返回整数 `X+K` 的数组形式。\r\n\r\n---\r\n\r\n**思路1**\r\n\r\n首先将原属组转化成字符串，然后转换成整型相加然后在切分成数组。最后返回数组为所求。\r\n\r\n**代码**\r\n\r\n~~~python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        tmp = ''\r\n        for index in num:\r\n            tmp += str(index)\r\n        res_int = int(tmp) + k\r\n        res = [int(x) for x in str(res_int)]\r\n        return res\r\n\r\n\r\n~~~\r\n\r\n\r\n\r\n**复杂度**\r\n\r\n时间：O(n)\r\n\r\n空间：O(1)\r\n\r\n---\r\n\r\n**思路2**\r\n\r\n```\r\n<加法模板>    \r\nwhile ( A 没完 || B 没完)\r\n    A 的当前位\r\n    B 的当前位\r\n\r\n    和 = A 的当前位 + B 的当前位 + 进位carry\r\n\r\n    当前位 = 和 % 10;\r\n    进位 = 和 / 10;\r\n\r\n判断还有进位吗\r\n```\r\n\r\n**代码**\r\n\r\n~~~python\r\nclass Solution:\r\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\r\n        i = len(A) - 1\r\n        while K:\r\n            A[i] += K\r\n            K, A[i] = A[i] // 10, A[i] % 10\r\n            i -= 1\r\n            if i < 0 and K:\r\n                A.insert(0,0)\r\n                i = 0\r\n        return A\r\n\r\n\r\n~~~\r\n\r\n\r\n\r\n**复杂度**\r\n\r\n时间：O(n)\r\n\r\n空间：O(n)\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuris304":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836751629","body":"## 思路\r\n从末尾开始依次往前模拟加法运算\r\n\r\n## 关键点\r\n\r\n-  结束条件 num到首位& k加完 & 进位为0\r\n-  每次循环中要判断数组索引是否越界\r\n\r\n## 代码\r\n\r\n- 语言支持：Java\r\n\r\nJava Code:\r\n\r\n```java\r\n\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> res=new LinkedList<Integer>();\r\n        int n=num.length-1;int flag=0;\r\n        while(n>-1||k!=0||flag!=0){\r\n            int tep;\r\n            if(n<0) tep=k%10+flag;\r\n            else tep=k%10+num[n]+flag;\r\n            k/=10;\r\n            flag=tep/10;\r\n            tep=tep%10;\r\n            res.add(0,tep);\r\n            n--;\r\n        }\r\n        return res;      \r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(max(log(k),n))$\r\n- 空间复杂度：$O(1)$"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Hazelnuttt":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836754397","body":"### 思路\r\n把 num 和 k 都转成数组，进行大数相加\r\n\r\n```js\r\n/**\r\n * @param {number[]} num\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = function(num, k) {\r\n  k = k.toString().split(\"\").map(item => Number(item));\r\n\r\n  let carry = 0;\r\n  let result = []\r\n  while(num.length || k.length) {\r\n    carry += ~~num.pop() + ~~k.pop();\r\n    if(carry < 10){\r\n      result.unshift(carry);\r\n      carry = 0;\r\n    }else{\r\n      result.unshift(carry - 10);\r\n      carry = 1;\r\n    }\r\n  }\r\n\r\n  if(carry){\r\n    result.unshift(carry);\r\n    return result;\r\n  }else{\r\n    return result;\r\n  }\r\n\r\n\r\n};\r\n```"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"WIN0624":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836759785","body":"## 思路\r\n\r\n* 把K加入A中，降低空间复杂度\r\n    * 从A的最后一位开始遍历，先将K（carry初始化为K）与最后一位相加，保留余数，整除10之后进位，直至carry为0\r\n    * 时间复杂度：O(N+max(0, K-N))\r\n    * 空间复杂度：O(max(1, K-N))\r\n* 难点：两者长度不等的情况，如何处理\r\n    * 若两者相等，最后多出的carry，新建B，把往A头部补位，变成B和A相加\r\n    * 若A长于B，则carry为0，不影响A继续补位\r\n    * 若B长于A， 则等同于有多出carry，B的补位可以直接通过数组相加，把当前位当做一个数组\r\n\r\n## 代码 | Python\r\n\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\r\n        carry = k\r\n        for i in range(len(num) - 1, -1, -1):\r\n            num[i], carry = (num[i] + carry) % 10, (num[i] + carry) // 10\r\n\t# deal with remain\r\n        B = []\r\n        while carry > 0:\r\n            B = [carry % 10] + B\r\n            carry //= 10\r\n        \r\n        return B + num\r\n```\r\n\r\n## 复杂度分析\r\n\r\n  * 时间复杂度：O(N+max(0, K-N))\r\n  * 空间复杂度：O(max(1, K-N))"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ShunzWu012":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836761592","body":"### 思路\r\n按位相加，注意k的长度可能比num大\r\n### 代码\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> ans = new ArrayList<>();\r\n        int n = num.length;\r\n        for(int i = n - 1; i >= 0; i--){\r\n            int sums = num[i] + k % 10;\r\n            k /= 10;\r\n            if(sums >= 10){\r\n                k++;\r\n            }\r\n            ans.add(sums%10);\r\n        }\r\n        while(k != 0){\r\n            ans.add(k%10);\r\n            k /= 10;\r\n        }\r\n        n = ans.size();\r\n        for(int i = 0; i < n/2; i++){\r\n            int temp = ans.get(i);\r\n            ans.set(i, ans.get(n-i-1));\r\n            ans.set(n-i-1, temp);\r\n        }\r\n        return  ans;\r\n    }\r\n}\r\n```\r\n### 复杂度分析\r\n- T:O(max(n, log(10, k)))\r\n- S:O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangpengzhen":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836765721","body":"不会没思路"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yxq1997":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836766743","body":"## 前置知识\r\n\r\n- 数组的遍历，整数的运算\r\n\r\n## 思路\r\n- 从后往前遍历数组，得到的是X的从低到高的每一位\r\n- k%10得到最低位，k/10更新当前k的倒数第二位为最低位\r\n- 通过将k的最低位与X的最低位诸位相加得到新的结果value，并用count = value /10保存当前加法后的进位数值，用value/10保留当前加法后的最低位\r\n\r\n## 关键点\r\n\r\n-  可以吧k当做一个数组来看，本题类似于两个数组的加法运算，加法循环的终止条件是两个数组(k和nuns)都便利了一遍，且进位count为0\r\n- 在本题中直接得到的结果在list中是逆序排列的，因此需要反转\r\n\r\n## 代码\r\n\r\n- 语言支持：Java\r\n\r\nJava Code:\r\n\r\n```java\r\n\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        int count = 0; // 表示进位符\r\n        List<Integer> list = new ArrayList<>();\r\n        int n = num.length;\r\n        int value = 0;\r\n        for(int i=n-1;i>=0;i--){\r\n            int kNum = k % 10;\r\n            value = num[i] + kNum + count;\r\n            count = value / 10;\r\n            list.add(value % 10);\r\n            if(k > 0)\r\n                k /= 10;\r\n        }\r\n        k += count;\r\n        while(k > 0){\r\n            list.add(k % 10);\r\n            k /= 10;\r\n        }\r\n        Collections.reverse(list);\r\n        return list;\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(max(n, log k)$\r\n- 空间复杂度：$O(1)$"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Forschers":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836774703","body":"\r\n## 思路\r\n将k中的数取出一个个加入到数组中\r\n\r\n\r\neg:将【2，3，4】+ k=32 计算 4+32 因为4+32  = 36将6留在当前位 将k/10 以进为的形式加入到下个位中\r\n重复过程计算 【2，3】+ 3\r\n\r\n## 关键点\r\n\r\n-  将k放入到数组后\r\n\r\n## 代码\r\n\r\n- 语言支持：Java\r\n\r\nJava Code:\r\n\r\n```java\r\n\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> arr = new ArrayList<Integer>();\r\n        int n = num.length;\r\n        //将k以 k/10的形式进位\r\n        for(int i = n-1;i>=0 || k>0;--i,k/=10){\r\n            if(i >= 0){\r\n                k +=num[i];\r\n            }\r\n            //加上k取出来的最后一位\r\n            arr.add(k%10);\r\n        }\r\n        //反转\r\n        Collections.reverse(arr);\r\n        return arr;\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：O(max(n,logk))\r\n- 空间复杂度：O(1)\r\n\r\n\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"XinlingQiu":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836776627","body":"- 语言 python\r\n- 时间复杂度：O(max(n,log(k)))\r\n- 空间复杂度：O(1)\r\n- 无需反转\r\n```python\r\nclass Solution(object):\r\n    def addToArrayForm(self, num, k):\r\n        \"\"\"\r\n        :type num: List[int]\r\n        :type k: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        n=len(num)\r\n        count=0#进位符\r\n        for i in range(n-1,-1,-1):\r\n            new_i=num[i]+k%10+count\r\n            count=new_i/10\r\n            num[i]=new_i%10\r\n            if k>0:\r\n                k=k/10\r\n        k+=count\r\n        while k>0:\r\n            num.insert(0,k%10)\r\n            k/=10\r\n        return num\r\n```"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"suffocatingly0":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836783424","body":"- 语言 java\r\n- 时间复杂度O（n）\r\n- 空间复杂度O（n）\r\n- n = Math.max(num.length, k.length)\r\n```\r\nclass Solution {\r\n   public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> res =new ArrayList<>();\r\n        int count=0;\r\n        for(int i=num.length-1;i>=0;i--){\r\n            int sum=num[i]+k%10;\r\n            k=k/10;\r\n            res.add((sum+count)%10);\r\n            count=(sum+count)/10;\r\n        }\r\n        if(count>0) k++;\r\n        for(;k>0;k/=10){\r\n            res.add(k%10);\r\n        }\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n}\r\n```"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"S-T-D":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836785905","body":"# 思路\r\n\r\n对数组 `A` 从后往前遍历，同时对 `K` 取 10 的余数，将遍历的数字和余数相加得到新值，并更新数组对应位置的值，同时注意是否进位。\r\n\r\n注意：`K` 的位数可能比 `A` 的长度要长。\r\n\r\n&nbsp;\r\n\r\n# 代码\r\n\r\n```javascript\r\nfunction addToArrayForm(num: number[], k: number): number[] {\r\n    const len = num.length;    \r\n    let i = len - 1;\r\n    let carry = 0;\r\n    while (i >= 0) {\r\n        let addNum = 0;\r\n        if (k !== 0) {\r\n            addNum = k % 10;\r\n            k = Math.floor(k / 10);\r\n        }\r\n        let sum = num[i] + carry + addNum;\r\n        carry = sum >= 10 ? 1 : 0;\r\n        num[i] = sum % 10;\r\n        i--;\r\n    }\r\n    k += carry;\r\n    while (k !== 0) {\r\n        num.unshift(k % 10);\r\n        k = Math.floor(k / 10);\r\n    }\r\n    return num;\r\n};\r\n```\r\n\r\n&nbsp;\r\n\r\n# 复杂度分析\r\n\r\n令 `n` 为数组长度，`m` 为 `k` 的位数，按最坏情况\r\n\r\n时间：O(n + (m - n)^2)，第一个循环为 O(n)，第二个循环内在数组头部插入元素涉及数组的移动操作\r\n\r\n空间：O(m - n)，如果 `m` 大于 `n`，数组需要增加 `m - n` 的长度"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wsgouwan":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836787849","body":"思路：\r\n    转化为数组， 从末位起，两两相加，\r\n\r\n代码：\r\n```\r\n var addToArrayForm = function(num, k) {\r\n        let result = []\r\n        k = k.toString().split('')\r\n        let carryBit = 0\r\n        let _temp = 0\r\n        while(num.length > 0 || k.length > 0) {\r\n            let num1 = num.pop() \r\n            let num2 = k.pop() \r\n            num1 = num1 ? num1 * 1 : 0\r\n            num2 = num2 ? num2 * 1 : 0\r\n            _temp = num1 + num2 + carryBit\r\n            if(_temp > 9) {\r\n                carryBit = 1\r\n                _temp = _temp - 10\r\n            }else {\r\n                carryBit = 0\r\n            }\r\n            result.unshift(_temp)\r\n        }\r\n\r\n        if(carryBit > 0) {\r\n            result.unshift(1)\r\n        }\r\n        return result;\r\n    };\r\n```\r\nn = Math.max(num.length, k.length)\r\n时间复杂度：O(n)\r\n空间复杂度O(n)\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ziwh":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836788224","body":"## 思路\r\n\r\n#### 题目地址：\r\nhttps://leetcode-cn.com/problems/add-to-array-form-of-integer/\r\n\r\n当前位 = (A 的当前位 + B 的当前位 + 进位) % 10\r\n\r\n注意，AB两数都加完后，最后判断一下进位 carry, 进位不为 0 的话加在前面。\r\n\r\n```\r\nwhile ( A 没完 || B 没完)\r\n    A 的当前位\r\n    B 的当前位\r\n\r\n    和 = A 的当前位 + B 的当前位 + 进位\r\n    \r\n    // 循环条件调整\r\n    当前位 = 和 % 10;\r\n    进位 = 和 / 10;\r\n```\r\n\r\n## 代码\r\nJava\r\n```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        int i = num.length - 1;\r\n        int sum = 0;\r\n        List<Integer> ans = new ArrayList<>();\r\n        while(i >= 0 || k != 0 || sum != 0) {\r\n            int x = i >= 0 ? num[i] : 0;\r\n            int y = k != 0 ? k % 10 : 0;\r\n            sum += x + y;\r\n            ans.add(sum % 10);\r\n            sum = sum / 10;\r\n            k = k / 10;\r\n            i--;\r\n        }\r\n        Collections.reverse(ans);\r\n        return ans;\r\n    }\r\n}\r\n```\r\n\r\n## 复杂度\r\n时间复杂度：O(max(n, log(k))\r\n空间复杂度: O(1)\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"CruiseYuGH":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836790900","body":"## 思路\r\n\r\nsum_temp = num[i]+k%10 +temp\r\n分别更新temp 和 num[i]\r\n最后判别下是否有剩余的K or temp\r\n\r\n## 关键点\r\n\r\n-  \r\n\r\n## 代码\r\n\r\n- 语言支持：Python3\r\n\r\nPython3 Code:\r\n\r\n```python\r\n\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        temp = 0\r\n        for i in range(len(num)-1,-1,-1):\r\n            if k > 0 or temp>0:\r\n                sum_temp = num[i]+k%10 +temp\r\n                num[i]=sum_temp%10\r\n                temp = sum_temp//10\r\n                k = k//10\r\n        k+=temp\r\n        if k >0 :\r\n            while K:\r\n                num.insert(0,k%10)\r\n                k = k//10\r\n        return num\r\n\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(n)$\r\n- 空间复杂度：$O(n)$"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"johanazhu":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836791845","body":"## 思路\r\n\r\n#### 题目地址：\r\n\r\nhttps://leetcode-cn.com/problems/add-to-array-form-of-integer/\r\n\r\n当前位 = (A 的当前位 + B 的当前位 + 进位) % 10\r\n\r\n注意，AB两数都加完后，最后判断一下进位 carry, 进位不为 0 的话加在前面。\r\n\r\n```\r\nwhile ( A 没完 || B 没完)\r\n    A 的当前位\r\n    B 的当前位\r\n\r\n    和 = A 的当前位 + B 的当前位 + 进位\r\n    \r\n    // 循环条件调整\r\n    当前位 = 和 % 10;\r\n    进位 = 和 / 10;\r\n```\r\n\r\n## 代码\r\n\r\nJavascript\r\n\r\n```javascript\r\nvar addToArrayForm = function(num, k) {\r\n    k = k.toString();\r\n    let aLen = num.length, kLen = k.length;\r\n    num.reverse();\r\n    if(aLen > kLen) {\r\n        k = '0'.repeat(aLen - kLen) + k;\r\n    } else if(aLen < kLen) {\r\n        for(let i = 0; i < kLen - aLen; i++) {\r\n            num.push(0);\r\n        }\r\n    }\r\n    k = k.split('').reverse();\r\n    let sum = 0, carry = 0, res = [];\r\n    num.forEach((item, i)=>{\r\n        sum = item + + k[i] + carry;\r\n        carry = parseInt(sum / 10);\r\n        res.push(sum % 10)\r\n    })\r\n    if(carry > 0) {\r\n        res.push(carry)\r\n    }\r\n    return res.reverse();\r\n};\r\n```\r\n\r\n## 复杂度\r\n\r\n时间复杂度：O(max(n, log(k))\r\n空间复杂度: O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zengwmFE":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836792060","body":"```\r\n/**\r\n * @param {number[]} num\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = function(num, k) {\r\n    let target = 0\r\n    let sum = 0\r\n    for(let i=num.length-1;i>=0;i--){\r\n        sum = num[i]+k%10+target \r\n        num[i] = sum%10\r\n        target = Math.floor(sum/10)   \r\n         k = Math.floor(k/10)\r\n\r\n    }\r\n    k = target + Number(k)\r\n    if(k){\r\n        let str = String(k)\r\n        for(let i=str.length-1;i>=0;i--){\r\n            num.unshift(str[i])\r\n        }\r\n    }\r\n    return num\r\n};\r\n```\r\n时间复杂度：O(n)\r\n空间复杂度：O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dorothyDing":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836793890","body":"javascript\r\n```js\r\nvar addToArrayForm = function(num, k) {\r\n    let numStr = num.join('')\r\n    let maxLength = Math.max(numStr.length, k.toString().length)\r\n    numArr = numStr.padStart(maxLength, '0').split('').reverse()\r\n    kArr = k.toString().padStart(maxLength, '0').split('').reverse()\r\n    let flag = 0\r\n    for(let i = 0; i < maxLength; i++) {\r\n        let sum = Number(numArr[i]) + Number(kArr[i]) + flag\r\n        if (sum >= 10) {\r\n            flag = 1\r\n            sum -= 10\r\n        } else {\r\n            flag = 0\r\n        }\r\n        numArr[i] = sum\r\n    }\r\n    if (flag) {\r\n        numArr.push(flag)\r\n    }\r\n    return numArr.reverse().map(i => Number(i))\r\n};\r\n```\r\n时间复杂度：O(n)\r\n空间复杂度:  O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mittacy":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836795620","body":"### 思路\r\n\r\n从后往前遍历num，和k进行加法运算并进位，每次存入数组(该数组是从低位往高位存储的)，直到k=0，最后反转数组\r\n\r\n### 代码\r\n\r\n\r\n```go\r\nfunc addToArrayForm(num []int, k int) []int {\r\n    ans := make([]int, 0)\r\n    for i := len(num) - 1; i >= 0 || k > 0; i-- {\r\n        if i >= 0 {\r\n            k += num[i]\r\n        }\r\n        ans = append(ans, k%10)\r\n        k /= 10\r\n    }\r\n\r\n    i, j := 0, len(ans)-1\r\n    for i < j {\r\n        ans[i], ans[j] = ans[j], ans[i]\r\n        i++\r\n        j--\r\n    }\r\n    return ans\r\n}\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(max(N, logk))，其中 N 为数组长度。(k / 10^n = 1 => logk)\r\n- 空间复杂度：O(1)，除了返回值为数组外，其他都为常量\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yourspeace":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836797246","body":"语言：Java\r\n\r\n思路：leetcode官方题解的思路：数组和数字最后一位从后往前，对应的位相加，如果产生进位，数字k加1，这样就会在下一位中运 算了，最后如果数字k的长度大于数组的长度，那么就把数字k剩下的进行取余取整操作，加到目标数组中，最后数组反转得到结果\r\n\r\n代码：\r\n\r\n`class Solution {\r\n    public List<Integer> addToArrayForm(int[] A, int K) {\r\n        // 初始化参数\r\n        List<Integer> res = new ArrayList<Integer>();\r\n        int n = A.length;\r\n\r\n        // 1. 从后往前逐位相加\r\n        for(int i = n - 1;i >= 0;i--){\r\n            // 1.1 逐位相加\r\n            int sum = A[i] + K % 10;         // 每次重置sum\r\n            K /= 10;    \r\n            // 1.2 处理两位相加 进位的情况\r\n            if(sum >= 10){\r\n                K++;                        // 进位到K的末尾\r\n                sum -= 10;                  // 进位清掉\r\n            }\r\n            // 1.2 当前相加的结果 添加到结果集\r\n            res.add(sum);\r\n        }\r\n\r\n        // 2. K的数字长度大于数组的数字长度\r\n        for(;K > 0;K /= 10){                // 每次K左移一位\r\n            res.add(K % 10);                // 添加到结果集\r\n        }\r\n\r\n        // 3. 将结果集翻转即是所求答案\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n}`\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"paopaohua":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836797976","body":"思路：\n  1、从数组最后一位向前遍历，进行相加，考虑进位操作\n  2、考虑进位超出当前长度的操作\n  3、输出结果进行翻转 collections.reverse（res）\n代码：\n```\npublic List<Integer> addToArrayForm(int[] A, int K) {\n    List<Integer> res = new ArrayList<>();\n    int carry = 0;\n    int l1 = A.length - 1;\n    while (l1 >= 0 || K != 0) {\n        int x = l1 < 0 ? 0 : A[l1];\n        int y = K == 0 ? 0 : K % 10;\n\n        int sum = x + y + carry;\n        res.add(sum % 10);\n        carry = sum / 10;\n\n        l1--;\n        K = K / 10;\n    }\n    if (carry != 0) res.add(carry);\n    Collections.reverse(res);\n    return res;\n}\n\n```\n复杂度分析：（不懂）\n    时间复杂度：Ｏ（n）\n    空间复杂度：Ｏ（n）\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Auto-SK":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836800746","body":"## 方法一：逐位相加\r\n\r\n**当前位 = (A 的当前位 + B 的当前位 + 进位 carry) % 10**\r\n\r\n### 算法流程\r\n\r\n```\r\nwhile A 没完 or B 没完\r\n\tA 的当前位\r\n\tB 的当前位 (B % 10)\r\n\r\n\t和 = A 的当前位 + B 的当前位 + 进位 carry\r\n\t进位 = 和 // 10\r\n\r\n\t当前结果位 = 和 % 10\r\n判断还有进位吗\r\n反转数组\r\n```\r\n\r\n### 复杂度分析\r\n\r\n* 时间复杂度：O(max(len(num), len(k)))\r\n* 空间复杂度：O(1)\r\n\r\n### 代码\r\n\r\n``` python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        i = len(num) - 1\r\n        sum = 0\r\n        carry = 0\r\n        res = []\r\n        while i >= 0 or k != 0:\r\n            x = num[i] if i >= 0 else 0\r\n            y = k % 10 if k != 0 else 0\r\n            sum = x + y + carry\r\n            carry = sum // 10\r\n\r\n            i -= 1\r\n            k //= 10\r\n\r\n            res.append(sum % 10)\r\n        \r\n        if carry != 0:\r\n            res.append(carry)\r\n        return res[::-1]\r\n```\r\n\r\n\r\n## 方法二：转换+逐位取出\r\n\r\n### 算法流程\r\n\r\n1. 逐位取 num，将其转为字符串\r\n2. 将 num 字符串转为整数\r\n3. 求出 num 和 k 之和 sum\r\n4. 逐位取 sum % 10，sum = sum // 10\r\n5. 反转，res[::-1]\r\n\r\n### 复杂度分析\r\n\r\n* 时间复杂度：O(n)\r\n* 空间复杂度：O(1)\r\n\r\n### 代码\r\n\r\n``` python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        x = ''\r\n        for i in num:\r\n            x += str(i)\r\n        x = int(x)\r\n        res = x + k\r\n        if res == 0:\r\n            return [0]\r\n        ans = []\r\n        while res != 0:\r\n            ans.append(res % 10)\r\n            res = res // 10\r\n        return ans[::-1]\r\n```\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xuanaxuan":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836802914","body":"### 思路\r\n\r\n#### 模板\r\n```\r\n当前位=0\r\nwhile ( A 没完 || B 没完)\r\n    //根据下标找到\r\n    A 的当前位\r\n    B 的当前位\r\n    和 = A 的当前位 + B 的当前位 + 进位carry\r\n\r\n    当前位 = 和 % 10;\r\n    进位 = 和 / 10;\r\n\r\n判断还有进位吗,进位不为 0 ,加在目标值前面。\r\n```\r\n#### 注意点\r\n1. 循环结束条件\r\n2. 当前位的计算,注意防空\r\n3. 和的计算,carry初始值为0\r\n4. js中取整/后要转整数\r\n  \r\n### 代码\r\n\r\n```js\r\nvar addToArrayForm = function (num, k) {\r\n  let i = num.length - 1,\r\n    carry = 0,\r\n    arr = [];\r\n  while (i >= 0 || k > 0) {\r\n    let n = i>=0 ? num[i] : 0;\r\n    let m = k != 0 ? k % 10 : 0;\r\n    let sum = n + m + carry;\r\n    carry = parseInt(sum / 10);\r\n    arr.unshift(sum % 10);\r\n    i--;\r\n    k = parseInt(k / 10);\r\n  }\r\n  if (carry) arr.unshift(1);\r\n  return arr;\r\n};\r\n```\r\n### 复杂度\r\n时间复杂度:`O(n)` \r\n空间复杂度:`O(n)`\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"caoyuyuyu":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836813414","body":"\r\n## 题目地址(989. 数组形式的整数加法)\r\n\r\nhttps://leetcode-cn.com/problems/add-to-array-form-of-integer/\r\n\r\n## 思路\r\n\r\n-  最终结果由数组变成的数值和数值相加，再转化为数组\r\n-  所以解题过程完全按照结果的生成过程for循环实现\r\n\r\n## 代码\r\n\r\n- 语言支持：Python3\r\n\r\nPython3 Code:\r\n\r\n```Python3\r\n\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        a=''\r\n        b=[]\r\n        for i in num:\r\n            a=a+str(i)\r\n        re=str(int(a)+k)\r\n        for j in re:\r\n            b.append(int(j))\r\n        return b\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n- 还不会分析复杂度,后面补上相关知识～\r\n\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"keepchasing":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836818313","body":"### 思路\r\n+ 遍历数组与K的对应位相加，并记录进位carryNum，carryNum默认值为0\r\n+ 判断K的位数与A对应的数字的位数，如果K的位数更大 取出前边的数据依次加到A中\r\n### 语言：\r\n javascript\r\n\r\n### 复杂度分析\r\n+ 时间复杂度： O(N)\r\n+ 空间复杂度：O(1)\r\n```\r\n/**\r\n * @param {number[]} A\r\n * @param {number} K\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = (A, K) => {\r\n    let len = A.length // 数组A的长度\r\n    let carryNum = 0 // 进位\r\n    A.forEach((item, index) => {\r\n        let curNum = Math.floor(K % Math.pow(10, index + 1) / Math.pow(10, index))\r\n        let tmpCurNum = (curNum + A[len - index -1 ] + carryNum)\r\n        A[len - index - 1] = tmpCurNum % 10\r\n        carryNum = Math.floor(tmpCurNum / 10)\r\n    })\r\n    let kStrLen = (K + '').length\r\n    // 如果K的位数大于A对应的数字的位数\r\n    if (kStrLen >= len) {\r\n        let tmpK = Math.floor(K / Math.pow(10, len)) + carryNum\r\n        let tmpKStrLen = (tmpK + '').length\r\n        for (let i = 0; i < tmpKStrLen; i ++) {\r\n            let tmpNum = Math.floor(tmpK % Math.pow(10, i + 1) / Math.pow(10, i))\r\n            i === tmpKStrLen - 1 && tmpNum === 0 ? '' : A.unshift(tmpNum)\r\n        }\r\n    } else {\r\n        carryNum ? A.unshift(carryNum) : ''\r\n    }\r\n    return A\r\n}\r\n```"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"CurrrryChen":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836821360","body":"**思路**\r\n利用js的BigInt累加\r\n\r\n**代码**\r\n```js\r\nvar addToArrayForm = function(num, k) {\r\n    return (BigInt(num.join(''))+BigInt(k)).toString().split('').map(Number);\r\n};\r\n```\r\n\r\n**复杂度**\r\n时间复杂度:O(n)\r\n空间复杂度:O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"renziao":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836824996","body":"思路：leetcode官方题解的思路：数组和数字最后一位从后往前，对应的位相加，如果产生进位，数字k加1，这样就会在下一位中运 算了，最后如果数字k的长度大于数组的长度，那么就把数字k剩下的进行取余取整操作，加到目标数组中，最后数组反转得到结果\r\n\r\n代码：\r\n\r\npublic List addToArrayForm(int[] A, int K) {\r\n// 初始化参数\r\nList res = new ArrayList();\r\nint n = A.length;\r\n\r\n    // 1. 从后往前逐位相加\r\n    for(int i = n - 1;i >= 0;i--){\r\n        // 1.1 逐位相加\r\n        int sum = A[i] + K % 10;         // 每次重置sum\r\n        K /= 10;    \r\n        // 1.2 处理两位相加 进位的情况\r\n        if(sum >= 10){\r\n            K++;                        // 进位到K的末尾\r\n            sum -= 10;                  // 进位清掉\r\n        }\r\n        // 1.2 当前相加的结果 添加到结果集\r\n        res.add(sum);\r\n    }\r\n\r\n    // 2. K的数字长度大于数组的数字长度\r\n    for(;K > 0;K /= 10){                // 每次K左移一位\r\n        res.add(K % 10);                // 添加到结果集\r\n    }\r\n\r\n    // 3. 将结果集翻转即是所求答案\r\n    Collections.reverse(res);\r\n    return res;"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Nbambi":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836826525","body":"思路\r\n- 遍历数组num，用k乘当前位的10的幂次，累加结果\r\n\r\n代码\r\n```\r\nvar addToArrayForm = function (num, k) {\r\n    let len = num.length - 1;\r\n    let result = 0;\r\n    for(let i=0; i<num.length; i++) {\r\n        result = result +num[i] * (Math.pow(10, len - i))\r\n    }\r\n    return result + k;\r\n};\r\n```\r\n\r\n复杂度\r\n\r\n- 时间复杂度O(n) 空间复杂度O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"AmuroPeng":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836832176","body":"\r\n## 题目地址(989. 数组形式的整数加法)\r\n\r\nhttps://leetcode-cn.com/problems/add-to-array-form-of-integer/\r\n\r\n## 题目描述\r\n\r\n```\r\n对于非负整数 X 而言，X 的数组形式是每位数字按从左到右的顺序形成的数组。例如，如果 X = 1231，那么其数组形式为 [1,2,3,1]。\r\n\r\n给定非负整数 X 的数组形式 A，返回整数 X+K 的数组形式。\r\n\r\n \r\n\r\n示例 1：\r\n\r\n输入：A = [1,2,0,0], K = 34\r\n输出：[1,2,3,4]\r\n解释：1200 + 34 = 1234\r\n\r\n\r\n示例 2：\r\n\r\n输入：A = [2,7,4], K = 181\r\n输出：[4,5,5]\r\n解释：274 + 181 = 455\r\n\r\n\r\n示例 3：\r\n\r\n输入：A = [2,1,5], K = 806\r\n输出：[1,0,2,1]\r\n解释：215 + 806 = 1021\r\n\r\n\r\n示例 4：\r\n\r\n输入：A = [9,9,9,9,9,9,9,9,9,9], K = 1\r\n输出：[1,0,0,0,0,0,0,0,0,0,0]\r\n解释：9999999999 + 1 = 10000000000\r\n\r\n\r\n \r\n\r\n提示：\r\n\r\n1 <= A.length <= 10000\r\n0 <= A[i] <= 9\r\n0 <= K <= 10000\r\n如果 A.length > 1，那么 A[0] != 0\r\n```\r\n\r\n## 前置知识\r\n\r\n- \r\n\r\n## 公司\r\n\r\n- 暂无\r\n\r\n## 思路\r\n\r\n## 关键点\r\n\r\n-  \r\n\r\n## 代码\r\n\r\n- 语言支持：Java\r\n\r\nJava Code:\r\n\r\n```java\r\n\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        int n = num.length;\r\n        List<Integer> ans = new ArrayList<Integer>();\r\n        for (int i = n - 1; i >=0; i--) {\r\n            int digit = num[i] + k % 10; // for each digit\r\n            k /= 10;\r\n            if (digit >= 10) {\r\n                digit -= 10;\r\n                k++;\r\n            }\r\n            ans.add(digit);\r\n        }\r\n        // if the length of k is more than num\r\n        while (k >= 10){\r\n            ans.add(k % 10);\r\n            k /= 10;\r\n        }\r\n        if (k != 0) {\r\n            ans.add(k);\r\n        }\r\n        Collections.reverse(ans);\r\n        return ans;\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(n)$\r\n- 空间复杂度：$O(1)$\r\n\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"christ36":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836832193","body":"class Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> res = new ArrayList<Integer>();\r\n        int n = num.length;\r\n        for (int i = n - 1; i >= 0 || k > 0; --i, k /= 10) {\r\n            if (i >= 0) {\r\n                k += num[i];\r\n            }\r\n            res.add(k % 10);\r\n        }\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n}\r\n复杂度分析\r\n\r\n时间复杂度：O(max(n,log k))，其中 n 为数组的长度。\r\n\r\n空间复杂度：O(1)。除了返回值以外，使用的空间为常数。\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fangyinghua":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836833635","body":"思路:\r\n\r\n* 从右往左 依次遍历 [十进一]\r\n\r\n```js\r\n/**\r\n * @param {number[]} num\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = function(num, k) {\r\n    const res = [];\r\n    const len= num.length;\r\n\r\n   //需要处理 两者长度不一，可能数组的个数小于k的个数\r\n    for (let i = len - 1; (i >= 0 || k > 0); (--i, k = parseInt(k / 10))) {\r\n        if (i >= 0) {\r\n            k += num[i];\r\n        }\r\n        res.push(k % 10);\r\n    }\r\n    res.reverse();\r\n    return res;\r\n};\r\n```\r\n\r\n复杂度\r\n\r\n* 时间复杂度O(Max(n,k)) \r\n* 空间复杂度O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Gjts":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836834532","body":"算法流程\r\n\r\n    获取数组的长度\r\n    将 需要添加的targe赋值给sum\r\n    求出 num 和 k 之和 sum\r\n    逐位取 sum % 10，sum = sum // 10\r\n    反转，res[::-1]\r\n\r\n复杂度分析\r\n\r\n    时间复杂度：O(n)\r\n    空间复杂度：O(n)\r\n\r\n代码\r\n    \r\n    语言支持：c#\r\n    public IList<int> AddToArrayForm(int[] num, int k) {\r\n          int i = num.Length - 1;\r\n          int sum = k;\r\n          List<int> arr = new List<int>();\r\n          while(i >= 0 || sum > 0){\r\n              if(i >= 0){\r\n                  sum += num[i];\r\n              }\r\n              arr.Add(sum % 10);\r\n              sum /= 10;\r\n              i--;\r\n          }\r\n          int[] arr1 = arr.ToArray();\r\n          Array.Reverse(arr1);\r\n          return arr1;\r\n      }：\r\n  "},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"doubelejjyy":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836835885","body":"**思路:**\r\n1.从低位开始加\r\n2.可能k的长度大于数组的长度,所以可能for循环结束了但是k没加完,所以最后用while\r\n3.list.add的顺序是队列所以list一开始的顺序是答案从低位到高位的顺序 所以要逆序一下\r\n**代码**\r\n\r\n\r\n```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> list = new ArrayList<>();\r\n        int length = num.length;\r\n        int value;\r\n        for (int i = length-1; i >=0; i--) {\r\n            value = num[i]+k%10;\r\n            k/=10;\r\n            if(value>9){\r\n                value -=10;\r\n                k++;//进位\r\n            }\r\n            list.add(value);\r\n\r\n        }\r\n\r\n        while(k!=0)\r\n            list.add(k%10);\r\n            k/=10;\r\n        }\r\n\r\n        Collections.reverse(list);\r\n        return list;\r\n\r\n    }\r\n}\r\n```\r\n\r\n\r\n**时间复杂度O(n)**\r\n**空间复杂度O(n)**"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckyyangrun":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836844742","body":"```\r\ndef addToArrayForm(self, A: List[int], K: int) -> List[int]:\r\n    res = []\r\n    i, carry = len(A) - 1, 0\r\n    while i >= 0 or K != 0:\r\n        x = A[i] if i >= 0 else 0\r\n        y = K % 10 if K != 0 else 0\r\n        sum = x + y + carry\r\n        res.append(sum % 10)\r\n        carry = sum // 10\r\n        i -= 1\r\n        K //= 10\r\n    if carry != 0: res.append(carry)\r\n    return res[::-1]\r\n```"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tipshal":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836845741","body":"我是码盲，刚开始学Python，先说一下思路吧：\r\n1.把一维数组转换成整数\r\n  s=0\r\n  for i in A\r\n    s=s*10+i\r\n2.整体进行加法运算\r\n  s=s+k\r\n3.将计算结果转成字符串，用列表推导式把每一位字符转换成整数\r\n  s=str(s)\r\n  return[int(x) for x in s]"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zsjlovelike":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836846214","body":"Class Solution{\r\nList<Integer> res = new ArrayList<Integer>();\r\n        int n = num.length;\r\n        for (int i = n - 1; i >= 0 || k > 0; --i, k /= 10) {\r\n            if (i >= 0) {\r\n                k += num[i];\r\n            }\r\n            res.add(k % 10);\r\n        }\r\n        Collections.reverse(res);\r\n        return res;\r\n}"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"daidaidashixiong666":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836860926","body":"class Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> res = new ArrayList<Integer>();\r\n        int n = num.length;\r\n        for (int i = n - 1; i >= 0; --i) {\r\n            int sum = num[i] + k % 10;\r\n            k /= 10;\r\n            if (sum >= 10) {\r\n                k++;\r\n                sum -= 10;\r\n            }\r\n            res.add(sum);\r\n        }\r\n        for (; k > 0; k /= 10) {\r\n            res.add(k % 10);\r\n        }\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n}"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"flagyk5":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836861924","body":"思路：\r\n1.list转换为int，计算加法，再把结果转化为list\r\n2.缺点运行速度太慢，空间一般\r\n\r\nclass Solution:\r\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\r\n        B = 0\r\n        for i in range(len(A) - 1, -1, -1):\r\n            B += A[i]*(10**(len(A) - i - 1))  \r\n        C = B + K\r\n        \r\n        if C == 0:\r\n            D = [0]\r\n        else:\r\n            D = []\r\n        \r\n        while C:\r\n            D.append(C%10)\r\n            C //=10\r\n        D.reverse()\r\n        return D"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jennny06":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836864849","body":"一开始用了一个一个加的方法，然后在用 divmod 做，但是发现这样的速度很慢。学习了一下评论里的码，发现python 其实一行code 就可以搞定：先把str 转成int， 然后加减，再转成str：\r\n`return map(int,str(int(''.join(map(str,num))) + k))`"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sun-unc":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836866524","body":"var addToArrayForm = function (num, k) {\r\n    return (BigInt(num.join('')) + BigInt(k)).toString().split('')\r\n};"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"Rainjoy66":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836866671","body":"```\r\ndef addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        res = []\r\n        for nu in num:\r\n            res.append(str(nu))\r\n        string = \"\".join(res)\r\n        ans = int(string) + k\r\n        anss = list(str(ans))\r\n        dd = []\r\n        for ansss in anss:\r\n            dd.append(int(ansss))\r\n        return dd\r\n```"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shuo0314":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836867704","body":"#Logic: convert list to str, then to int; add 2 int to get sum; convert int to str; convert str to list\r\n#Code: Python\r\n\r\n```\r\ndef addToArrayForm(self, num,k):\r\n    num_str = \"\"\r\n    for i in num:\r\n        num_str += str(i)\r\n    num_sum = int(num_str)+k\r\n    num_lst = [int(i) for i in str(num_sum)]\r\n    return num_lst\r\n```\r\n\r\n#Complexity: Time: O(n), Space: O(n)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yangjiahao106":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836868252","body":"## 思路\r\n\r\n遍历数组num，用k乘当前位的10的幂次，累加结果\r\n代码\r\n``` python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        num = list(reversed(num))\r\n        for i in range(0, len(num)):\r\n            k += num[i]\r\n            num[i] = k %10\r\n            k = k // 10\r\n        \r\n        while k > 0:\r\n            num.append(k%10)\r\n            k  = k // 10\r\n        return list(reversed(num))\r\n```\r\n## 复杂度\r\n\r\n时间复杂度O(n) 空间复杂度O(1)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bmxbmx3":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836878093","body":"### 思路\r\n\r\n初步思路：\r\n1. 先排除异常情况\r\n2. 将数组变成对应数字，加上一个数后，将相加结果变回数组\r\n\r\n### 代码\r\n\r\n\r\n```python\r\n\r\nclass Solution(object):\r\n    def addToArrayForm(self, num, k):\r\n        \"\"\"\r\n        :type num: List[int] 待加数字的数组\r\n        :type k: int 所加的数字\r\n        :rtype: List[int] 加数字后的数组\r\n        \"\"\"\r\n\r\n        # 将num数组转换为对应的数字\r\n        sum = 0\r\n        length = len(num)\r\n        for i in range(len(num)):\r\n            sum += num[i]*10**(length-i-1)  # 逐位相加，比如[1,2]即1*10^1+2*10^0=12\r\n\r\n        sum += k  # 计算相加结果\r\n\r\n        # 将相加后的数字转换为对应的数组（从后往前逐位取数字）\r\n        result = []\r\n        while(sum):\r\n            result.append(sum % 10)\r\n            sum = sum//10  # 双斜杠（//）表示地板除，即先做除法（/），然后向下取整（floor）\r\n        result.reverse() # 结果数组倒序\r\n        return result\r\n\r\n\r\nnum = [9,9,9,9,9,9,9,9,9,9]\r\nk = 1\r\ns = Solution()\r\nresult = s.addToArrayForm(num, k)\r\nprint(result)\r\n\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(N)，其中 N 为数组长度。\r\n- 空间复杂度：O(N)\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"DADAHUI":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836882177","body":"\r\n## 题目地址(989. 数组形式的整数加法)\r\n\r\nhttps://leetcode-cn.com/problems/add-to-array-form-of-integer/\r\n\r\n## 题目描述\r\n```\r\n对于非负整数 X 而言，X 的数组形式是每位数字按从左到右的顺序形成的数组。例如，如果 X = 1231，那么其数组形式为 [1,2,3,1]。\r\n给定非负整数 X 的数组形式 A，返回整数 X+K 的数组形式。\r\n示例 1：\r\n输入：A = [1,2,0,0], K = 34\r\n输出：[1,2,3,4]\r\n解释：1200 + 34 = 1234\r\n示例 2：\r\n输入：A = [2,7,4], K = 181\r\n输出：[4,5,5]\r\n解释：274 + 181 = 455\r\n示例 3：\r\n输入：A = [2,1,5], K = 806\r\n输出：[1,0,2,1]\r\n解释：215 + 806 = 1021\r\n示例 4\r\n输入：A = [9,9,9,9,9,9,9,9,9,9], K = 1\r\n输出：[1,0,0,0,0,0,0,0,0,0,0]\r\n解释：9999999999 + 1 = 10000000000\r\n提示：\r\n1 <= A.length <= 10000\r\n0 <= A[i] <= 9\r\n0 <= K <= 10000\r\n如果 A.length > 1，那么 A[0] != 0\r\n`\r\n\r\n## 思路\r\nnum与k值逐位相加，大于9时进1，参与下一位运算\r\n## 关键点\r\n\r\n-  \r\n\r\n## 代码\r\n\r\n- 语言支持：C++\r\n\r\nC++ Code:\r\n\r\n```c++\r\n\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) \r\n    {\r\n      vector <int> res;\r\n      for(int i=num.size()-1;i>=0;i--)\r\n      {\r\n          int sum=num[i]+k%10;\r\n          k/=10;\r\n          if(sum>9)\r\n          {\r\n              sum=sum%10;\r\n              k++;\r\n          }\r\n          res.push_back(sum);\r\n\r\n      }\r\n      for(;k>0;k/=10)\r\n      {\r\n          res.push_back(k%10);\r\n      }\r\n\r\n      reverse(res.begin(),res.end());\r\n      return res;\r\n    }\r\n};\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(n)$\r\n- 空间复杂度：$O(n)$\r\n\r\n\r\n"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qycoder":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836882253","body":"## 思路\r\n\r\n\r\n## 代码\r\nJavaScript\r\n\r\n```js\r\nvar addToArrayForm = function (num, k) {\r\n  let str = '';\r\n  for (let i = 0; i < num.length; i++) {\r\n    if (num[i] < 0 || num[i] > 9) {\r\n      str = '';\r\n      break;\r\n    } else {\r\n      str += num[i];\r\n    }\r\n  }\r\n  let sum = str / 1 + k;\r\n  const result = [];\r\n  let divisor;\r\n  for (let j = 0; j < (sum + '').length; j++) {\r\n    if (j == 0) {\r\n      divisor = 1;\r\n    } else {\r\n      divisor = 10 ** j;\r\n    }\r\n    result.unshift(parseInt((sum % 10 ** (j + 1)) / divisor));\r\n  }\r\n  return result;\r\n};\r\n\r\nconst arr = [1, 2, 0, 1];\r\nconst k = 220;\r\nconsole.log(addToArrayForm(arr, k));\r\n```"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lanceli424":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836931206","body":"## 代码\r\n```\r\nfunction addToArrayForm(num: number[], k: number): number[] {\r\n    let kArr: number[] = String(k).split('').map(v => parseInt(v, 10));\r\n    let kLength = kArr.length - 1;\r\n    let numLength = num.length - 1;\r\n    let flag: number = 0;\r\n    while(numLength >= 0 || kLength >= 0 || flag > 0) {\r\n        let kItem = kArr[kLength] || 0;\r\n        let numItem = num[numLength] || 0;\r\n        let sum = numItem + kItem + flag;\r\n        flag = 0;\r\n        if(sum >= 10) {\r\n            flag = 1;\r\n            sum -= 10;\r\n        }\r\n        if(numLength < 0) {\r\n            num.unshift(sum);\r\n        }else {            \r\n            num[numLength] = sum;\r\n        }\r\n        numLength--;\r\n        kLength--;\r\n    }\r\n    return num;\r\n};\r\n```\r\n\r\n## 思路\r\n1. 把数据转换成数组相加\r\n2. 两个数组长度可能不一样长，如果长度不够需要在头部插入\r\n\r\n## 复杂度分析\r\n1. 时间复杂度 O(m+n)，其中 m 是 num 数组长度，n 是 k的长度\r\n2. 空间复杂度 O(m+n)"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lingquan02":[{"title":"989. 数组形式的整数加法","url":"https://github.com/leetcode-pp/91alg-4/issues/33#issuecomment-836966361","body":"### 思路\r\n- 位数相加，数组加完后，指针向前移动， 对于k加完后，去掉个位\r\n- 边界 数组len>=0 || k!=0\r\n复杂度：\r\nT= O(n)\r\nS =O(1)\r\n```javascript\r\nvar addToArrayForm = function(num, k) {\r\n    let res = [];// 存放结果\r\n    let len = num.length-1;\r\n    let carry = 0; // 存放进位\r\n\r\n    while(len>=0 || k!=0) {\r\n        const x = len >=0 ? num[len] : 0 // 取最后一位  （个位数）\r\n        const y = k!=0 ? k % 10 : 0; // 取个位数 取模\r\n\r\n        const sum = x+y+carry // 求和  \r\n        res.push(sum%10) // 将个位数放到结果集里\r\n        carry = Math.floor(sum/10) // 存放进位\r\n\r\n        len--;\r\n        k = Math.floor(k/10); // 每次运算完成去掉个位数\r\n    }\r\n\r\n    if(carry) res.push(carry)\r\n    return res.reverse()\r\n};\r\n\r\n```"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}