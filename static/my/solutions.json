{"1":[],"2":[],"3":[],"4":[],"5":[],"6":[],"7":[],"8":[],"9":[],"10":[],"11":[],"12":[],"13":[],"14":[],"15":[],"16":[],"17":[],"18":[],"19":[],"20":[],"21":[],"22":[],"23":[],"24":[],"25":[],"26":[],"27":[],"28":[],"29":[],"30":[],"31":[],"32":[],"33":[],"34":[],"35":[],"36":[],"37":[],"38":[],"39":[],"40":[],"41":[],"42":[],"43":[],"44":[],"45":[],"46":[],"47":[],"48":[],"49":[],"50":[],"51":[],"52":[],"53":[],"54":[],"55":[],"56":[],"57":[],"58":[],"59":[],"60":[],"61":[],"62":[],"63":[],"64":[],"65":[],"66":[],"67":[],"68":[],"69":[],"70":[],"71":[],"72":[],"73":[],"74":[],"75":[],"76":[],"77":[],"78":[],"79":[],"80":[],"81":[],"82":[],"83":[],"84":[],"85":[],"86":[],"87":[],"88":[],"89":[],"90":[],"91":[],"839781960":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"954545647":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1589210514","body":"js code\n```\n\nvar addToArrayForm = function (num, k) {\n  let i = num.length - 1;\n  let res = [];\n  let carry = 0;\n  while (i >= 0 || k !== 0) {\n    const a = i >= 0 ? num[i] : 0;\n    const b = k !== 0 ? k % 10 : 0;\n    k = Math.floor(k / 10);\n    const sum = a + b + carry;\n    res.push(sum % 10);\n    carry = sum >= 10 ? 1 : 0;\n    i--;\n  }\n  if (carry) res.push(carry);\n  return res.reverse();\n};\n\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1589256739","body":"jscode 二次遍历正向反向\n```\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function (s, c) {\n  let firstIndex = s.indexOf(c)\n  let lastIndex = s.lastIndexOf(c);\n  const len = s.length;\n  const firstArr = [];\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    const cur = s[i];\n    if (cur === c) {\n      firstIndex = i;\n      firstArr.push(0)\n    } else {\n      firstArr.push(Math.abs(i - firstIndex))\n    }\n  }\n  for (let i = len - 1; i >= 0; i--) {\n    const cur = s[i];\n    if (cur === c) {\n      lastIndex = i;\n      res.push(0)\n    } else {\n      res.push(Math.min(Math.abs(i - lastIndex), firstArr[i]))\n    }\n  }\n\n  return res.reverse()\n};\n\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1589288451","body":"jscode 模拟题\n```\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function (maxSize) {\n  this.stack = [];\n  this.maxSize = maxSize;\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function (x) {\n  if (this.stack.length === this.maxSize) return;\n  this.stack.push(x);\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function () {\n  if (this.stack.length === 0) return -1;\n  return this.stack.pop();\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function (k, val) {\n  const len = this.stack.length;\n  const maxLen = len < k ? len : k;\n  for (let i = 0; i < maxLen; i++) {\n    this.stack[i] = this.stack[i] + val\n  }\n};\n\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589369012","body":"jscode 维护变量\n```\n/**\n * @param {string} s\n * @return {string}\n */\nvar decodeString = function (s) {\n  let res = \"\";\n  let temp = [];\n  let count = 0;\n  const len = s.length;\n  for (let i = 0; i < len; i++) {\n    const cur = s[i];\n    console.log(temp)\n    if (Number.isInteger(Number(cur))) {\n      count = Number(count + cur);\n    } else if (cur === \"[\") {\n      temp.push([res, count])\n      res = \"\";\n      count = 0;\n      continue;\n    } else if (cur === \"]\") {\n      const [str, count] = temp.pop();\n      const val = res.repeat(count);\n      res = str + val;\n      continue;\n    } else {\n      res += cur\n    }\n  }\n  return res;\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1590359832","body":"jscode 栈模拟：也就是可以使用push和pop方法\n```\nvar MyQueue = function () {\n  this.stack = [];\n  this.help = [];\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nMyQueue.prototype.push = function (x) {\n  this.stack.push(x);\n};\n\n/**\n * @return {number}\n */\nMyQueue.prototype.pop = function () {\n  if (!this.help.length) {\n    while (this.stack.length) {\n      this.help.push(this.stack.pop());\n    }\n  }\n  return this.help.pop();\n};\n\n/**\n * @return {number}\n */\nMyQueue.prototype.peek = function () {\n  if (!this.help.length) {\n    while (this.stack.length) {\n      this.help.push(this.stack.pop());\n    }\n  }\n  return this.help[this.help.length - 1];\n};\n\n/**\n * @return {boolean}\n */\nMyQueue.prototype.empty = function () {\n  return this.stack.length === 0 && this.help.length === 0\n};\n\n```","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594156691","body":"```\nvar rotateRight = function (head, k) {\n  if (k === 0 || !head || !head.next) return head\n  let len = 1;\n  let temp = head;\n  while (temp && temp.next) {\n    temp = temp.next;\n    len++\n  }\n  temp.next = head; // 将链表形成环\n  temp = head;\n  // 找到最后一个节点断开即可\n  let last = len - k % len - 1;\n  while (last) {\n    temp = temp.next;\n    last--;\n  }\n  const first = temp.next;\n  temp.next = null;\n  return first\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"1541732340":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"michaelxi3":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"darknightwriter":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"findlayzhou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"laofuwf":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lbc546":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zch-bit":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"frankelzeng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xingzhaodev":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joeymoso":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hackbl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"q815101630":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shiyishuoshuo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aouos":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"thinkfurther":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wengzhouyunfan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"whisht":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bzlff":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zzzkains":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chenmengyu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"uancen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nuomituxedo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhongranherz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gr52":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hydelovegood":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nikojxie":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fangxianshen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jokertzw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cyang258":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kernelsue":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"erikahuang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kuang-mou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"iloveqier":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"duke-github":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"caterpillar-0":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ashleyyma6":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuki-yzy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zpc7":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yujian920":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kiirii4":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ucashurui":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xixiao51":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585523282","body":"\n## 题目地址(989. 数组形式的整数加法)\n\nhttps://leetcode.cn/problems/add-to-array-form-of-integer/\n\n## 题目描述\n\n```\n整数的 数组形式  num 是按照从左到右的顺序表示其数字的数组。\n\n例如，对于 num = 1321 ，数组形式是 [1,3,2,1] 。\n\n给定 num ，整数的 数组形式 ，和整数 k ，返回 整数 num + k 的 数组形式 。\n\n \n\n示例 1：\n\n输入：num = [1,2,0,0], k = 34\n输出：[1,2,3,4]\n解释：1200 + 34 = 1234\n\n\n示例 2：\n\n输入：num = [2,7,4], k = 181\n输出：[4,5,5]\n解释：274 + 181 = 455\n\n\n示例 3：\n\n输入：num = [2,1,5], k = 806\n输出：[1,0,2,1]\n解释：215 + 806 = 1021\n\n\n \n\n提示：\n\n1 <= num.length <= 104\n0 <= num[i] <= 9\nnum 不包含任何前导零，除了零本身\n1 <= k <= 104\n```\n\n## 前置知识\n\n- 数组\n\n## 公司\n\n- 暂无\n\n## 思路\nWe iterate over num and k, performing the addition digit by digit, and storing the result in the result list. The carry is calculated by dividing the sum by 10. After the addition loop, we reverse the result list and return it.\n## 关键点\n\n-  Reverse the list before return the result\n- k % 10 as result digit, k /10 as carry\n\n## 代码\n\n- 语言支持：Java\n\nJava Code:\n\n```java\n\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> result = new ArrayList<>();\n        int i = num.length - 1;\n\n        while(i >= 0 || k > 0) {\n            if(i >= 0) {\n                k += num[i--];\n            }\n            result.add(k % 10);\n            k /= 10;\n        }\n\n        Collections.reverse(result);\n        return result;\n    }\n}\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(n)$\n- 空间复杂度：$O(n)$\n\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"feikerwu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"heng518":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yaya-bb":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585708899","body":"``` JavaScript\r\n/**\r\n * @param {number[]} num\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = function(num, k) {\r\n    let res = [];\r\n    let n = num.length;\r\n    for(let i = n -1; i >= 0; i--)\r\n    {\r\n        let sum = num[i] + k%10;\r\n        k = Math.floor(k/10);\r\n        if(sum>=10)\r\n        {\r\n            k++;\r\n            sum = sum -10;\r\n        }\r\n        res.push(sum);\r\n    }\r\n    for(;k>0;k = Math.floor(k/10))\r\n    {\r\n        res.push(k%10);\r\n    }\r\n    res.reverse();\r\n    return res;\r\n\r\n};\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586219133","body":"```JavaScript\nvar shortestToChar = function(s, c) {\n    let res = Array(s.length);\n\n    //贪心法\n    //先从左到右遍历\n    for(let i = 0 ;i <s.length ; i++)\n    {\n        if(s[i] === c)\n        {\n            res[i] = i;\n        }else{\n            //void 0 == undefined)，如果\n            res[i] = (res[i-1] === void 0 ? Infinity : res[i-1]);\n        }\n    }\n    //从右往左遍历\n    for(let i = s.length -1; i>= 0;i--)\n    {\n        \n        if(res[i] === Infinity || res[i+1] - i < i- res[i])\n        {\n            res[i] = res[i+1];\n        }\n    }\n    for(let i = 0 ;i <res.length ; i++){\n        res[i] = Math.abs(res[i] - i);\n    }\n    return res;\n};\n```\n- 时间复杂度：O(n)\n- 空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587517873","body":"```JavaScript\r\n/**\r\n * @param {number} maxSize\r\n */\r\nvar CustomStack = function(maxSize) {\r\n    //用 maxSize 初始化对象，maxSize 是栈中最多能容纳的元素数量，栈在增长到 maxSize 之后则不支持 push 操作。\r\n    this.max = maxSize;\r\n    this.stack = [];\r\n\r\n};\r\n\r\n/** \r\n * @param {number} x\r\n * @return {void}\r\n */\r\nCustomStack.prototype.push = function(x) {\r\n    //如果栈还未增长到 maxSize ，就将 x 添加到栈顶\r\n    if(this.stack.length < this.max)\r\n    {\r\n        this.stack.push(x);\r\n    }\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nCustomStack.prototype.pop = function() {\r\n    //弹出栈顶元素，并返回栈顶的值，或栈为空时返回 -1\r\n   var res = this.stack.pop();\r\n   return res == null ? -1 : res;\r\n   \r\n\r\n};\r\n\r\n/** \r\n * @param {number} k \r\n * @param {number} val\r\n * @return {void}\r\n */\r\nCustomStack.prototype.increment = function(k, val) {\r\n    for(let i = 0 ; i < this.stack.length;i++)\r\n    {\r\n        if(i <k)\r\n        {\r\n            this.stack[i] += val;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Your CustomStack object will be instantiated and called as such:\r\n * var obj = new CustomStack(maxSize)\r\n * obj.push(x)\r\n * var param_2 = obj.pop()\r\n * obj.increment(k,val)\r\n */\r\n```","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1591520076","body":"```JavaScript\n// 使用两个数组的栈方法（push, pop） 实现队列\n/**\n* Initialize your data structure here.\n*/\nvar MyQueue = function() {\n   this.stackIn = [];\n   this.stackOut = [];\n};\n\n/**\n* Push element x to the back of queue. \n* @param {number} x\n* @return {void}\n*/\nMyQueue.prototype.push = function(x) {\n   this.stackIn.push(x);\n};\n\n/**\n* Removes the element from in front of queue and returns that element.\n* @return {number}\n*/\nMyQueue.prototype.pop = function() {\n   const size = this.stackOut.length;\n   if(size) {\n       return this.stackOut.pop();\n   }\n   while(this.stackIn.length) {\n       this.stackOut.push(this.stackIn.pop());\n   }\n   return this.stackOut.pop();\n};\n\n/**\n* Get the front element.\n* @return {number}\n*/\nMyQueue.prototype.peek = function() {\n   const x = this.pop();\n   this.stackOut.push(x);\n   return x;\n};\n\n/**\n* Returns whether the queue is empty.\n* @return {boolean}\n*/\nMyQueue.prototype.empty = function() {\n   return !this.stackIn.length && !this.stackOut.length\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * var obj = new MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tlntin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"richypang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fenchuiyun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jerry-lllman":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nickyk319":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"herbertpan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wsmmxmm":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fan-svg":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuzejia":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sunnyyujf":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"phoenixflyingsky":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nehchsuy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lzyxts":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"elainekuo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ll491119940":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"2learnsomething":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ataraxyadong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wzasd":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miluowzt":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"maylinglin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"weijie-he":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"brodxie":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"y525":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"leungogogo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"suukii":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mirrors-cl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xqy97":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jakkiabc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckyoneday":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chouqin99":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhaogeg111":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shawnhu23":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ye2222":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"uyplayer":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guixian001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"serena9":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"junzmer":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hx-code":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"admu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xxiaomm":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pgquestions":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"eldinzhou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jiangwenzhe":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shawnwu6688":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tomtao626":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aiweng1981":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"richard-lime":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"acoada":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"duanyaqi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ccslience":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kaiykk":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cachezhou0617":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangtuo1999":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cytrue":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckyryan-web":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"naomiwufzz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liuajingliu":[null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594803610","body":"#### 代码实现\n\n```\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar rotateRight = function(head, k) {\n    if (k === 0 || !head || !head.next) {\n        return head;\n    }\n    let n = 1;\n    let cur = head;\n    while (cur.next) {\n        cur = cur.next;\n        n++;\n    }\n\n    let add = n - k % n;\n    if (add === n) {\n        return head;\n    }\n\n    cur.next = head;\n    while (add) {\n        cur = cur.next;\n        add--;\n    }\n\n    const ret = cur.next;\n    cur.next = null;\n    return ret;\n};\n```\n#### 复杂度分析\n- 时间复杂度: $O(N)$\n- 空间复杂度：$O(1)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595787794","body":"### 解题思路\n1. 设置虚拟节点，定义pre指针，指向当前虚拟节点\n2. 当pre.next以及pre.next.next指针均不为空时，开始交换\n3. 令cur指针指向pre.next；next指针指向pre.next.next\n4. 交换过程如下：\n- pre.next = next\n- cur.next = next.next\n- next.next = cur\n- pre = cur\n\n### 代码实现\njavaScript\n\n```\nvar swapPairs = function(head) {\n    let dummyNode = new ListNode(0);\n    dummyNode.next = head;\n    let pre = dummyNode;\n    while(pre.next && pre.next.next) {\n        const cur = pre.next;\n        const next = pre.next.next;\n        pre.next = next;\n        cur.next = next.next;\n        next.next = cur;\n        pre = cur;\n    }\n    return dummyNode.next;\n};\n```\n### 复杂度分析\n- 时间复杂度 $O(N)$, N为链表中节点数目\n- 空间复杂度 $O(1)$","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1597358146","body":"### 解题思路：\n1. 使用pA、pB两个指针分别指向A、B两个链表，两个指针以相同的速率向后移动\n2. 当pA指针移动到了A链接的末尾、令指针pA指向B链表的头部\n3. 当pB指针移动到了A链接的末尾、令指针pB指向A链表的头部\n4. 当pA、pB指针相遇时即为两个指针相遇的起点，否则两个指针不相交\n\n```\nvar getIntersectionNode = function(headA, headB) {\n    let pA = headA;\n    let pB = headB;\n    while (pA != pB) {\n        pA = pA === null ? headB : pA.next;\n        pB = pB === null ? headA : pB.next;\n    }\n    return pA;\n};\n```\n### 复杂度分析\n- 时间复杂度 O(N)\n- 空间复杂度 O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miss1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"johnxizhao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"incipe-win":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"revisegoal":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckysq999":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dereklisdr":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"perfqi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mryao1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"likeyousmile":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhg1992":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liquanluo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aq666888":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"samlu-ecnu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhongxiangxiang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hatorimain":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"neado":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaojunjun1110":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wxleah":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sunl1ght":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kerrhl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"orangejuz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"flyzenr":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"c1f2h3":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dlm001128":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liuxy94":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aconcert":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"linjunhe":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hyqqq22":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yibenxiao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"elon-lau":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nowkizzz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gsgtgyb":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"irenia111":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"suiyi8760":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"saltychess":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rabbit2010520":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ellie-wu05":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yopming":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckytwj":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zzz607":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zoulufeng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xxoojs":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"okkband":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wyz999":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hacker90":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ricjli":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luhaoling":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"flaming-cl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gelxgx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gaominghao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jessie725":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lsunxh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lanceli424":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qycoder":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qilin88":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hengheng-yun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"smz1995":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"size-of":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"moyuanhua":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"9vivian88":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guxuehua":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kirosola":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"biscuit279":[null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1593006668","body":"```python\nclass Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        ans = 0\n        count_a = collections.defaultdict(int)\n        count_b = collections.defaultdict(int)\n        for a,b in zip(arr, sorted(arr)):\n            count_a[a] += 1\n            count_b[b] += 1\n            if count_a == count_b:\n                ans += 1 \n        return ans\n```\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"maoting":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"youzhaing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jawn-ha":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hanwangxxx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dujt-x":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"degndaixingqiu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gzgzgzgzgzgz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gentleman-goodman":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xinyi-arch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zenwangzy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"andyyxw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fourierhai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yangz001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mannnn6":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"haoyangxie":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chjillout":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wenjialu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mhcn":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"coconutice":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jackgaoyuan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xingzhan0312":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yufeng727":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fontendart":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yingchehu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cobayaz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tomato-tomato":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xfliudx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"djd28176":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xilutian":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xy147":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"itsjacob":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shunanch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yppah-eb":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"raychenlei":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"woshichuanqilz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"willuuu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"christina-soda":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jia98shanliang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"user-vannnn":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tobepellucid":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"johnvsd":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yueza":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shawyuan97":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"victorhuang99":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cusanity":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jay-xzj":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shiradaone":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xinyue-ma":[null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589546181","body":"```\r\nclass Solution:\r\n    def decodeString(self, s: str) -> str:\r\n        stack, res, multi = [], \"\", 0\r\n        for c in s:\r\n            if c == '[':\r\n                stack.append([multi, res])\r\n                res, multi = \"\", 0\r\n            elif c == ']':\r\n                cur_multi, last_res = stack.pop()\r\n                res = last_res + cur_multi * res\r\n            elif '0' <= c <= '9':\r\n                multi = multi * 10 + int(c)            \r\n            else:\r\n                res += c\r\n        return res\r\n```","onTime":true},null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1598638576","body":"```\r\nclass Solution(object):\r\n    def detectCycle(self, head):\r\n        fast, slow = head, head\r\n        while True:\r\n            if not (fast and fast.next): return\r\n            fast, slow = fast.next.next, slow.next\r\n            if fast == slow: break\r\n        fast = head\r\n        while fast != slow:\r\n            fast, slow = fast.next, slow.next\r\n        return fast\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"taojin1992":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joyce94":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"steven72574":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tian-pengfei":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"asuka1h":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaowangcoding":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"james0608":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kaneyang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"azl397985856":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"whgsh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chengfengfengwang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bulingbulingbuling":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"c2tr":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585709907","body":"class Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = num.length;\n        int carry = 0;\n        for (int i = n - 1; i >= 0 || k > 0 || carry > 0; i--) {\n            int sum = carry;\n            if (i >= 0) {\n                sum += num[i];\n            }\n            if (k > 0) {\n                sum += k % 10;\n                k /= 10;\n            }\n            res.add(sum % 10);\n            carry = sum / 10;\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586174187","body":"class Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        res = [float('inf')] * len(s)\n        prev = float('-inf')\n\n        # Forward pass\n        for i in range(len(s)):\n            if s[i] == c:\n                prev = i\n            res[i] = i - prev\n\n        prev = float('inf')\n \n        for i in range(len(s) - 1, -1, -1):\n            if s[i] == c:\n                prev = i\n            res[i] = min(res[i], prev - i)\n\n        return res","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587533002","body":"class CustomStack {\n\n    int[] stack;\n    int maxSize;\n    int top;\n\n    public CustomStack(int maxSize) {\n        this.maxSize = maxSize;\n        this.stack = new int[maxSize];\n        this.top = 0;\n    }\n\n    public void push(int x) {\n        if (top < maxSize) {\n            stack[top++] = x;\n        }\n    }\n\n    public int pop() {\n        if (top > 0) {\n            return stack[--top];\n        }\n        return -1;\n    }\n\n    public void increment(int k, int val) {\n        for (int i = 0; i < k && i < stack.length; i++) {\n            stack[i] += val;\n        }\n    }\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589333282","body":"class Solution:\n    def decodeString(self, s: str) -> str:\n        def dfs(start):\n            rstr=rcnt=[]\n            while start<len(s):\n                if s[start].isnumeric():\n                    rcnt+=s[start]\n                elif s[start]=='[':\n                    start,tstr=dfs(start+1)\n                    rstr=rstr+tstr*int(rcnt)\n                    rcnt=''#清空重复的数字\n                elif s[start]==']':\n                    return start,rstr\n                else:\n                    rstr+=s[start]\n                start+=1\n            return rstr\n        return dfs(0)#递归的入口","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1591488338","body":"class MyQueue:\n    def __init__(self):\n        self.s1 = []\n        self.s2 = []\n        self.front = None\n\n    def push(self, x: int) -> None:\n        if not self.s1: self.front = x\n        self.s1.append(x)\n\n    def pop(self) -> int:\n        if not self.s2:\n            while self.s1:\n                self.s2.append(self.s1.pop())\n            self.front = None\n        return self.s2.pop()\n\n    def peek(self) -> int:\n        if self.s2: \n            return self.s2[-1]\n        return self.front\n\n    def empty(self) -> bool:\n        if not self.s1 and not self.s2:\n            return True\n        return False","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1593131130","body":"class Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        cnt = Counter()\n        res = 0\n\n        for x, y in zip(arr, sorted):\n            cnt[x] += 1\n            if cnt[x] == 0:\n                del cnt[x]\n            cnt[y] -= 1\n            if cnt[y] == 0:\n                del cnt[y]\n            if len(cnt) == 0:\n                res += 1\n        return res","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594811055","body":"function rotateRight(head: ListNode | null, k: number): ListNode | null {\n  if (head === null) {\n    return null;\n  }\n  let count = 1,\n    tail = head;\n  while (tail.next !== null) {\n    count++;\n    tail = tail.next;\n  }\n  k = k % count;\n  if (k === 0) {\n    return head;\n  }\n  let newTail = head;\n  for (let i = 0; i < count - k - 1; i++) {\n    newTail = newTail.next!;\n  }\n  const newHead = newTail.next!;\n  tail.next = head;\n  newTail.next = null;\n  return newHead;\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595722184","body":"class Solution {\n    public ListNode swapPairs(ListNode head) {\n        ListNode pre = new ListNode(0);\n        pre.next = head;\n        ListNode temp = pre;\n        while(temp.next != null && temp.next.next != null) {\n            ListNode start = temp.next;\n            ListNode end = temp.next.next;\n            temp.next = end;\n            start.next = end.next;\n            end.next = start;\n            temp = start;\n        }\n        return pre.next;\n    }\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1596177298","body":"class Solution {\n    public TreeNode sortedListToBST(ListNode head) {\n        if (head == null) {\n            return null;\n        }\n        if (head.next == null) {\n            return new TreeNode(head.val);\n        }\n\n        // 找到链表的中间节点\n        ListNode slow = head, fast = head.next.next;\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n\n        TreeNode root = new TreeNode(slow.next.val);\n\n        ListNode rightHead = slow.next.next;\n        slow.next = null;\n        root.left = sortedListToBST(head);\n        root.right = sortedListToBST(rightHead);\n\n        return root;\n    }\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1597380067","body":"public class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        Set<ListNode> visited = new HashSet<>();\n        ListNode temp = headA;\n        while(temp != null){\n            visited.add(temp);\n            temp = temp.next;\n        }\n        temp = headB;\n        while(temp != null){\n            if(visited.contains(temp)){\n                return temp;\n            }\n            temp = temp.next;\n        }\n        return null;\n    }\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1598773931","body":"class Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        while(head) {\n            if(!less<ListNode *>()(head, head->next)) {\n                return head->next;\n            }\n            head = head->next;\n        }\n        return nullptr;\n    }\n};","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"eden-ye":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"codingtrains":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"starorbiting":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mo-xiaoxiu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"passengersa":[null,null,null,null,null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1598724504","body":"\n思路：\n定义快指针 fast 和慢指针 slow，初始时都指向链表头节点。\n快指针每次向后移动2个节点，慢指针每次向后移动1个节点，直到快指针或者慢指针到达链表尾部。\n如果链表无环，则返回null。\n如果链表有环，则快指针和慢指针必定会在环内相遇。\n当快指针和慢指针相遇时，将快指针重新指向链表头节点，然后快指针和慢指针都每次向后移动1个节点，直到它们再次相遇，相遇的节点即为环的入口节点。\n代码：\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\n\nvar detectCycle = function(head) {\n    let slow = head, fast = head;\n    while (fast && fast.next) {\n        slow = slow.next;\n        fast = fast.next.next;\n        if (slow === fast) {\n            fast = head;\n            while (fast !== slow) {\n                fast = fast.next;\n                slow = slow.next;\n            }\n            return fast;\n        }\n    }\n    return null;\n};\n复杂度分析\n时间复杂度：O(N)，其中 N 为链表的长度。\n空间复杂度：O(1)，使用快慢指针，未占用其它空间\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shellylcooper":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"testplm":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tom-zhouch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"skylarxu214":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"taihui":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huaxueguakele":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yang-chenyu104":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mlking15":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"-3":[],"cyonline":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rzhao010":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zywang0":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jetery":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"klspta":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bookyue":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jancerwu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"buer1121":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ceramickitten":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gg925407590":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"alyenor":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chenming-cao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ggohem":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dark-volute":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ronething":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jmastella":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"paopaohua":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dd2001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mayloveless":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuexi001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nineis7":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"abby-xu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gsw9818":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaomingshixiaotang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"snmyj":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585453770","body":"```\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int> b,ans;\n          while(k>0){\n               b.push_back(k%10);\n               k/=10;\n          }\n        reverse(b.begin(),b.end());\n        int d=0;\n        for(int i=num.size()-1,j=b.size()-1;i>=0&&j>=0;i--,j--){\n               int add=num[i]+b[j]+d;\n               ans.push_back(add%10);\n                d=add/10;\n               if(i==0) {\n                   j--;\n                   while(j>=0){\n                       int add1=b[j]+d;  \n                       ans.push_back((b[j]+d)%10);\n                       d=add1/10;\n                       j--;\n                    }\n                     if(d!=0) ans.push_back(d);\n               }\n                if(j==0) {\n                   i--;\n                   while(i>=0){\n                       int add1=num[i]+d;  \n                       ans.push_back((num[i]+d)%10);\n                       d=add1/10;\n                       i--;\n                    }\n                     if(d!=0) ans.push_back(d);\n               }\n             \n        }\n        reverse(ans.begin(),ans.end());\n        return ans;\n    }\n};\n```\nt：o(n) ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586058751","body":"```\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        vector<int> pos,ans;\n       for(int i=0;i<s.length();i++){\n           if(s[i]==c) pos.push_back(i);\n       }\n       for(int i=0;i<s.length();i++){\n           if(s[i]==c) ans.push_back(0);\n           else{\n               int min=INT_MAX;\n               for(int j=0;j<pos.size();j++){\n                  if(abs(pos[j]-i)<min) min=abs(pos[j]-i);\n               }\n               ans.push_back(min);\n           }\n       }\n       return ans;\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1586534532","body":"````\nclass CustomStack {\npublic:\n    int maxs=0;\n    vector<int> ss;\n    CustomStack(int maxSize) {\n       maxs=maxSize;\n    }\n    \n    void push(int x) {\n      if(ss.size()<maxs) ss.push_back(x);\n    }\n    \n    int pop() {\n       if(ss.size()==0) return -1;\n       int res=ss.back();\n         ss.pop_back();\n       return res;\n       \n    }\n    \n    void increment(int k, int val) {\n       if(ss.size()==0) return;\n        for(int i=0;i<k;i++){\n            if(i==ss.size()-1){\n                ss[i]+=val;\n                break;\n            }\n            ss[i]+=val;\n        }\n    }\n};\n````\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1588540916","body":"```\nclass Solution {\npublic:\n    string decodeString(string s) {\n        stack<char> ss;\n        string obj,ans=\"\";\n        int cnt,bit;\n        for(int i=0;i<s.size();i++){\n            if(s[i]==']'){\n               obj=\"\";\n               cnt=0;\n               bit=1;\n               while(ss.top()!='['){\n                    obj+=ss.top();\n                    ss.pop();\n               }\n               reverse(obj.begin(),obj.end());\n            \n               ss.pop();\n              \n               while(!ss.empty()&&ss.top()>='0'&&ss.top()<='9'){\n                   cnt+=(ss.top()-'0')*bit;\n                   bit*=10;\n                   ss.pop();\n\n               }\n\n             \n               for(int i=0;i<cnt;i++){\n                   for(auto &x:obj) ss.push(x);\n               }\n\n            \n               \n            }\n            else ss.push(s[i]);\n        }\n\n        while(!ss.empty()) {\n            ans+=ss.top();\n            ss.pop();\n        }\n        reverse(ans.begin(),ans.end());\n        return ans;\n    }\n};\n\n```\nT(o(k*n)) k是括号中字符数的平均个数。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1590828947","body":"```\nclass MyQueue {\npublic:\n   stack<int> s1,s2;\n    MyQueue() {\n\n    }\n    \n    void push(int x) {\n      if(!s1.empty()) s1.push(x);\n      else s2.push(x);\n    }\n    \n    int pop() {\n       if(s1.empty()) {\n           while(!s2.empty()){\n               s1.push(s2.top());\n               s2.pop();\n           }\n       \n       int ans=s1.top();\n       s1.pop();\n       return ans;}\n       else{\n           while(!s1.empty()){\n               s2.push(s1.top());\n               s1.pop();\n           }\n       \n       int ans=s2.top();\n       s2.pop();\n       return ans;\n\n       }\n    }\n    \n    int peek() {\n        if(s1.empty()) {\n           while(!s2.empty()){\n               s1.push(s2.top());\n               s2.pop();\n           }\n    \n       return s1.top();\n       }\n       else{\n           while(!s1.empty()){\n               s2.push(s1.top());\n               s1.pop();\n           }\n       \n     \n       return s2.top();\n\n       }\n    }\n\n    \n    \n    bool empty() {\n           if(s1.empty()&&s2.empty()) return true;\n           else return false;\n    }\n};\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1592687712","body":"```\nclass Solution {\npublic:\n    int maxChunksToSorted(vector<int>& arr) {\n       vector<int> brr(arr);\n       int cnt=0;\n       sort(brr.begin(),brr.end());\n       for(int i=0;i<arr.size();i++){\n           if(arr[i]!=brr[i]) {\n               for(int j=arr.size()-1;;j--){\n                   if(brr[i]==arr[j]){\n                           cnt++;\n                           i=j;\n                           break;\n                   }\n               }\n           }\n           else cnt++;\n       }\n        return cnt;\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1593814530","body":"```\nclass Solution {\npublic:\n    ListNode* rotateRight(ListNode* head, int k) {\n         ListNode *cur=head,*rear,*newh;\n         if(head==nullptr||k==0||head->next==nullptr) return head;\n\n         int cnt=0;\n         while(cur!=nullptr){\n             cnt++;\n            \n             cur=cur->next;\n         }\n         cur=head;\n         k=k%cnt;\n         if(k==0) return head;\n         int t=0;\n         while(1){\n             t++;\n             if(t==cnt-k){\n                 newh=cur->next;\n                 rear=cur;\n                 cur=cur->next;\n                 rear->next=nullptr;\n                 continue;\n            }\n             if(t==cnt){\n                 cur->next=head;\n                 break;\n             }\n             cur=cur->next;\n         }\n         \n\n         return newh;\n    }\n};\n\nt：o(n);\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595585258","body":"```\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n         if(head==nullptr||head->next==nullptr) return head;\n         int cnt;\n         ListNode *pre=new ListNode(-1),*cur=pre,*ptr1,*ptr2,*ptrnext;\n         pre->next=head;\n         while(cur->next!=nullptr&&cur->next->next!=nullptr){\n           ptr1=cur->next;\n           ptr2=cur->next->next;\n           if(ptr2->next!=nullptr) {ptrnext=ptr2->next;\n           cur->next=ptr2;\n            ptr1->next=ptrnext;\n           ptr2->next=ptr1;\n          \n           cur=ptr1;  }\n           else{\n             cur->next=ptr2;\n             ptr2->next=ptr1;\n             ptr1->next=nullptr;\n             break;\n           }\n           \n         }\n        return pre->next;\n\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1596102438","body":"```\nclass Solution {\n\n    public TreeNode sortedListToBST(ListNode head) {\n        return buildTree(head,null);\n    }\n\n    public TreeNode buildTree(ListNode left,ListNode right){\n        if(left == right){\n            return null;\n        }\n        ListNode mid = getMid(left,right);\n        TreeNode root = new TreeNode();\n        root.val = mid.val;\n        root.left = buildTree(left,mid);\n        root.right = buildTree(mid.next,right);\n        return root;\n    }\n\n    public ListNode getMid(ListNode left,ListNode right){\n        ListNode slow = left;\n        ListNode fast = left;\n        while(fast != right && fast.next != right){\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n        return slow;\n    }\n\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1596718205","body":"```\npublic class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        Set<ListNode> visited = new HashSet<>();\n        ListNode temp = headA;\n        while(temp != null){\n            visited.add(temp);\n            temp = temp.next;\n        }\n        temp = headB;\n        while(temp != null){\n            if(visited.contains(temp)){\n                return temp;\n            }\n            temp = temp.next;\n        }\n        return null;\n    }\n}\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1599016650","body":"```\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        \n        ListNode *f,*s,*prev;\n        prev=new ListNode(-1);\n        prev->next=head;\n        f=prev,s=prev;\n        while(1){\n               if(f->next==nullptr||f->next->next==nullptr) return nullptr;\n               else {\n                   f=f->next->next;\n                   s=s->next;\n               }\n               if(f==s){\n                   f==prev;\n                   break;\n               }\n        }\n        while(s!=f){\n            f=f->next;\n            s=s->next;\n           \n        }\n         return f;\n    }\n};\n\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"flipn9":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wabw1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xqmmy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"a-pricity":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sclihuiming":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"amazeding":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"astrking":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tzuikuo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ringo1597":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"brucezhang-utf-8":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luanxing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"moin-jer":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1589395915","body":"```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> list = new ArrayList<>();\n        int add = 0;\n        num[num.length - 1] += k;\n        for(int i = num.length - 1; i >= 0; --i) {\n            num[i] = num[i] + add;\n            add = num[i] / 10;\n            list.add(num[i] % 10);\n        }\n        while (add != 0) {\n            list.add(add % 10);\n            add /= 10;\n        }\n        Collections.reverse(list);\n        return list;\n    }\n}\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1589411051","body":"```java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int len = s.length();\n        int last = -2 * len;\n        int[] ans = new int[len];\n        Arrays.fill(ans, 2 * len);\n        for (int i = 0; i < len; ++i) {\n            if (s.charAt(i) == c) {\n                last = i;\n            }\n            ans[i] = Math.min(ans[i], i - last);\n        }\n        last = 2 * len;\n        for (int i = len - 1; i >= 0; --i) {\n            if (s.charAt(i) == c) {\n                last = i;\n            }\n            ans[i] = Math.min(ans[i], last - i);\n        }\n        return ans;\n    }\n}\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1589433725","body":"```java\nclass CustomStack {\n\n    int[] stack;\n    int[] add;\n    int top;\n\n    public CustomStack(int maxSize) {\n        stack = new int[maxSize];\n        add = new int[maxSize];\n        top = -1;\n    }\n    \n    public void push(int x) {\n        if (top != stack.length - 1) {\n            ++top;\n            stack[top] = x;\n        }\n    }\n    \n    public int pop() {\n        if (top == -1) {\n            return -1;\n        }\n        int ret = stack[top] + add[top];\n        if (top != 0) {\n            add[top - 1] += add[top];\n        }\n        add[top] = 0;\n        --top;\n        return ret;\n    }\n    \n    public void increment(int k, int val) {\n        int n = Math.min(k - 1, top);\n        if (n >= 0) {\n            add[n] += val;\n        }\n    }\n}\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack obj = new CustomStack(maxSize);\n * obj.push(x);\n * int param_2 = obj.pop();\n * obj.increment(k,val);\n */\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589354004","body":"class Solution {\n    public String decodeString(String s) {\n        Deque<String> stack = new LinkedList<>();\n        char[] cs = s.toCharArray();\n        for (char c : cs) {\n            if (c != ']') {\n                stack.push(c + \"\");\n            } else {\n                String al = \"\";\n                while (!\"[\".equals(stack.peek())) {\n                    al = stack.pop() + al;\n                }\n                stack.pop();\n                String num = \"\";\n                while (!stack.isEmpty() && Character.isDigit((stack.peek()).toCharArray()[0])) {\n                    num = stack.pop() + num;\n                }\n                int n = Integer.parseInt(num);\n                String res = \"\";\n                for (int i = 0; i < n; ++i) {\n                    res += al;\n                }\n                stack.push(res);\n            }\n        }\n        String ans = \"\";\n        while (!stack.isEmpty()) {\n            ans = stack.pop() + ans;\n        }\n        return ans;\n    }\n}","onTime":true},null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1597376662","body":"public class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        Set<ListNode> visited = new HashSet<>();\n        ListNode temp = headA;\n        while(temp != null){\n            visited.add(temp);\n            temp = temp.next;\n        }\n        temp = headB;\n        while(temp != null){\n            if(visited.contains(temp)){\n                return temp;\n            }\n            temp = temp.next;\n        }\n        return null;\n    }\n}\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lihua1997":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cuizezhou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xuanaxuan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tiandao043":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"restlessbreeze":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1590787481","body":"### code\r\n```\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n        vector<int> res;\r\n        int length = num.size();\r\n        int i;\r\n        for (i = 0; i < length && k > 0; i++)\r\n        {\r\n            int temp = num[length - 1 - i] + k % 10;\r\n            res.push_back(temp % 10);\r\n            k = k / 10 + temp / 10;\r\n        }\r\n        while (i < length)\r\n        {\r\n            res.push_back(num[length - 1 - i]);\r\n            i++;\r\n        }\r\n        while (k > 0)\r\n        {\r\n            res.push_back(k % 10);\r\n            k /= 10;\r\n        }\r\n        reverse(res.begin(), res.end());\r\n        return res;\r\n    }\r\n};\r\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1590807119","body":"### code\r\n```\r\nclass Solution {\r\npublic:\r\n    vector<int> shortestToChar(string s, char c) {\r\n        int length = s.length();\r\n        vector<int> res(length, length + 1);\r\n        int dis = length + 1;\r\n        for (int i = 0; i < length; i++)\r\n        {\r\n            if (s[i] == c)\r\n            {\r\n                res[i] = 0;\r\n                dis = 0;\r\n            }\r\n            else\r\n            {\r\n                dis++;\r\n                res[i] = min(res[i], dis);\r\n            }\r\n        }\r\n\r\n        dis = length + 1;\r\n        for (int i = length - 1; i >= 0; i--)\r\n        {\r\n            if (s[i] == c)\r\n            {\r\n                res[i] = 0;\r\n                dis = 0;\r\n            }\r\n            else\r\n            {\r\n                dis++;\r\n                res[i] = min(res[i], dis);\r\n            }\r\n        }\r\n\r\n        return res;\r\n    }\r\n};\r\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1590870928","body":"### code\r\n```\r\nclass CustomStack {\r\nprivate:\r\n    vector<int> stk;\r\n    vector<int> va;\r\n    int top;\r\npublic:\r\n    CustomStack(int maxSize) {\r\n        stk.resize(maxSize);\r\n        va.resize(maxSize);\r\n        top = 0;\r\n    }\r\n    \r\n    void push(int x) {\r\n        if (top < stk.size())\r\n            stk[top++] = x;\r\n    }\r\n    \r\n    int pop() {\r\n        if (top > 0)\r\n        {\r\n            int res = stk[top - 1] + va[top - 1];\r\n            if (top > 1)\r\n                va[top - 2] += va[top - 1];\r\n            va[--top] = 0;\r\n            return res;\r\n        }\r\n        else\r\n        {\r\n            return -1;\r\n        }\r\n    }\r\n    \r\n    void increment(int k, int val) {\r\n        int l = k < top ? k : top;\r\n        if (l > 0)\r\n            va[l - 1] += val;\r\n    }\r\n};\r\n\r\n/**\r\n * Your CustomStack object will be instantiated and called as such:\r\n * CustomStack* obj = new CustomStack(maxSize);\r\n * obj->push(x);\r\n * int param_2 = obj->pop();\r\n * obj->increment(k,val);\r\n */\r\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1590889249","body":"### code\r\n```\r\nclass Solution {\r\npublic:\r\n    string str;\r\n    int ptr;\r\n\r\n    string getString()\r\n    {\r\n        if (ptr == str.length() || str[ptr] == ']')\r\n            return \"\";\r\n        string ret = \"\";\r\n        if (isdigit(str[ptr]))\r\n        {\r\n            int num = 0;\r\n            while (isdigit(str[ptr]))\r\n            {\r\n                num = num * 10 + (str[ptr++] - '0');\r\n            }\r\n            ptr++;\r\n            string temp = getString();\r\n            while (num--)\r\n            {\r\n                ret += temp;\r\n            }\r\n            ptr++;\r\n        }\r\n        else\r\n        {\r\n            ret += str[ptr++];\r\n        }\r\n        return ret + getString();\r\n    };\r\n\r\n    string decodeString(string s) {\r\n        str = s;\r\n        ptr = 0;\r\n        return getString();\r\n    }\r\n};\r\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1590901739","body":"### code\r\n```\r\nclass MyQueue {\r\npublic:\r\n    stack<int> stk1;\r\n    stack<int> stk2;\r\n    MyQueue() {\r\n    }\r\n    \r\n    void push(int x) {\r\n        stk1.push(x);\r\n    }\r\n    \r\n    int pop() {\r\n        \r\n        if(stk2.empty())\r\n        {\r\n            while (!stk1.empty())\r\n            {\r\n                stk2.push(stk1.top());\r\n                stk1.pop();\r\n            }\r\n        }\r\n        int res = stk2.top();\r\n        stk2.pop();\r\n        return res;\r\n    }\r\n    \r\n    int peek() {\r\n        if(stk2.empty())\r\n        {\r\n            while (!stk1.empty())\r\n            {\r\n                stk2.push(stk1.top());\r\n                stk1.pop();\r\n            }\r\n        }\r\n        int res = stk2.top();\r\n        return res;\r\n    }\r\n    \r\n    bool empty() {\r\n        return stk1.empty() && stk2.empty();\r\n    }\r\n};\r\n\r\n/**\r\n * Your MyQueue object will be instantiated and called as such:\r\n * MyQueue* obj = new MyQueue();\r\n * obj->push(x);\r\n * int param_2 = obj->pop();\r\n * int param_3 = obj->peek();\r\n * bool param_4 = obj->empty();\r\n */\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1596996502","body":"### code\r\n```\r\nclass Solution {\r\npublic:\r\n    int maxChunksToSorted(vector<int>& arr) {\r\n        vector<int> temp = arr;\r\n        sort(temp.begin(), temp.end());\r\n        unordered_map<int, int> cnt;\r\n        int res = 0;\r\n        for (int i = 0; i < arr.size(); i++)\r\n        {\r\n            int x = temp[i];\r\n            int y = arr[i];\r\n            cnt[x]++;\r\n            if (cnt[x] == 0)\r\n                cnt.erase(x);\r\n            cnt[y]--;\r\n            if (cnt[y] == 0)\r\n                cnt.erase(y);\r\n            if (cnt.size() == 0)\r\n                res++;\r\n        }\r\n        return res;\r\n    }\r\n};\r\n```\r\n```\r\nclass Solution {\r\npublic:\r\n    int maxChunksToSorted(vector<int>& arr) {\r\n        stack<int> stk;\r\n        for (int i = 0; i < arr.size(); i++)\r\n        {\r\n            if (stk.size() == 0 || arr[i] >= stk.top())\r\n            {\r\n                stk.push(arr[i]);\r\n            }\r\n            else\r\n            {\r\n                int num = stk.top();\r\n                stk.pop();\r\n                while (stk.size() != 0 && arr[i] < stk.top())\r\n                {\r\n                    stk.pop();\r\n                }\r\n                stk.push(num);\r\n            }\r\n        }\r\n        return stk.size();\r\n    }\r\n};\r\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1596739939","body":"### code\r\n```\r\nclass Solution {\r\npublic:\r\n    ListNode* rotateRight(ListNode* head, int k) {\r\n        ListNode* temp = head;\r\n        int num = 0;\r\n        while (temp)\r\n        {\r\n            num++;\r\n            temp = temp->next;\r\n        }\r\n        if (num == 0 || k == 0 || k % num == 0)\r\n            return head;\r\n        k %= num;\r\n        ListNode* f = head;\r\n        ListNode* s = head;\r\n        while (k--)\r\n        {\r\n            f = f->next;\r\n        }\r\n        while (f->next)\r\n        {\r\n            f = f->next;\r\n            s = s->next;\r\n        }\r\n        f->next = head;\r\n        f = s->next;\r\n        s->next = nullptr;\r\n        return f;\r\n    }\r\n};\r\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595768355","body":"### code\r\n```\r\n/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode() : val(0), next(nullptr) {}\r\n *     ListNode(int x) : val(x), next(nullptr) {}\r\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* swapPairs(ListNode* head) {\r\n        if (!head || !head->next)\r\n            return head;\r\n        ListNode* temp1 = head;\r\n        ListNode* temp2 = head->next;\r\n        temp1->next = swapPairs(temp2->next);\r\n        temp2->next = temp1;\r\n        return temp2;\r\n    }\r\n};\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1596722346","body":"### code\r\n```\r\nclass Solution {\r\npublic:\r\n    TreeNode* sortedListToBST(ListNode* head, ListNode* end) {\r\n        if (head == end)\r\n            return nullptr;\r\n        if (head->next == end)\r\n        {\r\n            TreeNode* temp = new TreeNode(head->val);\r\n            return temp;\r\n        }\r\n        ListNode* f = head;\r\n        ListNode* s = head;\r\n        while (f != end && f->next != end)\r\n        {\r\n            f = f->next->next;\r\n            s = s->next;\r\n        }\r\n        TreeNode* temp = new TreeNode(s->val);\r\n        temp->left = sortedListToBST(head, s);\r\n        temp->right = sortedListToBST(s->next, end);\r\n        return temp;\r\n    }\r\n\r\n    TreeNode* sortedListToBST(ListNode* head)\r\n    {\r\n        return sortedListToBST(head, nullptr);\r\n    }\r\n};\r\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1596717806","body":"### code\r\n```\r\nclass Solution {\r\npublic:\r\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\r\n        ListNode* ta = headA;\r\n        ListNode* tb = headB;\r\n        while (ta != tb)\r\n        {\r\n            ta = ta == nullptr ? headB : ta->next;\r\n            tb = tb == nullptr ? headA : tb->next;\r\n            if (ta == nullptr && tb == nullptr)\r\n                break;\r\n        }\r\n        return ta;\r\n    }\r\n};\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1598829375","body":"### code\r\n```\r\n/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode *detectCycle(ListNode *head) {\r\n        if (!head || !head->next)\r\n            return nullptr;\r\n        ListNode* s = head;\r\n        ListNode* f = head;\r\n        while (f && f->next)\r\n        {\r\n            s = s->next;\r\n            f = f->next->next;\r\n            if (s == f)\r\n                break;\r\n        }\r\n        if (f == nullptr || f->next == nullptr)\r\n            return nullptr;\r\n        f = head;\r\n        while (f != s)\r\n        {\r\n            s = s->next;\r\n            f = f->next;\r\n        }\r\n        return f;\r\n    }\r\n};\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ruikiwi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huiminren":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"saitochen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wtdcai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"albert556":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wuxiaoshawn":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zrtch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhuzhu096":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"whoam-challenge":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"weisday":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"syh-coder":[null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1592683275","body":"var maxChunksToSorted = function (arr) {\r\n  const stack = [];\r\n  for (let i = 0; i < arr.length; i++) {\r\n    a = arr[i];\r\n    if (stack.length > 0 && stack[stack.length - 1] > a) {\r\n      const cur = stack[stack.length - 1];\r\n      while (stack && stack[stack.length - 1] > a) stack.pop();\r\n      stack.push(cur);\r\n    } else {\r\n      stack.push(a);\r\n    }\r\n  }\r\n  return stack.length;\r\n};\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaaller":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kyrie96521":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cavecrypto":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cxgbro":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"erjian96":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585671273","body":"思路 从最后一位开始相加，每次记录进位。\r\n\r\ndef solution(num, k):\r\n\r\n        res = k\r\n        list_a = num\r\n        output = []\r\n        i = 0\r\n        while i < len(num):\r\n            sum = k + num[len(num)-i-1] \r\n            out = sum % 10\r\n            output.insert(0, out)\r\n            k = sum // 10\r\n            i=i+1\r\n        if k == 0:\r\n             return output\r\n        else: \r\n            while k != 0:\r\n                k_res = k % 10\r\n                k = k//10\r\n                output.insert(0, k_res)\r\n            return output","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586202564","body":"\r\ndef solution(s, c):\r\n\r\n    a = [i for i in range(len(s)) if c == s[i]]\r\n    print(a)\r\n    b = []\r\n\r\n    for i in a:\r\n\r\n        for x in range(len(s)):\r\n\r\n            b.append(min(abs(x-i),abs(len(s)-x-i)))\r\n            \r\n    return b","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587401837","body":"class CustomStack:\n\n    def __init__(self,maxSize:int):\n        self.stk=[]\n        self.maxSize=maxSize\n\n    def push(self,x:int)->None:\n        if len(self.stk) < self.maxSize:\n            self.stk.append(x)\n\n    def pop(self) -> int:\n        if self.stk:\n            return self.stk[-1]\n        else:\n            return -1\n        \n    def increment(self, k: int, val: int) -> None:\n        if k < len(self.stk):\n            for i in range(k, len(self.stk)):\n                self.stk[i] = self.stk[i] + val\n        else:\n            for i in range(len(self.stk)):\n                self.stk[i] = self.stk[i]+val","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"a-polarbear":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"alexno1no2":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585713471","body":"```\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        i = len(num) - 1\n        while k:\n            num[i] += k\n            k, num[i] = num[i] // 10, num[i] % 10\n            i -= 1\n\n            if i < 0 and k:\n                num.insert(0,0)\n                i = 0\n        return num\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586223593","body":"```\nclass Solution:\n     def shortestToChar(self, s: str, c: str) -> List[int]:\n         c_idx = [ i for i in range(len(s)) if s[i] == c ]\n         return [ min(abs( i - j )  for j in c_idx) for i in range(len(s)) ]\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587558580","body":"```\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stk = [0] * maxSize\n        self.top = -1\n\n    def push(self, x: int) -> None:\n        if self.top != len(self.stk) - 1:\n            self.top += 1\n            self.stk[self.top] = x\n\n    def pop(self) -> int:\n        if self.top == -1:\n            return -1\n        self.top -= 1\n        return self.stk[self.top + 1]\n\n    def increment(self, k: int, val: int) -> None:\n        lim = min(k, self.top + 1)\n        for i in range(lim):\n            self.stk[i] += val\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1588624885","body":"```\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        res = []\n        for item in s:\n            if item == ']':\n                strs = []\n                repeat = []\n                while res[-1] != '[':\n                    strs.insert(0,res.pop())\n                res.pop()\n                while res and res[-1].isdigit():\n                    repeat.insert(0,res.pop())\n                res.append(int(''.join(repeat))*''.join(strs))\n                continue \n            res.append(item)\n            \n        return ''.join(res)\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1591526703","body":"```\nclass MyQueue(object):\n\n    def __init__(self):\n        self.stack1 = []\n        self.stack2 = []\n\n    def push(self, x):\n        self.stack1.append(x)\n\n    def pop(self):\n        if not self.stack2:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())\n        return self.stack2.pop()\n\n    def peek(self):\n        if not self.stack2:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())\n        return self.stack2[-1]\n\n    def empty(self):\n        return not self.stack1 and not self.stack2\n\n\n\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1592455744","body":"```\n单调栈个数，其中单调栈中的每一个元素代表每一块中的最大值。\nclass Solution:\n    def maxChunksToSorted(self, arr: [int]) -> int:\n        stack = []\n        for num in arr:\n            if stack and num < stack[-1]: \n                head = stack.pop()\n                while stack and num < stack[-1]: \n                    stack.pop()\n                stack.append(head)\n            else: stack.append(num)\n        print(stack)\n        return len(stack)\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594555249","body":"```\nclass Solution:\n    def rotateRight(self, head, k):\n        if not head or not head.next: \n            return head\n        # 求链表长度\n        _len = 0\n        cur = head\n        while cur:\n            _len += 1\n            cur = cur.next\n        # 对长度取模\n        k %= _len\n        if k == 0: \n            return head\n        # 快慢指针 让 fast 先向后走 k 步\n        fast, slow = head, head\n        while k:\n            fast = fast.next\n            k -= 1\n        # 继续往后走\n        while fast.next:\n            fast = fast.next\n            slow = slow.next\n        # 新链表的头newHead，也就是倒数第 k 个节点\n        newHead = slow.next\n        # 将倒数第 k + 1 个节点 和 倒数第 k 个节点断开\n        slow.next = None\n        # 让最后一个节点指向原始链表的头\n        fast.next = head\n        return newHead\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595790968","body":"```\nclass Solution:\n    def swapPairs(self, head: ListNode) -> ListNode:\n        if head is None or head.next is None:\n            return head\n        next = head.next\n        head.next = self.swapPairs(next.next)\n        next.next = head\n        return next\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1595833676","body":"```\nclass Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        if not head:\n            return head\n        slow , fast = head ,head\n        pre = ListNode(-1)\n        # newhead = TreeNode(-1)\n        while slow and fast and fast.next:\n            pre = slow\n            slow = slow.next\n            fast = fast.next.next\n        newhead = TreeNode(slow.val)\n        if pre:\n            pre.next = None\n        if slow == fast:\n            return newhead\n        newhead.left = self.sortedListToBST(head)\n        newhead.right = self.sortedListToBST(slow.next)\n\n\n        return newhead\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1596684433","body":"```\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        # p1 指向 A 链表头结点，p2 指向 B 链表头结点\n        p1, p2 = headA, headB\n        while p1 != p2:\n            # p1 走一步，如果走到 A 链表末尾，转到 B 链表\n            if p1 == None:\n                p1 = headB\n            else:\n                p1 = p1.next\n            # p2 走一步，如果走到 B 链表末尾，转到 A 链表\n            if p2 == None:\n                p2 = headA\n            else:\n                p2 = p2.next\n        return p1\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1598890191","body":"```\nclass Solution(object):\n    def detectCycle(self, head):\n        fast, slow = head, head\n        while True:\n            if not fast or not fast.next: \n                return # 没有环 会走到最后\n            fast, slow = fast.next.next, slow.next\n            if fast == slow:  # 环中第一次相遇\n                break\n\n        '''\n        设链表分为两段，环形入口前的一段为a，环形长度为b，链表总共有a + b ,设第一次相遇时fast走了f，slow走了s，则 f = 2s ，设f比s夺走了 nb（环形的倍数），则 f - s = nb，\n        则 s = nb ， f = 2nb；\n        假设指针从链表头部一直向前走k步，可以走到环形入口，则 k = a + mb（m=0,1,2，……），slow已经走了nb步，则slow再走a步就肯定可以走到环形入口  \n        '''\n        fast = head\n        while fast != slow:\n            fast, slow = fast.next, slow.next\n        return fast\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yetfan":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585659380","body":"**思路**\r\n反向遍历，处理进位。如果数组num处理完，还有k没处理，直接把k加上进位，完成剩余的new_k的处理。\r\n\r\n**代码**\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        ans = []\r\n        c = 0 \r\n\r\n        for i in num[::-1]:\r\n            nk = k % 10 if k>0 else 0\r\n            k = k // 10\r\n\r\n            new = i + nk + c\r\n            ans.append(new % 10)\r\n            c = new // 10\r\n\r\n        k += c\r\n        while k > 0:\r\n            nk = k % 10\r\n            k = k // 10\r\n            ans.append(nk)\r\n     \r\n        \r\n        return ans[::-1]\r\n```\r\n\r\n**复杂度**\r\n时间 O(N)\r\n空间 O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586194733","body":"## 代码 ##\r\n```python\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        n = len(s)\r\n        ans = [0] * n\r\n\r\n        idx = -n\r\n        for i, ch in enumerate(s):\r\n            if ch == c:\r\n                idx = i\r\n            ans[i] = i - idx\r\n\r\n        idx = 2 * n\r\n        for i in range(n - 1, -1, -1):\r\n            if s[i] == c:\r\n                idx = i\r\n            ans[i] = min(ans[i], idx - i)\r\n        return ans\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587335878","body":"## 代码 ##\r\n```python\r\nclass CustomStack:\r\n\r\n    def __init__(self, maxSize: int):\r\n        self.stack = []\r\n        self.maxSize = maxSize\r\n        self.size = 0\r\n\r\n    def push(self, x: int) -> None:\r\n        if self.size < self.maxSize:\r\n            self.stack.append(x)\r\n            self.size += 1\r\n\r\n    def pop(self) -> int:\r\n        if not self.stack:\r\n            return -1\r\n        else:\r\n            self.size -= 1\r\n            return self.stack.pop(-1)\r\n\r\n    def increment(self, k: int, val: int) -> None:\r\n        m = min(self.size, k)\r\n        for i in range(m):\r\n            self.stack[i] += val\r\n\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1596178965","body":"## 代码 ##\r\n```python\r\nclass Solution:\r\n    def decodeString(self, s: str) -> str:\r\n        stack, res, multi = [], \"\", 0\r\n        for c in s:\r\n            if c == '[':\r\n                stack.append([multi, res])\r\n                res, multi = \"\", 0\r\n            elif c == ']':\r\n                cur_multi, last_res = stack.pop()\r\n                res = last_res + cur_multi * res\r\n            elif '0' <= c <= '9':\r\n                multi = multi * 10 + int(c)            \r\n            else:\r\n                res += c\r\n        return res\r\n\r\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1589604631","body":"## 代码 ##\r\n```python\r\nclass MyQueue:\r\n\r\n    def __init__(self):\r\n        self.stack1 = []\r\n        self.stack2 = []\r\n\r\n\r\n    def push(self, x: int) -> None:\r\n        self.stack1.append(x)\r\n\r\n    def pop(self) -> int:\r\n        if self.empty():\r\n            return None\r\n        if self.stack2:\r\n            return self.stack2.pop()\r\n        else:\r\n            for i in range(len(self.stack1)):\r\n                self.stack2.append(self.stack1.pop())\r\n            return self.stack2.pop()\r\n\r\n\r\n    def peek(self) -> int:\r\n        ans = self.pop()\r\n        self.stack2.append(ans)\r\n        return ans\r\n\r\n\r\n    def empty(self) -> bool:\r\n        return not self.stack1 and not self.stack2\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1593326691","body":"## 代码 ##\r\n```python\r\nclass Solution:\r\n    def maxChunksToSorted(self, arr: [int]) -> int:\r\n        stack = []\r\n        for num in arr:\r\n            if stack and num < stack[-1]: \r\n                head = stack.pop()\r\n                while stack and num < stack[-1]: stack.pop()\r\n                stack.append(head)\r\n            else: stack.append(num)\r\n        return len(stack)\r\n\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594805474","body":"## 代码 ##\r\n```python\r\nclass Solution:\r\n    def rotateRight(self, head: ListNode, k: int) -> ListNode:\r\n        if k == 0 or not head or not head.next:\r\n            return head\r\n        \r\n        n = 1\r\n        cur = head\r\n        while cur.next:\r\n            cur = cur.next\r\n            n += 1\r\n        \r\n        if (add := n - k % n) == n:\r\n            return head\r\n        \r\n        cur.next = head\r\n        while add:\r\n            cur = cur.next\r\n            add -= 1\r\n        \r\n        ret = cur.next\r\n        cur.next = None\r\n        return ret\r\n\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595793761","body":"## 代码 ##\r\n```python\r\nclass Solution:\r\n    def swapPairs(self, head: ListNode) -> ListNode:\r\n        head = ListNode(0)\r\n        head.next = head\r\n        temp = head\r\n        while temp.next and temp.next.next:\r\n            node1 = temp.next\r\n            node2 = temp.next.next\r\n            temp.next = node2\r\n            node1.next = node2.next\r\n            node2.next = node1\r\n            temp = node1\r\n        return head.next\r\n\r\n\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1596178812","body":"## 代码 ##\r\n```python\r\nclass Solution:\r\n    def sortedListToBST(self, head: ListNode) -> TreeNode:\r\n        def getMedian(left: ListNode, right: ListNode) -> ListNode:\r\n            fast = slow = left\r\n            while fast != right and fast.next != right:\r\n                fast = fast.next.next\r\n                slow = slow.next\r\n            return slow\r\n        \r\n        def buildTree(left: ListNode, right: ListNode) -> TreeNode:\r\n            if left == right:\r\n                return None\r\n            mid = getMedian(left, right)\r\n            root = TreeNode(mid.val)\r\n            root.left = buildTree(left, mid)\r\n            root.right = buildTree(mid.next, right)\r\n            return root\r\n        \r\n        return buildTree(head, None)\r\n\r\n```","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1598791918","body":"## 代码 ##\r\n```python\r\nclass Solution(object):\r\n    def detectCycle(self, head):\r\n        fast, slow = head, head\r\n        while True:\r\n            if not (fast and fast.next): return\r\n            fast, slow = fast.next.next, slow.next\r\n            if fast == slow: break\r\n        fast = head\r\n        while fast != slow:\r\n            fast, slow = fast.next, slow.next\r\n        return fast\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhiyuanpeng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bwspsu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"arinzz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mdge":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"allenfeng666":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yin02":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"elsa-zhang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"asur4s":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"littlesugarman":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhihaowan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"apockira":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guowei0223":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shuqianyang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sj941127":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zjsuper":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yongxi-zhou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"darwintk":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"h-steven":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mischaqi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wurongronga":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miduoliu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckyshenzhengkang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"y4h2":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yoco323":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"forschers":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shanshuiqiankun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"annabellhyx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hwfrankfung":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"frederickfan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huibinny":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ggmybro":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"myleetcodejourney":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"want2333":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"staringwhere":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"allenfeng8":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ryanbaiyansong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dou-yu-xuan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hyxupup":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cs12300":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chiehw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aesir-idun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kaldsk12":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hxj2001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"for123s":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zzhilin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yfu6":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585467731","body":"class Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        for i in range(len(num) - 1, -1, -1):\n            if not k: break\n            k, num[i] = divmod(num[i] + k, 10)\n        while k:\n            k, a = divmod(k, 10)\n            num = [a] + num\n        return num","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1592008492","body":"class Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        stack = []\n\n        for num in arr:\n            largest = num\n            while stack and stack[-1] > num:\n                largest = max(largest, stack.pop())\n            stack.append(largest)\n        \n        return len(stack)","onTime":true},null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/13#issuecomment-1599611570","body":"    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.dic = collections.OrderedDict()\n\n    def get(self, key: int) -> int:\n        if key not in self.dic:\n            return -1\n        \n        self.dic.move_to_end(key)\n        return self.dic[key]\n        \n    def put(self, key: int, value: int) -> None:\n        if key in self.dic:\n            self.dic.move_to_end(key)\n        \n        self.dic[key] = value\n        if len(self.dic) > self.capacity:\n            self.dic.popitem(False)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mengsixing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"import-ant":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joriscai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangqianqian202301":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"airwalkers":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhumengcheng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kofzhang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"leonalhq":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hjy-u":[null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1585862063","body":"traverse left -> right then right -> left\r\n```\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        answer = [0]*len(s)\r\n        idx = float('-inf')\r\n        for i, ch in enumerate(s):\r\n            if ch == c:\r\n                idx = i\r\n            answer[i] = i - idx\r\n        for i in range(idx, -1, -1):\r\n            if s[i] == c:\r\n                idx = i\r\n            answer[i] = min(answer[i], idx - i)\r\n        return answer\r\n```\r\ntime: O(N)\r\nspace: O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587618244","body":"```\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack = []\n        self.maxSize = maxSize\n        self.increase_length = 0\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.maxSize:\n            self.stack.insert(0, x)\n\n    def pop(self) -> int:\n        if len(self.stack) == 0:\n            return -1\n        else:\n            return self.stack.pop(0)\n\n    def increment(self, k: int, val: int) -> None:\n        self.increase_length = min(k, len(self.stack))\n        for i in range(self.increase_length):\n            self.stack[len(self.stack) - 1 - i] += val\n```","onTime":true},null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1596370587","body":"```\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        pA = headA\n        pB = headB\n        if pA == None or pB == None:\n            return None\n        while (pA != pB):\n            pA = pA.next if pA is not None else headB\n            pB = pB.next if pB is not None else headA\n        return pA\n```\n\ntime: O(N)\\\nspace: O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"csthaha":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zepherust":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"feefeefee":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hughlin07":[null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587605630","body":"public class CustomStack {\n\n    int[] stack;\n    int top;\n    public CustomStack(int maxSize) {\n        stack = new int[maxSize];\n        top =-1;\n    }\n    public void Push(int x) {\n        if(top!=stack.Length-1)\n        {\n            top++;\n            stack[top]=x;\n        }\n    }\n    public int Pop() {\n        if(top==-1)\n        {\n            return -1;\n        }\n        --top;\n        return stack[top + 1];\n    }\n    public void Increment(int k, int val) {\n        int limit = Math.Min(k, top + 1);\n        for (int i = 0; i < limit; ++i)\n        {\n            stack[i] += val;\n        }\n    }\n\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589035452","body":"class Solution {\n    public String decodeString(String s) {\n        \n        Stack<Integer> times = new Stack<>();\n        Stack<String> temp_String = new Stack<>();\n        StringBuilder result = new StringBuilder();\n        int count = 0;\n        \n        for(char c : s.toCharArray()){\n            if( c == '['){\n                times.push(count);\n                temp_String.push(result.toString());\n                count = 0;\n                result = new StringBuilder();\n            }\n            else if(c == ']'){\n                StringBuilder temp = new StringBuilder();\n                int temp_times = times.pop();\n                \n                for(int i = 0; i < temp_times; i++){\n                    temp.append(result);\n                }\n                result = new StringBuilder(temp_String.pop() + temp.toString());\n            }\n            else if(c >= '0' && c <= '9'){\n                count = count * 10 + c - '0';\n            }\n            else{\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1591514206","body":"class MyQueue {\n    Deque<Integer> inStack;\n    Deque<Integer> outStack;\n\n    public MyQueue() {\n        inStack = new ArrayDeque<Integer>();\n        outStack = new ArrayDeque<Integer>();\n    }\n\n    public void push(int x) {\n        inStack.push(x);\n    }\n\n    public int pop() {\n        if (outStack.isEmpty()) {\n            in2out();\n        }\n        return outStack.pop();\n    }\n\n    public int peek() {\n        if (outStack.isEmpty()) {\n            in2out();\n        }\n        return outStack.peek();\n    }\n\n    public boolean empty() {\n        return inStack.isEmpty() && outStack.isEmpty();\n    }\n\n    private void in2out() {\n        while (!inStack.isEmpty()) {\n            outStack.push(inStack.pop());\n        }\n    }\n}\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1593253543","body":"public class Solution {\n\n     public int maxChunksToSorted(int[] arr) {\n        Map<Integer, Integer> count = new HashMap();\n        int ans = 0;\n        int nonzero = 0;\n\n        int[] expect = arr.clone();\n        Arrays.sort(expect);\n\n        for (int i = 0; i < arr.length; ++i) {\n            int x = arr[i];\n            int y = expect[i];\n\n            count.put(x, count.getOrDefault(x, 0) + 1);\n            if (count.get(x) == 0) {\n                nonzero--;\n            }\n            if (count.get(x) == 1) {\n                nonzero++;\n            }\n\n            count.put(y, count.getOrDefault(y, 0) - 1);\n            if (count.get(y) == -1) {\n                nonzero++;\n            }\n            if (count.get(y) == 0) {\n                nonzero--;\n            }\n\n            if (nonzero == 0) {\n                ans++;\n            }\n        }\n\n        return ans;\n    }\n}","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595702806","body":"class Solution {\n    public ListNode swapPairs(ListNode head) {\n        if(head == null || head.next == null) return head;\n        ListNode preNode = new ListNode(-1, head), res;\n        preNode.next = head;\n        res = head.next;\n        ListNode firstNode = head, secondNode, nextNode;\n        while(firstNode != null && firstNode.next != null){\n            secondNode = firstNode.next;\n            nextNode = secondNode.next;\n\n            firstNode.next = nextNode;\n            secondNode.next = firstNode;\n            preNode.next = secondNode;\n\n            preNode = firstNode;\n            firstNode = nextNode;\n        }\n        return res;\n    }\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1596168171","body":"class Solution {\r\n\r\n    public TreeNode sortedListToBST(ListNode head) {\r\n        if(head == null) return null;\r\n        return dfs(head,null);\r\n    }\r\n    private TreeNode dfs(ListNode head, ListNode tail){\r\n        if(head == tail) return null;\r\n        ListNode fast = head, slow = head;\r\n        while(fast != tail && fast.next != tail){\r\n            fast = fast.next.next;\r\n            slow = slow.next;\r\n        }\r\n        TreeNode root = new TreeNode(slow.val);\r\n        root.left = dfs(head, slow);\r\n        root.right = dfs(slow.next, tail);\r\n        return root;\r\n    }\r\n\r\n}","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1599047599","body":"public class Solution {\n\n    public ListNode detectCycle(ListNode head) {\n        ListNode pos = head;\n        Set<ListNode> visited = new HashSet<ListNode>();\n        while (pos != null) {\n            if (visited.contains(pos)) {\n                return pos;\n            } else {\n                visited.add(pos);\n            }\n            pos = pos.next;\n        }\n        return null;\n    }\n\n}\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huizsh":[null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1588556589","body":"class Solution:\n    def decodeString(self, s: str) -> str:\n        stack = []\n        for c in s:\n            if c == ']':\n                repeatStr = ''\n                repeatCount = ''\n                while stack and stack[-1] != '[':\n                    repeatStr = stack.pop() + repeatStr\n                # pop 掉 \"[\"\n                stack.pop()\n                while stack and stack[-1].isnumeric():\n                    repeatCount = stack.pop() + repeatCount\n                stack.append(repeatStr * int(repeatCount))\n            else:\n                stack.append(c)\n        return \"\".join(stack)","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594257574","body":"```\r\nclass Solution {\r\n    public ListNode rotateRight(ListNode head, int k) {\r\n        if(head == null || head.next == null) return head;\r\n        int count = 0;\r\n        ListNode now = head;\r\n        while(now != null){\r\n            now = now.next;\r\n            count++;\r\n        }\r\n        k = k % count;\r\n        ListNode slow = head, fast = head;\r\n        while(fast.next != null){\r\n            if(k-- <= 0){\r\n                slow = slow.next;\r\n            }\r\n            fast = fast.next;\r\n        }\r\n        fast.next = head;\r\n        ListNode res = slow.next;\r\n        slow.next = null;\r\n        return res;\r\n    }\r\n}\r\n```","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1596467061","body":"```\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:\n        a, b = headA, headB\n        while a != b:\n            a = a.next if a else headB\n            b = b.next if b else headA\n        return a\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chanceyliu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hshen11":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"horace7":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangzh0114":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dragonfcl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huifeng248":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sarah11qing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"el1as7":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zcytm3000":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585704276","body":"class Solution:\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\n        n=len(A)\n        ans = []\n\n        for i in range(n-1, -1, -1):\n            total = A[i] + K % 10\n\n            K //= 10\n            \n            if total >= 10:\n            \n                K += 1\n\n            ans.append(total % 10)\n            \n        \n        while K > 0:\n            ans.append(K % 10)\n            K //= 10\n        return ans[::-1]","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586212044","body":"class Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        a=[]\n        b=[]\n        for i,ch in enumerate(s):\n            if ch==c:\n                b.append(int(i))\n        return([min(abs(x-i) for i in b) for x in range(len(s))])","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587539008","body":"class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stk = [0] * maxSize\n        self.top = -1\n\n    def push(self, x: int) -> None:\n        if self.top != len(self.stk) - 1:\n            self.top += 1\n            self.stk[self.top] = x\n\n    def pop(self) -> int:\n        if self.top == -1:\n            return -1\n        self.top -= 1\n        return self.stk[self.top + 1]\n\n    def increment(self, k: int, val: int) -> None:\n        lim = min(k, self.top + 1)\n        for i in range(lim):\n            self.stk[i] += val","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589556937","body":"class Solution:\n    def decodeString(self, s: str) -> str:\n       num_stack = [] \n       char_stack = []\n       res = ''\n       num_str = ''\n       for i in s:\n           if i.isdigit():\n               num_str+=i\n           elif i == '[':\n               char_stack.append(res)\n               num_stack.append(num_str)\n               res = ''\n               num_str = ''\n           elif i == ']':\n               res = char_stack.pop() + int(num_stack.pop()) * res \n           else:\n               res += i\n       return res","onTime":true},null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1598241941","body":"class Solution(object):\n    def detectCycle(self, head):\n        fast, slow = head, head\n        while True:\n            if not (fast and fast.next): return\n            fast, slow = fast.next.next, slow.next\n            if fast == slow: break\n        fast = head\n        while fast != slow:\n            fast, slow = fast.next, slow.next\n        return fast","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pangjiadai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xb798298436":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ywang525":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"limbo42":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dorapocket":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zoeyzyzyzy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jasonqiu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lp1506947671":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"texamc2":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joemonkeylee":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585689329","body":"```typescript\n\nfunction addToArrayForm(num: number[], k: number): number[] {\n  let res: number[] = [];\n  let carry: number = 0;\n  let N: number = num.length - 1;\n  let temp: number = 0;\n  while (k / 10 != 0 || N >= 0) {\n    if (N >= 0) {\n      temp = num[N];\n    } else {\n      temp = 0;\n    }\n    if ((k % 10) + temp + carry >= 10) {\n      res.push((k % 10) + temp + carry - 10);\n      carry = 1;\n    } else {\n      res.push((k % 10) + temp + carry);\n      carry = 0;\n    }\n    N--;\n    k = (k - (k % 10)) / 10;\n  }\n  if (carry == 1) {\n    res.push(carry);\n  }\n  return res.reverse();\n}\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586091293","body":"```typescript\nfunction shortestToChar(s: string, c: string): number[] {\n  const N = s.length;\n  let res: number[] = new Array(N).fill(Number.MAX_SAFE_INTEGER);\n\n  let prev = 0;\n  for (let i = 0; i < N; i++) {\n    if (s[i] == c) {\n      for (let j = prev; j <= i; j++) {\n        res[j] = i - j;\n      }\n      prev = i;\n    }\n  }\n\n  prev = N - 1;\n  for (let i = N - 1; i >= 0; i--) {\n    if (s[i] == c) {\n      for (let j = prev; j >= i; j--) {\n        res[j] = Math.min(res[j], j - i);\n      }\n      prev = i;\n    }\n  }\n  return res;\n}\n```\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587565711","body":"```typescript\nclass CustomStack {\n  private vector: number[];\n  private maxSize: number;\n  constructor(maxSize: number) {\n    this.vector = [];\n    this.maxSize = maxSize;\n  }\n\n  push(x: number): void {\n    if (this.vector.length < this.maxSize) {\n      this.vector.push(x);\n    }\n  }\n\n  pop(): number {\n    if (this.vector.length) {\n      const temp = this.vector[this.vector.length - 1];\n      this.vector = [\n        ...this.vector.filter((x, index) => index != this.vector.length - 1),\n      ];\n      return temp;\n    } else {\n      return -1;\n    }\n  }\n\n  increment(k: number, val: number): void {\n    const count = Math.min(k, this.vector.length);\n    for (let i = 0; i < count; i++) {\n      this.vector[i] += val;\n    }\n  }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589441996","body":"```typescript\nfunction decodeString(s: string): string {\n  const numStack: number[] = [];\n  const strStack: string[] = [];\n  let cur = \"\";\n  let num = 0;\n  for (const c of s) {\n    if (/\\d/.test(c)) {\n      num = num * 10 + parseInt(c);\n    } else if (c === \"[\") {\n      numStack.push(num);\n      strStack.push(cur);\n      cur = \"\";\n      num = 0;\n    } else if (c === \"]\") {\n      const tmp = cur;\n      cur = strStack.pop()!;\n      const repeatTimes = numStack.pop()!;\n      for (let i = 0; i < repeatTimes; i++) {\n        cur += tmp;\n      }\n      num = 0;\n    } else {\n      cur += c;\n    }\n  }\n  return cur;\n}\n```\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1590614141","body":"class MyQueue {\n    inStack: number[] = [];\n    outStack: number[] = [];\n\n    constructor() {\n\n    }\n\n    push(x: number): void {\n        this.inStack.push(x);\n    }\n\n    pop(): number {\n        if (!this.outStack.length) {\n            this.in2out();\n        }\n        return this.outStack.pop();\n    }\n\n    peek(): number {\n        if (!this.outStack.length) {\n            this.in2out();\n        }\n        return this.outStack[this.outStack.length - 1];\n    }\n\n    empty(): boolean {\n        return this.outStack.length === 0 && this.inStack.length === 0;\n    }\n\n    in2out() {\n        while (this.inStack.length) {\n            this.outStack.push(this.inStack.pop());\n        }\n    };\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1593184664","body":"```typescript\nfunction maxChunksToSorted(arr: number[]): number {\n  let clone = [...arr].sort((a, b) => a - b);\n  let n = arr.length,\n    ans = 0;\n  const map = new Map<number, number>();\n  for (let i = 0, tot = 0; i < n; i++) {\n    const a = arr[i],\n      b = clone[i];\n    if (!map.has(a)) map.set(a, 0);\n    if (map.get(a) == 0) tot++;\n    else if (map.get(a) == -1) tot--;\n    map.set(a, map.get(a) + 1);\n    if (!map.has(b)) map.set(b, 0);\n    if (map.get(b) == 0) tot++;\n    else if (map.get(b) == 1) tot--;\n    map.set(b, map.get(b) - 1);\n    if (tot == 0) ans++;\n  }\n  return ans;\n}\n```\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594829554","body":"```typescript\nfunction rotateRight(head: ListNode | null, k: number): ListNode | null {\n    if (head === null || k === 0) return head\n    let temp = head\n    let n = 1\n    while (temp.next) {\n        temp = temp.next\n        n++\n    }\n    temp.next = head\n\n    k = n - k % n - 1\n    while (k > 0) {\n        head = head.next\n        k--\n    }\n    const res = head.next\n    head.next = null\n    return res\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595790935","body":"```typescript\nfunction swapPairs(head: ListNode | null): ListNode | null {\n    const dummy = new ListNode(0, head);\n    let cur = dummy;\n    while (cur.next != null && cur.next.next != null) {\n        const first = cur.next;\n        const second = first.next;\n        cur.next = second;\n        first.next = second.next;\n        second.next = first;\n        cur = first;\n    }\n    return dummy.next;\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1596183890","body":"```typescript\nfunction sortedListToBST(head: ListNode | null): TreeNode | null {\n  if (head === null) return null;\n\n  let slow: ListNode | null = head;\n  let fast: ListNode | null = head;\n  let prev: ListNode | null = null;\n\n  while (fast !== null && fast.next !== null) {\n    prev = slow;\n    slow = slow!.next;\n    fast = fast.next.next;\n  }\n\n  const middle = slow!;\n  const node = new TreeNode(middle.val);\n  if (head === middle) return node;\n\n  prev!.next = null;\n\n  node.left = sortedListToBST(head);\n  node.right = sortedListToBST(middle.next);\n\n  return node;\n}\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1597417042","body":"```typescript\npublic class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        if(headA == null || headB == null) return null;\n        ListNode pA = headA, pB = headB;\n        while(pA != pB) {\n            pA = pA == null ? headB : pA.next;\n            pB = pB == null ? headA : pB.next;\n        }\n        return pA;\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1599031784","body":"```typescript\nfunction detectCycle(head: ListNode | null): ListNode | null {\n    const visited = new Set();\n    while (head !== null) {\n        if (visited.has(head)) {\n            return head;\n        }\n        visited.add(head);\n        head = head.next;\n    }\n    return null;\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"northseacoder":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dominique9898":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wl678":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"meisgithub":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sye9286":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fuku-l":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585688464","body":"### 思路\r\n从最后一位开始相加，每次记录进位。\r\n### 代码\r\n\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> res = new ArrayList<Integer>();\r\n        int sum = 0;\r\n        int carry = 0;\r\n        int idx = num.length-1;\r\n        while(idx >=0 || k !=0){\r\n            int a = idx >= 0 ? num[idx]:0;\r\n            int b = k!=0 ? k%10:0;\r\n            sum = a+b+carry;\r\n            res.add(0,sum%10);\r\n            carry = sum/10;\r\n            idx--;\r\n            k/=10;\r\n        }\r\n        if(carry!=0) res.add(0, carry);\r\n        return res;\r\n    }\r\n}\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(N)，其中 N 为数组长度。\r\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586216605","body":"```java\r\nclass Solution {\r\n    public int[] shortestToChar(String s, char c) {\r\n            int[] res = new int[s.length()];\r\n            int ch = c;\r\n            for (int i = 0; i < s.length(); i++) {\r\n                int a = s.indexOf(ch, i);\r\n                if (a == i) {\r\n                    res[i] = 0;\r\n                } else {\r\n                    res[i] = Math.abs(a - i);\r\n                }\r\n            }\r\n            for (int i = s.length() - 1; i >= 0; i--) {\r\n                int a = s.lastIndexOf(ch, i);\r\n                if (Math.abs(a - i) < res[i]) {\r\n                    res[i] = Math.abs(a - i);\r\n                } else if(a<0){ // 如果找到\r\n                    break;\r\n                }\r\n            }\r\n            return res;\r\n    }\r\n}\r\n```\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1586316635","body":"### 思路\r\n因为题目中 inc() 方法需要遍历栈底到k的区间，因此使用使用数组和指针来完成\r\n\r\n### 代码\r\n```java\r\nclass CustomStack {\r\n    int[] arr = null;\r\n    int top;\r\n    public CustomStack(int maxSize) {\r\n        arr = new int[maxSize];\r\n        top = -1;\r\n    }\r\n    \r\n    public void push(int x) {\r\n        if(top < arr.length-1){\r\n            arr[++top] = x;\r\n        }\r\n    }\r\n    \r\n    public int pop() {\r\n        if(top >= 0){\r\n            return arr[top--];\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n    \r\n    public void increment(int k, int val) {\r\n        int loop = Math.min(k-1, top);\r\n        for(int i = 0; i <= loop; i++){\r\n            arr[i] += val;\r\n        }\r\n    }\r\n}\r\n```\r\n**复杂度分析**\r\n- 时间复杂度：出栈和入栈为O(1)，increment方法为O(N)， N 为数组长度。\r\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589160667","body":"### 代码\r\n```java\r\nclass Solution {\r\n    public String decodeString(String s) {\r\n            // 将数字、字母、左括号、右括号看作独立的str，用栈来维护这些str\r\n            // 1. 如果当前的字符为数位，解析出一个数字（连续的多个数位）并进栈\r\n            // 2. 如果为字符或左括号，直接进栈\r\n            // 3. 如果为右括号，开始出栈。一直到左括号出栈，出栈序列反转后拼成字符串a，取出栈顶数字num，将a重复num次后进栈\r\n            Deque<String> stack = new ArrayDeque<String>();\r\n            int idx = 0;\r\n            while (idx < s.length()) {\r\n                char ch = s.charAt(idx);\r\n                if (Character.isDigit(ch)) {\r\n                    // 数字\r\n                    int end = s.indexOf('[',idx);\r\n                    stack.push(s.substring(idx, end));\r\n                    idx = end;\r\n                } else if(']' == ch){\r\n                    // 出栈，直到遇到'['\r\n                    String a = \"\";\r\n                    while (!\"[\".equals(stack.peek())){\r\n                        a = stack.pop() + a;\r\n                    }\r\n                    stack.pop();\r\n                    int num = Integer.parseInt(stack.pop());\r\n                    String val = \"\";\r\n                    for (int i = 0; i < num; i++) {\r\n                        val+=a;\r\n                    }\r\n                    stack.push(val);\r\n                    idx++;\r\n                }else {\r\n                    // 字符 或者 [ 直接进栈\r\n                    stack.push(String.valueOf(ch));\r\n                    idx++;\r\n                }\r\n            }\r\n\r\n            StringBuffer res = new StringBuffer();\r\n            Object[] str = stack.toArray();\r\n            for (int i = str.length-1; i >=0; i--) {\r\n                res.append(str[i]);\r\n            }\r\n            return res.toString();\r\n        }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1591083000","body":"### 代码\r\n```java\r\nclass MyQueue {\r\n    Deque<Integer> push_stack;\r\n    Deque<Integer> pop_stack;\r\n    public MyQueue() {\r\n        this.push_stack = new ArrayDeque<Integer>();\r\n        this.pop_stack = new ArrayDeque<Integer>();\r\n    }\r\n    \r\n    public void push(int x) {\r\n        push_stack.push(x);\r\n    }\r\n    \r\n    public int pop() {\r\n        if(pop_stack.isEmpty() && push_stack.isEmpty()){\r\n            return -1;\r\n        } else if(pop_stack.isEmpty()){\r\n            while(!push_stack.isEmpty()){\r\n                pop_stack.push(push_stack.pop());\r\n            }\r\n        } \r\n        return pop_stack.pop();\r\n    }\r\n    \r\n    public int peek() {\r\n        if(pop_stack.isEmpty() && push_stack.isEmpty()){\r\n            return -1;\r\n        } else if(pop_stack.isEmpty()){\r\n            while(!push_stack.isEmpty()){\r\n                pop_stack.push(push_stack.pop());\r\n            }\r\n        } \r\n        return pop_stack.peek();\r\n    }\r\n    \r\n    public boolean empty() {\r\n        return pop_stack.isEmpty() && push_stack.isEmpty();\r\n    }\r\n}\r\n\r\n/**\r\n * Your MyQueue object will be instantiated and called as such:\r\n * MyQueue obj = new MyQueue();\r\n * obj.push(x);\r\n * int param_2 = obj.pop();\r\n * int param_3 = obj.peek();\r\n * boolean param_4 = obj.empty();\r\n */\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1593001530","body":"### 代码\r\n```java\r\nclass Solution {\r\n    public int maxChunksToSorted(int[] arr) {\r\n        Deque<Integer> stack = new ArrayDeque<Integer>();\r\n        for(int n: arr){\r\n            if(stack.isEmpty() || n >= stack.peek()){\r\n                stack.push(n);\r\n            } else {\r\n                int max = stack.pop();\r\n                while(!stack.isEmpty() && stack.peek() > n){\r\n                    stack.pop();\r\n                }\r\n                stack.push(max);\r\n            }\r\n        }\r\n        return stack.size();\r\n    }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594691404","body":"### 代码\r\n```java\r\n/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode() {}\r\n *     ListNode(int val) { this.val = val; }\r\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n * }\r\n */\r\nclass Solution {\r\n    public ListNode rotateRight(ListNode head, int k) {\r\n        if(head == null || head.next == null){\r\n            return head;\r\n        }\r\n\r\n        ListNode p1 = head;\r\n        ListNode p2 = head;\r\n        int size = 1;\r\n        for(int i = 0; i < k; i++){\r\n            if(p2.next!=null){\r\n                p2 = p2.next;\r\n                size++;\r\n            } else {\r\n                p2 = head;\r\n                k = (k % size) + size;\r\n            }\r\n        }\r\n\r\n        while(p2.next!=null){\r\n            p2 = p2.next;\r\n            p1 = p1.next;\r\n        }\r\n\r\n        p2.next = head;\r\n        head = p1.next;\r\n        p1.next = null;\r\n\r\n        return head;\r\n    }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595788986","body":"### 代码\r\n```java\r\n/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode() {}\r\n *     ListNode(int val) { this.val = val; }\r\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n * }\r\n */\r\nclass Solution {\r\n    public ListNode swapPairs(ListNode head) {\r\n        if(head == null || head.next == null){\r\n            return head;\r\n        }\r\n        ListNode pre = new ListNode(0);\r\n        pre.next = head;\r\n        ListNode cur = pre;\r\n        while (cur.next != null && cur.next.next!=null){\r\n            ListNode tmp = cur.next;\r\n            cur.next = tmp.next;\r\n            tmp.next = cur.next.next;\r\n            cur.next.next = tmp;\r\n            cur = tmp;\r\n        }\r\n        return pre.next;\r\n    }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1595813450","body":"### 代码\r\n```java\r\n/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode() {}\r\n *     ListNode(int val) { this.val = val; }\r\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n * }\r\n */\r\n/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode() {}\r\n *     TreeNode(int val) { this.val = val; }\r\n *     TreeNode(int val, TreeNode left, TreeNode right) {\r\n *         this.val = val;\r\n *         this.left = left;\r\n *         this.right = right;\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    public TreeNode sortedListToBST(ListNode head) {\r\n        // 递归+快慢指针\r\n        return buildTree(head, null);\r\n    }\r\n\r\n    public TreeNode buildTree(ListNode left, ListNode right){\r\n        if(left == right){\r\n            return null;\r\n        }\r\n        ListNode mid = getMedian(left, right);\r\n        TreeNode root = new TreeNode(mid.val);\r\n        root.left = buildTree(left, mid);\r\n        root.right = buildTree(mid.next, right);\r\n        return root;\r\n    }\r\n\r\n    public ListNode getMedian(ListNode left, ListNode right){\r\n        ListNode fast = left;\r\n        ListNode slow = left;\r\n        while(fast != right && fast.next != right){\r\n            fast = fast.next.next;\r\n            slow = slow.next;\r\n        }\r\n        return slow;\r\n    }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1597294623","body":"### 代码\r\n```java\r\n/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) {\r\n *         val = x;\r\n *         next = null;\r\n *     }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\r\n        if (headA == null || headB == null) return null;\r\n        ListNode p1 = headA;\r\n        ListNode p2 = headB;\r\n        while (p1 != p2) {\r\n            p1 = p1 == null ? headB : p1.next;\r\n            p2 = p2 == null ? headA : p2.next;\r\n        }\r\n        return p1;\r\n    }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1598902269","body":"### 代码\r\n```java\r\n/**\r\n * Definition for singly-linked list.\r\n * class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) {\r\n *         val = x;\r\n *         next = null;\r\n *     }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode detectCycle(ListNode head) {\r\n            ListNode p1 = head, p2 = head;\r\n            while (true) {\r\n                if (p2 == null || p2.next == null) {\r\n                    return null;\r\n                }\r\n                p1 = p1.next;\r\n                p2 = p2.next.next;\r\n                if (p1 == p2) {\r\n                    break;\r\n                }\r\n            }\r\n            p2 = head;\r\n            while (p1 != p2) {\r\n                p1 = p1.next;\r\n                p2 = p2.next;\r\n            }\r\n            return p1;\r\n        }\r\n}\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kangliqi1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"richardtaok":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chocolate-emperor":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lydia61":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangjiahuan17":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"seanutf":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangyong-hub":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"erquaner":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jiujingxukong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"x1aox1a":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"drinkmorekaik":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dinjufen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuzmt":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"munmust":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yan-jie":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hktangshuo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zpbc007":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"linlizzz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"krabbejing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"firehaosky":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chao-cc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jinjin680":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cruiseyugh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"quieter2018":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jadeliu13":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaoq777":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jiangyanlineu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liuxiner":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yufanzh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"franciszq":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kangqinsen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"manwzy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jerry9926":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"soso1105":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585270363","body":"### 思路\n\n通过字符串与int之间的转换形成\n\n### 代码\n\n```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        resStr = \"\"\n        for i in num:\n            resStr +=str(i)\n        res = str(int(resStr)+k)\n        reslist = []\n        for i in res:\n            reslist.append(int(i))\n        return reslist\n```\n\n**复杂度分析**\n\n\\- 时间复杂度：*O*(*n*)\n\\- 空间复杂度：*O*(*n*)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1585931055","body":"### 思路\n\n数组的遍历\n\n### 代码\n\n\n```python\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        indexList = []\n        for index,val in enumerate(s):\n            if val == c:\n                indexList.append(index)\n        resList = []\n        p = 0\n        # print(indexList)\n        for index,val in enumerate(s):\n            # print(index)\n            if p < len(indexList)-1 and (abs(index-indexList[p]) > abs(index-indexList[p+1])):\n                p += 1\n            resList.append(abs(index-indexList[p]))\n        return resList\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1586373223","body":"### 思路\n\npop时把栈顶元素弹出\n\n### 代码\n\n\n```python\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.size = 0\n        self.maxSize = maxSize\n        self.customStack = []\n\n    def push(self, x: int) -> None:\n        if self.size < self.maxSize:\n            self.customStack.append(x)\n            self.size += 1\n\n    def pop(self) -> int:\n        if self.size == 0:\n            return -1\n        temp = self.customStack[self.size - 1]\n        del self.customStack[self.size - 1]\n        self.size -= 1\n        return temp\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(min(k, self.size)):\n            self.customStack[i] += val\n\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1588256328","body":"### 思路\n\n用python中的正则表达式实现（逐层替换）\n\n### 代码\n\n\n```python\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        while '[' in s:\n            s = re.sub(r'(\\d+)\\[([A-Za-z]*)\\]', lambda m:int(m.group(1)) * m.group(2), s)\n        return s\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1590311836","body":"### 思路\n\n使用两个栈来实现队列。\n\n### 代码\n\n\n```python\nclass Stack(object):\n    def __init__(self):\n        self.stack = []\n\n    def push(self, x):              # 入栈\n        self.stack.append(x)\n\n    def pop(self):                  # 出栈\n        if self.is_empty:           # 注意特殊情况\n            return None\n        return self.stack.pop()\n\n    @property\n    def length(self):               # 获取栈中元素\n        return len(self.stack)\n    \n    @property                      \n    def is_empty(self):            # 获取栈的状态：是否为空\n        return self.length == 0\n\n\nclass MyQueue(object):\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.stack1 = Stack()                           # 基本栈\n        self.stack2 = Stack()                           # 辅助栈\n\n    def push(self, x):\n        \"\"\"\n        Push element x to the back of queue.\n        :type x: int\n        :rtype: None\n        \"\"\"\n        self.stack1.push(x)                      # 入栈，即入队列\n\n    def pop(self):\n        \"\"\"\n        Removes the element from in front of queue and returns that element.\n        :rtype: int\n        \"\"\"\n        while self.stack1.length > 1:                   \n            self.stack2.push(self.stack1.pop())         \n        res = self.stack1.pop()                         \n        while not self.stack2.is_empty:                 \n            self.stack1.push(self.stack2.pop())         \n        return res                                      \n\n    def peek(self):\n        \"\"\"\n        Get the front element.\n        :rtype: int\n        \"\"\"\n        while self.stack1.length > 1:                  \n            self.stack2.push(self.stack1.pop())         \n        res = self.stack1.pop()                         \n        self.stack2.push(res)                           \n        while self.stack2.length > 0:                   \n            self.stack1.push(self.stack2.pop())         \n        return res                                      \n\n    def empty(self):\n        \"\"\"\n        Returns whether the queue is empty.\n        :rtype: bool\n        \"\"\"\n        return self.stack1.is_empty                     \n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()\n```\n\n**复杂度分析**\n\n- 时间复杂度：O(N)\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1592171301","body":"### 思路\n\n通过单调栈实现逻辑\n\n### 代码\n\n\n```python\nclass Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        stack = []\n        for i in arr:\n            if stack and stack[-1]>i:\n                cur = stack[-1]\n                while stack and stack[-1]>i:\n                    stack.pop()\n                stack.append(cur)\n            else:\n                stack.append(i)\n        return len(stack)\n\n\n\nif __name__ == '__main__':\n    arr = [5,4,3,2,1]\n    result = Solution().maxChunksToSorted(arr)\n    print(result)\n```\n\n**复杂度分析**\n\n- 时间复杂度：O(N)\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1593829281","body":"### 思路\n\n1.用快慢指针确定旋转后链表的头节点\n若链表的长度为n，让快指针先走k%n步，然后快慢指针同时向前走，直到快指针的next为空，此时慢指针的next为旋转后链表的头节点\n2.移花接木\n快指针的next指向原链表的头节点head\nhead指向慢指针的next，作为新链表的头节点返回\n断掉慢指针和head之间的链，否则会形成环\n\n\n### 代码\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        if not head or not head.next:\n            return head\n        \n        fast, slow = head, head\n        # 找到fast的起始节点\n        def findStart(fast, k):\n            length = 0\n            while k>0:\n                k -= 1\n                length += 1\n                fast = fast.next\n                if not fast:\n                    fast = head                                    \n                    k = k % length                    \n                    return findStart(fast, k)\n            return fast\n                   \n        fast = findStart(fast, k)\n         \n        while fast and fast.next:           \n            fast = fast.next\n            slow = slow.next\n   \n        fast.next = head\n        head = slow.next\n        slow.next = None\n        return head\n```\n\n**复杂度分析**\n\n- 时间复杂度：O(N)\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595760793","body":"### 思路\n\n递归\n\n### 代码\n\n```python\nclass Solution:\n   def swapPairs(self, head: ListNode) -> ListNode:\n       if not head or not head.next: return head\n\n       next = head.next\n       head.next = self.swapPairs(next.next)\n       next.next = head\n\n       return next\n```\n\n**复杂度分析**\n\n- 时间复杂度：O(N)\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1596123405","body":"### 思路\n\n快慢指针。使用快慢指针找到链表的中间节点，即为二叉搜索树的根节点，然后递归链表左半部分和右半部分\n\n### 代码\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        if head is None:\n            return None\n        if head.next is None:\n            return TreeNode(head.val)\n        slow = ListNode(-1)\n        slow.next = head\n        fast = head\n        while fast is not None:\n            last = slow\n            slow = slow.next\n            fast = fast.next.next if fast.next is not None else None\n        last.next = None\n        right = slow.next\n        slow.next = None\n        root = TreeNode(slow.val)\n        if slow is not head:\n            root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(right)\n        return root \n```\n\n**复杂度分析**\n\n- 时间复杂度：O(NLogN)\n- 空间复杂度：O(LogN)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1596298944","body":"### 思路\n\n双指针\n\n### 代码\n\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        a = headA\n        b = headB\n        while a!=b:\n            a = a.next if a else headB\n            b = b.next if b else headA\n        return a\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1598827807","body":"### 思路\n\n使用额外的数组存储已访问过的节点，当某时刻访问时判断当前节点的`next`是否已出现过\n\n### 代码\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head: return None\n\n        res = []\n        while head.next:\n            if head.next in res:\n                return res[res.index(head.next)]\n            res.append(head)\n            head = head.next\n\n        return None\n```\n\n**复杂度分析**\n\n- 时间复杂度：O(N)\n- 空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pkuphy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhenya-zhu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wty9sky":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"skyoct":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bingzxy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaodingc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jyjsunny":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aoxiangw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"enrilwang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aswrise":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aneureka":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ljqchlsw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jingyuzhou123":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dianlandu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jameswangxin":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585714129","body":"```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n      List<Integer> result = new ArrayList<>();\n        for(int i = num.length - 1; i >= 0; i--){\n            int sum = num[i] + k % 10;         \n            k /= 10;    \n            if(sum >= 10){\n                k++;                        \n                sum -= 10;                \n            }\n            result.add(sum);\n        }\n\n        for(; k > 0; k /= 10){               \n            result.add(k % 10);               \n        }\n        Collections.reverse(result);\n        return result;\n    }\n}\n```\n时间复杂度 O(n)\n\n空间复杂度 O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586168728","body":"```java\n class Solution {\n    public int[] shortestToChar(String s, char c) {\n        int n = s.length();\n        int lp = -n, rp= -n;\n        int[] ans = new int[n];\n        for (int i = 0; i < n; i++) {\n            if (s.charAt(i) == c) {\n                lp = i;\n            } else {\n                int diff = Math.abs(i-lp);\n                ans[i] = diff;\n            }\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            if (s.charAt(i) == c) {\n                rp = i;\n            } else {\n                if (rp == -1) {\n                    continue;\n                }\n                int diff = Math.abs(i-rp);\n                ans[i] = Math.min(ans[i], diff);\n            }\n        }\n        return ans;\n    }\n}\n```\n正向遍历一遍数组，如果当前遍历到的字符是题目中给定的字符，那么记录一下此时字符出现的位置，否则更新一下当前字符与给的字符的下标差；反向遍历数组也是做类似的操作，遍历的同时与第一次正向遍历数组计算出的距离差两者取较小值作为当前位置的最终结果。\n\n时间复杂度 : O(n)\n\n空间复杂度:  O(n)","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594837246","body":"```cpp\n   /**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* rotateRight(ListNode* head, int k) {\n        if (!head) return nullptr;\n        int len = 0;\n        auto dummy = new ListNode(-1);\n        dummy->next = head;\n        auto p = head;\n        while (p) {\n            len++;\n            p = p->next;\n        }\n        k %= len;\n        if (k == 0) return head;\n        p = head; auto q = head; //p是慢指针，q是快指针\n        while (k--) q = q->next;\n        while (q->next) {\n            p = p->next;\n            q = q->next;\n        }\n        auto temp = dummy->next;\n        dummy->next = p->next;\n        q->next = temp;\n        p->next = nullptr;\n        return dummy->next;\n    }\n};\n```","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1597410596","body":"```cpp\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        auto p = headA, q = headB;\n        while (p != q) {\n            p = p ? p->next : headB;\n            q = q ? q->next : headA;\n        }\n        return p;\n    }\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhenxied":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nuozhouzhang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shin-guid":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bochengwan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kyo-tom":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"uratora":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guitarys":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585711905","body":"public int AddToArrayForm(int[] num, int k) {\nint result = k;\n\n        for (int i = 0; i > num.Length; i++) {\n          result = result + num[i] * Math.Pow(10,num.Length-i);\n        }\n\n       \n\n        return result;\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586194431","body":"``` python\n\nclass Solution:\n    def shortestToChar(self, s:str, c:str) : #指定s、c的类型\n        n = len(s)\n        answer = [0] * n\n        print('answer的类型',type(answer))\n        last_position = -float(\"inf\")\n        for i in range(n):\n            if s[i] == c:\n                last_position = i\n            answer[i] = i - last_position\n\n        next_position = float(\"inf\")\n        for i in range(n - 1, -1, -1):\n            if s[i] == c:\n                next_position = i\n            answer[i] = min(answer[i], next_position - i)\n\n        return answer\n\ns = \"loveleetcode\"\nc = \"e\"\nsolution = Solution()\nans = solution.shortestToChar(s, c)\nprint(ans)  # 输出 [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]\n\ns = \"aaab\"\nc = \"b\"\nsolution = Solution()\nans = solution.shortestToChar(s, c)\nprint(ans)  # 输出 [3, 2, 1, 0]\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587236256","body":"```\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack = []\n        self.maxSize = maxSize\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.maxSize:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if not self.stack:\n            return -1\n        else:\n            return self.stack.pop()\n\n    def increment(self, k: int, val: int) -> None:\n        n = len(self.stack)\n        for i in range(min(k, n)):\n            self.stack[i] += val\n接下来使用样例进行验证：\npythonCopy Code\ncustomStack = CustomStack(3)  # 栈是空的 []\nprint(customStack.push(1))  # null\nprint(customStack.push(2))  # null\nprint(customStack.pop())  # 2\nprint(customStack.push(2))  # null\nprint(customStack.push(3))  # null\nprint(customStack.push(4))  # null\nprint(customStack.increment(5, 100))  # null\nprint(customStack.increment(2, 100))  # null\nprint(customStack.pop())  # 103\nprint(customStack.pop())  # 202\nprint(customStack.pop())  # 201\nprint(customStack.pop())  # -1\n输出结果为：\nCopy Code\nNone\nNone\n2\nNone\nNone\nNone\nNone\nNone\n103\n202\n201\n-1\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1588896853","body":"``` python\ndef decodeString(s: str) -> str:\n    stack = []\n    res = \"\"\n    k = 0\n\n    for c in s:\n        if c.isdigit():\n            k = k * 10 + int(c)\n        elif c.isalpha():\n            res += c\n        elif c == \"[\":\n            stack.append((res, k))\n            res, k = \"\", 0\n        elif c == \"]\":\n            prev_res, prev_k = stack.pop()\n            res = prev_res + prev_k * res\n\n    return res\ns = \"3[a]2[bc]\"\nprint(decodeString(s))  # 输出：\"aaabcbc\"\n\ns = \"3[a2[c]]\"\nprint(decodeString(s))  # 输出：\"accaccacc\"\n\ns = \"2[abc]3[cd]ef\"\nprint(decodeString(s))  # 输出：\"abcabccdcdcdef\"\n\ns = \"abc3[cd]xyz\"\nprint(decodeString(s))  # 输出：\"abccdcdcdxyz\"\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1591168009","body":"``` python \nclass MyQueue:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.list_push = []  # 用于 push 操作的列表\n        self.list_pop = []   # 用于 pop 和 peek 操作的列表\n\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x to the back of queue.\n        \"\"\"\n        self.list_push.append(x)\n\n    def pop(self) -> int:\n        \"\"\"\n        Removes the element from in front of queue and returns that element.\n        \"\"\"\n        if not self.list_pop:         # 如果 list_pop 为空，则需要将 list_push 中的元素倒入 list_pop 中\n            while self.list_push:\n                self.list_pop.append(self.list_push.pop())\n        return self.list_pop.pop()    # 弹出 list_pop 列表末尾元素\n\n    def peek(self) -> int:\n        \"\"\"\n        Get the front element.\n        \"\"\"\n        if not self.list_pop:         # 如果 list_pop 为空，则需要将 list_push 中的元素倒入 list_pop 中\n            while self.list_push:\n                self.list_pop.append(self.list_push.pop())\n        return self.list_pop[-1]      # 返回 list_pop 列表末尾元素\n\n    def empty(self) -> bool:\n        \"\"\"\n        Returns whether the queue is empty.\n        \"\"\"\n        return not self.list_push and not self.list_pop   # 当且仅当两个列表均为空时，队列为空\n\nqueue = MyQueue()\nqueue.push(1)\nqueue.push(2)\nprint(queue.peek())    # 返回 1\nprint(queue.pop())     # 返回 1\nprint(queue.empty())   # 返回 False\n```\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1593163278","body":"``` python\ndef maxChunksToSorted(arr):\n    stack = []\n    for num in arr:\n        if not stack or num >= stack[-1][0]:\n            # 当前元素可以加入到当前块中\n            stack.append((num, 1))\n        else:\n            # 当前元素需要新开一块\n            cnt = 0\n            while stack and num < stack[-1][0]:\n                _, c = stack.pop()\n                cnt += c\n            stack.append((num, cnt))\n    return len(stack)\n\narr1 = [5,4,3,2,1]  # 因为不可以翻转，仍是按顺序拼接，所以拼接后仍不是有序数组\nprint(maxChunksToSorted(arr1))  # 输出 1\n\narr2 = [2,1,3,4,4]\nprint(maxChunksToSorted(arr2))  # 输出 4\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594135840","body":"``` python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n\ndef rotateRight(head: ListNode, k: int) -> ListNode:\n    # 处理特殊情况\n    if head is None or head.next is None or k == 0:\n        return head\n\n    # 计算链表长度，同时将链表首尾相连\n    n, tail = 1, head\n    while tail.next:\n        n += 1\n        tail = tail.next\n    tail.next = head\n\n    # 计算实际要移动的步数\n    k %= n\n\n    # 找到新的头结点和尾结点\n    new_tail = head\n    for _ in range(n - k - 1):\n        new_tail = new_tail.next\n    new_head = new_tail.next\n\n    # 断开链表，返回新的头结点\n    new_tail.next = None\n    return new_head\n\n\nhead1 = ListNode(1)\nhead1.next = ListNode(2)\nhead1.next.next = ListNode(3)\nhead1.next.next.next = ListNode(4)\nhead1.next.next.next.next = ListNode(5)\n\nk1 = 2\nprint(\"输入：\", end=\"\")\np1 = head1\nwhile p1:\n    print(p1.val, \"->\", end=\" \")\n    p1 = p1.next\nprint(\"NULL, k =\", k1)\n\nnew_head1 = rotateRight(head1, k1)\n\nprint(\"输出：\", end=\"\")\np1 = new_head1\nwhile p1:\n    print(p1.val, \"->\", end=\" \")\n    p1 = p1.next\nprint(\"NULL\")\nprint()\n\nhead2 = ListNode(0)\nhead2.next = ListNode(1)\nhead2.next.next = ListNode(2)\n\nk2 = 4\nprint(\"输入：\", end=\"\")\np2 = head2\nwhile p2:\n    print(p2.val, \"->\", end=\" \")\n    p2 = p2.next\nprint(\"NULL, k =\", k2)\n\nnew_head2 = rotateRight(head2, k2)\n\nprint(\"输出：\", end=\"\")\np2 = new_head2\nwhile p2:\n    print(p2.val, \"->\", end=\" \")\n    p2 = p2.next\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595772908","body":"``` python \nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def swapPairs(self, head: ListNode) -> ListNode:\n        # 如果链表为空或者只有一个节点，直接返回head\n        if not head or not head.next:\n            return head\n\n        # 定义新的头节点new_head和前驱节点prev\n        new_head = head.next\n        prev = ListNode(0)\n\n        # 开始遍历链表\n        while head and head.next:\n            # 获取当前要交换的两个节点\n            first_node, second_node = head, head.next\n\n            # 进行节点交换\n            first_node.next = second_node.next\n            second_node.next = first_node\n\n            # 将前驱节点指向交换后的第二个节点\n            prev.next = second_node\n\n            # 更新head和prev\n            prev, head = first_node, first_node.next\n\n        return new_head\n\n\n# 示例输入\nhead1 = ListNode(1)\nnode2 = ListNode(2)\nnode3 = ListNode(3)\nnode4 = ListNode(4)\n\nhead1.next = node2\nnode2.next = node3\nnode3.next = node4\n\n# 创建Solution对象\nsolution = Solution()\n\n# 打印示例输出\nprint(\"示例1结果：\")\nres1 = solution.swapPairs(head1)\nwhile res1:\n    print(res1.val)\n    res1 = res1.next\n\nhead2 = None\nprint(\"示例2结果：\")\nres2 = solution.swapPairs(head2)\nwhile res2:\n    print(res2.val)\n    res2 = res2.next\n\nhead3 = ListNode(1)\nprint(\"示例3结果：\")\nres3 = solution.swapPairs(head3)\nwhile res3:\n    print(res3.val)\n    res3 = res3.next\n```\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1595998722","body":"``` python \n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: TreeNode\n        \"\"\"\n        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        # 寻找链表中点\n        slow, fast = head, head.next.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        # 将链表断开，分别构建左子树和右子树\n        mid = slow.next\n        slow.next = None\n        root = TreeNode(mid.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(mid.next)\n        return root\n\n\n# 示例\nhead = ListNode(-10)\nhead.next = ListNode(-3)\nhead.next.next = ListNode(0)\nhead.next.next.next = ListNode(5)\nhead.next.next.next.next = ListNode(9)\n\nsolution = Solution()\nroot = solution.sortedListToBST(head)\n\ndef printTree(root):\n    if not root:\n        return\n    print(root.val)\n    printTree(root.left)\n    printTree(root.right)\n\nprintTree(root)\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1596222919","body":"``` python \n# 链表节点的定义\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:\n        # 计算链表A和链表B的长度\n        lenA, lenB = 0, 0\n        pA, pB = headA, headB\n        while pA:\n            lenA += 1\n            pA = pA.next\n        while pB:\n            lenB += 1\n            pB = pB.next\n\n        # 让较长的链表先移动n-m步\n        if lenA > lenB:\n            for i in range(lenA - lenB):\n                headA = headA.next\n        else:\n            for i in range(lenB - lenA):\n                headB = headB.next\n\n        # 同时移动两个指针，直到找到交点或达到链表尾部\n        while headA and headB:\n            if headA == headB:\n                return headA\n            headA = headA.next\n            headB = headB.next\n\n        # 没有交点，返回null\n        return None\n\n\n# 输入数据\nintersectVal = 8\nlistA = ListNode(4)\nlistA.next = ListNode(1)\nlistA.next.next = ListNode(8)\nlistA.next.next.next = ListNode(4)\nlistA.next.next.next.next = ListNode(5)\n\nlistB = ListNode(5)\nlistB.next = ListNode(6)\nlistB.next.next = ListNode(1)\nlistB.next.next.next = listA.next.next\n\nskipA = 2\nskipB = 3\n\n# 输出结果\nsolution = Solution()\nintersection_node = solution.getIntersectionNode(listA, listB)\nif intersection_node:\n    print(\"Intersected at '{}'\".format(intersection_node.val))\nelse:\n    print(\"null\")\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1598220717","body":"···python\nclass Solution(object):\n    def detectCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return None\n        \n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n        \n        if not fast or not fast.next:\n            return None\n        \n        ptr1, ptr2 = head, fast\n        while ptr1 != ptr2:\n            ptr1 = ptr1.next\n            ptr2 = ptr2.next\n        \n        return ptr1\n···","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sosdogecoin":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585713150","body":"public int AddToArrayForm(int[] num, int k) {\r\nint result = k;\r\n    for (int i = 0; i > num.Length; i++) {\r\n      result = result + num[i] * Math.Pow(10,num.Length-i);}\r\n    return result;}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586215698","body":"def solution(s, c):\n\na = [i for i in range(len(s)) if c == s[i]]\nprint(a)\nb = []\n\nfor i in a:\n\n    for x in range(len(s)):\n\n        b.append(min(abs(x-i),abs(len(s)-x-i)))\n        \nreturn b\n\n复杂度分析\n时间复杂度：O(N)\n空间复杂度：O(N)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587605946","body":"class CustomStack: \n\n    def __init__(self, maxSize: int): \n        self.stack = [] \n        self.max_size = maxSize \n\n    def push(self, x: int) -> None: \n        if len(self.stack) < self.max_size: \n            self.stack.append(x) \n\n    def pop(self) -> int: \n        if self.stack: \n            return self.stack.pop() \n        else: \n            return -1 \n\n    def increment(self, k: int, val: int) -> None: \n        for i in range(min(len(self.stack), k)): \n            self.stack[i] += val","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589581610","body":"class CustomStack:\n\n    def __init__(self, size: int):\n        self.st = []\n        self.cnt = 0\n        self.size = size\n\n    def push(self, x: int) -> None:\n        if self.cnt < self.size:\n            self.st.append(x)\n            self.cnt += 1\n\n\n    def pop(self) -> int:\n        if self.cnt == 0: return -1\n        self.cnt -= 1\n        return self.st.pop()\n\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(0, min(self.cnt, k)):\n            self.st[i] += val","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1593327841","body":"class CustomStack: \n\n    def __init__(self, maxSize: int): \n        self.stack = [] \n        self.max_size = maxSize \n\n    def push(self, x: int) -> None: \n        if len(self.stack) < self.max_size: \n            self.stack.append(x) \n\n    def pop(self) -> int: \n        if self.stack: \n            return self.stack.pop() \n        else: \n            return -1 \n\n    def increment(self, k: int, val: int) -> None: \n        for i in range(min(len(self.stack), k)): \n            self.stack[i] += val","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1593326161","body":"class Solution(object):\n    def maxChunksToSorted(self, arr):\n        count_a = collections.defaultdict(int)\n        count_b = collections.defaultdict(int)\n        ans = 0\n\n        for a, b in zip(arr, sorted(arr)):\n            count_a[a] += 1\n            count_b[b] += 1\n            if count_a == count_b: ans += 1\n\n        return ans","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zol013":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lrwhc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wwewwt":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cyk1337":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585452280","body":"BF:\n```python\nclass Solution(object):\n    def addToArrayForm(self, num, k):\n        \"\"\"\n        :type num: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        a = \"\".join([str(x) for x in num])\n        b = str(int(a)+k)\n        return [int(x) for x in b]\n```","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587621148","body":"def __init__(self, maxSize: int): \n    self.stack = [] \n    self.max_size = maxSize \n\ndef push(self, x: int) -> None: \n    if len(self.stack) < self.max_size: \n        self.stack.append(x) \n\ndef pop(self) -> int: \n    if self.stack: \n        return self.stack.pop() \n    else: \n        return -1 \n\ndef increment(self, k: int, val: int) -> None: \n    for i in range(min(len(self.stack), k)): \n        self.stack[i] += val","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangyu1131":[null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1586828559","body":"```c++\nclass CustomStack {\npublic:\n    CustomStack(int maxSize) {\n        stack_.reserve(maxSize);\n        add_.resize(maxSize);\n        max_size_ = maxSize;\n    }\n    \n    void push(int x) {\n        if (stack_.size() < max_size_)\n        {\n            stack_.push_back(x);\n        }\n    }\n    \n    int pop() {\n        if (!stack_.empty())\n        {\n            int idx = stack_.size();\n            int res = stack_.back();\n            res += add_[idx - 1];\n            if (idx != 1)\n            {\n                add_[idx - 2] += add_[idx - 1];\n            }\n            add_[idx - 1] = 0;\n            stack_.pop_back();\n            return res;\n        }\n        return -1;\n    }\n    \n    void increment(int k, int val) {\n        int size = stack_.size();\n        if (size == 0)\n        {\n            return;\n        }\n        k = min(k, size);\n        add_[k - 1] += val;\n    }\n\nprivate:\n    vector<int> stack_, add_;// add_用来记录要加的值\n    int max_size_;\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack* obj = new CustomStack(maxSize);\n * obj->push(x);\n * int param_2 = obj->pop();\n * obj->increment(k,val);\n */\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589380614","body":"```c++\nclass Solution {\npublic:\n    string getDigits(string &s, size_t &ptr) {\n        string ret = \"\";\n        while (isdigit(s[ptr])) {\n            ret.push_back(s[ptr++]);\n        }\n        return ret;\n    }\n\n    string getString(vector <string> &v) {\n        string ret;\n        for (const auto &s: v) {\n            ret += s;\n        }\n        return ret;\n    }\n\n    string decodeString(string s) {\n        vector <string> stk;\n        size_t ptr = 0;\n\n        while (ptr < s.size()) {\n            char cur = s[ptr];\n            if (isdigit(cur)) {\n                // 获取一个数字并进栈\n                string digits = getDigits(s, ptr);\n                stk.push_back(digits);\n            } else if (isalpha(cur) || cur == '[') {\n                // 获取一个字母并进栈\n                stk.push_back(string(1, s[ptr++])); \n            } else {\n                ++ptr;\n                vector <string> sub;\n                while (stk.back() != \"[\") {\n                    sub.push_back(stk.back());\n                    stk.pop_back();\n                }\n                reverse(sub.begin(), sub.end());\n                // 左括号出栈\n                stk.pop_back();\n                // 此时栈顶为当前 sub 对应的字符串应该出现的次数\n                int repTime = stoi(stk.back()); \n                stk.pop_back();\n                string t, o = getString(sub);\n                // 构造字符串\n                while (repTime--) t += o; \n                // 将构造好的字符串入栈\n                stk.push_back(t);\n            }\n        }\n\n        return getString(stk);\n    }\n};\n```","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1596131355","body":"```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* sortedListToBST(ListNode* head) {\n        if (!head)\n        {\n            return nullptr;\n        }\n\n        ListNode* slow = head;\n        ListNode* fast = head->next;\n        ListNode* pre = nullptr;\n        while (fast)\n        {\n            fast = fast->next;\n            if (fast)\n            {\n                fast = fast->next;\n            }\n            pre = slow;\n            slow = slow->next;\n        }\n        // 找到slow为根节点\n        TreeNode* root = new TreeNode(slow->val);\n        if (pre)\n        {\n            pre->next = nullptr;\n        }\n        ListNode* next = slow->next;\n        slow->next = nullptr;\n\n        if (slow != head) //如果就是唯一的节点，那就没有左子树了\n        {\n            root->left = sortedListToBST(head);\n        }\n        root->right = sortedListToBST(next);\n\n        return root;\n    }\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"diana21170648":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585616818","body":"### 思路\n低位到高位遍历，注意进位\n\n### 代码\n```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        n=len(num)-1\n        carry=0\n        ans=[]\n        for i in range(n,-1,-1):#从后往前遍历\n              num[i], carry=(carry+num[i]+k%10)%10,(carry+num[i]+k%10)//10\n              k//=10\n        #考虑998+2还需要进位\n        carry=carry+k\n        while carry:\n            ans=[(carry)%10]+ans\n            carry//=10\n        return ans+num\n\n```\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586078968","body":"### 思路\n数组从两端遍历\n\n### 代码\n```python\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        n=len(s)\n        res=[]\n        #标记字符c的位置，有则标记为0，没有则标记为None\n        for i in range(n):\n            if s[i]==c:\n                res.append(0)\n            else:\n                res.append(None)\n        #只需要遍历非0的位置\n        #从左向右遍历\n        for i in range(1,n):\n            if res[i] !=0 and res[i-1] is not None:\n                res[i]=res[i-1]+1\n        #从右向左遍历\n        for i in range(n-2,-1,-1):\n            if res[i] is None or res[i+1]+1 < res[i]:\n                res[i]=res[i+1]+1\n        return res\n\n```\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1586780839","body":"### 思路\n栈的实现，增量栈先出后加再入栈\n出栈主要边界-1\n入栈注意边界maxsize\n\n### 代码\n```python\nclass CustomStack:\n    def __init__(self, maxSize: int):\n        self.st=[]\n        self.cnt=0\n        self.size=maxSize\n\n    def push(self, x: int) -> None:#判断是否满了，满了就不能添加到栈顶\n        if self.cnt<self.size:\n            self.st.append(x)\n            self.cnt+=1\n\n    def pop(self) -> int:#栈为空，则返回-1\n        if self.cnt==0:\n            return -1\n        self.cnt-=1\n        return self.st.pop()\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(0,min(self.cnt,k)):\n            self.st[i]+=val\n\n```\n**复杂度分析**\n- 时间复杂度：O(min（k,cnt）)，其中 cnt为栈的可操作长度，k为要增量的个数。\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1588693081","body":"### 思路\ndfs+栈 递归\n\n### 代码\n```python\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        def dfs(start):\n            rstr=rcnt=''#rstr为重复的字符串，rcnt为出现的重复的数字\n            while start<len(s):\n                if s[start].isnumeric():#是数字，可能有多位\n                    rcnt+=s[start]\n                elif s[start]=='[':#遇见左括号，开始递归\n                    start,tstr=dfs(start+1)#更新指针\n                    rstr=rstr+tstr*int(rcnt)\n                    rcnt=''#清空重复的数字\n                elif s[start]==']':#遇见右括号，则一次dfs结束\n                    return start,rstr\n                else:\n                    rstr+=s[start]\n                start+=1\n            return rstr\n        return dfs(0)#递归的入口\n\n```\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为解码后s的长度。\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1590310082","body":"### 思路\n用两个栈实现一个先进先出的队列\npush进s1里\npop时，先判断s2非空，再pop进s2\npeek的是s2的队头元素\ns1和s2均空时，则为真，否则一直为false\n\n### 代码\n```python\nclass MyQueue:\n\n    def __init__(self):\n        self.s1=[]\n        self.s2=[]\n\n\n    def push(self, x: int) -> None:\n        self.s1.append(x)\n\n\n    def pop(self) -> int:\n        #先用oeak保证s2非空\n        self.peek()\n        return self.s2.pop()\n\n\n    def peek(self) -> int:\n        #把s1栈的元素压入栈s2\n        if not self.s2:#此时s2为空\n            while self.s1:\n                self.s2.append(self.s1.pop())\n        return self.s2[-1]\n\n\n    def empty(self) -> bool:#为空返回True\n        return not self.s1 and not self.s2\n\n\n```\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为栈中元素的个数。\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1592695718","body":"### 思路\n单调升序栈，a比栈顶小，则a应该在栈顶的下边，所一栈顶出栈并记为最大值，然后pop所有有比a大的值，直到把a放进栈\n如果直接添加，则升序序列还在继续，则栈块数未增加，如果弹出再增加证明升序序列结束，压入元素，栈数增加1\n\n### 代码\n```python\nfrom typing import List\nclass Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int: \n        stack=[]\n        for a in arr:\n            if stack and stack[-1]>a:#单调升序栈，a比栈顶小，则a应该在栈顶的下边，所一栈顶出栈并记为最大值，然后pop所有有比a大的值，直到把a放进栈\n            #如果直接添加，则升序序列还在继续，则栈块数未增加，如果弹出再增加证明升序序列结束，压入元素，栈数增加1\n                cur=stack[-1]\n                while stack and stack[-1]>a:\n                    stack.pop()\n                stack.append(cur)\n            else:\n                stack.append(a)\n        return len(stack)#stack存的是块信息，栈里存储的是所有块的最大值，栈的大小就是最终划分块的数量\n\n```\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594568181","body":"### 思路\n思考：如果是个环的话就好办了，用next()指针,需要考虑当k大于链表长度的时候移出链表尾的情况，所以先对k2移动做了处理\n\n### 代码\n```python\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        if head:#判断链表是否为空\n            k1=head\n            k2=head\n            count=1#记录链表长度\n            num=0#记录已经旋转的节点数\n            while num<k:\n                if k2.next:#如果k2没有到结尾，则继续后移\n                #需要现将count+1，再移动k2，否则count少一位\n                    count+=1\n                    k2=k2.next\n                else:\n                    k=k%count#如果k的值大于链表的长度count,那么我们只需要将链表旋转count次就可以实现相同的效果\n                    num=-1#末尾的索引\n                    k2=head\n            #一个循环结束，继续下一个循环\n                num+=1\n            while k2.next:#k1和k2同事移动，直到k2到链表尾部\n                k1=k1.next\n                k2=k2.next\n            #如果k1和k2没有连着，那k2到达尾部时，k1之后还有元素，则将k1和之后的元素断开，此时k1就是链表尾部，然后保存下一个节点为cur\n            if k1.next:\n                cur=k1.next\n            else:\n                return head\n            #k2指向原链表的头部，把k1断开后保存的cur当做新的链表头\n            k1.next=None\n            k2.next=head\n            return cur\n\n\n```\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为链表长度。\n- 空间复杂度：O(1)，没有占用其余空间，O（1）复杂度","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595694707","body":"### 思路\n递归\n\n### 代码\n```python\nPython3 Code:\n\nclass Solution:\n   def swapPairs(self, head: ListNode) -> ListNode:\n       if not head or not head.next: return head\n\n       next = head.next\n       head.next = self.swapPairs(next.next)\n       next.next = head\n\n       return next\n\n\n```\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1596056476","body":"### 思路\n用双指针解题\n\n### 代码\n```python\nclass Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        if not head:\n            return head\n        pre,slow,fast=None,head,head\n        while fast and fast.next:\n            fast=fast.next.next\n            pre=slow\n            slow=slow.next\n        if pre:\n            pre.next=None\n        node=TreeNode(slow.val)\n        if slow==fast:\n            return node\n        node.left=self.sortedListToBST(head)\n        node.right=self.sortedListToBST(slow.next)\n        return node\n\n\n```\n**复杂度分析**\n- 时间复杂度：O(nlogn)，其中 n为每一层的操作数，logn为二叉树的深度。\n- 空间复杂度：O(logn)，logn为二叉树的深度","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1596442549","body":"### 思路\n法一用哈希表存储a，检查b是否在里面可以\n法二用双指针\n\n### 代码\n```python\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        a,b=headA,headB\n        while a !=b:\n            if a:\n                a=a.next\n            else:\n                a=headB\n            if b:\n                b=b.next\n            else:\n                b=headA\n        return a\n\n```\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为链表长度。\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1598256703","body":"### 思路\n法一遍历链表，用哈希表存节点，第一次遍历两次的节点就是环的入口\n法二用双指针，快走两步，慢走一步，如果慢=快，证明有环，慢从头开始，快从相遇点开始，下次相遇点即为环的入口\n以下内容使用法二\n\n### 代码\n```python\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        slow,fast=head,head\n        x=None\n        while fast and fast.next:\n            fast=fast.next.next\n            slow=slow.next\n            if fast==slow:\n                x=fast\n                break\n        if not x:\n            return None\n        slow=head\n        while slow !=x:\n            slow=slow.next\n            x=x.next\n        return slow\n\n```\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为链表的长度。\n- 空间复杂度：O(1)，使用快慢指针，未占用其它空间","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"61hhh":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585692895","body":"### 思路\n\n逐位求和并考虑进位问题，求和需要判断 num、k 是否没有取完，每次计算更新值\n\n\n\n### 代码\n\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = num.length;\n        int carry = 0;\n        for (int i = n - 1; i >= 0 || k > 0 || carry > 0; i--) {\n            int sum = carry;\n            if (i >= 0) {\n                sum += num[i];\n            }\n            if (k > 0) {\n                sum += k % 10;\n                k /= 10;\n            }\n            res.add(sum % 10);\n            carry = sum / 10;\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}\n```\n\n\n\n### 复杂度分析\n\n- 时间复杂度：O(N)\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586212707","body":"### 思路\n\n遍历计算每个字符最近的左 c 保存距离、遍历计算每个字符最近的右 c ，取更小值保存距离。每次匹配到 c 就更新下标\n\n### 代码\n\n```java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int len = s.length();\n        int[] res = new int[len];\n        int pos = -len;\n        // 找到每个字符左边最近的c，计算距离\n        for (int i = 0; i < len; i++) {\n            if (s.charAt(i) == c) {\n                pos = i;\n            }\n            res[i] = i - pos;\n        }\n        // 找到每个字符右边最近的c，计算距离，与左c取更小值\n        pos = 2 * len;\n        for (int i = len - 1; i >= 0; i--) {\n            if (s.charAt(i) == c) {\n                pos = i;\n            }\n            res[i] = Math.min(res[i], pos - i);\n        }\n        return res;\n    }\n}\n```\n\n\n\n### 复杂度分析\n\n- 时间复杂度：O(N)\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587183271","body":"### 代码\n\n```java\nclass CustomStack {\n\n    int[] stack;\n    int maxSize;\n    int top;\n\n    public CustomStack(int maxSize) {\n        this.maxSize = maxSize;\n        this.stack = new int[maxSize];\n        this.top = 0;\n    }\n\n    public void push(int x) {\n        if (top < maxSize) {\n            stack[top++] = x;\n        }\n    }\n\n    public int pop() {\n        if (top > 0) {\n            return stack[--top];\n        }\n        return -1;\n    }\n\n    public void increment(int k, int val) {\n        for (int i = 0; i < k && i < stack.length; i++) {\n            stack[i] += val;\n        }\n    }\n}\n```\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589442375","body":"### 思路\n\n两个栈分别存储数字和字符，tmp记录普通字符串、num记录重复次数\n\n遇到字符就追加tmp、遇到数字就算num值、遇到左括号就将tmp+num压栈并重置、遇到右括号两栈分别出栈，将tmp重复num次拼接到字符后\n\n### 代码\n\n```java\nclass Solution {\n    Stack<StringBuilder> strs = new Stack<>();\n    Stack<Integer> nums = new Stack<>();\n    StringBuilder tmp = new StringBuilder();\n    int num = 0;\n\n    public String decodeString(String s) {\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                tmp.append(c);// 普通字符加入当前记录字符串中\n            }\n            if (Character.isDigit(c)) {\n                num = num * 10 + c - '0';// 数字可能有多位\n            }\n            if (c == '[') {\n                // [ 前数字入栈并初始化为0\n                nums.push(num);\n                num = 0;\n                // [ 前的字符串暂存入栈、重置字符串\n                strs.push(tmp);\n                tmp = new StringBuilder();\n            }\n            if (c == ']') {\n                // 括号内的字符串用于重复\n                StringBuilder inner = tmp;\n                Integer times = nums.pop();\n                // []内字符串拼接在 strs 栈顶字符后面\n                tmp = strs.pop();\n                while (times-- > 0) {\n                    tmp.append(inner);\n                }\n                num = 0;\n            }\n        }\n        return tmp.toString();\n    }\n}\n```\n\n\n### 复杂度分析\n\n- 时间复杂度：O(n)\n- 空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1591422577","body":"### 思路\n\n栈 s1 用于模拟队列，s2 用于输入栈，栈顶元素用一个额外的元素存储\n\n### 代码\n\n```java\nclass MyQueue {\n\n    Stack<Integer> s1 = new Stack<>();\n    Stack<Integer> s2 = new Stack<>();\n    int front;\n\n    public MyQueue() {\n\n    }\n\n    public void push(int x) {\n        if (s1.empty()) {\n            front = x;\n        }\n        while (!s1.empty()) {\n            s2.push(s1.pop());\n        }\n        s2.push(x);\n        while (!s2.empty()) {\n            s1.push(s2.pop());\n        }\n    }\n\n    public int pop() {\n        int ans = s1.pop();\n        if (!s1.empty()) {\n            front = s1.peek();\n        }\n        return ans;\n    }\n\n    public int peek() {\n        return front;\n    }\n\n    public boolean empty() {\n        return s1.isEmpty();\n    }\n}\n```\n\n### 复杂度分析\n\n- 时间复杂度：O(n)\n- 空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1593246800","body":"### 代码\n\n```java\nclass Solution {\n    public int maxChunksToSorted(int[] arr) {\n        int n = arr.length;\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < n; i++) {\n            if (stack.isEmpty() || arr[i] >= stack.peek()) {\n                stack.push(arr[i]);\n            } else {\n                int top = stack.pop();\n                while (!stack.isEmpty() && arr[i] < stack.peek()) {\n                    stack.pop();\n                }\n                stack.push(top);\n            }\n        }\n        return stack.size();\n    }\n}\n```\n\n\n\n### 复杂度分析\n\n- 时间复杂度：O(n)\n- 空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594885356","body":"### 代码\n\n```java\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        if (head == null || head.next == null || k == 0) {\n            return head;\n        }\n        // 计算长度\n        int len = 1;\n        ListNode cur = head;\n        while (cur.next != null) {\n            cur = cur.next;\n            len++;\n        }\n        // 实际移动次数\n        k = k % len;\n        if (k == 0) {\n            return head;\n        }\n        // 首尾相连\n        cur.next = head;\n        // 计算需要断开的点、断开链表\n        ListNode last = head;\n        for (int i = 0; i < len - k - 1; i++) {\n            last = last.next;\n        }\n        ListNode newHead = last.next;\n        last.next = null;\n\n        return newHead;\n    }\n}\n```\n\n### 复杂度分析\n\n- 时间复杂度：O(n)\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595777232","body":"### 代码\n\n```java\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        ListNode dummy = new ListNode(-1);\n        dummy.next = head;\n        // pre.next总是指向待交换节点的前一个\n        ListNode pre = dummy;\n\n        while ((head != null) && (head.next != null)) {\n            ListNode first = head;\n            ListNode second = first.next;\n            // 交换节点\n            pre.next = second;\n            first.next = second.next;\n            second.next = first;\n            // pre后移\n            pre = first;\n            head = first.next;\n        }\n        return dummy.next;\n    }\n}\n```\n\n\n\n### 复杂度分析\n\n- 时间复杂度：O(n)\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1596169765","body":"### 代码\n\n```java\nclass Solution {\n    public TreeNode sortedListToBST(ListNode head) {\n        if (head == null) {\n            return null;\n        }\n        if (head.next == null) {\n            return new TreeNode(head.val);\n        }\n\n        // 找到链表的中间节点\n        ListNode slow = head, fast = head.next.next;\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n\n        // 以中间节点的值创建根节点\n        TreeNode root = new TreeNode(slow.next.val);\n\n        // 递归地构建左子树和右子树\n        ListNode rightHead = slow.next.next;\n        slow.next = null;\n        root.left = sortedListToBST(head);\n        root.right = sortedListToBST(rightHead);\n\n        return root;\n    }\n}\n```\n\n\n\n### 复杂度分析\n\n- 时间复杂度：O(nlogn)\n- 空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1596652167","body":"### 代码\n\n```java\npublic class Solution {\n\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        if (headA == null || headB == null) {\n            return null;\n        }\n        ListNode pA = headA;\n        ListNode pB = headB;\n        \n        while (pA != pB) {\n            pA = pA == null ? headB : pA.next;\n            pB = pB == null ? headA : pB.next;\n        }\n        return pA;\n    }\n}\n```\n\n### 复杂度分析\n\n- 时间复杂度：O(n)\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1598963678","body":"代码\n```java\npublic class Solution {\n    public ListNode detectCycle(ListNode head) {\n        if (head == null || head.next == null) {\n            return null;\n        }\n        ListNode fast = head;\n        ListNode slow = head;\n        while (true) {\n            // 没环时fast先结束 fast速度为2 要判断fast和fast.next 避免NPE\n            if (fast == null || fast.next == null) {\n                return null;\n            }\n            fast = fast.next.next;\n            slow = slow.next;\n            // 相遇时退出循环\n            if (fast == slow) {\n                break;\n            }\n        }\n        // 重置slow到起点 同速度前进\n        fast = head;\n        while (fast != slow) {\n            fast = fast.next;\n            slow = slow.next;\n        }\n        return fast;\n    }\n}\n```\n复杂度分析\n● 时间复杂度：O(n)\n● 空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"quaaaaaack":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"acy925":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585027784","body":"### 思路\n两步：\n第一步：先把给的数组合成一个数；\n第二步：把合成的数加上给的数，再按上面的过程逆着一遍，变成数组。\n\n### 代码\n\n```python\nclass Solution(object):\n    def addToArrayForm(self, num, k):\n        \"\"\"\n        :type num: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n\n        a = 0\n        for i in num:\n            a = a * 10 + i\n        a = a + k\n\n        ans = []\n        while a != 0:\n            ans.append(a % 10)\n            a = a // 10\n        \n        return ans[::-1]\n\n```\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组num长度。\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1585786044","body":"### 思路\n\n将问题分解为两次遍历数组。\n首先，从左到右遍历，同时维护一个记录字符 s 位置的变量。记录数组每个元素到该变量的距离。（注：变量初始值为负无穷）\n然后，从右到左遍历，同时维护一个记录字符 s 位置的变量。记录数组每个元素到该变量的距离。（注：变量初始值为正无穷）\n最后，比较上述两个距离，最小值为结果。\n\n\n### 代码\n\n\n```python\nclass Solution(object):\n    def shortestToChar(self, S, C):\n        prev = float('-inf')\n        ans = []\n        for i, x in enumerate(S):\n            if x == C: prev = i\n            ans.append(i - prev)\n\n        prev = float('inf')\n        for i in range(len(S) - 1, -1, -1):\n            if S[i] == C: prev = i\n            ans[i] = min(ans[i], prev - i)\n\n        return ans\n\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1586402648","body":"### 思路\n\n列表实现栈，一个指针变量记录栈顶元素的位置，最后可以优化成全部 O(1)\n\n### 代码\n\n\n```python\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stk = [0] * maxSize\n        self.add = [0] * maxSize\n        self.top = -1\n\n    def push(self, x: int) -> None:\n        if self.top != len(self.stk) - 1:\n            self.top += 1\n            self.stk[self.top] = x\n\n    def pop(self) -> int:\n        if self.top == -1:\n            return -1\n        ans = self.stk[self.top] + self.add[self.top]\n        if self.top != 0:\n            self.add[self.top - 1] += self.add[self.top]\n        self.add[self.top] = 0\n        self.top -= 1\n        return ans\n\n    def increment(self, k: int, val: int) -> None:\n        lim = min(k - 1, self.top)\n        if lim >= 0:\n            self.add[lim] += val\n\n**复杂度分析**\n- 时间复杂度：O(1)\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589262511","body":"### 思路\n\n递归，找到 k[ ... ]，中间的递归\n\n### 代码\n\n\n```python\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        def dfs(s, i):\n            res, multi = \"\", 0\n            while i < len(s):\n                if '0' <= s[i] <= '9':\n                    multi = multi * 10 + int(s[i])\n                elif s[i] == '[':\n                    i, tmp = dfs(s, i + 1)\n                    res += multi * tmp\n                    multi = 0\n                elif s[i] == ']':\n                    return i, res\n                else:\n                    res += s[i]\n                i += 1\n            return res\n        return dfs(s,0)\n\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)\n- 空间复杂度：O(N)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1591208678","body":"### 代码\n\n\n```python\nclass MyQueue(object):\n\n    def __init__(self):\n        self.stack1 = []\n        self.stack2 = []\n\n    def push(self, x):\n        self.stack1.append(x)\n\n    def pop(self):\n        if not self.stack2:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())\n        return self.stack2.pop()\n\n    def peek(self):\n        if not self.stack2:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())\n        return self.stack2[-1]\n\n    def empty(self):\n        return not self.stack1 and not self.stack2\n\n\n```","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595786316","body":"### 思路\n        # 两两swap,反转节点的基本操作 p->a->b->\n        # 头节点会变化，所以要增加虚拟头节点p\n        \n        # 三板斧\n        #1、让虚拟头节点p指向b\n        #2、让a指向b.next\n        #3、让b指向a\n        # 然后 p 移动到a，继续该过程\n\n\n### 代码\n\n\n```python\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n\n        dummy = ListNode(-1,head)\n        p = dummy\n        \n        while p.next and p.next.next:\n            a,b = p.next,p.next.next\n            p.next = b\n            a.next = b.next\n            b.next = a\n            \n            p = a\n        return dummy.next\n\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1595936563","body":"### 代码\n\n\n```python\nclass Solution:\n    def sortedListToBST(self, head: ListNode) -> TreeNode:\n        if not head:\n            return head\n        pre, slow, fast = None, head, head\n\n        while fast and fast.next:\n            fast = fast.next.next\n            pre = slow\n            slow = slow.next\n        if pre:\n            pre.next = None\n        node = TreeNode(slow.val)\n        if slow == fast:\n            return node\n        node.left = self.sortedListToBST(head)\n        node.right = self.sortedListToBST(slow.next)\n        return node\n\n\n\n```\n\n","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1599014336","body":"### 思路\n快慢指针\n\n### 代码\n\n\n```python\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if fast == slow:\n                break\n        if fast is None or fast.next is None:\n            return None\n        \n        slow = head\n        while slow != fast:\n            fast = fast.next\n            slow = slow.next\n        return slow\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/13#issuecomment-1599490421","body":"### 思路\r\n\r\n\r\n### 代码\r\n\r\n\r\n```python\r\nclass ListNode: # 定义双链表的节点\r\n    def __init__(self, key, value):\r\n        self.key = key\r\n        self.value = value\r\n        self.left = None\r\n        self.right = None\r\n\r\nclass LRUCache(object):\r\n\r\n    def __init__(self, capacity): \r\n        \"\"\"\r\n        :type capacity: int\r\n        \"\"\"\r\n        self.look_up = collections.defaultdict() # 哈希表\r\n        self.head = ListNode(-1,-1) # 双链表，需要头和尾\r\n        self.tail = ListNode(-1,-1)\r\n        self.head.right = self.tail # 刚开始初始化的时候，只有两个结点\r\n        self.tail.left = self.head\r\n        self.capacity = capacity\r\n\r\n    def remove(self, node):\r\n        node.left.right = node.right\r\n        node.right.left = node.left # 我右侧节点的左侧等于我的左侧\r\n\r\n    def insert(self, node):\r\n        node.right = self.head.right\r\n        node.left = self.head\r\n\r\n        self.head.right.left = node\r\n        self.head.right = node\r\n\r\n    def get(self, key):\r\n        \"\"\"\r\n        :type key: int\r\n        :rtype: int\r\n        \"\"\"\r\n        if key not in self.look_up: # 先判断是否存在\r\n            return -1\r\n        else:\r\n            node = self.look_up[key]\r\n            #先把这个节点从链表里remove\r\n            self.remove(node)\r\n            #再把这个节点放到链表头部\r\n            self.insert(node)\r\n            return node.value\r\n\r\n    def put(self, key, value):\r\n        \"\"\"\r\n        :type key: int\r\n        :type value: int\r\n        :rtype: None\r\n        \"\"\"\r\n        if key in self.look_up: # 第一种情况：如果哈希表里有key\r\n            node = self.look_up[key]\r\n            node.value = value\r\n            #将这个node从链表里remove，\r\n            self.remove(node)\r\n            #将这个node插入到头部\r\n            self.insert(node)\r\n        else:                  # 第二种情况：如果哈希表里没有key，则插入\r\n            #如果链表已经满了\r\n            if len(self.look_up) == self.capacity:\r\n                node = self.tail.left\r\n                self.remove(node) # 从链表里把最后一个节点删除\r\n                # self.tail.left = node.left\r\n                # node.left.right = self.tail\r\n                del self.look_up[node.key] # 从哈希表里把最后一个节点删除\r\n                \r\n\r\n            #创建节点\r\n            node = ListNode(key, value)\r\n            #将节点放入look_up里\r\n            self.look_up[key] = node\r\n            #将节点放入链表里\r\n            self.insert(node)\r\n\r\n\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(1)\r\n- 空间复杂度：O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bi9potato":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585312097","body":"### 思路\r\n\r\n从后遍历num和k每一位并相加，进位存在carry变量内\r\n\r\n### 代码\r\n\r\n```java\r\n\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n\r\n        List<Integer> res = new LinkedList<>();\r\n        int carry = 0;\r\n\r\n        for( int i = num.length-1; i > -1 ; i-- ) {\r\n\r\n            int new_digit = num[i] + k%10 + carry;\r\n\r\n            if(new_digit > 9) carry = 1; // update carry\r\n            else carry = 0;\r\n\r\n            res.add(0, new_digit % 10); // eliminate carry\r\n\r\n            k /= 10;\r\n\r\n        }\r\n\r\n        while( k != 0) {\r\n\r\n            int new_digit = k%10 + carry;\r\n\r\n            if(new_digit > 9) carry = 1; // update carry\r\n            else carry = 0;\r\n\r\n            res.add(0, new_digit % 10); // eliminate carry\r\n\r\n            k /= 10;\r\n\r\n        }\r\n\r\n        if (carry == 1) res.add(0, 1);\r\n\r\n        return res;\r\n        \r\n    }\r\n}\r\n\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(N)\r\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1585759880","body":"### Aproach\r\n\r\nForward and backward traversal\r\n\r\n### Code\r\n\r\n```java\r\n\r\nclass Solution {\r\n    public int[] shortestToChar(String s, char c) {\r\n\r\n\r\n        int len = s.length();\r\n        int c_idx = -len;\r\n\r\n        int[] res = new int[len];\r\n        \r\n        // Traverse from left\r\n        // Calculate distance from each char to the nearest c on its left\r\n        for (int i = 0; i <len; i++) {\r\n            if (s.charAt(i) == c) c_idx = i;\r\n            res[i] = i-c_idx;\r\n        }\r\n\r\n        // Traverse from right\r\n        // Calculate distance from each char to the nearest c on its right\r\n        // compare two distances to keep the shortest one\r\n        for (int i = c_idx; i > -1; i-- ) {\r\n            if (s.charAt(i) == c) c_idx = i;\r\n            res[i] = Math.min(res[i], c_idx-i);\r\n        }\r\n\r\n        return res;\r\n\r\n    }\r\n}\r\n\r\n```\r\n**Complexity Analysis**\r\n- time $\\mathcal{O}(N)$\r\n- space $\\mathcal{O}(N)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1586253181","body":"### Approch\n\nTrade space for time by using an additional stack.  \nAdd `val` during the `pop` operation.\n\n### code\n\n```java\n\nclass CustomStack {\n\n    private int[] s;\n    private int top_pointer;\n    private int bottom_pointer;\n\n    private int[] inc_s;\n\n    public CustomStack(int maxSize) {\n\n        s = new int[maxSize];\n        top_pointer = -1;\n        bottom_pointer = 0;\n\n        inc_s = new int[maxSize];\n        \n    }\n    \n    public void push(int x) {\n\n        if ( top_pointer < s.length-1 ) {\n            s[++top_pointer] = x;\n        } \n        \n    }\n    \n    public int pop() {\n\n        if (top_pointer == -1) {\n            return -1;\n        } else {\n            if (inc_s[top_pointer] != 0) {\n                int val = inc_s[top_pointer];\n                if (top_pointer != 0) inc_s[top_pointer-1] += val;\n                inc_s[top_pointer] = 0;\n                return s[top_pointer--] + val;\n            } else {\n                return s[top_pointer--];\n            }\n        }\n\n    }\n    \n    public void increment(int k, int val) {\n\n        if (k-1 > top_pointer) {\n            k = top_pointer+1;\n        }\n\n        if (k > 0) inc_s[k-1] += val;\n        \n    }\n}\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack obj = new CustomStack(maxSize);\n * obj.push(x);\n * int param_2 = obj.pop();\n * obj.increment(k,val);\n */\n\n```\n\n**Complexity Analysis**\n- time: All $\\mathcal{O}(1)$ \n- space: All $\\mathcal{O}(1)$ but `CostomStack` $\\mathcal{O}(N)$ ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1588442534","body":"# Approch\n\nNested brackets require concatenating strings **from inside out**, which corresponds to **LIFO** property of stack.\n\nTraverse each char in string s:\n\n- If `c == '['`, push multiplier and string into the stack.\n\n- If `c == ']'`,\n    1. Pop the multiplier and string from stack.\n    2. Multiply the current string by the popped multiplier and concatenate it with the popped string.\n\n- If `c == digit`, concatenate and record it.\n\n- If `c == char`, append it to the current string.\n\n## Note:\n\n- Implement the stack using `LinkedList`/ `ArrayDeque` (not thread-safe) cuz they're faster than `Stack` (thread-safe).\n- `StringBuilder` (not thread-safe) is  faster than `StringBuffer`(thread-safe).\n\n# Code\n\n```java\n\nclass Solution {\n    public String decodeString(String s) {\n\n        Deque<Integer> n_stack = new LinkedList<>();\n        Deque<StringBuilder> s_stack = new LinkedList<>();\n\n        StringBuilder sb = new StringBuilder();\n        int n = 0;\n\n        for( int i = 0; i < s.length(); i++) {\n\n            char c = s.charAt(i);\n\n            if (c >= '0' && c <= '9') {\n                n = n*10 + c-'0';\n            } else if (c == '[') {\n                n_stack.push(n);\n                n = 0;\n                s_stack.push(sb);\n                sb = new StringBuilder();\n            } else if (c == ']') {\n\n                int temp_n = n_stack.pop(); \n                StringBuilder temp_sb = new StringBuilder();\n                for(int j = 0; j < temp_n; j++) {\n                    temp_sb.append(sb);\n                }\n\n                sb = s_stack.pop().append(temp_sb);\n            } else { // c == char\n                sb.append(c);\n            }\n\n        }\n\n        return sb.toString();\n        \n    }\n}\n\n```\n\n\n# Complexity Analysis\n- Time: $\\mathcal{O}(N)$ \n- Space: $\\mathcal{O}(N)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1589804536","body":"# Approach\n\n\n# Code\n\n```java\n\nclass MyQueue {\n\n    Deque<Integer> s1;\n    Deque<Integer> s2;\n\n    public MyQueue() {\n\n        s1 = new LinkedList<>();\n        s2 = new LinkedList<>();\n        \n    }\n    \n    public void push(int x) {\n\n        s1.push(x);\n        \n    }\n    \n    public int pop() {\n\n        if (s2.isEmpty()) {\n            while (!s1.isEmpty()) {\n                s2.push(s1.pop());\n            }\n        }\n\n        return s2.pop();\n        \n    }\n    \n    public int peek() {\n\n        if (s2.isEmpty()) {\n            while (!s1.isEmpty()) {\n                s2.push(s1.pop());\n            }\n        }\n\n        return s2.peek();\n        \n    }\n    \n    public boolean empty() {\n\n        return s1.isEmpty() && s2.isEmpty();\n        \n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj = new MyQueue();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.peek();\n * boolean param_4 = obj.empty();\n */\n\n```\n\n# Complexity Analysis\n\n- Time: \n    $\\mathcal{O}(1)$ for `push`, \n    $\\mathcal{O}(N)$ for `pop`, \n    $\\mathcal{O}(N)$ for `peek`, \n    $\\mathcal{O}(1)$ for `empty`\n- Space: $\\mathcal{O}(N)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1592405765","body":"# Approach\n\n# Code\n\n```java\n\nclass Solution {\n    public int maxChunksToSorted(int[] arr) {\n\n        Deque<Integer> deq = new LinkedList<>();\n\n        for (int num : arr) {\n\n            if (deq.isEmpty()) {\n                deq.push(num);\n            } else { // deq is not empty\n                int max = deq.peek();\n                if (num >= max) {\n                    deq.push(num);\n                } else { // num < max\n                    while (!deq.isEmpty() && deq.peek() > num) {\n                        deq.pop();\n                    }\n                    deq.push(max);\n                }\n            }\n\n\n        }\n\n        return deq.size();\n\n    }\n}\n\n\n```\n\n# Complexity Analysis\n\n- Time $\\mathcal{O}(N)$\n- Space $\\mathcal{O}(N)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1593502241","body":"# Approach\n\nRotate the last k nodes (len of linked list is k) to the front.\n\n# Code\n\n```java\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n\n        if (head == null) return head;\n\n        ListNode old_tail = head;\n        int len = 1;\n        while (old_tail.next != null) {\n            len++;\n            old_tail = old_tail.next;\n        }\n        // System.out.println(len);\n\n\n        ListNode new_tail = head;\n        int idx = len - k % len;\n        // System.out.println(idx);\n        for (int i = 1; i < idx; i++) {\n            new_tail = new_tail.next;\n        }\n        // System.out.println(new_tail.val);\n\n        old_tail.next = head;\n        head = new_tail.next;\n        new_tail.next = null;\n\n        return head;\n\n        \n    }\n}\n\n```\n\n# Complexity Analysis\n- Time $\\mathcal{O}(N)$\n- Spce $\\mathcal{O}(1)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595033288","body":"# Approach\n\ndummy node\n\n# Code\n\n```java\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n\n        ListNode dummy = new ListNode();\n        dummy.next = head;\n\n        ListNode node = dummy;\n        while (node != null && node.next != null && node.next.next != null) {\n\n            ListNode tmp = node.next;\n\n            node.next = tmp.next;\n            tmp.next = node.next.next;\n            node.next.next = tmp;\n\n            node = node.next.next;\n\n        }\n\n        return dummy.next;\n        \n    }\n}\n\n```\n\n# Complexity Analysis\n- Time $\\mathcal{O}(N)$\n- Spce $\\mathcal{O}(1)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1595886043","body":"# Approach\r\n\r\nFast n slow pointers to get the middle node, then use **BFS recursively**.\r\n\r\n# Code\r\n\r\n```java\r\n\r\n/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode() {}\r\n *     ListNode(int val) { this.val = val; }\r\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n * }\r\n */\r\n/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode() {}\r\n *     TreeNode(int val) { this.val = val; }\r\n *     TreeNode(int val, TreeNode left, TreeNode right) {\r\n *         this.val = val;\r\n *         this.left = left;\r\n *         this.right = right;\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    public TreeNode sortedListToBST(ListNode head) {\r\n\r\n        return dfs(head, null);\r\n        \r\n    }\r\n\r\n    private TreeNode dfs(ListNode head, ListNode tail) {\r\n\r\n        if (head == tail) {\r\n            return null;\r\n        }\r\n\r\n        ListNode fast = head;\r\n        ListNode slow = head;\r\n        while (fast != tail && fast.next != tail) {\r\n            fast = fast.next.next;\r\n            slow = slow.next;\r\n        }\r\n\r\n        TreeNode root = new TreeNode(slow.val);\r\n        root.left = dfs(head, slow);\r\n        root.right = dfs(slow.next, tail);\r\n\r\n        return root;\r\n\r\n    }\r\n}\r\n\r\n```\r\n\r\n# Complexity Analysis\r\n- Time $\\mathcal{O}(N\\log{N})$\r\n- Spce $\\mathcal{O}(N)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1596225269","body":"# Approach\n\nDouble pointer\n\nTraverse original linkedlist first, then traverse the other linkedlist.\n\n# Code\n\n```java\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n\n        ListNode pA = headA;\n        ListNode pB = headB;\n\n        while (pA != pB) {\n\n            if (pA == null) {\n                pA = headB;\n            } else {\n                pA = pA.next;\n            }\n\n            \n\n            if (pB == null) {\n                pB = headA;\n            } else {\n                pB = pB.next;\n            }\n\n            \n\n        }\n\n        return pA;\n        \n    }\n}\n\n```\n\n# Complexity Analysis\n- Time $\\mathcal{O}(N)$\n- Spce $\\mathcal{O}(1)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1597517080","body":"# Approach\n\nFast and Slow Pointers\n\n# Code\n\n```java\n\n/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode detectCycle(ListNode head) {\n\n        ListNode pSlow = head;\n        ListNode pFast = head;\n\n        while (pFast != null && pFast.next != null ) {\n            pSlow = pSlow.next;\n            pFast = pFast.next.next;\n\n            if (pFast == pSlow) break;\n        }\n\n        if (pFast == null || pFast.next == null) {\n            return null;\n        }\n\n        pSlow = head;\n        while (pSlow != pFast) {\n            pSlow = pSlow.next;\n            pFast = pFast.next;\n        }\n\n        return pSlow;\n        \n    }\n}\n\n```\n\n# Complexity Analysis\n- Time $\\mathcal{O}(N)$\n- Spce $\\mathcal{O}(1)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/13#issuecomment-1599302475","body":"# Approach\n\nLinkedList + HashMap  \nUse LinkedList to store order of keys, and HashMap to store key-value pairs.  \n\n# Code\n\n```java\n\nclass LRUCache {\n\n    private HashMap<Integer, Node> map;\n    private int maxLen;\n    private DoubleLinkedList dll;\n\n\n    public LRUCache(int capacity) {\n        \n        map = new HashMap<>();\n        dll = new DoubleLinkedList();\n        maxLen = capacity;\n\n    }\n    \n    public int get(int key) {\n\n        if (map.containsKey(key)) {\n            Node node = map.get(key);\n            int val = node.val;\n\n            dll.rm(node);\n            dll.addLast(node);\n\n            return val;\n            \n        } else {\n            return -1;\n        }\n        \n    }\n    \n    public void put(int key, int value) {\n\n        if (map.containsKey(key)) {\n            Node node = map.get(key);\n            node.val = value;\n            dll.rm(node);\n            dll.addLast(node);\n        } else {\n\n            if (dll.getLen() >= maxLen ) {\n                int tmp_key = dll.rmFirst();\n                map.remove(tmp_key);\n            }\n            Node node = new Node(key, value);\n            map.put(key, node);\n            dll.addLast(node);\n        }\n\n        \n    }\n}\n\nclass Node {\n\n    public int key, val;\n\n    public Node next, prev;\n\n    public Node (int key, int val) {\n        this.key = key;\n        this.val = val;\n    }\n\n}\n\nclass DoubleLinkedList {\n\n    private Node head;\n    private Node tail;\n    private int len;\n\n    public DoubleLinkedList () {\n        head = new Node(-1, -1);\n        tail = new Node(-1, -1);\n\n        head.next = tail;\n        tail.prev = head;\n\n        len = 0;\n    }\n\n    public void rm (Node node) {\n        node.prev.next = node.next;\n        node.next.prev = node.prev;\n\n        len--;\n    }\n\n    public int rmFirst () {\n\n        if (head.next != tail) {\n\n            int key = head.next.key;\n\n            head.next = head.next.next;\n            head.next.prev = head;\n            len--;\n\n            return key;\n        }\n\n        return -1;\n\n        \n    }\n\n    public void rmLast () {\n        if (head.next != tail) {\n            tail.prev = tail.prev.prev;\n            tail.prev.next = tail;\n            len--;\n        }\n\n        \n    }\n\n    public void addLast (Node node) {\n        tail.prev.next = node;\n        node.prev = tail.prev;\n\n        node.next = tail;\n        tail.prev = node;\n\n        len++;\n\n    }\n\n    public int getLen () {\n        return len;\n    }\n\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */\n\n```\n\n# Complexity Analysis\n- Time $\\mathcal{O}(1)$ for `get` and `put`\n- Space $\\mathcal{O}(N)$","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guangsizhongbin":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585429513","body":"\n## 题目地址(989. 数组形式的整数加法)\n\nhttps://leetcode.cn/problems/add-to-array-form-of-integer/\n\n## 题目描述\n\n```\n整数的 数组形式  num 是按照从左到右的顺序表示其数字的数组。\n\n例如，对于 num = 1321 ，数组形式是 [1,3,2,1] 。\n\n给定 num ，整数的 数组形式 ，和整数 k ，返回 整数 num + k 的 数组形式 。\n\n \n\n示例 1：\n\n输入：num = [1,2,0,0], k = 34\n输出：[1,2,3,4]\n解释：1200 + 34 = 1234\n\n\n示例 2：\n\n输入：num = [2,7,4], k = 181\n输出：[4,5,5]\n解释：274 + 181 = 455\n\n\n示例 3：\n\n输入：num = [2,1,5], k = 806\n输出：[1,0,2,1]\n解释：215 + 806 = 1021\n\n\n \n\n提示：\n\n1 <= num.length <= 104\n0 <= num[i] <= 9\nnum 不包含任何前导零，除了零本身\n1 <= k <= 104\n```\n\n## 前置知识\n\n- \n\n## 公司\n\n- 暂无\n\n## 思路\n\n## 关键点\n\n-  \n\n## 代码\n\n- 语言支持：Go\n\nGo Code:\n\n```go\n\nfunc addToArrayForm(array []int, num int) []int {\n    // 1. plus two array \n    anotherArray :=  plusTwoArray(array, num)\n\n    // 2. reverseArray\n    return reverseArray(anotherArray)\n}\n\n\nfunc plusTwoArray(arr1 []int, num int)(res []int){\n\n    i := len(arr1) - 1\n    carry := 0\n    for i >= 0 || num > 0 {   // \n        a, b := 0, 0\n        if i >= 0 {\n            a = arr1[i]\n            i--\n        }\n\n        if num >= 0 {\n            b = num % 10\n            num /= 10\n        }\n\n\n        sum := a + b + carry\n\n        res = append(res, sum % 10)\n        carry = sum / 10\n    }\n\n\n    if carry > 0 {\n        res = append(res, carry)\n    }\n\n    return res\n}\n\nfunc reverseArray(array []int) []int {\n\n    i, j := 0, len(array) - 1\n\n    for i < j {\n        array[i], array[j] = array[j], array[i]\n        i++\n        j--\n    }\n\n    return array\n}\n\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(n)$\n- 空间复杂度：$O(n)$\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1585883406","body":"\n## 题目地址(821. 字符的最短距离)\n\nhttps://leetcode.cn/problems/shortest-distance-to-a-character/\n\n## 题目描述\n\n```\n给你一个字符串 s 和一个字符 c ，且 c 是 s 中出现过的字符。\n\n返回一个整数数组 answer ，其中 answer.length == s.length 且 answer[i] 是 s 中从下标 i 到离它 最近 的字符 c 的 距离 。\n\n两个下标 i 和 j 之间的 距离 为 abs(i - j) ，其中 abs 是绝对值函数。\n\n \n\n示例 1：\n\n输入：s = \"loveleetcode\", c = \"e\"\n输出：[3,2,1,0,1,0,0,1,2,2,1,0]\n解释：字符 'e' 出现在下标 3、5、6 和 11 处（下标从 0 开始计数）。\n距下标 0 最近的 'e' 出现在下标 3 ，所以距离为 abs(0 - 3) = 3 。\n距下标 1 最近的 'e' 出现在下标 3 ，所以距离为 abs(1 - 3) = 2 。\n对于下标 4 ，出现在下标 3 和下标 5 处的 'e' 都离它最近，但距离是一样的 abs(4 - 3) == abs(4 - 5) = 1 。\n距下标 8 最近的 'e' 出现在下标 6 ，所以距离为 abs(8 - 6) = 2 。\n\n\n示例 2：\n\n输入：s = \"aaab\", c = \"b\"\n输出：[3,2,1,0]\n\n\n \n\n提示：\n1 <= s.length <= 104\ns[i] 和 c 均为小写英文字母\n题目数据保证 c 在 s 中至少出现一次\n```\n\n## 前置知识\n\n- \n\n## 公司\n\n- 暂无\n\n## 思路\n\n## 关键点\n\n-  \n\n## 代码\n\n- 语言支持：Go\n\nGo Code:\n\n```go\n\nfunc shortestToChar(s string, c byte) []int {\n\n\tvar res []int = make([]int, len(s))\n\n    cur := math.MaxInt\n\n    // 1. 从前往后\n    for index, char := range s {\n        if char == int32(c) {\n            cur = index\n        }\n\n        if cur == math.MaxInt {\n            res[index]  = math.MaxInt\n        } else {\n            res[index] = index - cur\n        }\n    }\n\n    // 2. 从后往前\n    cur = math.MaxInt\n    for index := len(s) - 1; index >= 0 ; index-- {\n        char := s[index]\n\n        if char == c {\n            cur = index\n        }\n\n        abs := cur - index\n        if res[index] > abs {\n            res[index] = abs\n        }\n    }\n\n    return res\n}\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(n)$\n- 空间复杂度：$O(n)$\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1586406051","body":"\n## 题目地址(1381. 设计一个支持增量操作的栈)\n\nhttps://leetcode.cn/problems/design-a-stack-with-increment-operation/\n\n## 题目描述\n\n```\n请你设计一个支持对其元素进行增量操作的栈。\n\n实现自定义栈类 CustomStack ：\n\nCustomStack(int maxSize)：用 maxSize 初始化对象，maxSize 是栈中最多能容纳的元素数量。\nvoid push(int x)：如果栈还未增长到 maxSize ，就将 x 添加到栈顶。\nint pop()：弹出栈顶元素，并返回栈顶的值，或栈为空时返回 -1 。\nvoid inc(int k, int val)：栈底的 k 个元素的值都增加 val 。如果栈中元素总数小于 k ，则栈中的所有元素都增加 val 。\n\n \n\n示例：\n\n输入：\n[\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]\n输出：\n[null,null,null,2,null,null,null,null,null,103,202,201,-1]\n解释：\nCustomStack stk = new CustomStack(3); // 栈是空的 []\nstk.push(1);                          // 栈变为 [1]\nstk.push(2);                          // 栈变为 [1, 2]\nstk.pop();                            // 返回 2 --> 返回栈顶值 2，栈变为 [1]\nstk.push(2);                          // 栈变为 [1, 2]\nstk.push(3);                          // 栈变为 [1, 2, 3]\nstk.push(4);                          // 栈仍然是 [1, 2, 3]，不能添加其他元素使栈大小变为 4\nstk.increment(5, 100);                // 栈变为 [101, 102, 103]\nstk.increment(2, 100);                // 栈变为 [201, 202, 103]\nstk.pop();                            // 返回 103 --> 返回栈顶值 103，栈变为 [201, 202]\nstk.pop();                            // 返回 202 --> 返回栈顶值 202，栈变为 [201]\nstk.pop();                            // 返回 201 --> 返回栈顶值 201，栈变为 []\nstk.pop();                            // 返回 -1 --> 栈为空，返回 -1\n\n\n \n\n提示：\n\n1 <= maxSize, x, k <= 1000\n0 <= val <= 100\n每种方法 increment，push 以及 pop 分别最多调用 1000 次\n```\n\n## 前置知识\n\n- \n\n## 公司\n\n- 暂无\n\n## 思路\n\n## 关键点\n\n-  \n\n## 代码\n\n- 语言支持：Go\n\nGo Code:\n\n```go\n\ntype CustomStack struct {\n    stack []int\n}\n\n\nfunc Constructor(maxSize int) CustomStack {\n    if maxSize < 0 {\n        return CustomStack{}\n    }\n\n    return CustomStack{\n        stack: make([]int, 0, maxSize),\n    }\n}\n\n\nfunc (this *CustomStack) Push(x int)  {\n    if len(this.stack) == cap(this.stack) {\n        return\n    } \n    this.stack = append(this.stack, x)\n}\n\n\nfunc (this *CustomStack) Pop() int {\n    if (len(this.stack) == 0 ){\n        return -1\n    }\n\n    pop := this.stack[len(this.stack)-1]\n    this.stack = this.stack[:len(this.stack)-1]\n    return pop\n}\n\n\nfunc (this *CustomStack) Increment(k int, val int)  {\n\n    n := min(k, len(this.stack))\n\n    for i := 0; i < n; i++ {\n        this.stack[i] = this.stack[i] + val\n    }\n\n    return\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * obj := Constructor(maxSize);\n * obj.Push(x);\n * param_2 := obj.Pop();\n * obj.Increment(k,val);\n */\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(n)$\n- 空间复杂度：$O(n)$\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589192540","body":"\n## 题目地址(394. 字符串解码)\n\nhttps://leetcode.cn/problems/decode-string/\n\n## 题目描述\n\n```\n给定一个经过编码的字符串，返回它解码后的字符串。\n\n编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。\n\n你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。\n\n此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。\n\n \n\n示例 1：\n\n输入：s = \"3[a]2[bc]\"\n输出：\"aaabcbc\"\n\n\n示例 2：\n\n输入：s = \"3[a2[c]]\"\n输出：\"accaccacc\"\n\n\n示例 3：\n\n输入：s = \"2[abc]3[cd]ef\"\n输出：\"abcabccdcdcdef\"\n\n\n示例 4：\n\n输入：s = \"abc3[cd]xyz\"\n输出：\"abccdcdcdxyz\"\n\n\n \n\n提示：\n\n1 <= s.length <= 30\ns 由小写英文字母、数字和方括号 '[]' 组成\ns 保证是一个 有效 的输入。\ns 中所有整数的取值范围为 [1, 300] \n```\n\n## 前置知识\n\n- \n\n## 公司\n\n- 暂无\n\n## 思路\n\n## 关键点\n\n-  \n\n## 代码\n\n- 语言支持：Go\n\nGo Code:\n\n```go\n\nfunc decodeString(s string) string {\n    stk := []string{}\n    ptr := 0\n    for ptr < len(s) {\n        cur := s[ptr]\n        if cur >= '0' && cur <= '9' {\n            digits := getDigits(s, &ptr)\n            stk = append(stk, digits)\n        } else if (cur >= 'a' && cur <= 'z' || cur >= 'A' && cur <= 'Z') || cur == '[' {\n            stk = append(stk, string(cur))\n            ptr++\n        } else {\n            ptr++\n            sub := []string{}\n            for stk[len(stk)-1] != \"[\" {\n                sub = append(sub, stk[len(stk)-1])\n                stk = stk[:len(stk)-1]\n            }\n            for i := 0; i < len(sub)/2; i++ {\n                sub[i], sub[len(sub)-i-1] = sub[len(sub)-i-1], sub[i]\n            }\n            stk = stk[:len(stk)-1]\n            repTime, _ := strconv.Atoi(stk[len(stk)-1])\n            stk = stk[:len(stk)-1]\n            t := strings.Repeat(getString(sub), repTime)\n            stk = append(stk, t)\n        }\n    }\n    return getString(stk)\n}\n\nfunc getDigits(s string, ptr *int) string {\n    ret := \"\"\n    for ; s[*ptr] >= '0' && s[*ptr] <= '9'; *ptr++ {\n        ret += string(s[*ptr])\n    }\n    return ret\n}\n\nfunc getString(v []string) string {\n    ret := \"\"\n    for _, s := range v {\n        ret += s\n    }\n    return ret\n}\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(n)$\n- 空间复杂度：$O(n)$\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1591229016","body":"\n## 题目地址(232. 用栈实现队列)\n\nhttps://leetcode.cn/problems/implement-queue-using-stacks/\n\n## 题目描述\n\n```\n请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）：\n\n实现 MyQueue 类：\n\nvoid push(int x) 将元素 x 推到队列的末尾\nint pop() 从队列的开头移除并返回元素\nint peek() 返回队列开头的元素\nboolean empty() 如果队列为空，返回 true ；否则，返回 false\n\n说明：\n\n你 只能 使用标准的栈操作 —— 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。\n你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。\n\n \n\n示例 1：\n\n输入：\n[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\n输出：\n[null, null, null, 1, 1, false]\n\n解释：\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false\n\n\n \n\n提示：\n\n1 <= x <= 9\n最多调用 100 次 push、pop、peek 和 empty\n假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）\n\n \n\n进阶：\n\n你能否实现每个操作均摊时间复杂度为 O(1) 的队列？换句话说，执行 n 个操作的总时间复杂度为 O(n) ，即使其中一个操作可能花费较长时间。\n```\n\n## 前置知识\n\n- \n\n## 公司\n\n- 暂无\n\n## 思路\n\n## 关键点\n\n-  \n\n## 代码\n\n- 语言支持：Go\n\nGo Code:\n\n```go\n\ntype MyQueue struct {\n    inStack, outStack []int\n}\n\n\nfunc Constructor() MyQueue {\n    return MyQueue{}\n}\n\n\nfunc (q *MyQueue) Push(x int)  {\n    q.inStack = append(q.inStack, x)\n}\n\n\nfunc (q *MyQueue) Pop() int {\n    if len(q.outStack) == 0 {\n        q.in2out()\n    }\n    temp := q.outStack[len(q.outStack)-1]\n    q.outStack = q.outStack[:len(q.outStack)-1]\n    return temp\n}\n\nfunc (q *MyQueue) in2out() {\n    for len(q.inStack) > 0 {\n        q.outStack = append(q.outStack, q.inStack[len(q.inStack)-1])\n        q.inStack = q.inStack[:len(q.inStack)-1]\n    }\n}\n\nfunc (q *MyQueue) Peek() int {\n    if len(q.outStack) == 0 {\n        q.in2out()\n    }\n    return q.outStack[len(q.outStack)-1]\n}\n\n\nfunc (q *MyQueue) Empty() bool {\n    if len(q.inStack) == 0 && len(q.outStack) == 0 {\n        return true\n    }\n    return false\n}\n\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Push(x);\n * param_2 := obj.Pop();\n * param_3 := obj.Peek();\n * param_4 := obj.Empty();\n */\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(n)$\n- 空间复杂度：$O(n)$\n\n\n","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594796056","body":"/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc rotateRight(head *ListNode, k int) *ListNode {\n    // 1. 减枝\n    if head == nil || k == 0 || head.Next == nil {\n        return head\n    }\n\n    // 2. 计算链表长度\n    n := 1\n    iter := head\n    for iter.Next != nil {\n        iter = iter.Next \n        n++\n    }\n\n\n    // 3. 取余右移\n    add := n - k % n\n    if add == n {\n        return head\n    }\n    \n    // 3. 链表成环\n    iter.Next = head\n    \n    for add > 0 {\n       iter = iter.Next \n       add--\n    }\n    ret := iter.Next \n    iter.Next = nil\n    return ret\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595771604","body":"\n## 题目地址(24. 两两交换链表中的节点)\n\nhttps://leetcode.cn/problems/swap-nodes-in-pairs/\n\n## 题目描述\n\n```\n给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。\n\n \n\n示例 1：\n\n输入：head = [1,2,3,4]\n输出：[2,1,4,3]\n\n\n示例 2：\n\n输入：head = []\n输出：[]\n\n\n示例 3：\n\n输入：head = [1]\n输出：[1]\n\n\n \n\n提示：\n\n链表中节点的数目在范围 [0, 100] 内\n0 <= Node.val <= 100\n```\n\n## 前置知识\n\n- \n\n## 公司\n\n- 暂无\n\n## 思路\n\n## 关键点\n\n-  \n\n## 代码\n\n- 语言支持：Go\n\nGo Code:\n\n```go\n\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc swapPairs(head *ListNode) *ListNode {\n\n    dummyNode := &ListNode{\n        Next: head,\n    }\n\n    pre := dummyNode\n\n    for head != nil && head.Next != nil {\n        pre.Next = head.Next \n\n        temp := head.Next.Next\n\n        head.Next.Next = head\n        head.Next = temp\n\n        pre = head\n        head = temp\n    }\n\n    return dummyNode.Next\n}\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(n)$\n- 空间复杂度：$O(n)$\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1596133673","body":"\n## 题目地址(109. 有序链表转换二叉搜索树)\n\nhttps://leetcode.cn/problems/convert-sorted-list-to-binary-search-tree/\n\n## 题目描述\n\n```\n给定一个单链表的头节点  head ，其中的元素 按升序排序 ，将其转换为高度平衡的二叉搜索树。\n\n本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差不超过 1。\n\n \n\n示例 1:\n\n输入: head = [-10,-3,0,5,9]\n输出: [0,-3,9,-10,null,5]\n解释: 一个可能的答案是[0，-3,9，-10,null,5]，它表示所示的高度平衡的二叉搜索树。\n\n\n示例 2:\n\n输入: head = []\n输出: []\n\n\n \n\n提示:\n\nhead 中的节点数在[0, 2 * 104] 范围内\n-105 <= Node.val <= 105\n```\n\n## 前置知识\n\n- \n\n## 公司\n\n- 暂无\n\n## 思路\n\n## 关键点\n\n-  \n\n## 代码\n\n- 语言支持：Go\n\nGo Code:\n\n```go\n\nfunc sortedListToBST(head *ListNode) *TreeNode {\n    return buildTree(head, nil)\n}\n\nfunc getMedian(left, right *ListNode) *ListNode {\n    fast, slow := left, left\n    for fast != right && fast.Next != right {\n        fast = fast.Next.Next\n        slow = slow.Next\n    }\n    return slow\n}\n\nfunc buildTree(left, right *ListNode) *TreeNode{\n    if left == right {\n        return nil\n    }\n    mid := getMedian(left, right)\n    root := &TreeNode{mid.Val, nil, nil}\n    root.Left = buildTree(left, mid)\n    root.Right = buildTree(mid.Next, right)\n    return root\n}\n\n\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(n)$\n- 空间复杂度：$O(n)$\n\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhaoygcq":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585432380","body":"### 思路\n将数字转化为一个数组;之后将两个数组进行逐位相加.\n\n### 代码\n\n```js\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n    let len = num.length;\n    let kSplitArr = String(k).split(\"\").map(item => Number(item));\n    let kSplitLen = kSplitArr.length;\n    if(len < kSplitLen) {\n        let temp = num;\n        num = kSplitArr;\n        kSplitArr = temp;\n    }\n\n    // 逐位相加\n    let flag = 0;\n    len = num.length - 1;\n    while(kSplitArr.length || flag) {\n        let kVal = kSplitArr.pop();\n        let val;\n        if(kVal >= 0) {\n            val = num[len] + kVal + flag;\n        } else {\n            val = num[len] + flag;\n        }\n        flag = Math.floor(val / 10);\n        num[len] = val % 10;\n        if(flag && len - 1 < 0) {\n           num.unshift(flag)\n        }\n        len--;\n    }\n    // console.log(num)\n    return num;\n};\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1585973451","body":"### 思路\n\n遍历字符串；\n- 创建一个结果数组`res`，长度与字符串长度相同；并对每一个数组项赋初值`Infinity`;\n- 如果当前字符的值于目标字符`c`相同，那当前的`res[i] = 0`,并以当前位置向两边发散：如果一个字符到当前字符的距离比他原有的值要小(`res[j] > i - j`)，那就对其进行重新赋值；反之则终止此次发散。\n- 最终返回结果数组`res` \n\n### 代码\n\n\n```js\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function(s, c) {\n    const len = s.length;\n    let res = new Array(len).fill(Infinity);\n    for(let i = 0; i < len; i++) {\n        if(s[i] === c) {\n            res[i] = 0;\n            for(let j = i - 1; j >= 0; j--) {\n                if(res[j] > i - j) {\n                    res[j] = i - j;\n                } else {\n                    break;\n                }\n            }\n\n            for(let j = i + 1; j < len; j++) {\n                if(res[j] > j - i) {\n                    res[j] = j - i;\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n\n    return res;\n};\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(N)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1586381740","body":"### 思路\n\n增量更新数值时，先将栈中所有数据弹出；之后根据个数`k`以及栈的实际大小完成数据的增量更新\n\n### 代码\n\n\n```js\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n    this.maxSize = maxSize;\n    this.stack = [];\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if(this.stack.length < this.maxSize) {\n        this.stack.push(x);\n    }\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    if(this.stack.length) {\n        return this.stack.pop();\n    }\n    return -1;\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    let temp = [];\n    while(this.stack.length) {\n        temp.push(this.stack.pop());\n    }\n\n    while(temp.length && k) {\n        this.stack.push(temp.pop() + val);\n        k--;\n    }\n\n    while(temp.length) {\n        this.stack.push(temp.pop())\n    }\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(N)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1588266206","body":"### 思路\n使用栈对字符进行存储;\n- 遍历当前字符串，如果字符不是一个']'，直接入栈。\n- 如果当前字符是一个']';则需要将栈中的一部分数据进行弹出：\n    - 弹出数据时，若当前字符是在'['字符之前出栈的都是普通字符；\n    - 在'['之后弹出的是数字；拿到数字过后，直接进行字符串重建`x = str.repeat(y)`;\n    - 注意：上一步重建的字符串还需要添加会栈中(保证最终的字符串中各子串的相对位置不变)\n- 遍历完成，根据栈中内容，完成整体结果输出\n\n### 代码\n\n\n```js\n/**\n * @param {number} maxSize\n */\n/**\n * @param {string} s\n * @return {string}\n */\nconst decodeString = (s) => {\n    let stack = [];\n    let temp = [];\n    let num = [];\n    for(let i = 0; i < s.length; i++) {\n        if(s[i] !== ']') {\n            stack.push(s[i]);\n        } else {\n            // 取出字符出栈\n            while(stack[stack.length - 1] !== '[') {\n                temp.unshift(stack.pop());\n            }\n            // 需要将'['出栈\n            stack.pop();\n\n            // 取出数字\n            while(/\\d/.test(stack[stack.length - 1])) {\n                num.unshift(stack.pop())\n            }\n\n            let numStr = Number(num.join(\"\"));\n            let str = temp.join(\"\");\n            num.length = 0;\n            temp.length = 0;\n            stack.push(str.repeat(numStr));\n        }\n    }\n    return stack.join(\"\");\n};\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(N)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1590202878","body":"### 思路\n栈与队列的本质区别：\n- 栈是先进后出\n- 队列是先进先出\n所以，要想通过栈去模拟一个队列，那就需要两个栈(一个用于存，一个用于取)。两者主要的区别体现在去首个元素\n如队列`[1,2,3]`的队首是1；如果是栈，那其栈顶元素为3；所以可以在取队列首个元素时，先将栈中\n的所有内容弹出`[3,2,1]`(只在当前作为取的这个栈为空时才需要弹出用于存的栈的所有内容);这样栈顶元素就是1了\n\n### 代码\n\n\n```js\nvar MyQueue = function() {\n    this.queue = [];\n    this.hqueue = [];\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nMyQueue.prototype.push = function(x) {\n    this.queue.push(x);\n};\n\n/**\n * @return {number}\n */\nMyQueue.prototype.pop = function() {\n    if(!this.hqueue.length) {\n        while(this.queue.length) {\n            this.hqueue.push(this.queue.pop());\n        }\n    }\n\n    return this.hqueue.pop();\n};\n\n/**\n * @return {number}\n */\nMyQueue.prototype.peek = function() {\n    if(!this.hqueue.length) {\n        while(this.queue.length) {\n            this.hqueue.push(this.queue.pop());\n        }\n    }\n\n    return this.hqueue[this.hqueue.length - 1];\n};\n\n/**\n * @return {boolean}\n */\nMyQueue.prototype.empty = function() {\n    return !this.queue.length && !this.hqueue.length;\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * var obj = new MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(N)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1593146404","body":"### 思路\n将一个数组分块，保证分块后的有序数组合并起来依旧是一个有序数组；使用前缀和的方案；\n先将数组排序。判断一个位置i是否可以分块的前提就是：\n- 原始数组从第0项到i项到和为sum2\n- 排序后的数组从第0项到i项到和为sum1\n只要sum1 === sum2；那就说明是可以在该位置进行划分；\n### 代码\n\n\n```js\nvar maxChunksToSorted = function (arr) {\n  let sum1 = 0;\n  let sum2 = 0;\n  let ans = 0;\n  let arr2 = [...arr].sort((a, b) => a - b);\n  for (let i in arr) {\n    sum1 = sum1 + arr[i];\n    sum2 = sum2 + arr2[i];\n    if (sum1 == sum2) {\n      ans += 1;\n      sum1 = 0;\n      sum2 = 0;\n    }\n  }\n  return ans;\n};\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(1)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1593866155","body":"### 思路\n旋转链表，将每个节点向右移动k个位置 => 将链表的后len - k个节点当作链表的起始节点：\n[1,2,3,4,5] k = 2;\n=>\n[1,2,3] -> [4,5]\n=>\n[4,5] -> [1,2,3]\n为了实现上面的效果，有以下步骤：\n- 获取当前链表长度(循环) len\n- 判断当前是否需要移动，如果 k % len === 0;那就不需要移动\n- 使用指针到 len - (k % len) - 1的位置，即示例中值为3的节点位置。\n- 取出需要放到起始位置的节点[4,5],并将原有的头节点添加到节点值为5的节点之后。 \n### 代码\n\n\n```js\nvar rotateRight = function(head, k) {\n    let len = 0;\n    let curr = head;\n    if(!head || !k) return head;\n    while(curr) {\n        len++;\n        curr = curr.next;\n    }\n    let dis = k % len;\n    if(!dis) return head;\n    let runLen = len - dis - 1;\n    let end = head;\n    while(runLen > 0) {\n        end = end.next;\n        runLen--;\n    }\n    let newHead = end.next;\n    let next = newHead;\n    end.next = null;\n    while(next.next) {\n        next = next.next;\n    }\n    next.next = head;\n    return newHead;\n};\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(1)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595558914","body":"### 思路\n每两两交换，使用两个指针；遍历链表，通过记录一个当前遍历的索引值是否为偶数，决定是否进行交换。\n这种需要记录当前索引位置链表题，建议添加一个空头节点\n注意点：\n- 确定需要交换的两个节点\n- 确定有哪些节点的指向关系\n如：\n1->2->3->4\n- dummy -> 1->2->3->4\n交换1,2时:\n- 2 -> 1 \n- 1 -> 3\n- dummy -> 2\n所以，我们的两个指针的间隔需要为2；不然我们没办法完成第三步。\n### 代码\n\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar swapPairs = function(head) {\n    let dummy = new ListNode();\n    dummy.next = head;\n    let prev = dummy;\n    let curr = dummy.next;\n    if(!curr) return head;\n    curr = curr.next;\n    let count = 0;\n    while(curr) {\n        if(count % 2 === 0) {\n            let next = curr.next;\n            let prevOne = prev.next;\n            prevOne.next = next;\n            curr.next = prevOne;\n            prev.next = curr;\n            [curr, prevOne] = [prevOne, curr];\n        }\n        curr = curr.next;\n        prev = prev.next;\n        count++;\n    }\n    return dummy.next;\n};\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(1)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1595912585","body":"### 思路\n确定如何正确的定位中间节点： 快慢指针是一种办法，如果快指针一次走两步、慢指针一次走一步，\n那快指针指向链表末尾时，慢指针正好在中间.\n### 代码\n\n\n```js\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nfunction sortedListToBST (head) {\n    if(!head) return head;\n    let slow = fast = head;\n    let slowPrev = null;\n    while(fast && fast.next) {\n        slowPrev = slow;\n        slow = slow.next;\n        fast = fast.next.next;\n    }\n\n    let root = new TreeNode(slow.val);\n    if(slowPrev) {\n        slowPrev.next = null;\n        root.left = sortedListToBST(head);\n    }\n    root.right = sortedListToBST(slow.next);\n    return root;\n};\n```\n\n**复杂度分析**\n- 时间复杂度：O(logN)，其中 N 为数组长度。\n- 空间复杂度：O(NlogN)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1596318916","body":"### 思路\n首先根据链表的长度，确定两个链表需要进行比较的起点位置。之后各个节点依次比较\n### 代码\n\n\n```js\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} headA\n * @param {ListNode} headB\n * @return {ListNode}\n */\nvar getIntersectionNode = function(headA, headB) {\n    let lenA = getLen(headA);\n    let lenB = getLen(headB);\n\n    if(lenA < lenB) {\n        [headA, headB] = [headB, headA];\n        [lenB, lenA] = [lenA, lenB];\n    }\n\n    let dis = lenA - lenB;\n    let currA = headA;\n    let currB = headB;\n    while(dis--) {\n        currA = currA.next;\n    }\n\n    while(currA && currB) {\n        if(currB === currA) {\n            return currB;\n        }\n        currA = currA.next;\n        currB = currB.next;\n    }\n    return null;\n};\n\nfunction getLen(head) {\n    let count = 0;\n    let curr = head;\n    while(curr) {\n        curr = curr.next;\n        count++;\n    }\n    return count;\n}\n```\n\n**复杂度分析**\n- 时间复杂度：O(logN)，其中 N 为数组长度。\n- 空间复杂度：O(1)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1597890387","body":"### 思路\n使用一个Map来记录已经遍历过的节点，如果在遍历过程中，又遇到了之前遍历的节点，那就认为该节点为环形链表的头节点。\n### 代码\n\n\n```js\nvar detectCycle = function(head) {\n    let map = new WeakMap();\n    let curr = head;\n    while(curr) {\n        if(!map.has(curr)) {\n            map.set(curr, 1);\n        } else {\n            return curr;\n        }\n        curr = curr.next;\n    }\n    return null;\n};\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(N)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/13#issuecomment-1599757758","body":"### 思路\n直接利用Map中键的特性完成。\n### 代码\n\n\n```js\n/**\n * @param {number} capacity\n */\nvar LRUCache = function(capacity) {\n    this.size = capacity;\n    this.map = new Map();\n};\n\n/** \n * @param {number} key\n * @return {number}\n */\nLRUCache.prototype.get = function(key) {\n    if(this.map.has(key)) {\n        let res = this.map.get(key);\n        this.map.delete(key);\n        this.put(key, res);\n        return res;\n    }\n    return -1;\n};\n\n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nLRUCache.prototype.put = function(key, value) {\n    if(this.map.has(key)) {\n        this.map.delete(key);\n    } else if(this.map.size === this.size) {\n        let keys = [...this.map.keys()];\n        this.map.delete(keys[0])\n    }\n    this.map.set(key, value);\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * var obj = new LRUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(N)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"catkathy":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585533545","body":"### 思路\r\n将整数数组 num 转换为一个整数，然后将整数 k 加到这个整数上，再将得到的和转换回整数数组\r\n\r\n### Python Code\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n\r\n        n = 0\r\n        for i in num:\r\n            n = n * 10 + i\r\n        \r\n        n = n + k\r\n        num = []\r\n\r\n        while n != 0:\r\n            num.append(n % 10)\r\n            n //= 10\r\n            \r\n        return num[::-1]\r\n```\r\n\r\n### 复杂度分析\r\n- Time: O(N)\r\n- Space: O(1)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586053981","body":"#### 思路 \r\niterating through the string s while calculating the occurrence of character C.\r\n\r\n#### Code\r\n```python\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n\r\n        n = len(s)\r\n        ans = [0] * n\r\n        j = float('-inf')\r\n        \r\n        for i, ch in enumerate(s):\r\n            if ch == c:\r\n                j = i\r\n            ans[i] = i - j\r\n        \r\n        j = float('inf')\r\n        \r\n        for i in range(n - 1, -1, -1):\r\n            if s[i] == c:\r\n                j = i\r\n            ans[i] = min(ans[i], j - i)\r\n        \r\n        return ans\r\n```\r\n\r\n#### Time & Space Complexity\r\n- Time complexity: O(n)\r\n- Space complexity: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1586789924","body":"#### Code\r\n``` Python\r\nclass CustomStack:\r\n\r\n    def __init__(self, maxSize: int):\r\n        self.maxSize = maxSize\r\n        self.stack = []\r\n        self.increment = []\r\n\r\n    def push(self, x: int) -> None:\r\n        if len(self.stack) < self.maxSize:\r\n            self.stack.append(x)\r\n            self.increment.append(0)\r\n\r\n    def pop(self) -> int:\r\n        if not self.stack:\r\n            return -1\r\n\r\n        index = len(self.stack) - 1\r\n        val = self.stack.pop() + self.increment[index]\r\n\r\n        if index > 0:\r\n            self.increment[index - 1] += self.increment[index]\r\n        self.increment[index] = 0\r\n\r\n        return val\r\n\r\n    def increment(self, k: int, val: int) -> None:\r\n        index = min(k, len(self.stack)) - 1\r\n        if index >= 0:\r\n            self.increment[index] += val\r\n```\r\n\r\n#### Time & Space Complexities\r\n- Time: O(1)\r\n- Space: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1588767540","body":"#### 思路\r\n栈，遍历\r\n\r\n#### Code\r\n``` python\r\nclass Solution:\r\n    def decodeString(self, s: str) -> str:\r\n        stack = []\r\n\r\n        for i in range(len(s)):\r\n            if s[i] != \"]\":\r\n                stack.append(s[i])\r\n            else:\r\n                sub_str = \"\"\r\n                while stack[-1] != \"[\":\r\n                    sub_str = stack.pop() + sub_str\r\n                stack.pop()\r\n\r\n                multiplier = \"\" \r\n                while stack and stack[-1].isdigit():\r\n                    multiplier = stack.pop() + multiplier\r\n                    \r\n                stack.append(int(multiplier) * sub_str)\r\n\r\n        return \"\".join(stack)\r\n```\r\n\r\n\r\n#### 复杂度分析:\r\n- Time: O(n)\r\n- Space: O(m)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1590607404","body":"#### 思路\r\n用两个栈实现一个队列\r\n\r\n#### Code\r\n```python\r\nclass MyQueue:\r\n\r\n    def __init__(self):\r\n        self.s1 = []\r\n        self.s2 = []\r\n\r\n    def push(self, x: int) -> None:\r\n        self.s1.append(x)\r\n        \r\n\r\n    def pop(self) -> int:\r\n        self.peek()\r\n        return self.s2.pop()\r\n        \r\n    def peek(self) -> int:\r\n        if not self.s2:\r\n            while self.s1:\r\n                self.s2.append(self.s1.pop())\r\n        return self.s2[-1]\r\n        \r\n\r\n    def empty(self) -> bool:\r\n        return not self.s1 and not self.s2\r\n        \r\n\r\n\r\n# Your MyQueue object will be instantiated and called as such:\r\n# obj = MyQueue()\r\n# obj.push(x)\r\n# param_2 = obj.pop()\r\n# param_3 = obj.peek()\r\n# param_4 = obj.empty()\r\n```\r\n\r\n#### 复杂度分析\r\n- Time: O(n) when pop and peek, O(1) for others\r\n- Space: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1592675842","body":"#### Code\r\n```python\r\nclass Solution:\r\n    def maxChunksToSorted(self, arr: List[int]) -> int:\r\n        stack = []\r\n        for value in arr:\r\n            if not stack or value >= stack[-1]:\r\n                stack.append(value)\r\n            else:\r\n                max_value = stack.pop()\r\n                while stack and stack[-1] > value:\r\n                    stack.pop()\r\n                stack.append(max_value)\r\n        return len(stack)\r\n```\r\n\r\n#### 复杂度分析：\r\n- Time: O（n)\r\n- Space: O(n)\r\n- Space:","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594302502","body":"#### Code\r\n```python\r\n# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, val=0, next=None):\r\n#         self.val = val\r\n#         self.next = next\r\nclass Solution:\r\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\r\n\r\n        if head is None or head.next is None:\r\n            return head\r\n    \r\n\r\n        num_nodes = 0\r\n        node = head\r\n        while node is not None:\r\n            num_nodes += 1\r\n            node = node.next\r\n        \r\n        # Step 2: Calculate effective rotation\r\n        k = k % num_nodes\r\n        \r\n        # Step 3: Check if rotation is unnecessary\r\n        if k == 0:\r\n            return head\r\n        \r\n        # Step 4: Find the (k+1)-th node from the end\r\n        fast = head\r\n        slow = head\r\n        for _ in range(k):\r\n            fast = fast.next\r\n        \r\n        while fast.next is not None:\r\n            fast = fast.next\r\n            slow = slow.next\r\n        \r\n        dummy = slow.next\r\n        slow.next = None\r\n        fast.next = head\r\n        \r\n        return dummy\r\n\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595666191","body":"#### Code\r\n```python\r\nclass Solution:\r\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\r\n        dummy = ListNode(0)\r\n        dummy.next = head\r\n        prev = dummy\r\n    \r\n        while prev.next is not None and prev.next.next is not None:\r\n            temp = head.next.next\r\n            prev.next = head.next\r\n            head.next.next = head\r\n            head.next = temp\r\n            prev = head\r\n            head = head.next\r\n    \r\n        return dummy.next\r\n```\r\n\r\n####  复杂度分析\r\n- Time: O(n)\r\n- Space: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1596014046","body":"#### 思路\r\n快慢指针\r\n\r\n#### Code\r\n```python\r\nclass Solution:\r\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\r\n        if not head or not head.next:\r\n            return TreeNode(head.val) if head else None\r\n        \r\n        dummy = ListNode(0)\r\n        dummy.next = head\r\n        slow, fast, prev = head, head, dummy\r\n\r\n        while fast and fast.next:\r\n            prev = slow\r\n            slow = slow.next\r\n            fast = fast.next.next\r\n            \r\n        new_head = slow.next\r\n        prev.next = None  \r\n        \r\n        root = TreeNode(slow.val)\r\n        root.left = self.sortedListToBST(head)\r\n        root.right = self.sortedListToBST(new_head)\r\n\r\n        return root\r\n```\r\n\r\n#### 复杂度分析：\r\n- Time: O(n)\r\n- Space: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1596510084","body":"#### 思路\r\n双指针\r\n\r\n#### Code\r\n```python\r\nclass Solution:\r\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\r\n        p1, p2 = headA, headB\r\n        while p1 != p2:\r\n            if p1 is None:\r\n                p1 = headB\r\n            else:\r\n                p1 = p1.next\r\n            if p2 is None:\r\n                p2 = headA\r\n            else:\r\n                p2 = p2.next\r\n        return p2 # or p1\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1598200323","body":"#### 思路\r\n快慢指针\r\n\r\n#### Code\r\n```python\r\nclass Solution:\r\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\r\n        slow, fast = head, head\r\n        \r\n        # find the meeting point\r\n        while fast and fast.next:\r\n            slow = slow.next\r\n            fast = fast.next.next\r\n            # if found, break the loop\r\n            if slow == fast:\r\n                break\r\n            # if not, return null\r\n        else:\r\n            return None\r\n\r\n\r\n        # Find the node where the cycle begins\r\n        # Move the slow pointer to the head of the linked list\r\n        slow = head\r\n        \r\n        while slow != fast:\r\n            slow = slow.next\r\n            fast = fast.next\r\n        return fast # or return slow (starting point)\r\n\r\n        # Move both pointers at the same pace until they meet again\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yqycs":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585533896","body":"### 思路：\n    将K逐位分解，加入到A中。具体实现方式是将 K 从末位开始依次加到 A 中对应位置上，若相加后的结果大于等于 10，则将进位部分加到下一位上；若 K 加完后仍有进位，则在 A 的最前面插入一个 0。\n\n### 代码：\n```\nclass Solution:\n  def addToArrayForm(self, A: List[int], K: int) -> List[int]:\n        i = len(A) - 1\n        while K:\n            A[i] += K\n            K, A[i] = A[i] // 10, A[i] % 10\n            i -= 1\n            if i < 0 and K:\n                A.insert(0,0)\n                i = 0\n        return A\n```\n\n### 复杂度：\n     时间复杂度为 O(n)，其中 n 为数组 A 的长度。因为需要遍历整个数组 A，所以时间复杂度与数组 A 的长度成正比。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586017357","body":"### 功能\n    实现了一个函数，输入一个字符串s和一个字符c，输出一个列表，列表中的每个元素表示s中对应位置到字符c的最短距离。\n### 算法思路\n    遍历字符串s中的每个字符，如果该字符就是c，则距离为0，否则向左向右分别查找最近的一个字符c，并计算距离。最后取左右距离中的较小值作为该位置到字符c的最短距离。\n### 时间复杂度\n    因为对于每个字符，都需要向左向右查找最近的字符c，最坏情况下需要遍历整个字符串两遍，所以时间复杂度为O(n)。\n```\nclass Solution(object):\n    def shortestToChar(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        for i in range(len(s)):\n            if (i == 0 or i == len(s)-1) and s[i] == c:\n                res.append(0)\n            else:\n                j, k = i, i\n                m, n = 0, 0\n                while(s[j] != c):\n                    j += 1\n                    m += 1\n                    if j > len(s)-1:\n                        m = float(\"inf\")\n                        break\n                while(s[k] != c): \n                    k -= 1\n                    n += 1\n                    if k < 0:\n                        n = float(\"inf\")\n                        break\n                res.append(min(m,n))\n        return res\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1586690631","body":"### 代码\n```\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.size = 0\n        self.maxSize = maxSize\n        self.CustomStack = []\n\n    def push(self, x: int) -> None:\n        if self.size < self.maxSize:\n            self.CustomStack.append(x)\n            self.size += 1\n\n    def pop(self) -> int:\n        if self.size == 0:\n            return -1\n        res = self.CustomStack[-1]\n        del self.CustomStack[-1]\n        self.size -= 1\n        return res\n       \n    def increment(self, k: int, val: int) -> None:\n        for i in range(min(k, self.size)):\n            self.CustomStack[i] += val\n```\n### 复杂度\n    push()方法的时间复杂度为 $O(1)，需在列表末尾添加一个元素。\n    pop()方法的时间复杂度为 $O(1)，需删除列表末尾的一个元素。\n    increment()方法的时间复杂度为 O(k)，需遍历栈顶的前k个元素进行加法操作。\n    空间复杂度为 O(maxSize)，需使用一个列表来存储栈的元素。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1588614568","body":"### 思路\n⽤栈处理，遇到 \"[\"，就要开始重复字符串了，另外重复的数字是可能存在多位的，\n所以需要往前找到不为数字的那⼀位，把数字转换出来。\n最后⽤把 stack ⾥⾯的字符串都串联起来即可\n```\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        def dfs(s, i):\n            res, multi = \"\", 0\n            while i < len(s):\n                if '0' <= s[i] <= '9':\n                    multi = multi * 10 + int(s[i])\n                elif s[i] == '[':\n                    i, tmp = dfs(s, i + 1)\n                    res += multi * tmp\n                    multi = 0\n                elif s[i] == ']':\n                    return i, res\n                else:\n                    res += s[i]\n                i += 1\n            return res\n        return dfs(s,0)\n```\n### 复杂度\n时间复杂度:  O(n)\n空间复杂度：O(n)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1590381808","body":"### 代码\n```\nclass MyQueue:\n    def __init__(self):\n        self.s1 = []\n        self.s2 = []\n        self.front = None\n\n    def push(self, x: int) -> None:\n        if not self.s1: self.front = x\n        self.s1.append(x)\n\n    def pop(self) -> int:\n        if not self.s2:\n            while self.s1:\n                self.s2.append(self.s1.pop())\n            self.front = None\n        return self.s2.pop()\n\n    def peek(self) -> int:\n        if self.s2: \n            return self.s2[-1]\n        return self.front\n\n    def empty(self) -> bool:\n        if not self.s1 and not self.s2:\n            return True\n        return False\n```\n\n### 复杂度\n时间复杂度：\n- 入队操作的时间复杂度为O(1)\n- 出队操作的时间复杂度最坏情况下为O(n)，因为需要将s1中的所有元素都弹出并压入s2中，但平均时间复杂度为O(1)\n- 查看队首元素的时间复杂度为O(1)\n- 判断队列是否为空的时间复杂度为O(1)\n\n空间复杂度：\n- 需要使用两个栈s1和s2来实现队列，因此空间复杂度为O(n)，其中n为队列中元素的个数。","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhuxinyu-znb":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585540099","body":"## 思路：\n将k和num全都转化为num数组，倒叙排列后逐位相加，因为如果直接都转为数字相加的话，有可能会溢出。\n逐位相加后如果超过9了说明需要进位，将进位符置1，如不满则为0，将保留各位后的数字push进结果数组。\n依次相加后直到某个长度更短的数组全部遍历完后结束相加过程。\n再将两数组剩余的部分进行遍历填充，这里要注意的是记得将之前的进位符进行处理，防止遗漏。\n都遍历完之后再处理一遍进位符\n最后将数组倒序回来就可以得到最终的结果\n## 代码：\n```javascript\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n    let k_num = String(k).split('').map((num) => Number(num)).reverse()\n    num = num.reverse()\n    let temp = 0;\n    const k_len = k_num.length;\n    const num_len = num.length;\n    let i = 0;\n    let res_num = []\n    while(i < k_len && i< num_len) {\n        let res = k_num[i] + num[i] + temp\n        if (res > 9) {\n            temp = 1\n            res = res - 10\n        } else {\n            temp = 0\n        }\n        res_num.push(res)\n        i++\n    }\n    while(i < k_len) {\n        let res = k_num[i] + temp\n        if (res > 9) {\n            temp = 1\n            res = res - 10\n        } else {\n            temp = 0\n        }\n        res_num.push(res)\n        i++\n    }\n    while(i < num_len) {\n        let res = num[i] + temp\n        if (res > 9) {\n            temp = 1\n            res = res - 10\n        } else {\n            temp = 0\n        }\n        res_num.push(res)\n        i++\n    }\n    if (temp > 0) {\n        res_num.push(temp)\n    }\n    return res_num.reverse()\n};\n```\n## 复杂度：\n时间复杂度为O(n)\n空间复杂度为O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586063941","body":"## 思路\n左到右遍历一遍记录位置的同时记录一遍到c的距离\n再从右到左遍历比较取最小值\n## 代码\n```javascript\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function(s, c) {\n    let n = s.length\n    const res = new Array(n).fill(0)\n    for(let i = 0, x = -n; i < n; ++i) {\n        if (s[i] === c) {\n            x = i\n        }\n        res[i] = i - x\n    }\n    for(let j = n - 1, y = 2 * n; j >= 0; --j) {\n        if (s[j] === c) {\n            y = j\n        }\n        res[j] = Math.min(res[j], y - j)\n    }\n    return res\n};\n```\n\n## 复杂度\nO(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587604009","body":"```javascript\nfunction ListNode(val){\n    this.val=val;\n    this.next=null;\n}\nvar CustomStack = function(maxSize) {\n    this.maxSize=maxSize;\n    //链表头指向栈顶；\n    this.head=null;\n    this.length=0;\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if(this.length===this.maxSize) return;\n    let node=new ListNode(x);\n    let linkList=this.head;\n    node.next=linkList;\n    this.head=node;\n    this.length++;\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    if(this.length===0) return -1;\n    let linkList=this.head.next;\n    let popVal=this.head.val;\n    this.head=linkList;\n    this.length--;\n    return popVal;\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    if(k<0) return;\n    let start=this.length-k;\n    let currentNode=this.head;\n    if(start>0){\n        for(let i=0;i<start;++i){\n            currentNode=currentNode.next;\n        }\n    }\n    while(currentNode){\n        currentNode.val+=val;\n        currentNode=currentNode.next;\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589330713","body":"## 思路\n利用栈来操作\n\n## 代码\n```javascript\n// 用两个栈来存放当前状态，前者是重复次数，后者是累积字符串\n    let repetStack=[],resStack=[];\n    //拼接字符串\n    let resStr = \"\";\n    //表示重复次数\n    let repet = 0;\n    // 遍历s\n    for(let i=0;i<s.length;i++){\n        let cur = s.charAt(i);\n        if(cur == '['){\n            //双双压入栈中,保存当前状态\n            repetStack.push(repet);\n            resStack.push(resStr);\n            //置空，准备下面的累积\n            repet = 0;\n            resStr = \"\";\n        }else if(cur == ']'){\n            // 取出当前重复次数栈中的值，也就是当前字符串的重复次数\n            let count = repetStack.pop();\n            // 根据重复次数生成重复字符串，赋值给temp，和resStr拼接\n            let temp = \"\";\n            for(let i = 0;i<count;i++){\n                temp += resStr;\n            }\n            // 和前面已经求得的字符串进行拼接\n            resStr = resStack.pop() + temp;\n        }else if(cur>='0' && cur<='9'){\n            // repet累积\n            repet = repet*10 + (cur-'0');\n        }else{\n            //字符累积\n            resStr += cur;\n        }\n    }\n    return resStr;\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"freesan44":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585574093","body":"## 思想:\n通过小数组大数组分别pop来实现\n\n## 代码:\n```\nclass Solution989 {\n    func addToArrayForm(_ num: [Int], _ k: Int) -> [Int] {\n//        var newK = Array<Int>()\n//        var vk = k\n//        var vNum: [Int] = num\n//        var newRet = Array<Int>()\n//\n//        while vk>0 {\n//            newK.insert(vk%10, at: 0)\n//            vk = vk/10\n//        }\n//        var temp = 0\n//        while vNum.count>0 || newK.count>0 || temp != 0{\n//            var left = 0\n//            var right = 0\n//            if vNum.count>0{\n//                left = vNum.removeLast()\n//            }\n//            if newK.count>0{\n//                right = newK.removeLast()\n//            }\n//            print(right,left)\n//            var ret = left + right + temp\n//            temp = 0\n//            if ret>9{\n//                temp = ret/10\n//                ret = ret%10\n//            }\n//            newRet.insert(ret, at: 0)\n////            print(newRet)\n//        }\n//        return newRet\n        var res = [Int]()\n        var n = num.count\n        var vk = k\n\n        for i in stride(from: n - 1, through: 0, by: -1) {\n            if i >= 0 {\n                vk += num[i]\n            }\n            res.append(vk % 10)\n            vk /= 10\n        }\n\n        while vk > 0 {\n            res.append(vk % 10)\n            vk /= 10\n        }\n\n        return res.reversed()\n    }\n    \n    func test() {\n//        var num = [2,7,4]\n//        var k = 983\n        var num = [1,2,0,0]\n        var k = 34\n        let ret = addToArrayForm(num,k);\n        print(ret);\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586140164","body":"## 代码\n```\nclass Solution821 {\n    func shortestToChar(_ S: String, _ C: Character) -> [Int] {\n        var result = [Int]()\n        for (i, char) in S.enumerated() {\n            if char == C {\n                result.append(0)\n            } else {\n                var left = i\n                var right = i\n                while left >= 0 || right < S.count {\n                    if left >= 0 && S[S.index(S.startIndex, offsetBy: left)] == C {\n                        result.append(i - left)\n                        break\n                    }\n                    if right < S.count && S[S.index(S.startIndex, offsetBy: right)] == C {\n                        result.append(right - i)\n                        break\n                    }\n                    left -= 1\n                    right += 1\n                }\n            }\n        }\n        return result\n    }\n    func test() {\n        var s = \"loveleetcode\"\n        var c: Character = \"e\"\n        let ret = shortestToChar(s,c);\n        print(ret);\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1586719677","body":"## 思路\n## 代码\n```\nclass CustomStack {\n    \n    var maxLen: Int\n    var tempArr: [Int]\n    \n    init(_ maxSize: Int) {\n        maxLen = maxSize\n        tempArr = Array<Int>()\n    }\n    \n    func push(_ x: Int) {\n        if tempArr.count <= maxLen-1{\n            tempArr.append(x)\n        }\n    }\n    \n    func pop() -> Int {\n        if tempArr.count == 0{\n            return -1\n        }\n        else{\n            return tempArr.removeLast() \n        }\n    }\n    \n    func increment(_ k: Int, _ val: Int) {\n        if tempArr.count <= k{\n            self.tempArr = self.tempArr.map{$0 + val}\n        }\n        else\n        {\n            for i in self.tempArr.indices.prefix(k){\n                self.tempArr[i] += val\n            }\n        }\n    }\n}\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * let obj = CustomStack(maxSize)\n * obj.push(x)\n * let ret_2: Int = obj.pop()\n * obj.increment(k, val)\n */\n```","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1592158199","body":"## 思路\n计数排序\n\n## 代码\n```\nclass Solution768 {\n    func maxChunksToSorted(_ arr: [Int]) -> Int {\n        // 定义一个变量 ans，用于记录最终的答案\n        var ans = 0\n        var countA = [Int: Int]()\n        var countB = [Int: Int]()\n        \n        // 遍历 arr 和 arr.sorted()，将它们的每个元素合并成一个元组 (a, b)\n        for (a, b) in zip(arr, arr.sorted()) {\n            // 在 countA 中增加 a 出现的次数\n            countA[a, default: 0] += 1\n            // 在 countB 中增加 b 出现的次数\n            countB[b, default: 0] += 1\n            // 如果 countA 和 countB 相等，那么说明 arr 的前 i 个元素可以分成一个 chunk，并将 ans 加 1\n            print(countA,countB)\n            if countA == countB {\n                ans += 1\n            }\n        }\n\n        // 返回最终的答案\n        return ans\n    }\n    func test() {\n//        var arr = [5,4,3,2,1]\n        var arr = [2,1,3,4,4]\n        let ret = maxChunksToSorted(arr);\n        print(ret);\n    }\n    \n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1593849424","body":"## 思路\n快慢指针\n\n## 代码\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func rotateRight(_ head: ListNode?, _ k: Int) -> ListNode? {\n        guard let head = head else { return nil }\n        var p1: ListNode? = head\n        var p2: ListNode? = head\n        var count = 1\n        var i = 0\n        var k = k\n\n        while i < k {\n            if let next = p2?.next {\n                count += 1\n                p2 = next\n            } else {\n                k = k % count\n                i = -1\n                p2 = head\n            }\n            i += 1\n        }\n\n        while p2?.next != nil {\n            p1 = p1?.next\n            p2 = p2?.next\n        }\n\n        if let next = p1?.next {\n            let tmp = next\n            p1?.next = nil\n            p2?.next = head\n            return tmp\n        } else {\n            return head\n        }\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595660020","body":"```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func swapPairs(_ head: ListNode?) -> ListNode? {\n        guard let head = head, let next = head.next else {\n        return head\n    }\n\n    let dummy = ListNode(-1, head)\n    var prev: ListNode? = dummy\n    var cur: ListNode? = prev?.next\n\n    while cur != nil && cur?.next != nil {\n        let nextNode = cur?.next\n        cur?.next = nextNode?.next\n        nextNode?.next = cur\n        prev?.next = nextNode\n\n        prev = cur\n        cur = cur?.next\n    }\n\n    return dummy.next\n    }\n}\n```","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1596310347","body":"## 思路\n双指针\n## 代码\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\n\nclass Solution {\n    func getIntersectionNode(_ headA: ListNode?, _ headB: ListNode?) -> ListNode? {\n         var a = headA\n    var b = headB\n    \n    while a !== b {\n        a = a != nil ? a!.next : headB\n        b = b != nil ? b!.next : headA\n    }\n    \n    return a\n    }\n}\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mo660":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585663967","body":"## 思路\n将数组反向与数字余数相加，记录进位。处理完数组后，k与进位相加，再遍历k值，求%10以及/10，最后res数组反序\n## 代码\n```c++\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int>res;\n        int carryNum = 0;\n        for(int i = num.size() - 1; i >= 0; i--)\n        {\n            int tmpSum = num[i] + carryNum;\n            if (k)\n                tmpSum += (k%10);\n            res.push_back(tmpSum%10);\n            carryNum = tmpSum/10;\n            if (k)\n                k = k/10;\n        }\n        k += carryNum;\n        while (k)\n        {\n            res.push_back(k % 10);\n            k = k/10;\n        }\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};\n```\n## 复杂度\n 时间 O(N)  \n 空间 O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1585979534","body":"## 思路\n1. 记录每一c在s中的位置\n2. 遍历s，计算出每一个字符与c位置的最小值\n## 代码\n```c++\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        vector<int> coordinate;\n        for(int i = 0; i < s.length(); i++)\n        {\n            if (s[i] == c)\n            {\n                coordinate.push_back(i);\n            }\n        }\n        vector<int> res;\n        for(int i = 0; i < s.length(); i++)\n        {\n            int tmp = INT32_MAX;\n            for(auto it : coordinate)\n            {\n                tmp = min(tmp, abs(i-it));\n            }\n            res.push_back(tmp);\n        }\n        return res;\n    }\n};\n```\n## 复杂度\n 时间O(n+k) \n \n空间O(k)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587410520","body":"## 思路\r\n使用辅助数组存储add值，**负数与容器的size比较会为false**\r\n## 代码\r\n```c++\r\nclass CustomStack {\r\npublic:\r\n    CustomStack(int maxSize) {\r\n        stk.resize(maxSize);\r\n        add.resize(maxSize);\r\n        top = -1;\r\n    }\r\n    \r\n    void push(int x) {\r\n        if (top < stk.size()-1)\r\n        {\r\n            top++;\r\n            stk[top] = x;\r\n        }else\r\n        {\r\n            cout<<\"sdasda\"<<endl;\r\n        }\r\n    }\r\n    \r\n    int pop() {\r\n        if (top == -1)\r\n            return -1;\r\n        int ret = add[top] + stk[top];\r\n        if (top != 0)\r\n        {\r\n            add[top-1] += add[top];\r\n        }\r\n        add[top] = 0;\r\n        top--;\r\n        return ret;\r\n    }\r\n    \r\n    void increment(int k, int val) {\r\n        int minNum = min(k-1, top);\r\n        if (minNum >= 0)\r\n            add[minNum] += val;\r\n    }\r\nprivate:\r\n    vector<int> add;\r\n    vector<int> stk;\r\n    int top;\r\n};\r\n```\r\n## 复杂度\r\n时间复杂度：O(1)\r\n空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589379829","body":"## 思路\n使用两个栈，一个存入string一个存入num。【】符号不需要存入栈，当遇到‘】’时，直接对string扩充倍数再拼接到string栈的top上，之后再pop两个栈\n## 代码\n```c++\nclass Solution {\npublic:\n    string decodeString(string s) {\n        stack<string>stks;\n        stack<int>stkn;\n        string res = \"\";\n        int num = 0;\n        for(int i = 0; i < s.length(); i++)\n        {\n            if (s[i] >= '0' && s[i] <= '9')\n            {\n                num = num*10 + (s[i] - '0');\n            }\n            else if ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z'))\n            {\n                res += s[i];\n            }\n            else if (s[i] == '[')\n            {\n                stkn.push(num);\n                stks.push(res);\n                res = \"\";\n                num = 0;\n            }\n            else\n            {\n                int times = stkn.top();\n                string tmp = stks.top();\n                for (int i = 0; i < times; i++)\n                {\n                    tmp += res;\n                }\n                res = tmp;\n                stkn.pop();\n                stks.pop();\n            }\n        }\n        return res;\n    }\n};\n```\n## 复杂度\n* 时间复杂度：O(N)\n* 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1591242980","body":"## 思路\r\n双栈操作，在pop或者peek的时候出栈stk1，入栈stk2.\r\n## 代码\r\n```c++\r\nclass MyQueue {\r\npublic:\r\n    MyQueue() {\r\n\r\n    }\r\n    \r\n    void push(int x) {\r\n        stk1.push(x);\r\n    }\r\n    \r\n    int pop() {\r\n        if (stk2.empty())\r\n        {\r\n            while (!stk1.empty())\r\n            {\r\n                int tmp = stk1.top();\r\n                stk2.push(tmp);\r\n                stk1.pop();\r\n            }\r\n        }\r\n        int res = stk2.top();\r\n        stk2.pop();\r\n        return res;\r\n    }\r\n    \r\n    int peek() {\r\n        if (stk2.empty())\r\n        {\r\n            while (!stk1.empty())\r\n            {\r\n                int tmp = stk1.top();\r\n                stk2.push(tmp);\r\n                stk1.pop();\r\n            }\r\n        }\r\n        int res = stk2.top();\r\n        return res;\r\n    }\r\n    \r\n    bool empty() {\r\n        return stk1.empty() && stk2.empty();\r\n    }\r\nprivate:\r\n    stack<int>stk1;\r\n    stack<int>stk2;\r\n};\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1593101232","body":"## 思路\r\n将数组排序后，遍历数组。使用哈希表计数\r\n## 代码\r\n```c++\r\nclass Solution {\r\npublic:\r\n    int maxChunksToSorted(vector<int>& arr) {\r\n        vector sortArr = arr;\r\n        sort(sortArr.begin(), sortArr.end());\r\n        map<int, int>count;\r\n        int res;\r\n        for (int i = 0; i < arr.size(); i++)\r\n        {\r\n            int sortLast = arr[i];\r\n            int sortAfter = sortArr[i];\r\n            count[sortAfter]++;\r\n            count[sortLast]--;\r\n            if (count[sortLast] == 0)\r\n                count.erase(sortLast);\r\n            if (count[sortAfter] == 0)\r\n                count.erase(sortAfter);\r\n            if (count.empty())\r\n                res++;\r\n        }\r\n        return res;\r\n    }\r\n};\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594325967","body":"## 思路\r\n先遍历链表，求出size，并记录尾指针。找到链表断开的位置n = size - (k % size);断开链表，头部接到尾部后面\r\n## 代码\r\n```c++\r\nclass Solution\r\n{\r\npublic:\r\n    ListNode *rotateRight(ListNode *head, int k)\r\n    {\r\n        if (nullptr == head)\r\n            return nullptr;\r\n        int size = 0;\r\n        ListNode *tail = NULL;\r\n        for (ListNode *next = head; next != NULL; next = next->next)\r\n        {\r\n            size++;\r\n            if (next->next == nullptr)\r\n                tail = next;\r\n        }\r\n        int n = size - (k % size);\r\n        if (n == size)\r\n            return head;\r\n        ListNode *res = head;\r\n        int count = 1;\r\n        while (count != n)\r\n        {\r\n            res = res->next;\r\n            count++;\r\n        }\r\n        ListNode *tmp = res;\r\n        res = res->next;\r\n        tmp->next = nullptr;\r\n        tail->next = head;\r\n        return res;\r\n    }\r\n};\r\n```","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1597067503","body":"## 思路\r\n使用快慢指针，遍历出链表的中点，然后使用递归，遍历出每一段的中点\r\n## 代码\r\n```c++\r\nclass Solution {\r\npublic:\r\n    TreeNode* sortedListToBST(ListNode* head) {\r\n        if (nullptr == head) return nullptr;\r\n        ListNode* start = head;\r\n        ListNode* end = nullptr;\r\n        return dfs(start, end);\r\n    }\r\n    TreeNode* dfs(ListNode* start, ListNode* end){\r\n        if (start == end) return nullptr;\r\n        ListNode *low = start;\r\n        ListNode *fast = start;\r\n        while (end != fast && end != fast->next)\r\n        {\r\n            low = low->next;\r\n            fast = fast->next->next;\r\n        }\r\n        TreeNode *node = new TreeNode(low->val);\r\n        node->left = dfs(start, low);\r\n        node->right = dfs(low->next, end);\r\n        return node;\r\n    }\r\n};\r\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1597028728","body":"## 思路\r\n双指针遍历两条链表，当指针到一条链表尾部时，换到另一条链表头部开始遍历，\r\n## 代码\r\n```c++\r\nclass Solution {\r\npublic:\r\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\r\n        if (nullptr == headA || nullptr == headB) return nullptr;\r\n        ListNode *pA = headA;\r\n        ListNode *pB = headB;\r\n        while (pA != pB)\r\n        {\r\n            pA = pA->next;\r\n            pB = pB->next;\r\n            if (nullptr == pA && nullptr == pB)\r\n                return nullptr;\r\n            if (nullptr == pA)\r\n                pA = headB;\r\n            if (nullptr == pB)\r\n                pB = headA;\r\n        }\r\n        return pA;\r\n    }\r\n};\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1598887802","body":"``` c＋＋\r\n/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode *detectCycle(ListNode *head) {\r\n        ListNode *slowPtr = head;\r\n        ListNode *fastPtr = head;\r\n        while(1){\r\n            if (nullptr == fastPtr || nullptr == fastPtr->next) return nullptr;\r\n            slowPtr = slowPtr->next;\r\n            fastPtr = fastPtr->next->next;\r\n            if (slowPtr == fastPtr) break;\r\n        }\r\n        fastPtr = head;\r\n        while(fastPtr != slowPtr){\r\n            slowPtr = slowPtr->next;\r\n            fastPtr = fastPtr->next;\r\n        }\r\n        return fastPtr;\r\n    }\r\n};\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sencc":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585681518","body":"思路\n将数字列表 num 转换为数字字符串，再将数字与k相加，最后返回一个列表\n\n代码\nclass Solution(object):\n    def addToArrayForm(self, num, k):\n        \"\"\"\n        :type num: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        list_str = \"\".join(str(x) for x in num)\n        number = int(list_str)+k\n        return [int(x) for x in str(number)]\n\n复杂度\n空间复杂度O(n)\n时间复杂度O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586217778","body":"代码\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        e_indexes = []\n        res = []\n\n        for i in range(len(s)):\n            if s[i] == c:\n                e_indexes.append(i)\n        \n        for i in range(len(s)):\n            index = min([abs(i-e) for e in e_indexes])\n            res.append(index)\n        return res","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587568343","body":"思路:使用一个列表来存储栈中的元素\n\n代码:\nclass CustomStack:\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.stack = []\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.maxSize:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if not self.stack:\n            return -1\n        else:\n            return self.stack.pop()\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(min(k, len(self.stack))):\n            self.stack[i] += val\n\n空间复杂度：O(1)\n时间复杂度：O(maxSize)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589564762","body":"思路：使用栈的思路\n\n代码：\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack = []\n        multiplier = 0\n        current_str = ''\n\n        for c in s:\n            if c.isdigit():\n                multiplier = multiplier * 10 + int(c)\n            elif c.isalpha():\n                current_str += c\n            elif c == '[':\n                stack.append((multiplier, current_str))\n                multiplier = 0\n                current_str = ''\n            elif c == ']':\n                prev_multiplier, prev_str = stack.pop()\n                current_str = prev_str + prev_multiplier * current_str\n\n        return current_str\n\n时间复杂度为 O(n)，n 是字符串的长度\n\n空间复杂度为O(m)，m是栈的最大深度","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1591466850","body":"思路：\n  使用两个栈，一个作为输入栈stack1，用于push操作；另一个作为输出栈stack2，用于pop和peek操作\n\n代码：\n\nclass MyQueue:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.stack1 = []  # 输入栈，用于push操作\n        self.stack2 = []  # 输出栈，用于pop和peek操作\n\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x to the back of queue.\n        \"\"\"\n        self.stack1.append(x)\n\n    def pop(self) -> int:\n        \"\"\"\n        Removes the element from in front of queue and returns that element.\n        \"\"\"\n        if not self.stack2:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())\n        return self.stack2.pop()\n\n    def peek(self) -> int:\n        \"\"\"\n        Get the front element.\n        \"\"\"\n        if not self.stack2:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())\n        return self.stack2[-1]\n\n    def empty(self) -> bool:\n        \"\"\"\n        Returns whether the queue is empty.\n        \"\"\"\n        return not self.stack1 and not self.stack2\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1593269577","body":"class Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        count = 0\n        max_val = 0\n        for i, val in enumerate(arr):\n            max_val = max(max_val, val)\n            if i == max_val:\n                count += 1\n                max_val = i + 1\n        return count\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594887182","body":"代码：\n\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        if not head or not head.next:\n            return head\n\n        # 获取链表长度\n        n = 1\n        curr = head\n        while curr.next:\n            curr = curr.next\n            n += 1\n        \n        # 首尾相连形成闭环\n        curr.next = head\n        \n        # 计算实际需要旋转的次数\n        k %= n\n        \n        # 找到新的头、尾指针\n        tail = head\n        for i in range(n - k - 1):\n            tail = tail.next\n        new_head = tail.next\n        \n        # 断开环状链表\n        tail.next = None\n        \n        return new_head\n","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1596185512","body":"代码：\n\nclass Solution:\n\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        if not head:\n            return None\n        nums = []\n        while head:\n            nums.append(head.val)\n            head = head.next\n        \n        def build_bst(left, right):\n            if left > right:\n                return None\n            mid = (left + right) // 2\n            root = TreeNode(nums[mid])\n            root.left = build_bst(left, mid - 1)\n            root.right = build_bst(mid + 1, right)\n            return root\n        \n        return build_bst(0, len(nums) - 1)\n\n时间复杂度O(nlogn)，空间复杂度O(logn)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"randong22":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585692846","body":"## 解题思路\n\n整体思路还是逐位计算，麻烦的点在于使用原地算法完成，时间复杂度为 max(n.length, k的位数)中较大的一个，具体细节写在代码注释中，关键点在于如何不重置k对k进行计算和处理\n\n## 代码\n```typescript\nvar addToArrayForm = function (num: number[], k: number) {\n  let add = false; // 存储当前位数计算结果是否超过 10,需要进位\n  let i = 1; // 存储当前循环到的位数\n  let l = num.length; // 存储 num 的长度,后续用的时候方便点\n  while (10 ** (i - 1) <= k || add) {\n    // 截止条件为 k 遍历完成10 ** (i - 1) <= k 例如当k === 9的时候 10 ** (1 - 1) <= 9 证明还需要一次,10 ** (2 - 1) > 9 就证明遍历完成了,的同时进位也处理完成\n    let ki = ~~((k % 10 ** i) / 10 ** (i - 1)) + (add ? 1 : 0); // 计算当前 k 的值是多少, k % 10 ** i去除超过当前位数的,例如 134 计算第二位 = 134 % 10 ** 2 = 34,  / 10 ** (i - 1) 去除小于当前为的,例如 34 / 10 ** (2 - 1) = 3.4, ~~(3.4) = 3 这样即可获取当前数字第二位为 3这如果不想这么麻烦可以每次重置 k 的值,向下去除一位取整即可, add 为上一次计算是够有进位\n    let numi = num[l - i] ?? 0; // 存储当前 num 的位数上是什么,由于可能有 k 的总长度 > num 的长度的情况,这需要做 undefined 判断\n    let tari = numi + ki; // 计算当前位数的和\n    if (tari >= 10) {\n      // 如果当前位数和超过 10 了,更改 add 状态, 更改当前位置和的值\n      add = true;\n      tari -= 10;\n    } else {\n      add = false;\n    }\n    if (i === l + 1) {\n      // 如果当前位数已经超过 num 了,要像 num 之前 push,否则直接原地更改 num 即可\n      num.unshift(tari);\n      l = num.length;\n    } else {\n      num[l - i] = tari;\n    }\n    i++;\n  }\n  return num;\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586184291","body":"## 解题思路\r\n\r\n先获取到对应的字母位于数组中的所有下标idxs\r\n重新遍历 s，从idxs[0]和idxs[1]开始，用 last 和next存储当前对比的下标， idx 存储当前对比的索引，用当前下标对比，取 i - index[0] 和 i - index[1]的绝对值中较小的一个放入结果中\r\n当i === next的时候， 重置last, next ,idx\r\n\r\n## 代码\r\n```typescript\r\nvar shortestToChar = function (s: string, c: string) {\r\n  let idxs = [];\r\n  let final = [];\r\n  for (let i = 0; i < s.length; i++) {\r\n    if (s[i] === c) {\r\n      idxs.push(i);\r\n    }\r\n  }\r\n  idxs.push(999999999999);\r\n  let last = idxs[0];\r\n  let next = idxs[1];\r\n  let idx = 1;\r\n  for (let i = 0; i < s.length; i++) {\r\n    final.push(Math.min(Math.abs(last - i), next - i));\r\n    if (i === next) {\r\n      idx++;\r\n      last = next;\r\n      next = idxs[idx];\r\n    }\r\n  }\r\n  return final;\r\n};\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1586621378","body":"## 思路\r\n1. pop方法对栈的长度为0时，返回-1；\r\n2. push方法对栈的长度为maxSize时，不进行push；\r\n3. increment方法对序号小于指定值的元素进行操作，循环时筛选；\r\n## 代码\r\n```typescript\r\nclass CustomStack {\r\n  private arr: number[] = [];\r\n  private maxSize: number;\r\n  constructor(maxSize: number) {\r\n    this.maxSize = maxSize;\r\n  }\r\n\r\n  push(x: number): void {\r\n    if (this.arr.length < this.maxSize) {\r\n      thiincreas.arr.push(x);\r\n    }\r\n  }\r\n\r\n  pop(): number {\r\n    if (this.arr.length > 0) {\r\n      return this.arr.pop()!;\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  increment(k: number, val: number): void {\r\n    this.arr.forEach((_val, index) => {\r\n      if (index < k) {\r\n        this.arr[index] = val + _val;\r\n      }\r\n    });\r\n  }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589373166","body":"# 394. decode-string\r\n\r\n## 前置知识\r\n\r\n- 栈\r\n- 括号匹配\r\n\r\n## 思路\r\n\r\n遍历输入字符串，遇到数字则更新当前数字，遇到字母则加入当前字符串，遇到左括号则把当前数字和字符串入栈并重置当前数字和字符串，遇到右括号则出栈并解码字符串。\r\n\r\n## 代码\r\n\r\n```typescript\r\nfunction decodeString(s: string): string {\r\n  const stack: [number, string][] = [];\r\n  let currStr = \"\";\r\n  let currNum = 0;\r\n\r\n  for (let i = 0; i < s.length; i++) {\r\n    const char = s[i];\r\n    if (/\\d/.test(char)) {\r\n      // 如果是数字，更新当前数字\r\n      currNum = currNum * 10 + Number(char);\r\n    } else if (char === \"[\") {\r\n      // 如果是左括号，把当前数字和字符串入栈，重置当前数字和字符串\r\n      stack.push([currNum, currStr]);\r\n      currNum = 0;\r\n      currStr = \"\";\r\n    } else if (char === \"]\") {\r\n      // 如果是右括号，出栈并解码字符串\r\n      const [num, prevStr] = stack.pop()!;\r\n      currStr = prevStr + currStr.repeat(num);\r\n    } else {\r\n      // 如果是字母，加入当前字符串\r\n      currStr += char;\r\n    }\r\n  }\r\n  return currStr;\r\n}\r\n```\r\n\r\n## 复杂度\r\n\r\n时间复杂度：O(n)\r\n空间复杂度：O(n)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1591309880","body":"# 232\r\n\r\n## 前置知识\r\n\r\n栈\r\n\r\n## 思路\r\n\r\nts里通过api实现即可\r\n\r\n## 代码(typescript)\r\n\r\n```typescript\r\nclass MyQueue {\r\n  private arr: any[];\r\n  constructor() {\r\n    this.arr = [];\r\n  }\r\n\r\n  push(x: number): void {\r\n    this.arr.push(x);\r\n  }\r\n\r\n  pop(): number {\r\n    return this.arr.shift();\r\n  }\r\n\r\n  peek(): number {\r\n    return this.arr[0];\r\n  }\r\n\r\n  empty(): boolean {\r\n    return this.arr.length === 0;\r\n  }\r\n}\r\n```\r\n\r\n## 复杂度\r\n\r\n时间复杂度：O(n)\r\n空间复杂度：O(n)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1592404449","body":"# 768\r\n\r\n## 前置知识\r\n\r\n双指针\r\n\r\n## 思路\r\n\r\n从左到右依次遍历，同时满足以下条件即可分块：\r\n\r\n1. 双指针的范围内最大值，不大于下一个值\r\n2. 双指针的范围内最大值，不大于后续范围内的最小值\r\n\r\n## 代码\r\n\r\n```typescript\r\nfunction maxChunksToSorted(arr: number[]): number {\r\n  let count = 1,\r\n    i = 0,\r\n    j = 1,\r\n    max = arr[i];\r\n  while (j < arr.length) {\r\n    const rMin = Math.min(...arr.slice(j));\r\n    if (max > arr[j] || max > rMin) {\r\n      max = Math.max(max, arr[j]);\r\n      j++;\r\n    } else {\r\n      i = j++;\r\n      max = arr[i];\r\n      count++;\r\n    }\r\n  }\r\n  return count;\r\n}\r\n```\r\n\r\n## 复杂度\r\n\r\n时间复杂度：O(n^2)\r\n空间复杂度：O(1)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594603111","body":"# 61\r\n\r\n## 前置知识\r\n\r\n数组，链表\r\n\r\n## 思路\r\n\r\n第一次遍历链表，给出长度，并成环\r\n第二次遍历链表，指定节点断开\r\n\r\n## 代码(Typescript)\r\n\r\n```typescript\r\nfunction rotateRight(head: ListNode | null, k: number): ListNode | null {\r\n  if (head === null) {\r\n    return null;\r\n  }\r\n  let count = 1,\r\n    tail = head;\r\n  while (tail.next !== null) {\r\n    count++;\r\n    tail = tail.next;\r\n  }\r\n  k = k % count;\r\n  if (k === 0) {\r\n    return head;\r\n  }\r\n  let newTail = head;\r\n  for (let i = 0; i < count - k - 1; i++) {\r\n    newTail = newTail.next!;\r\n  }\r\n  const newHead = newTail.next!;\r\n  tail.next = head;\r\n  newTail.next = null;\r\n  return newHead;\r\n}\r\n```\r\n\r\n## 复杂度\r\n\r\n时间复杂度：O(n)\r\n空间复杂度：O(1)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595785751","body":"typescript\r\n```typescript\r\n/**\r\n * Definition for singly-linked list.\r\n * class ListNode {\r\n *     val: number\r\n *     next: ListNode | null\r\n *     constructor(val?: number, next?: ListNode | null) {\r\n *         this.val = (val===undefined ? 0 : val)\r\n *         this.next = (next===undefined ? null : next)\r\n *     }\r\n * }\r\n */\r\n\r\nfunction swapPairs(head: ListNode | null): ListNode | null {\r\n  let node = new ListNode();\r\n  let cur = node;\r\n  node.next = head;\r\n  while (cur?.next?.next) {\r\n    let _node = cur.next;\r\n    let left = _node;\r\n    let right = _node.next;\r\n    left.next = right!.next;\r\n    right!.next = left;\r\n    cur.next = right;\r\n    cur = left;\r\n  }\r\n  return node.next;\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1596187228","body":"```typescript\r\nvar sortedListToBST = function(head) {\r\n    let child = head;\r\n    const arr = [];\r\n    while(child) {\r\n        arr.push(child.val);\r\n        child = child.next;\r\n    }\r\n    function buildTree(arr, left, right) {\r\n        if(left > right) return null;\r\n        if(left === right) return new TreeNode(arr[left]);\r\n        else if (right - left === 1) {\r\n            let r = new TreeNode(arr[right]);\r\n            r.left = new TreeNode(arr[left]);\r\n            return r;\r\n        }\r\n        let mid = (left + right + 1) >> 1;\r\n        let root = new TreeNode(arr[mid])\r\n        root.left = buildTree(arr, left, mid - 1);\r\n        root.right = buildTree(arr, mid + 1, right);\r\n        return root;\r\n    }\r\n    return buildTree(arr, 0, arr.length - 1);\r\n};\r\n\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1597292702","body":"```typescript\r\nfunction getIntersectionNode(headA: ListNode | null, headB: ListNode | null): ListNode | null {\r\n    if (headA === null || headB === null) return null;\r\n\r\n    let pA = headA, pB = headB;\r\n\r\n    while (pA !== pB) {\r\n        pA = pA === null ? headB : pA.next; // 链表A循环结束就循环链表B \r\n        pB = pB === null ? headA : pB.next; // 链表B循环结束就循环链表A \r\n    }\r\n\r\n    return pA; // 当pA == pB时就是交点\r\n};\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1598103701","body":"typescript\r\n```typescript\r\n/**\r\n * Definition for singly-linked list.\r\n * class ListNode {\r\n *     val: number\r\n *     next: ListNode | null\r\n *     constructor(val?: number, next?: ListNode | null) {\r\n *         this.val = (val===undefined ? 0 : val)\r\n *         this.next = (next===undefined ? null : next)\r\n *     }\r\n * }\r\n */\r\n\r\nfunction detectCycle(head: ListNode | null): ListNode | null {\r\n  const retNode = new ListNode();\r\n  retNode.next = head;\r\n  let front = retNode,\r\n    end = retNode;\r\n  while (end && end.next) {\r\n    front = front.next!;\r\n    end = end.next?.next!;\r\n    if (front === end) {\r\n      break;\r\n    }\r\n  }\r\n  if (!end || !end.next) {\r\n    return null;\r\n  }\r\n  front = retNode;\r\n  while (front !== end) {\r\n    front = front.next!;\r\n    end = end.next!;\r\n  }\r\n  return end;\r\n}\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"beginner-jamji":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585694528","body":"思路\n使用逐位相加的思路解决，同时考虑A和K的长度比较\n\n代码\nclass Solution:\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\n        n = len(A)\n        ans = []\n\n        for i in range(n-1, -1, -1):\n            total = A[i] + K % 10\n\n            K //= 10\n            \n            if total >= 10:\n                #当前位相加结果大于 10 时，进位 1 加入下一位计算\n                K += 1\n\n            ans.append(total % 10)\n            \n        # 这里考虑数组 A 的长度小于整数 K 位数个数的情况\n        while K > 0:\n            ans.append(K % 10)\n            K //= 10\n        # 因为添加进来是由低位往高位，输出时进行逆序输出\n        return ans[::-1]\n\n复杂度\n时间复杂度O(n)\n空间复杂度O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586192759","body":"思路\n首先应该获取到该字符在字符串 s 中的所有下标位置，遍历一次字符串，并将等于目标字符的下标添加至动态数组arr中，使用指针比较下标间的最短距离。\n\n代码\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        res, p, arr = [], 0, [i for i in range(len(s)) if s[i] == c]\n        for i, j in enumerate(s):\n            if p < len(arr) - 1 and abs(arr[p] - i) > abs(arr[p + 1] - i):\n                p += 1\n            res.append(abs(arr[p] - i))\n        return res\n\n复杂度\n时间复杂度O(n)\n空间复杂度O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587511888","body":"思路\n创建两个数组stack和nums 添加一个指针p\n\n代码\nclass CustomStack:\n    def __init__(self, maxSize: int):\n        self.stack = [0] * maxSize\n        self.nums = [0] * maxSize\n        self.size = maxSize - 1\n        self.p = -1\n\n    def push(self, x: int):\n        if self.p != self.size:\n            self.p += 1\n            self.stack[self.p] = x\n\n    def pop(self):\n        if self.p == -1:\n            return -1\n        x, val = self.stack[self.p], self.nums[self.p]\n        self.nums[self.p] = 0\n        self.p -= 1\n        if self.p != -1:\n            self.nums[self.p] += val\n        return x + val\n\n    def increment(self, k: int, val: int):\n        if self.p >= 0:\n            k = min(self.p, k - 1)\n            self.nums[k] += val\n\n复杂度\n时间复杂度O(1)\n空间复杂度O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589095858","body":"思路\n遍历给定字符串，遇到非 ] 入栈\n\n代码\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack = []\n        for i in s:\n            if i == ']':\n                strs = ''\n                repeat = ''\n                while stack[-1] != '[':\n                    strs = stack.pop() + strs\n                stack.pop()\n                while stack and stack[-1].isdigit():\n                    repeat = stack.pop() + repeat\n                stack.append(int(repeat) * strs)\n                continue\n            stack.append(i)\n        return ''.join(stack)\n\n复杂度\n时间复杂度O(n)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1591366307","body":"思路\n队列是一种先入先出的数据结构，而栈是一种后入先出的数据结构，所以一个栈绝对满足不了队列的特性，因此这里需要两个栈，分别是输入栈和输出栈：输入栈来反转元素的入队顺序，元素入只能从输入栈进。输出栈用来存储元素的正常顺序，元素出只能从输出栈出。\n\n代码\nclass MyQueue:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        # 初始化输入栈和输出栈\n        self.inStack = []\n        self.outStack = []\n\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x to the back of queue.\n        \"\"\"\n        # 有新元素进来，进入输入栈\n        self.inStack.append(x)\n\n    def pop(self) -> int:\n        \"\"\"\n        Removes the element from in front of queue and returns that element.\n        \"\"\"\n        # 如果为空\n        if self.empty():\n            return None\n\n        # 如果输出栈不为空，返回输出栈中的元素\n        if self.outStack:\n            return self.outStack.pop()\n        # 输出栈为空,将输入栈的元素压入输出栈\n        else:\n            while self.inStack:\n                val = self.inStack.pop()\n                self.outStack.append(val)\n            return self.outStack.pop()\n\n    def peek(self) -> int:\n        \"\"\"\n        Get the front element.\n        \"\"\"\n        # 使用已有的函数 pop\n        res = self.pop()\n        # pop 函数弹出了 res，所以要再添加回去\n        self.outStack.append(res)\n\n        return res\n\n\n    def empty(self) -> bool:\n        \"\"\"\n        Returns whether the queue is empty.\n        \"\"\"\n        # 两个栈都为空，队列才为空\n        if not(self.inStack or self.outStack):\n            return True\n\n        return False\n\n复杂度\n时间空间均为O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1593124261","body":"思路\n分割点的左边与右边各自排序后依然是升序的，每一次割点以及左边的最大值小于等于右边数组的最小值\n\n代码\nclass Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        n = len(arr)\n        # 生成后缀的最小值\n        post = [arr[-1]]\n        for i in range(n-2, -1, -1):\n            post.append(min(post[-1], arr[i]))\n        post = post[::-1]\n\n        # 从前往后判断割点\n        ans = 0\n        pre = float('-inf')\n        for i in range(n):\n            pre = max(pre, arr[i])\n            if i+1 < n and pre <= post[i+1]:\n                ans += 1\n                pre = float('-inf')\n        ans += 1\n        return ans\n\n复杂度\n时间空间均为O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594845895","body":"思路\n求链表长度 找出倒数第 k+1k+1k+1 个节点 将链表的倒数第 k+1k+1k+1 个节点和倒数第 kkk 个节点断开，并把后半部分拼接到链表的头部\n\n代码\nclass Solution:\n    def rotateRight(self, head, k):\n        if not head or not head.next: return head\n        # 求链表长度\n        _len = 0\n        cur = head\n        while cur:\n            _len += 1\n            cur = cur.next\n        # 对长度取模\n        k %= _len\n        if k == 0: return head\n        # 让 fast 先向后走 k 步\n        fast, slow = head, head\n        while k:\n            fast = fast.next\n            k -= 1\n        # 此时 slow 和 fast 之间的距离是 k；fast 指向第 k+1 个节点\n        # 当 fast.next 为空时，fast 指向链表最后一个节点，slow 指向倒数第 k + 1 个节点\n        while fast.next:\n            fast = fast.next\n            slow = slow.next\n        # newHead 是倒数第 k 个节点，即新链表的头\n        newHead = slow.next\n        # 让倒数第 k + 1 个节点 和 倒数第 k 个节点断开\n        slow.next = None\n        # 让最后一个节点指向原始链表的头\n        fast.next = head\n        return newHead\n\n复杂度\n时间复杂度：O(N)\n空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yzhyzhyzh123":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585695141","body":"# 思路\n将k和num全都转化为num数组，倒叙排列后逐位相加，逐位相加后如果超过9了说明需要进位，将进位符置1，如不满则为0，将保留各位后的数字添加进结果数组。\n依次相加后直到某个长度更短的数组全部遍历完后结束相加过程。\n最后将数组倒序回来就可以得到最终的结果\n\n# 代码\n```\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> res = new ArrayList<Integer>();\n        int n = num.length;\n        // 1. 从后往前逐位相加\n        for(int i = n - 1; i >= 0; i--){\n            // 逐位相加\n            int sum = num[i] + k % 10;         \n            k /= 10;    \n            // 两位相加 进位\n            if(sum >= 10){\n                k++;                        // 进位到k的末尾\n                sum -= 10;                  // 进位清掉\n            }\n            // 1.2 当前相加的结果 添加到结果集\n            res.add(sum);\n        }\n\n        // 2. k的数字长度大于数组的数字长度\n        for(; k > 0; k /= 10){               \n            res.add(k % 10);               \n        }\n\n        // 3. 结果集翻转\n        Collections.reverse(res);\n        return res;\n    }\n}\n```\n# 复杂度\n时间复杂度为O(n)\n空间复杂度为O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586168087","body":"# 思路\n分别从前往后，从后往前遍历，取这两个中较小的一个就是答案最近的距离。\n# 代码\n~~~\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int len = s.length();\n        int[] res = new int[len];\n        int index = -len;\n        // 从左往右，第一次遍历记录下s[i]左边最近的一个c字符\n        for (int i = 0; i < len; i++) {\n            if (s.charAt(i) == c) {\n                index = i;\n            }\n            res[i] = i - index;\n        }\n        index =  len  * 2;\n        // 第二次遍历记录下s[i]右边最近的一个c字符，从右向左\n        // 取这两个中较小的一个，这就是距离c字符最近的\n        for (int i = len - 1; i >= 0; --i) {\n            if (s.charAt(i) == c) {\n                index = i;\n            }\n            res[i] = Math.min(res[i], index - i);\n        }\n        return res;\n    }\n}\n~~~\n# 复杂度\n时间复杂度：O(n)，需要遍历两次字符串的所有字符。\n空间复杂度：O(1)，只需常数的空间。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587609342","body":"# 思路\n push ，判断当前元素的个数是否达到上限，如果没有达到，就把 top 后移一个位置并添加一个元素。\npop ，判断当前栈是否为空，非空返回栈顶元素并将 top 前移一位，否则返回 -1.\ninc ，直接对栈底的最多 k 个元素加上 val。\n\n# 代码\nclass CustomStack {\n    int[] stack;\n    int top;\n\n    public CustomStack(int maxSize) {\n        stack = new int[maxSize];\n        top = -1;\n    }\n    \n    public void push(int x) {\n        if (top != stack.length - 1) {\n            ++top;\n            stack[top] = x;\n        }\n    }\n\n    \n    public int pop() {\n        if (top == -1) {\n            return -1;\n        }\n        --top;\n        return stack[top + 1];\n    }\n    \n    public void increment(int k, int val) {\n        int limit = Math.min(k, top + 1);\n        for (int i = 0; i < limit; ++i) {\n            stack[i] += val;\n        }\n    }\n}\n# 复杂度\n\n时间复杂度：O(1)\n\n空间复杂度：O(n)\n\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589562002","body":"# 思路\n定义两个栈，一个栈numstack用来存放数字，一个栈restack用来存放字符。\n# 代码\n~~~\nclass Solution {\n    public String decodeString(String s) {\n        //定义两个栈用来存放倍数和字符\n        Deque<Integer> numstack = new ArrayDeque<>();\n        Deque<StringBuilder> restack = new ArrayDeque<>();\n        //拼接数字\n        int num = 0;\n        //存放结果\n        StringBuilder res = new StringBuilder();\n\n        for(char c : s.toCharArray()){\n            //遇到数字就压入数字栈\n            if(c >= '0' && c <= '9'){\n                //取出连续的数字\n                num = num * 10 + c - '0';\n            }else if(c == '['){\n                //遇到左括号\n                //将上次计算出的数字压栈\n                numstack.addLast(num);\n                //将上一次的倍数后的结果字符存入字符栈\n                restack.addLast(res);\n                //重置数字和结果\n                num = 0;\n                res = new StringBuilder();\n            }else if(c == ']'){\n                StringBuilder temp = new StringBuilder();\n                //获取倍数\n                int count = numstack.pollLast();\n                //进行循环当前字符,拼接到上一次结果中\n                for(int i = 0; i < count; i++){\n                   temp.append(res);\n                }\n                //与括号外的合并\n                res = restack.pollLast().append(temp);\n            }else{\n                res.append(c);\n            }\n        }\n        return res.toString();\n    }\n}\n~~~","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1591354671","body":"# 思路\n两个栈，一个栈输入栈，一个栈输出栈。\n# 代码\n~~~\nclass MyQueue {\n    Deque<Integer> inStack;\n    Deque<Integer> outStack;\n\n    public MyQueue() {\n        inStack = new ArrayDeque<Integer>();\n        outStack = new ArrayDeque<Integer>();\n    }\n    \n    public void push(int x) {\n        inStack.push(x);\n    }\n    \n    public int pop() {\n        if (outStack.isEmpty()) {\n            while (!inStack.isEmpty()) {\n                outStack.push(inStack.pop());\n            }\n        }\n        return outStack.pop();\n    }\n    \n    public int peek() {\n        if (outStack.isEmpty()) {\n             while (!inStack.isEmpty()) {\n                outStack.push(inStack.pop());\n            }\n        }\n        return outStack.peek();\n    }\n    \n    public boolean empty() {\n        return inStack.isEmpty() && outStack.isEmpty();\n    }\n}\n\n~~~","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1593298909","body":"# 代码\n~~~\nclass Solution {\n    public int maxChunksToSorted(int[] arr) {\n        LinkedList<Integer> stack = new LinkedList<Integer>();\n        for(int num : arr) {\n            if(!stack.isEmpty() && num < stack.getLast()) {\n                int head = stack.removeLast();\n                while(!stack.isEmpty() && num < stack.getLast()) {\n                    stack.removeLast();\n                }\n                stack.addLast(head);\n            }\n            else {\n                stack.addLast(num);\n            }\n        }\n        return stack.size();\n    }\n}\n~~~\n#  复杂度\n时间复杂度 O(N) \n空间复杂度 O(N) \n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594904985","body":"# 思路\n遍历整个链表，求出链表的长度n，并找出链表的尾节点tail，再次从头节点head开始遍历，找到第n - k个节点p，那么1 ~ p是链表的前 n - k个节点，p+1 ~ n是链表的后k个节点，依次执行 tail->next = head，head = p->next，p->next = nullptr，将链表的后k个节点和前 n - k个节点拼接到一块，并让head指向新的头节点(p->next)，新的尾节点即p节点的next指针指向null。\n最后返回链表的新的头节点head。\n# 代码\n~~~\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        if(head == null|| k == 0)  \n             return head;\n        int n = 0;\t\t\t   //链表的长度\n        ListNode tail = null;  //尾节点\n        for(ListNode p = head; p != null ; p = p.next){\n            tail = p;\n            n++;\n        }\n        k %= n;\n        ListNode p = head;\n        for(int i = 0; i < n - k - 1; i++)  \n             p = p.next;   //找到链表的第n-k个节点\n        tail.next = head;\n        head = p.next;\n        p.next = null;\n        return head;  //返回新的头节点\n    }\n}\n~~~\n# 复杂度\n时间复杂度为O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1594930619","body":"# 代码\n~~~\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        ListNode pre = new ListNode(0);\n        pre.next = head;\n        ListNode temp = pre;\n        while(temp.next != null && temp.next.next != null) {\n            ListNode start = temp.next;\n            ListNode end = temp.next.next;\n            temp.next = end;\n            start.next = end.next;\n            end.next = start;\n            temp = start;\n        }\n        return pre.next;\n    }\n}\n~~~\n# 复杂度\n时间复杂度O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1596190754","body":"# 代码\n~~~\nclass Solution {\n    public TreeNode sortedListToBST(ListNode head) {\n        List<Integer> nums = new ArrayList<>();\n        while(head != null){\n            nums.add(head.val);\n            head = head.next;\n        }\n        TreeNode root = toBST(nums, 0, nums.size() - 1);\n        return root;\n    }\n    public TreeNode toBST(List<Integer> nums, int be, int ed){\n        if(be > ed) return null;\n        TreeNode root = new TreeNode(nums.get(be + (ed - be) / 2));\n        root.left = toBST(nums, be, be + (ed - be) / 2 - 1);\n        root.right = toBST(nums, be + (ed - be) / 2 + 1, ed);\n        return root;\n    }\n}\n~~~\n# 复杂度分析\n时间复杂度O（n）","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1597406054","body":"~~~\npublic class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        ListNode a = headA;\n        ListNode b = headB;\n        while (a != b) {\n            if (a != null) {\n                a = a.next;\n            }\n            else {\n                a = headB;\n            }\n            if (b != null) {\n                b = b.next;\n            } else {\n                b = headA;\n            }\n        }\n        return a;\n    }\n}\n~~~\n# 复杂度分析\n时间复杂度 O(N)\n空间复杂度 O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1598996916","body":"# 思路\n快慢指针\n# 代码\n~~~\npublic class Solution {\n    public ListNode detectCycle(ListNode head) {\n        if (head == null) {\n            return null;\n        }\n        ListNode fast = head;\n        ListNode slow = head;\n        while (fast != null) {\n            slow = slow.next;\n            if (fast.next != null) {\n                fast = fast.next.next;\n            } else {\n                return null;\n            }\n            if (fast == slow) {\n                ListNode ptr = head;\n                while (ptr != slow) {\n                    ptr = ptr.next;\n                    slow = slow.next;\n                }\n                return ptr;\n            }\n        }\n        return null;\n    }\n}\n~~~\n# 复杂度\n时间复杂度O(n)\n空间复杂度O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sunstrongchina":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585695458","body":"思路：\r\n先将列表转化为整数，加起来，然后再将最终结果展开为列表\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        ##对k进行展开\r\n        num_val = 0\r\n        for i in range(1,len(num)+1):\r\n            num_val += num[-i] * (10 ** (i-1))\r\n        num_val += k\r\n        ex_vals = []\r\n        while num_val > 9:\r\n            v1 = num_val % 10\r\n            ex_vals= [v1] + ex_vals\r\n            num_val -= v1\r\n            num_val  = num_val // 10\r\n        ex_vals = [num_val] + ex_vals\r\n        return ex_vals\r\n```\r\n\r\n时间复杂度：O(n)\r\n空间复杂度：O(n)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586194079","body":"思路：先找到c字符所在的位置，然后遍历字符数据（不是离左边近就是离右边近），两个一比较取最近\r\n```python\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        ##先找到c的1位置\r\n        indexs = []\r\n        for i,s1 in enumerate(s):\r\n            if s1 == c:\r\n                indexs.append(i)\r\n        result = []\r\n        i = 0\r\n        for j in range(len(indexs)):\r\n            while i <= indexs[j]:\r\n                if j-1 >=0:\r\n                    minDis = abs(indexs[j] -i)\r\n                    if i -indexs[j-1] < minDis:\r\n                        minDis = i -indexs[j-1]\r\n                else:\r\n                    minDis = abs(indexs[j] - i)\r\n                result.append(minDis)\r\n                i +=1\r\n        while i < len(s):\r\n            result.append(i - indexs[-1])\r\n            i += 1\r\n        return result\r\n```\r\n时间复杂度：o(n)\r\n空间复杂度: o(n)            \r\n        \r\n\r\n            ","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589496599","body":"##思路\n遇到']'就开始退栈，然后退到'['时就弹出之前的数字字符，这样就完成了一个字符串[]的decode操作\n···python\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        strlist = []\n        i = 0\n        while i < len(s):\n            if len(strlist) > 0:\n                if (strlist[-1] >= 'a' and s[i] >= 'a') or (strlist[-1] <= '9' and s[i] <= '9'):\n                    strlist[-1] += s[i]\n                else:\n                    strlist.append(s[i])\n            else:\n                strlist.append(s[i])\n            if strlist[-1] == ']':\n                ####先把]给退栈了\n                strlist.pop()\n                ####开始退栈\n                str1 = ''\n                while strlist[-1] != '[':\n                    str1 = strlist.pop() + str1\n                ###将[弹出来\n                strlist.pop()\n                num1 = int(strlist.pop())\n                strlist.append(str1 * num1)\n            i += 1\n        return ''.join(strlist)\n···\n时间复杂度：O(n+k*c)\n空间复杂度：O(n)\n\n\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1591492871","body":"### 思路\r\n一个栈用来支持插入元素，如果要弹出元素的时候，就用另一个输出栈就接住插入栈的元素\r\n```python\r\nclass MyQueue:\r\n\r\n    def __init__(self):\r\n        self.list1 = []\r\n        self.list2 = []\r\n\r\n    def push(self, x: int) -> None:\r\n        self.list1.append(x)\r\n\r\n    def pop(self) -> int:\r\n        self.peek()\r\n        return self.list2.pop()\r\n\r\n    def peek(self) -> int:\r\n        if not self.list2:\r\n            while self.list1:\r\n                self.list2.append(self.list1.pop())\r\n        return self.list2[-1]\r\n    def empty(self) -> bool:\r\n        return not self.list1 and not self.list2\r\n```\r\n时间复杂度：插入O(1)，弹出O(n）\r\n空间复杂度：O(n)","onTime":true},null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1596182996","body":"##思路\n不断地找中值作为根节点，左右节点分段寻找\n```python\ndef constructTree(head,tail):\n    if head == tail:\n        return None\n    fast = head\n    slow = head\n    while fast != tail and fast.next != tail:\n        fast = fast.next.next\n        slow = slow.next\n    root = TreeNode(slow.val)\n    root.left = constructTree(head,slow)\n    root.right = constructTree(slow.next,tail)\n    return root\nclass Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        if head is None:\n            return head\n        return constructTree(head,None)\n```\n##时间复杂度O(nlogn)\n##空间复杂度O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1597346245","body":"##思路\n解法一：\n将A链表的node存储到字典到，列表B的node如果在字典里，就算是相交了\n```python\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        ##list1\n        list1 = {}\n        while headA:\n            list1[headA] = headA.val\n            headA = headA.next\n        \n        while headB:\n            val1 = headB.val\n            if headB in list1:  \n                return headB\n            else:\n                headB = headB.next\n        return None\n```\n##时间复杂度：O(n)\n##空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1598829909","body":"##思路\n将每一个节点存入到字典中，如果某个节点再次出现时，就是环开始的地方\n```python\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        dict1 = {}\n        i = 0\n        while head:\n            i = 0 \n            if head in dict1.keys():\n                return head\n            else:\n                dict1[head] =  i\n            i += 1\n            head = head.next\n        return head\n```\n##时间复杂度O(n)\n##空间复杂度O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dongzegithub":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585696197","body":"  ```java\n public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> res = new ArrayList<>();\n        int i = num.length - 1;\n        int carry = 0;\n        int sum = 0;\n        while (i >= 0 || k > 0) {\n            int n = i >= 0 ? num[i] : 0;\n            int m = k > 0 ? k % 10 : 0;\n            k = k/10;\n            i--;\n\n            sum = n + m + carry;\n            carry = sum / 10;\n            res.add(sum % 10);\n        }\n        if (carry != 0) {\n            res.add(carry);\n        }\n        Collections.reverse(res);\n        return res;\n    }\n```","onTime":true},null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595789444","body":"```java\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        ListNode dummy = new ListNode(-1);\n        dummy.next = head;\n        // pre.next总是指向待交换节点的前一个\n        ListNode pre = dummy;\n\n        while ((head != null) && (head.next != null)) {\n            ListNode first = head;\n            ListNode second = first.next;\n            // 交换节点\n            pre.next = second;\n            first.next = second.next;\n            second.next = first;\n            // pre后移\n            pre = first;\n            head = first.next;\n        }\n        return dummy.next;\n    }\n}\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"metsystem":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585710301","body":"  public int AddToArrayForm(int[] num, int k) {\n\t\t int result = k;\n      \n            for (int i = 0; i > num.Length; i++) {\n              result = result + num[i] * Math.Pow(10,num.Length-i);\n            }\n\n           \n\n            return result;\n    }","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586182364","body":"using System;\nusing System.Collections.Generic;\n\t\t\t\t\t\npublic class Program\n{\n\tpublic static void Main()\n\t{\n\t\tConsole.WriteLine(\"Hello World\");\n\t\tstring  S = \"loveleetcode\";\n\t\tchar C = 'e';\n\t \tint [] result = get(S,C);\n\t\t  for(int i =0 ;i<result.Length;i++){\n              Console.WriteLine(result[i]+\",\");\n            }\n\t}\n\t\n\tpublic static int[] get(string s, char c){\n\t\t    List<int>  cList = new List<int>();\n            for(int i =0 ;i<s.Length;i++){\n                if(s[i]== c){ cList.Add(i); }\n            }\n            int[] result = new int[s.Length];\n\t\t\tfor(int j = 0 ;j<s.Length;j++){\n\t\t\t\tif(s[j] == c){\n\t\t\t\t\tresult[j]= 0;\n\t\t\t\t}else{\n\t\t\t\t\tint cI = 0;\n\t\t\t\t\tint mI = 0;\n\t\t\t\t\tfor(int k = 0 ;k<cList.Count;k++){\n\t\t\t\t\t\tif(cList[k]>j){\n\t\t\t\t\t\t\tcI =cList[k] -j;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tcI = j -cList[k];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(mI== 0  || cI<mI){\n\t\t\t\t\t\t\tmI\t= cI ;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\n\t\t\t\t\tresult[j]=mI;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t}\n\n            return result;\n\t\t}\n\t}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587205037","body":"```csharp\r\npublic class Program\r\n{\r\n    public static void Main()\r\n    {\r\n        CustomStack customStack = new CustomStack(3); // 栈是空的 []\r\n        customStack.Push(1); // 栈变为 [1]\r\n        customStack.Push(2); // 栈变为 [1, 2]\r\n        customStack.Pop(); // 返回 2 --> 返回栈顶值 2，栈变为 [1]\r\n        customStack.Push(2); // 栈变为 [1, 2]\r\n        customStack.Push(3); // 栈变为 [1, 2, 3]\r\n        customStack.Push(4); // 栈仍然是 [1, 2, 3]，不能添加其他元素使栈大小变为 4\r\n        customStack.Increment(5, 100); // 栈变为 [101, 102, 103]\r\n        customStack.Increment(2, 100); // 栈变为 [201, 202, 103]\r\n        customStack.Pop(); // 返回 103 --> 返回栈顶值 103，栈变为 [201, 202]\r\n        customStack.Pop(); // 返回 202 --> 返回栈顶值 202，栈变为 [201]\r\n        customStack.Pop(); // 返回 201 --> 返回栈顶值 201，栈变为 []\r\n        customStack.pop(); \r\n    }\r\n}\r\n\r\npublic class CunstomStack\r\n{\r\n    private int[] data;\r\n    private int maxSize;\r\n    private int top;\r\n    public CunstomStack(int maxSize)\r\n    {\r\n        this.data = new int[maxSize];\r\n        this.maxSize = maxSize;\r\n    }\r\n\r\n    public void Push(int x)\r\n    {\r\n        if (top < maxSize)\r\n        {\r\n            top = top++;\r\n            data[top] = x;\r\n        }\r\n    }\r\n\r\n    public int Pop()\r\n    {\r\n        int result = -1;\r\n        if (top > 0)\r\n        {\r\n            result = data[top];\r\n            data[top] = null;\r\n            top = top - 1;\r\n        }\r\n        \r\n        return result;\r\n    }\r\n\r\n    public void Increment(int k, int val)\r\n    {\r\n        int result = k - 1;\r\n        if (result > maxSize)\r\n        {\r\n            result = maxSize;\r\n        }\r\n\r\n        for (int i = 0; i < result; i++)\r\n        {\r\n            data[i] = data[i] + val;\r\n        }\r\n    }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589527267","body":"public static string DecodeString(string s) {\n    Stack<int> numStack = new Stack<int>();\n    Stack<string> strStack = new Stack<string>();\n    string result = \"\";\n    int num = 0;\n    for (int i = 0; i < s.Length; i++) {\n        char c = s[i];\n        if (char.IsDigit(c)) {\n            num = num * 10 + (c - '0');\n        } else if (c == '[') {\n            numStack.Push(num);\n            strStack.Push(result);\n            result = \"\";\n            num = 0;\n        } else if (c == ']') {\n            int count = numStack.Pop();\n            StringBuilder sb = new StringBuilder(strStack.Pop());\n            for (int j = 0; j < count; j++) {\n                sb.Append(result);\n            }\n            result = sb.ToString();\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1591532650","body":"public class MyQueue {\n    private Stack<int> stack1;\n    private Stack<int> stack2;\n\n  \n    public MyQueue() {\n        stack1 = new Stack<int>();\n        stack2 = new Stack<int>();\n    }\n    \n\n    public void Push(int x) {\n        stack1.Push(x);\n    }\n\n    public int Pop() {\n        if (stack2.Count == 0) {\n            while (stack1.Count > 0) {\n                stack2.Push(stack1.Pop());\n            }\n        }\n        return stack2.Pop();\n    }\n    \n\n    public int Peek() {\n        if (stack2.Count == 0) {\n            while (stack1.Count > 0) {\n                stack2.Push(stack1.Pop());\n            }\n        }\n        return stack2.Peek();    \n    }\n    \n\n    public bool Empty() {\n        return stack1.Count == 0 && stack2.Count == 0;\n    }\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1592955936","body":"public class Solution {\n    public int[] AddToArrayForm(int[] A, int K) {\n        int n = A.Length;\n        List<int> ans = new List<int>();\n        int i = n - 1, carry = 0;\n        while (i >= 0 || K != 0 || carry != 0) {\n            int x = i >= 0 ? A[i] : 0;\n            int y = K % 10, sum = x + y + carry;\n            ans.Add(sum % 10);\n            carry = sum / 10;\n            i--;\n            K /= 10;\n        }\n        ans.Reverse();\n        return ans.ToArray();\n    }\n}","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595749885","body":"public class Solution {\n    public ListNode SwapPairs(ListNode head) { \n        var headNode = new ListNode(0,head);\n        var pre = headNode;\n        while (pre.next != null && pre.next.next != null){\n            var cur = pre.next;\n            var next = cur.next; \n\n            pre.next = next;\n            cur.next = next.next;\n            next.next=cur;\n            pre = cur;\n        \n        } \n\n        return headNode.next;\n    }\n\n    \n}","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1597332065","body":"public class Solution {\n    public ListNode GetIntersectionNode(ListNode headA, ListNode headB) {\n        ListNode pA = headA, pB = headB;\n        \n        while (pA != pB) {\n            pA = pA == null ? headB : pA.next;\n            pB = pB == null ? headA : pB.next;\n        }\n        \n        return pA;\n    }\n}","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miller-em":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585714496","body":"# 思路\n直接在数组最后的元素进行相加，将k得到最后一位数，放在数组的末尾， 再取高位，从num的末尾指针从后到前，得到原数组相加\n\n# 代码\n```\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        i = len(num) - 1\n        while k:\n            num[i] += k\n            k, num[i] = num[i] // 10, num[i] % 10\n            i -= 1\n\n            if i < 0 and k:\n                num.insert(0,0)\n                i = 0\n        return num\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586095681","body":"# 思路 \n首先记录每一个目标字符的位置，然后再对s字符串进行遍历，对每个位置计算目标字符的位置的绝对值，找出最小的那个。\n\n# 代码\n```\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        e_indexes = []\n        res = []\n\n        # 记录每一个e的位置\n        for i in range(len(s)):\n            if s[i] == c:\n                e_indexes.append(i)\n        \n        # 计算每一个位置跟目标的距离\n        for i in range(len(s)):\n            index = min([abs(i-e) for e in e_indexes])\n            res.append(index)\n        return res\n```\n# 复杂度\n时间复杂度 O(N^2)\n空间复杂度 O(N)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587515216","body":"```\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.st = []\n\n    def push(self, x: int) -> None:\n        if len(self.st) < self.maxSize:\n            self.st.append(x)\n\n    def pop(self) -> int:\n        num = -1\n        if len(self.st) > 0:\n            num = self.st.pop()\n        return num\n\n    def increment(self, k: int, val: int) -> None:\n        if k >= len(self.st):\n            self.st = [i+val for i in self.st]\n        else:\n            for i in range(k):\n                self.st[i] = self.st[i]+val\n```","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1592305348","body":"l## 思路\n能够实现题述功能的小子块必须和全部排好序的数组的局部数组内的元素的出现频次是一样的。因此考虑使用哈希表记录频次。\n\n```\nclass Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        cnt = Counter()\n        res = 0\n\n        for x, y in zip(arr, sorted):\n            cnt[x] += 1\n            if cnt[x] == 0:\n                del cnt[x]\n            cnt[y] -= 1\n            if cnt[y] == 0:\n                del cnt[y]\n            if len(cnt) == 0:\n                res += 1\n        return res\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594617865","body":"```\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        if k==0 or not head or not head.next:\n            return head\n        \n        # 计算表长度\n        n = 1\n        cur = head\n        while cur.next:\n            cur = cur.next\n            n += 1\n        \n        # 如果移动过后刚刚好等于原来的链表则不需要移动\n        if (add := n - k%n) == 0:\n            return head\n\n        # 闭合成环\n        cur.next = head\n        while add:\n            add -= 1\n            cur = cur.next\n        ret = cur.next\n        cur.next = None\n        return ret\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dorian-byte":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1585823446","body":"**思路：**\n\n给定一个整数数组num和一个非负整数k，将k加到数组num的表示形式上，返回相加后的新数组。\n我们可以从数组num的最后一位开始，将k的个位数与num的最后一位相加，并记录进位。然后依次将k的十位数、百位数等与num的前一位相加，并考虑进位。如果num已经遍历完而k还有剩余位数，可以将剩余的位数与进位相加。最后，将剩余的进位加入结果数组中。\n\n**代码：**\n```python\ndef addToArrayForm(num, k):\n    kstr = list(map(int, str(k)))  # 将k转换为整数数组\n    res = []  # 结果数组\n    carry = 0  # 进位\n    while kstr or num or carry:\n        kp = kstr.pop() if kstr else 0  # 获取k的当前位数，若已经遍历完则为0\n        np = num.pop() if num else 0  # 获取num的当前位数，若已经遍历完则为0\n        mod = (kp + np + carry) % 10  # 当前位数相加并考虑进位后的结果\n        carry = (kp + np + carry) // 10  # 计算进位\n        res.insert(0, mod)  # 将当前位数的结果插入到结果数组的最前面\n    return res\n```\n\n**复杂度分析：**\n\n时间复杂度：假设num的长度为n，k的位数为m，则时间复杂度为O(max(n, m))，需要遍历num和k的位数。\n空间复杂度：除了返回的结果数组外，额外使用了kstr、res和carry这些辅助变量，空间复杂度为O(max(n, m))。","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1585817921","body":"**思路：**\r\n\r\n给定一个整数数组num和一个非负整数k，将k加到数组num的表示形式上，返回相加后的新数组。\r\n我们可以从数组num的最后一位开始，将k的个位数与num的最后一位相加，并记录进位。然后依次将k的十位数、百位数等与num的前一位相加，并考虑进位。如果num已经遍历完而k还有剩余位数，可以将剩余的位数与进位相加。最后，将剩余的进位加入结果数组中。\r\n\r\n**代码：**\r\n```python\r\ndef addToArrayForm(num, k):\r\n    kstr = list(map(int, str(k)))  # 将k转换为整数数组\r\n    res = []  # 结果数组\r\n    carry = 0  # 进位\r\n    while kstr or num or carry:\r\n        kp = kstr.pop() if kstr else 0  # 获取k的当前位数，若已经遍历完则为0\r\n        np = num.pop() if num else 0  # 获取num的当前位数，若已经遍历完则为0\r\n        mod = (kp + np + carry) % 10  # 当前位数相加并考虑进位后的结果\r\n        carry = (kp + np + carry) // 10  # 计算进位\r\n        res.insert(0, mod)  # 将当前位数的结果插入到结果数组的最前面\r\n    return res\r\n```\r\n\r\n**复杂度分析：**\r\n\r\n时间复杂度：假设num的长度为n，k的位数为m，则时间复杂度为O(max(n, m))，需要遍历num和k的位数。\r\n空间复杂度：除了返回的结果数组外，额外使用了kstr、res和carry这些辅助变量，空间复杂度为O(max(n, m))。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1592006786","body":"**思路：**\n\n该代码实现了一个自定义栈的类CustomStack，具有以下方法：\n\n__init__(self, maxSize: int)：初始化方法，用于设置栈的最大大小maxSize，并创建一个空的栈stack和一个与栈同样大小的增量数组incrementals。\npush(self, x: int)：将元素x压入栈中，如果栈未满，则将元素添加到stack中，并在incrementals中添加一个初始值为0的增量。\npop(self)：从栈中弹出一个元素，并返回其值。如果栈为空，则返回-1。如果栈的大小大于1，则将倒数第二个增量值与最后一个增量值相加，并更新增量数组和栈的大小。\nincrement(self, k: int, val: int)：将栈的后k个元素的增量值增加val。如果k大于栈的大小，则只更新栈的大小范围内的元素的增量值。\n\n**代码：**\n```python\n\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.stack = []\n        self.incrementals = []\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.maxSize:\n            self.stack.append(x)\n            self.incrementals.append(0)\n\n    def pop(self) -> int:\n        if not self.stack:\n            return -1\n        if len(self.stack) > 1:\n            self.incrementals[-2] += self.incrementals[-1]\n        return self.stack.pop() + self.incrementals.pop()\n\n    def increment(self, k: int, val: int) -> None:\n        size = min(k, len(self.stack))\n        if size > 0:\n            self.incrementals[size - 1] += val\n\n```\n\n**复杂度分析：**\n\n时间复杂度：push和pop操作的时间复杂度都是O(1)，而increment操作的时间复杂度取决于给定的范围k，最坏情况下为O(k)。因此，整体的时间复杂度取决于具体的操作序列。\n空间复杂度：除了存储栈元素的空间外，额外使用了一个与栈大小相同的增量数组。因此，空间复杂度为O(maxSize)。","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1592146935","body":"**思路：**\n\n这段代码是一个解码字符串的函数。给定一个经过编码的字符串，编码规则是 k[encoded_string]，表示将 encoded_string 重复 k 次。需要将编码后的字符串解码成原始字符串。\n\n该解码函数使用栈来辅助解码过程。遍历输入字符串的每个字符，根据不同的情况进行处理：\n\n如果当前字符是数字，表示有一个新的重复次数，将其累加到 cur_num 中。\n如果当前字符是字母，直接将其添加到 cur_str 中。\n如果当前字符是左括号 [，将当前的 cur_str 和 cur_num 入栈，并将 cur_str 和 cur_num 重置为空字符串和零。\n如果当前字符是右括号 ]，表示一个重复子串的结束。从栈中弹出上一个字符串和重复次数，将当前的 cur_str 乘以重复次数并加到上一个字符串之后，得到新的 cur_str。\n遍历结束后，cur_str 中存储的就是解码后的字符串。\n最后返回 cur_str。\n\n**代码：**\n```python\n\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack = []\n        cur_num = 0\n        cur_str = ''\n        for c in s:\n            if c == '[':\n                # Push the current count and string to the stack\n                stack.append((cur_str, cur_num))\n                # Reset the current count and string\n                cur_num = 0\n                cur_str = ''\n            elif c == ']':\n                # Pop the previous string and count from the stack\n                prev_str, num = stack.pop()\n                # Add the decoded substring to the previous string\n                cur_str = prev_str + num * cur_str\n            elif c.isdigit():\n                cur_num = cur_num * 10 + int(c)\n            else:  # c.isalpha()\n                cur_str += c\n        return cur_str\n\n```\n\n**复杂度分析：**\n\n时间复杂度：假设输入字符串的长度是 n。需要遍历整个字符串，每个字符只会入栈一次，出栈一次。因此，时间复杂度是 O(n)。\n\n空间复杂度：最坏情况下，栈的深度会达到 n，每个字符都会入栈。因此，空间复杂度是 O(n)。\n\n(以上内容由ChatGPT生成。我通过对比ChatGPT的答案来修改自己写的代码，然后再自己打一遍。)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1592184195","body":"**代码：**\n```python\n\nclass MyQueue(object):\n\n    def __init__(self):\n        self.stack1 = []\n        self.stack2 = []\n\n    def push(self, x):\n        self.stack1.append(x)\n\n    def pop(self):\n        if not self.stack2:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())\n        return self.stack2.pop()\n\n    def peek(self):\n        if not self.stack2:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())\n        return self.stack2[-1]\n\n    def empty(self):\n        return not self.stack1 and not self.stack2\n\n```\n\n**复杂度分析：**\n\n时间复杂度：O(1)\n空间复杂度：O(n)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1592233400","body":"**思路：**\n\n这个问题可以通过一次遍历数组来解决。我们可以使用两个辅助数组mx和mn，其中mx[i]表示从数组开头到第i个位置的最大值，mn[i]表示从数组末尾到第i个位置的最小值。然后，我们遍历数组，对于每个位置i，如果mx[i]小于等于mn[i+1]，说明在位置i可以分割一个新的块，我们将结果加一。最后返回结果即可。\n\n**代码：**\n```python\n\nclass Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        n = len(arr)\n        mx, mn = [-1] * n, [float('inf')] * n\n\n        # Calculate max values from the start to current position\n        mx[0] = arr[0]\n        for i in range(1, n):\n            mx[i] = max(mx[i-1], arr[i])\n        \n        # Calculate min values from the end to current position\n        mn[-1] = arr[-1]\n        for i in range(n-2, -1, -1):\n            mn[i] = min(mn[i+1], arr[i])\n        \n        # Count all chunk points\n        return sum(mx[i] <= mn[i+1] for i in range(n-1)) + 1\n\n```\n\n**复杂度分析：**\n\n时间复杂度：遍历数组需要O(n)的时间，其中n是数组的长度。\n\n空间复杂度：需要两个辅助数组mx和mn来存储最大值和最小值，每个数组的长度为n，因此空间复杂度为O(n)。\n\n(以上内容由ChatGPT生成。我通过对比ChatGPT的答案来修改自己写的代码，然后再自己打一遍。)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1596381301","body":"**思路：**\n\n这段代码实现了一个链表的右旋转操作。给定一个链表的头节点 head 和一个非负整数 k，将链表向右旋转 k 个位置。\n\n首先，判断链表是否为空或者只有一个节点，如果是的话，直接返回原链表。\n\n接下来，计算链表的长度 l，并找到链表的尾节点 tail。\n\n由于旋转 k 个位置，可能大于链表的长度，所以取 k 对 l 取模，得到实际旋转的位置。\n\n如果 k 取模后的结果为 0，说明旋转后的链表和原链表一样，直接返回原链表。\n\n接下来，找到旋转位置的前一个节点 cur，即找到新链表的头节点的前一个节点。\n\n将 cur 的下一个节点作为新链表的头节点 newhead。\n\n将 cur 的下一个节点设为 None，断开原链表。\n\n将原链表的尾节点 tail 的下一个节点指向原链表的头节点 head。\n\n最后，返回新链表的头节点 newhead。\n\n**代码：**\n```python\n\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        if not head or not head.next:\n            return head\n        l = 1\n        cur = head\n        while cur.next:\n            cur = cur.next\n            l += 1\n        tail = cur\n        k %= l\n        if k == 0:\n            return head\n        cur = head\n        for _ in range(l - k - 1):\n            cur = cur.next\n        newhead = cur.next\n        cur.next = None\n        tail.next = head\n        return newhead\n\n```\n\n**复杂度分析：**\n\n时间复杂度：该算法需要遍历链表两次。第一次是为了计算链表的长度，第二次是为了找到新链表的头节点的前一个节点。所以时间复杂度为 O(n)，其中 n 是链表的长度。\n\n空间复杂度：该算法只使用了常数级别的额外空间，所以空间复杂度为 O(1)。","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1596443964","body":"**思路：**\n\n这段代码实现了一个链表中相邻节点的交换操作。首先判断链表是否为空或者只有一个节点，如果是的话直接返回该链表。否则，定义两个指针first_node和second_node分别指向当前的两个节点，然后进行交换操作。将first_node的next指针指向递归调用swapPairs函数后得到的新链表的头节点，然后将second_node的next指针指向first_node，完成交换。最后返回second_node作为新链表的头节点。\n\n**代码：**\n```python\n\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head or not head.next:\n            return head\n\n        first_node = head\n        second_node = head.next \n\n        first_node.next = self.swapPairs(second_node.next)\n        second_node.next = first_node\n\n        return second_node\n\n```\n\n**复杂度分析：**\n\n时间复杂度：假设链表的长度为 n，递归过程中每次都会处理两个节点，所以总的操作次数为 n/2，因此时间复杂度为 O(n)。\n\n空间复杂度：递归调用的次数与链表的长度相关，最坏情况下链表长度为 n，所以递归调用的次数为 O(n)，因此空间复杂度为 O(n)。\n\n(以上内容由ChatGPT生成。我通过对比ChatGPT的答案来修改自己写的代码，然后再自己打一遍。)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1596555887","body":"**思路：**\n\n这段代码实现了将有序链表转换为二叉搜索树的功能。可以使用递归的方式来解决这个问题。\n\n我们可以使用快慢指针找到链表的中间节点，然后以中间节点作为根节点构建二叉搜索树。中间节点的左边将构成左子树，中间节点的右边将构成右子树。递归地处理左右子链表，将它们分别转换为左右子树。\n\n具体步骤如下：\n\n处理基本情况：如果链表为空，返回 None。如果链表只有一个节点，将该节点作为根节点返回。\n使用快慢指针找到链表的中间节点。初始时，将快指针和慢指针都指向链表的头节点。\n快指针每次向前移动两步，慢指针每次向前移动一步，直到快指针到达链表末尾或者下一个节点为空。\n此时，慢指针指向链表的中间节点。\n将中间节点作为根节点创建一个新的二叉树节点。\n将中间节点的左侧链表作为左子链表，递归地调用 sortedListToBST 函数构建左子树，并将返回的根节点赋值给根节点的左指针。\n将中间节点的右侧链表作为右子链表，递归地调用 sortedListToBST 函数构建右子树，并将返回的根节点赋值给根节点的右指针。\n返回根节点。\n\n**代码：**\n```python\n\nclass Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        # Base case handling\n        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n\n        # Find the middle element for root\n        slow, fast = head, head.next.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n\n        # Cut off the list from the middle\n        mid = slow.next\n        slow.next = None\n\n        # Create a new tree node with mid element\n        node = TreeNode(mid.val)\n        node.left = self.sortedListToBST(head)\n        node.right = self.sortedListToBST(mid.next)\n\n        return node\n\n```\n\n**复杂度分析：**\n\n时间复杂度：O(nlogn)，其中 n 是链表的长度。在每次递归调用中，都需要遍历链表找到中间节点，共需 logn 次。每次找到中间节点后，需要进行链表切割操作，时间复杂度为 O(1)。因此，总时间复杂度为 O(nlogn)。\n\n空间复杂度：O(logn)。\n\n(以上内容由ChatGPT生成。我通过对比ChatGPT的答案来修改自己写的代码，然后再自己打一遍。)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1596595820","body":"**思路：**\n\n该问题可以通过使用双指针来解决。我们可以分别用指针 A 和指针 B 遍历链表 headA 和链表 headB，当到达链表末尾时，将指针 A 移动到链表 headB 的头部，将指针 B 移动到链表 headA 的头部。这样，指针 A 和指针 B 的移动长度就会相等。如果链表 headA 和链表 headB 有相交节点，那么在某一次移动中，指针 A 和指针 B 将会相遇于相交节点；如果链表 headA 和链表 headB 无相交节点，那么在某一次移动后，指针 A 和指针 B 同时移动到链表末尾，此时 A 和 B 都为 None，循环结束。\n\n**代码：**\n```python\n\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        A, B = headA, headB\n        while A != B:\n            A = A.next if A else headB\n            B = B.next if B else headA\n        return A\n\n```\n\n**复杂度分析：**\n\n时间复杂度：O(m + n)，其中 m 和 n 分别为链表 headA 和链表 headB 的长度。最坏情况下，指针 A 和指针 B 都要遍历整个链表。\n\n空间复杂度：O(1)，只使用了常数级的额外空间。\n\n(以上内容由ChatGPT生成。我通过对比ChatGPT的答案来修改自己写的代码，然后再自己打一遍。)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yizhewill":[null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1585823486","body":"Traverse from left, then right.\n\n```ruby\ndef shortest_to_char(s, c)\n  prev = -Float::INFINITY\n  ans = []\n\n  s.each_char.with_index do |x, i|\n    prev = i if x == c\n    ans << i - prev\n  end\n  \n  prev = Float::INFINITY\n  (s.length - 1).downto(0) do |i|\n    prev = i if s[i] == c\n    ans[i] = [ans[i], prev - i].min\n  end\n  \n  ans\nend\n```\n\n- Time complexity: O(n)\n- Space complexity: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1592231814","body":"```python\n\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.stack = []\n        self.incrementals = []\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.maxSize:\n            self.stack.append(x)\n            self.incrementals.append(0)\n\n    def pop(self) -> int:\n        if not self.stack:\n            return -1\n        if len(self.stack) > 1:\n            self.incrementals[-2] += self.incrementals[-1]\n        return self.stack.pop() + self.incrementals.pop()\n\n    def increment(self, k: int, val: int) -> None:\n        size = min(k, len(self.stack))\n        if size > 0:\n            self.incrementals[size - 1] += val\n\n```","onTime":false},null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1592234293","body":"```python\n\nclass Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        n = len(arr)\n        mx, mn = [-1] * n, [float('inf')] * n\n\n        # Calculate max values from the start to current position\n        mx[0] = arr[0]\n        for i in range(1, n):\n            mx[i] = max(mx[i-1], arr[i])\n        \n        # Calculate min values from the end to current position\n        mn[-1] = arr[-1]\n        for i in range(n-2, -1, -1):\n            mn[i] = min(mn[i+1], arr[i])\n        \n        # Count all chunk points\n        return sum(mx[i] <= mn[i+1] for i in range(n-1)) + 1\n\n```","onTime":true},null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1596288586","body":"```ruby\ndef getIntersectionNode(headA, headB)\n    a, b = headA, headB\n    while a != b\n        a = a ? a.next : headB\n        b = b ? b.next : headA\n    end\n    return a\nend\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qiaojunch":[null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1585827597","body":" 思路：       \r\n        ## two pointers\r\n        ## 1. iterate over s and find the indices of c.\r\n        ## 2. iterate over s again, use a pointer j to record the closest c to s[i].\r\n        ## 3. find the smallest dist, \r\n        ###  if i < the left most c, ans = pos_of_c[0] - i\r\n        ###. if i > the right most c, ans = i - pos_of_c[-1]\r\n        ###. else, ans = whichever is close to i\r\n\r\n代码：\r\n\r\n        pos, ans, n = [], [], len(s)\r\n        for i in range(n):\r\n            if s[i] == c:\r\n                pos.append(i)\r\n\r\n        j = 0 # point to the closest c to char in s\r\n        for i in range(n):\r\n            if s[i] == c:  \r\n                ans.append(0)\r\n                j += 1\r\n            elif i < pos[0]:\r\n                ans.append(pos[0] - i)\r\n            elif i > pos[-1]:\r\n                ans.append(i - pos[-1])\r\n            else:\r\n                dist_to_left = i - pos[j-1]\r\n                dist_to_right = pos[j] - i\r\n                ans.append(min(dist_to_left, dist_to_right))\r\n        return ans\r\n复杂度：\r\ntime：o(n)\r\nspace: o(n)","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594212413","body":"```\r\nclass Solution:\r\n    def rotateRight(self, head, k):\r\n        if not head:\r\n            return head\r\n\r\n        #connect tail to head\r\n        cur= head\r\n        length =1\r\n        while cur.next:\r\n            cur = cur.next\r\n            length+=1 \r\n        cur.next = head\r\n\r\n        #move to new head\r\n        k= length - (k%length)\r\n        while k>0:\r\n            cur=cur.next\r\n            k-=1\r\n\r\n        #disconnect and return new head\r\n        newhead = cur.next\r\n        cur.next=None\r\n        return newhead\r\n```\r\n\r\n# analyze\r\nTime: o(n)\r\nSpace: o(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhouliuhuo":[null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586031815","body":"class Solution {\n    public int[] shortestToChar(String s, char c) {\n                String[] split = s.split(\"\");\n        ArrayList<Integer> indexs = new ArrayList<>();\n        for (int i = 0; i < split.length; i++) {\n            String s1 = split[i];\n            if (String.valueOf(c).equals(s1)) {\n                indexs.add(i);\n            }\n        }\n\n        int[] shortes = new int[split.length];\n        for (int i = 0; i < shortes.length; i++) {\n            if (indexs.contains(i)) {\n                shortes[i] = 0;\n            } else {\n                int min = split.length;\n                for (Integer index : indexs) {\n                    min = Integer.min(min, Math.abs(index - i));\n                }\n                shortes[i] = min;\n            }\n        }\n        return shortes;\n    }\n}","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"beanza":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1586173960","body":"var addToArrayForm = function(num, k) {\n    let len = num.length;\n    let kSplitArr = String(k).split(\"\").map(item => Number(item));\n    let kSplitLen = kSplitArr.length;\n    if(len < kSplitLen) {\n        let temp = num;\n        num = kSplitArr;\n        kSplitArr = temp;\n    }\n\n    // 逐位相加\n    let flag = 0;\n    len = num.length - 1;\n    while(kSplitArr.length || flag) {\n        let kVal = kSplitArr.pop();\n        let val;\n        if(kVal >= 0) {\n            val = num[len] + kVal + flag;\n        } else {\n            val = num[len] + flag;\n        }\n        flag = Math.floor(val / 10);\n        num[len] = val % 10;\n        if(flag && len - 1 < 0) {\n           num.unshift(flag)\n        }\n        len--;\n    }\n    // console.log(num)\n    return num;\n};\n复杂度分析\n\n时间复杂度：O(N)，其中 N 为数组长度。\n空间复杂度：O(1)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586190672","body":"##思路\r\n将字符串放进一个数组 将字符C从左到右进行遍历  当C==idex[i]时，记录下标index。将index 与其他字符下标相减放进新的数组里并返回。\r\n##代码\r\n##复杂度\r\nO(n)\r\n\r\n\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587578245","body":"思路\n\n因为题目中 inc() 方法需要遍历栈底到k的区间，因此使用使用数组和指针来完成\n\n代码\n\nclass CustomStack {\n    int[] arr = null;\n    int top;\n    public CustomStack(int maxSize) {\n        arr = new int[maxSize];\n        top = -1;\n    }\n    \n    public void push(int x) {\n        if(top < arr.length-1){\n            arr[++top] = x;\n        }\n    }\n    \n    public int pop() {\n        if(top >= 0){\n            return arr[top--];\n        } else {\n            return -1;\n        }\n    }\n    \n    public void increment(int k, int val) {\n        int loop = Math.min(k-1, top);\n        for(int i = 0; i <= loop; i++){\n            arr[i] += val;\n        }\n    }\n}\n复杂度分析\n\n时间复杂度：出栈和入栈为O(1)，increment方法为O(N)， N 为数组长度。\n空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589375584","body":"思路：正则表达式\n\n代码\n\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        while '[' in s:\n            s = re.sub(r'(\\d+)\\[([A-Za-z]*)\\]', lambda m:int(m.group(1)) * m.group(2), s)\n        return s\n复杂度分析\n\n时间复杂度：O(N)\n空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1591368636","body":"思路\n\n代码\nclass MyQueue:\n\ndef __init__(self):\n    \"\"\"\n    Initialize your data structure here.\n    \"\"\"\n    # 初始化输入栈和输出栈\n    self.inStack = []\n    self.outStack = []\n\ndef push(self, x: int) -> None:\n    \"\"\"\n    Push element x to the back of queue.\n    \"\"\"\n    # 有新元素进来，进入输入栈\n    self.inStack.append(x)\n\ndef pop(self) -> int:\n    \"\"\"\n    Removes the element from in front of queue and returns that element.\n    \"\"\"\n    # 如果为空\n    if self.empty():\n        return None\n\n    # 如果输出栈不为空，返回输出栈中的元素\n    if self.outStack:\n        return self.outStack.pop()\n    # 输出栈为空,将输入栈的元素压入输出栈\n    else:\n        while self.inStack:\n            val = self.inStack.pop()\n            self.outStack.append(val)\n        return self.outStack.pop()\n\ndef peek(self) -> int:\n    \"\"\"\n    Get the front element.\n    \"\"\"\n    # 使用已有的函数 pop\n    res = self.pop()\n    # pop 函数弹出了 res，所以要再添加回去\n    self.outStack.append(res)\n\n    return res\n\n\ndef empty(self) -> bool:\n    \"\"\"\n    Returns whether the queue is empty.\n    \"\"\"\n    # 两个栈都为空，队列才为空\n    if not(self.inStack or self.outStack):\n        return True\n\n    return False\n复杂度\n时间空间均为O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1593287041","body":"class Solution:\ndef maxChunksToSorted(self, arr: List[int]) -> int:\ncount = 0\nmax_val = 0\nfor i, val in enumerate(arr):\nmax_val = max(max_val, val)\nif i == max_val:\ncount += 1\nmax_val = i + 1\nreturn count","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594703165","body":"代码\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        if(head == null || head.next == null){\n            return head;\n        }\n\n        ListNode p1 = head;\n        ListNode p2 = head;\n        int size = 1;\n        for(int i = 0; i < k; i++){\n            if(p2.next!=null){\n                p2 = p2.next;\n                size++;\n            } else {\n                p2 = head;\n                k = (k % size) + size;\n            }\n        }\n\n        while(p2.next!=null){\n            p2 = p2.next;\n            p1 = p1.next;\n        }\n\n        p2.next = head;\n        head = p1.next;\n        p1.next = null;\n\n        return head;\n    }\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1596172005","body":"class Solution:\n    def swapPairs(self, head: ListNode) -> ListNode:\n        if head is None or head.next is None:\n            return head\n        next = head.next\n        head.next = self.swapPairs(next.next)\n        next.next = head\n        return next","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1596171332","body":"代码\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode sortedListToBST(ListNode head) {\n        // 递归+快慢指针\n        return buildTree(head, null);\n    }\n\n    public TreeNode buildTree(ListNode left, ListNode right){\n        if(left == right){\n            return null;\n        }\n        ListNode mid = getMedian(left, right);\n        TreeNode root = new TreeNode(mid.val);\n        root.left = buildTree(left, mid);\n        root.right = buildTree(mid.next, right);\n        return root;\n    }\n\n    public ListNode getMedian(ListNode left, ListNode right){\n        ListNode fast = left;\n        ListNode slow = left;\n        while(fast != right && fast.next != right){\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n        return slow;\n    }\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1596814525","body":"public class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        Set<ListNode> visited = new HashSet<>();\n        ListNode temp = headA;\n        while(temp != null){\n            visited.add(temp);\n            temp = temp.next;\n        }\n        temp = headB;\n        while(temp != null){\n            if(visited.contains(temp)){\n                return temp;\n            }\n            temp = temp.next;\n        }\n        return null;\n    }\n}\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1599086697","body":"思路\n\n使用一个Map来记录已经遍历过的节点，如果在遍历过程中，又遇到了之前遍历的节点，那就认为该节点为环形链表的头节点。\n\n代码\n\nvar detectCycle = function(head) {\n    let map = new WeakMap();\n    let curr = head;\n    while(curr) {\n        if(!map.has(curr)) {\n            map.set(curr, 1);\n        } else {\n            return curr;\n        }\n        curr = curr.next;\n    }\n    return null;\n};\n复杂度分析\n\n时间复杂度：O(N)，其中 N 为数组长度。\n空间复杂度：O(N)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/13#issuecomment-1599740977","body":"def __init__(self, capacity: int):\n    self.capacity = capacity\n    self.dic = collections.OrderedDict()\n\ndef get(self, key: int) -> int:\n    if key not in self.dic:\n        return -1\n    \n    self.dic.move_to_end(key)\n    return self.dic[key]\n    \ndef put(self, key: int, value: int) -> None:\n    if key in self.dic:\n        self.dic.move_to_end(key)\n    \n    self.dic[key] = value\n    if len(self.dic) > self.capacity:\n        self.dic.popitem(False)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kingxiaozhe":[null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586192063","body":"```javscript\nfunction shortestToChar(S, C) {\n  const result = [];\n\n  for (let i = 0; i < S.length; i++) {\n    let minDistance = Infinity;\n\n    for (let j = 0; j < S.length; j++) {\n      if (S[j] === C) {\n        minDistance = Math.min(minDistance, Math.abs(i - j));\n      }\n    }\n\n    result.push(minDistance);\n  }\n\n  return result;\n}\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587528078","body":"```javascript\nclass CustomStack {\n  constructor(maxSize) {\n    this.maxSize = maxSize;\n    this.stack = [];\n    this.pointer = -1;\n  }\n\n  push(x) {\n    if (this.pointer < this.maxSize - 1) {\n      this.pointer++;\n      this.stack.push(x);\n    }\n  }\n\n  pop() {\n    if (this.pointer >= 0) {\n      this.pointer--;\n      return this.stack.pop();\n    }\n    return -1;\n  }\n\n  increment(k, val) {\n    for (let i = 0; i < Math.min(k, this.stack.length); i++) {\n      this.stack[i] += val;\n    }\n  }\n}\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589378515","body":"```javascript\nfunction decodeString(s) {\n  const stack = [];\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === ']') {\n      let decodedString = '';\n\n      // 解码内部的字符串\n      while (stack[stack.length - 1] !== '[') {\n        decodedString = stack.pop() + decodedString;\n      }\n\n      // 弹出左括号 '['\n      stack.pop();\n\n      let repeatCount = '';\n\n      // 获取重复次数\n      while (stack.length && !isNaN(stack[stack.length - 1])) {\n        repeatCount = stack.pop() + repeatCount;\n      }\n\n      repeatCount = Number(repeatCount);\n\n      // 将解码后的字符串重复指定次数并压入栈中\n      for (let j = 0; j < repeatCount; j++) {\n        stack.push(decodedString);\n      }\n    } else {\n      // 当前字符为数字、字母或左括号 '['，直接压入栈中\n      stack.push(s[i]);\n    }\n  }\n\n  // 将栈中的字符连接成最终的解码字符串\n  return stack.join('');\n}\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1591296442","body":"```javscript\n/**\n * Initialize your data structure here.\n */\nvar MyQueue = function() {\n  this.stackPush = []; // 用于入队操作\n  this.stackPop = [];  // 用于出队操作\n};\n\n/**\n * Push element x to the back of queue.\n * @param {number} x\n * @return {void}\n */\nMyQueue.prototype.push = function(x) {\n  this.stackPush.push(x);\n};\n\n/**\n * Removes the element from in front of queue and returns that element.\n * @return {number}\n */\nMyQueue.prototype.pop = function() {\n  // 如果出队栈为空，则将入队栈的元素全部转移到出队栈中\n  if (this.stackPop.length === 0) {\n    while (this.stackPush.length) {\n      this.stackPop.push(this.stackPush.pop());\n    }\n  }\n\n  return this.stackPop.pop();\n};\n\n/**\n * Get the front element.\n * @return {number}\n */\nMyQueue.prototype.peek = function() {\n  // 如果出队栈为空，则将入队栈的元素全部转移到出队栈中\n  if (this.stackPop.length === 0) {\n    while (this.stackPush.length) {\n      this.stackPop.push(this.stackPush.pop());\n    }\n  }\n\n  return this.stackPop[this.stackPop.length - 1];\n};\n\n/**\n * Returns whether the queue is empty.\n * @return {boolean}\n */\nMyQueue.prototype.empty = function() {\n  return this.stackPush.length === 0 && this.stackPop.length === 0;\n};\n","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594785799","body":"```javascript\nfunction ListNode(val) {\n  this.val = val;\n  this.next = null;\n}\n\nfunction rotateRight(head, k) {\n  if (!head || !head.next || k === 0) {\n    return head;\n  }\n\n  // 计算链表的长度\n  let length = 1;\n  let current = head;\n  while (current.next) {\n    current = current.next;\n    length++;\n  }\n\n  // 计算实际需要移动的步数\n  k = k % length;\n\n  if (k === 0) {\n    return head;\n  }\n\n  // 找到新链表的头结点的前一个节点\n  let newHeadPrev = head;\n  for (let i = 0; i < length - k - 1; i++) {\n    newHeadPrev = newHeadPrev.next;\n  }\n\n  // 将链表旋转\n  let newHead = newHeadPrev.next;\n  newHeadPrev.next = null;\n  current.next = head;\n\n  return newHead;\n}\n\n// 创建示例链表：1->2->3->4->5->NULL\nlet head = new ListNode(1);\nhead.next = new ListNode(2);\nhead.next.next = new ListNode(3);\nhead.next.next.next = new ListNode(4);\nhead.next.next.next.next = new ListNode(5);\n\nlet k = 2;\n\n// 旋转链表\nlet rotatedHead = rotateRight(head, k);\n\n// 输出结果\nlet result = '';\nwhile (rotatedHead) {\n  result += rotatedHead.val + '->';\n  rotatedHead = rotatedHead.next;\n}\nresult += 'NULL';\n\nconsole.log(result);\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595772418","body":"```javascript\nfunction ListNode(val, next) {\n  this.val = val;\n  this.next = next;\n}\n\nfunction swapPairs(head) {\n  const dummy = new ListNode(0);  // 创建虚拟头节点\n  dummy.next = head;\n  let prev = dummy;\n  let curr = head;\n\n  while (curr && curr.next) {\n    const node1 = curr;\n    const node2 = curr.next;\n\n    prev.next = node2;\n    node1.next = node2.next;\n    node2.next = node1;\n\n    prev = node1;\n    curr = node1.next;\n  }\n\n  return dummy.next;\n}\n\n// 创建链表 1->2->3->4\nconst head = new ListNode(1);\nhead.next = new ListNode(2);\nhead.next.next = new ListNode(3);\nhead.next.next.next = new ListNode(4);\n\n// 两两交换相邻节点\nconst newHead = swapPairs(head);\n\n// 输出交换后的链表\nlet currentNode = newHead;\nwhile (currentNode) {\n  console.log(currentNode.val);\n  currentNode = currentNode.next;\n}\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1596180660","body":"```javascript\n// 定义链表节点\nclass ListNode {\n  constructor(val) {\n    this.val = val;\n    this.next = null;\n  }\n}\n\n// 定义二叉树节点\nclass TreeNode {\n  constructor(val) {\n    this.val = val;\n    this.left = null;\n    this.right = null;\n  }\n}\n\n// 将有序链表转换为高度平衡的二叉搜索树\nfunction sortedListToBST(head) {\n  if (!head) return null;\n\n  const nums = [];\n  let curr = head;\n\n  // 将链表中的值存储到数组中\n  while (curr) {\n    nums.push(curr.val);\n    curr = curr.next;\n  }\n\n  // 构建二叉搜索树\n  function buildBST(left, right) {\n    if (left > right) return null;\n\n    const mid = Math.floor((left + right) / 2);\n    const root = new TreeNode(nums[mid]);\n\n    root.left = buildBST(left, mid - 1);\n    root.right = buildBST(mid + 1, right);\n\n    return root;\n  }\n\n  return buildBST(0, nums.length - 1);\n}\n\n// 创建链表 [-10, -3, 0, 5, 9]\nconst head = new ListNode(-10);\nhead.next = new ListNode(-3);\nhead.next.next = new ListNode(0);\nhead.next.next.next = new ListNode(5);\nhead.next.next.next.next = new ListNode(9);\n\n// 转换为二叉搜索树\nconst root = sortedListToBST(head);\n\n// 打印二叉搜索树\nfunction printBinaryTree(root) {\n  if (!root) return;\n  console.log(root.val);\n  printBinaryTree(root.left);\n  printBinaryTree(root.right);\n}\n\nprintBinaryTree(root);\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1597240942","body":"```javascript\nfunction getIntersectionNode(headA, headB) {\n  if (headA === null || headB === null) {\n    return null;\n  }\n  \n  let pointerA = headA;\n  let pointerB = headB;\n  \n  while (pointerA !== pointerB) {\n    pointerA = pointerA === null ? headB : pointerA.next;\n    pointerB = pointerB === null ? headA : pointerB.next;\n  }\n  \n  return pointerA;\n}\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1598991021","body":"```javascript\nfunction ListNode(val) {\n  this.val = val;\n  this.next = null;\n}\n\nfunction detectCycle(head) {\n  if (head === null || head.next === null) {\n    return null;\n  }\n\n  let slow = head;\n  let fast = head;\n  let hasCycle = false;\n\n  while (fast !== null && fast.next !== null) {\n    slow = slow.next;\n    fast = fast.next.next;\n\n    if (slow === fast) {\n      hasCycle = true;\n      break;\n    }\n  }\n\n  if (!hasCycle) {\n    return null;\n  }\n\n  slow = head;\n  while (slow !== fast) {\n    slow = slow.next;\n    fast = fast.next;\n  }\n\n  return slow;\n}\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ygnauh":[null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586224029","body":"思路：<br>\n1.初始化一个结果数组 res，将其中的每个元素赋值为一个足够大的数。\n2.遍历字符串 S，并判断每个位置上的字符是否为目标字符 C：\n如果是，则将当前位置的 res 值赋为 0。\n如果不是，则分别从左右两个方向开始遍历，记录距离当前位置最近的目标字符的距离，并更新 res 值。\n3.返回结果数组 res。\n\n\n```java\nclass Solution {\n    public int[] shortestToChar(String S, char C) {\n        int n = S.length();\n        int[] res = new int[n];\n        Arrays.fill(res, n);\n        int pos = -n;\n        for (int i = 0; i < n; i++) {\n            if (S.charAt(i) == C) pos = i;\n            res[i] = Math.min(res[i], i - pos);\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            if (S.charAt(i) == C) pos = i;\n            res[i] = Math.min(res[i], pos - i);\n        }\n        return res;\n    }\n}\n\n","onTime":true},null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1593314218","body":"def maxChunksToSorted(arr) -> int:\n        n = len(arr)\n        i_max, i_min = [-1] * n, [float('inf')] * n\n\n        # Calculate max values from the start to current position\n        i_max[0] = arr[0]\n        for i in range(1, n):\n            i_max[i] = max(i_max[i-1], arr[i])\n        print(\"maximum value from 0 to i\", i_max)\n        # Calculate min values from the end to current position\n        i_min[-1] = arr[-1]\n        for i in range(n-2, -1, -1):\n            i_min[i] = min(i_min[i+1], arr[i])\n        print(\"minimum value from 0 to i\", i_min)\n        # Count all chunk points\n        \n\n        return sum(i_max[i] <= i_min[i+1] for i in range(n-1)) + 1\n\n\nprint(maxChunksToSorted([2,1,2,5,3,4,4]))\n\n复杂度：O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wzbwzt":[{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/2#issuecomment-1586695111","body":"/*\r\n思路：\r\n逐位相加:\r\n再反转\r\n\r\n复杂度：\r\n空间复杂度:O(N)\r\n时间复杂度:O(N)\r\n*/\r\n```go\r\nfunc addToArrayForm(num []int, k int) []int {\r\n\tout := make([]int, 0)\r\n\tfor i := len(num) - 1; i >= 0; i-- {\r\n\t\tv := k % 10\r\n\t\tk /= 10\r\n\t\tsum := num[i] + v\r\n\t\tif sum >= 10 {\r\n\t\t\tk += 1\r\n\t\t}\r\n\t\tout = append(out, sum%10)\r\n\t}\r\n\r\n\tfor ; k > 0; k /= 10 {\r\n\t\tout = append(out, k%10)\r\n\t}\r\n\r\n\treverse(out)\r\n\treturn out\r\n}\r\n\r\nfunc reverse(a []int) {\r\n\tn := len(a)\r\n\tfor i := 0; i < n/2; i++ {\r\n\t\ta[i], a[n-i-1] = a[n-i-1], a[i]\r\n\t}\r\n}\r\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/3#issuecomment-1586225246","body":"/*\r\n思路：\r\n遍历数组\r\n\r\n\r\n复杂度：\r\n空间复杂度为 O(n)\r\n时间复杂度为 O(n)\r\n*/\r\n\r\n```go\r\nfunc shortestToChar(s string, c byte) []int {\r\n\tn := len(s)\r\n\tres := make([]int, n)\r\n\r\n\tl := 0\r\n\tif s[0] != c {\r\n\t\tl = n\r\n\t}\r\n\tr := strings.IndexByte(s[1:], c) + 1\r\n\r\n\tfor i := 0; i < n; i++ {\r\n\t\tres[i] = min(abs(i-l), abs(r-i))\r\n\t\tif i == r {\r\n\t\t\tl = r\r\n\t\t\tr = strings.IndexByte(s[l+1:], c) + l + 1\r\n\t\t}\r\n\t}\r\n\r\n\treturn res\r\n}\r\n\r\nfunc min(a, b int) int {\r\n\tif a < b {\r\n\t\treturn a\r\n\t}\r\n\treturn b\r\n}\r\n\r\nfunc abs(a int) int {\r\n\tif a < 0 {\r\n\t\treturn -a\r\n\t}\r\n\treturn a\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1586521473","body":"\r\n/*\r\n思路:\r\n前缀和思路：维护一个increDiff固定容量的数组，记录每次incre 操作的差值\r\npush时 increDiff: append(0)\r\nincrement(k,v)时 increDiff[k-1]+=v  (k =min(k,cnt))\r\npop时 out=list[cnt-1]+incretment[cnt-1]\r\nincrement[cnt-2]+=increment[cnt-1]\r\nre切割list,increment\r\n\r\n\r\n时间复杂度：全部都是 O(1)\r\n空间复杂度为 O(cnt)\r\n*/\r\n```go\r\ntype CustomStack struct {\r\n\tlist      []int\r\n\tcnt       int\r\n\tmaxsize   int\r\n\tincreDiff []int\r\n}\r\n\r\nfunc Constructor(maxSize int) CustomStack {\r\n\treturn CustomStack{list: make([]int, 0, maxSize), cnt: 0, maxsize: maxSize, increDiff: make([]int, 0, maxSize)}\r\n}\r\n\r\nfunc (c *CustomStack) Push(x int) {\r\n\tif c.cnt == c.maxsize {\r\n\t\treturn\r\n\t}\r\n\tc.list = append(c.list, x)\r\n\tc.increDiff = append(c.increDiff, 0)\r\n\tc.cnt++\r\n}\r\n\r\nfunc (c *CustomStack) Pop() int {\r\n\tif c.cnt == 0 {\r\n\t\treturn -1\r\n\t}\r\n\tout := c.list[c.cnt-1] + c.increDiff[c.cnt-1]\r\n\r\n\tc.list = c.list[:c.cnt-1]\r\n\tif c.cnt >= 2 {\r\n\t\tc.increDiff[c.cnt-2] += c.increDiff[c.cnt-1]\r\n\t}\r\n\tc.increDiff = c.increDiff[:c.cnt-1]\r\n\r\n\tc.cnt--\r\n\treturn out\r\n}\r\n\r\nfunc (c *CustomStack) Increment(k int, val int) {\r\n\tif k > c.cnt {\r\n\t\tk = c.cnt\r\n\t}\r\n\tif k == 0 {\r\n\t\treturn\r\n\t}\r\n\tc.increDiff[k-1] += val\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1588621576","body":"/*\r\n思路:\r\n栈思路,遍历s,压入栈，遇到']'弹栈\r\n只有四种可能出现的字符: 字母\\ 数字(可能对位)\\ [ \\ ]\r\n\r\n复杂度：\r\n时间复杂度为O(n)\r\n空间复杂度为O(n)\r\n*/\r\n```go\r\nfunc decodeString(s string) string {\r\n\tstack := []string{}\r\n\tlast := []int{}\r\n\ttmpCount := \"\"\r\n\tfor _, v := range s {\r\n\t\tif unicode.IsDigit(v) {\r\n\t\t\ttmpCount += string(v)\r\n\t\t\tcontinue\r\n\t\t}\r\n\r\n\t\tif len(tmpCount) != 0 {\r\n\t\t\tstack = append(stack, tmpCount)\r\n\t\t\ttmpCount = \"\"\r\n\t\t}\r\n\r\n\t\tif v == '[' {\r\n\t\t\tlast = append(last, len(stack))\r\n\t\t}\r\n\t\tif v == ']' {\r\n\t\t\tnew := last[len(last)-1]\r\n\t\t\tnum := stack[new-1]\r\n\t\t\tvalue := make([]string, len(stack)-new-1)\r\n\t\t\tcopy(value, stack[new+1:])\r\n\t\t\tstack = stack[:new-1]\r\n\t\t\tnum_i, _ := strconv.Atoi(string(num))\r\n\t\t\tfor i := 0; i < num_i; i++ {\r\n\t\t\t\tstack = append(stack, strings.Join(value, \"\"))\r\n\t\t\t}\r\n\t\t\tlast = last[:len(last)-1]\r\n\t\t\tcontinue\r\n\t\t}\r\n\r\n\t\tstack = append(stack, string(v))\r\n\t}\r\n\treturn strings.Join(stack, \"\")\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1590406033","body":"/*\r\n思路：\r\n栈：先入后出\r\n队列：先入先出\r\n使用双栈的来解决:instack,outstack\r\ninstack:每次push时入栈\r\noutstack:每次pop/peek时，弹栈；如果为空，先从instack依次弹栈，再入栈outstack\r\n\r\n复杂度：\r\n空间复杂度：O(n)\r\n时间复杂度：O(n)\r\n*/\r\n\r\n```go\r\ntype MyQueue struct {\r\n\tinstack, outstack []int\r\n}\r\n\r\nfunc Constructor() MyQueue {\r\n\treturn MyQueue{}\r\n}\r\n\r\nfunc (m *MyQueue) Push(x int) {\r\n\tm.instack = append(m.instack, x)\r\n}\r\n\r\nfunc (m *MyQueue) in2out() {\r\n\tfor i := len(m.instack) - 1; i >= 0; i-- {\r\n\t\tm.outstack = append(m.outstack, m.instack[i])\r\n\t}\r\n\tm.instack = nil\r\n}\r\nfunc (m *MyQueue) Pop() int {\r\n\tif len(m.outstack) == 0 {\r\n\t\tm.in2out()\r\n\t}\r\n\tout := m.outstack[len(m.outstack)-1]\r\n\tm.outstack = m.outstack[:len(m.outstack)-1]\r\n\treturn out\r\n}\r\n\r\nfunc (m *MyQueue) Peek() int {\r\n\tif len(m.outstack) == 0 {\r\n\t\tm.in2out()\r\n\t}\r\n\treturn m.outstack[len(m.outstack)-1]\r\n}\r\n\r\nfunc (m *MyQueue) Empty() bool {\r\n\treturn len(m.instack) == 0 && len(m.outstack) == 0\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1592705026","body":"/*\r\n思路：\r\n`单调栈`\r\n要想分割chunk，且对每个chunk进行排序后,与总的数组排序后一致，必然遵循的原则是，下一个chunk的最小值，比前一个chunk中的最大值还要大或者等于\r\n可以通过递减单调栈来解决\r\n遍历数组arr,入栈，如果push的值，比栈顶的值小，必然和其是属于同一个chunk,这里需要pop操作，直到大于栈顶得值为止，再入栈最大得那个值(第一个pop的值);\r\neg:[1,1,0,0,1]=>2;[5,1,1,8,1,6,5,9,7,8]=>1\r\n\r\n如果大于/等于栈顶的值，入栈,认为是一个新的chunk\r\n最终得到的栈的长度就是可以分割的max chunk的块数,其中每个数字表示当前chunk中得最大值\r\n\r\n\r\n复杂度:\r\n\r\n时间复杂度：O(N)\r\n空间复杂度：O(N)\r\n*/\r\n```go\r\nfunc maxChunksToSorted(arr []int) int {\r\n\tstack := []int{}\r\n\tfor _, v := range arr {\r\n\t\tif len(stack) == 0 {\r\n\t\t\tstack = append(stack, v)\r\n\t\t\tcontinue\r\n\t\t}\r\n\t\tmax := stack[len(stack)-1]\r\n\t\tif max <= v {\r\n\t\t\tmax = v\r\n\t\t}\r\n\t\tfor len(stack) > 0 && stack[len(stack)-1] > v {\r\n\t\t\tstack = stack[:len(stack)-1]\r\n\t\t}\r\n\t\tstack = append(stack, max)\r\n\t}\r\n\treturn len(stack)\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594155478","body":"\r\n/*\r\n思路：\r\n`快慢指针`\r\neg. A -> B -> C -> D -> E 右移 2 位 D-E-A-B-C\r\n原则：不管移动多少，节点之间的相对位置是不变的\r\n规则：移动k位，倒数第k位会移动到首位,即D会移动到head，倒数第K+1位会移动到last\r\n注意：移动k位和移动k%len效果等同\r\n过程：通过快慢指针回去倒数第K+1个节点\r\n\r\n\r\n复杂度：\r\n时间复杂度：节点最多只遍历两遍，时间复杂度为 O(n)\r\n空间复杂度：未使用额外的空间，空间复杂度 O(1)\r\n*/\r\n```go\r\n// Definition for singly-linked list.\r\ntype ListNode struct {\r\n\tVal  int\r\n\tNext *ListNode\r\n}\r\n\r\nfunc rotateRight(head *ListNode, k int) *ListNode {\r\n\tif head == nil {\r\n\t\treturn nil\r\n\t}\r\n\tlength := 0\r\n\tc := head\r\n\tfor c != nil {\r\n\t\tlength++\r\n\t\tc = c.Next\r\n\t}\r\n\tk = k % length\r\n\tif k == 0 {\r\n\t\treturn head\r\n\t}\r\n\tvar slow, fast = head, head\r\n\tfor i := 0; i < k+1; i++ {\r\n\t\tfast = fast.Next\r\n\t}\r\n\tfor fast != nil {\r\n\t\tfast = fast.Next\r\n\t\tslow = slow.Next\r\n\t}\r\n\tnext := slow.Next\r\n\tslow.Next = nil\r\n\tout := next\r\n\tfor next.Next != nil {\r\n\t\tnext = next.Next\r\n\t}\r\n\tnext.Next = head\r\n\r\n\treturn out\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/9#issuecomment-1595669098","body":"/*\r\n思路：\r\nA->B->C->D\r\n注意：对于一个head node可能改变的链表，可以通过虚拟一个空节点来指代；\r\n两两交换时涉及到四个节点，prehead->A->B->C\r\n\r\n交换步骤：\r\n1. prehead->A->C\r\n2. B->A\r\n3. prehaed->B\r\n\r\n迭代交换\r\n\r\n\r\n复杂度：\r\n时间复杂度: O(n)\r\n空间复杂度：O(1)\r\n\r\n*/\r\n```go\r\n// Definition for singly-linked list.\r\ntype ListNode struct {\r\n\tVal  int\r\n\tNext *ListNode\r\n}\r\n\r\nfunc swapPairs(head *ListNode) *ListNode {\r\n\tif head == nil || head.Next == nil {\r\n\t\treturn head\r\n\t}\r\n\tprehead := &ListNode{}\r\n\tprehead.Next = head\r\n\r\n\tpre := prehead\r\n\tcur := head\r\n\tfor cur != nil && cur.Next != nil {\r\n\t\tnext := cur.Next\r\n\t\tcur.Next = next.Next\r\n\t\tnext.Next = cur\r\n\t\tpre.Next = next\r\n\r\n\t\tpre = cur\r\n\t\tcur = cur.Next\r\n\t}\r\n\r\n\treturn prehead.Next\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1595995966","body":"/*\r\n思路：\r\n`快慢指针`\r\n前提：链表已经升序排序\r\n根据高度平衡的二叉树原则，可以先选取中间节点作为根节点,左边的都为左节点，右边的都为右节点\r\n对左右子链表再找中间节点,以此重复；\r\n通过快慢指针找到中间节点\r\n\r\n\r\n\r\n复杂度：\r\n空间复杂度：空间复杂度为 O(logn)\r\n时间复杂度：递归树的深度为 logn,每一层的基本操作数为 n,因此总的时间复杂度为O(nlogn)\r\n\r\n*/\r\n\r\n```go\r\n// Definition for singly-linked list.\r\ntype ListNode struct {\r\n\tVal  int\r\n\tNext *ListNode\r\n}\r\n\r\n// Definition for a binary tree node.\r\ntype TreeNode struct {\r\n\tVal   int\r\n\tLeft  *TreeNode\r\n\tRight *TreeNode\r\n}\r\n\r\nfunc sortedListToBST(head *ListNode) *TreeNode {\r\n\tif head == nil {\r\n\t\treturn nil\r\n\t}\r\n\tif head.Next == nil {\r\n\t\treturn &TreeNode{Val: head.Val}\r\n\t}\r\n\tif head.Next.Next == nil {\r\n\t\treturn &TreeNode{Val: head.Next.Val, Left: &TreeNode{Val: head.Val}}\r\n\t}\r\n\r\n\tvar pre *ListNode\r\n\tslow, fast := head, head\r\n\tfor fast != nil && fast.Next != nil {\r\n\t\tpre = slow\r\n\t\tslow = slow.Next\r\n\t\tfast = fast.Next.Next\r\n\t}\r\n\troot := &TreeNode{Val: slow.Val}\r\n\troot.Right = sortedListToBST(slow.Next)\r\n\r\n\tpre.Next = nil\r\n\troot.Left = sortedListToBST(head)\r\n\r\n\treturn root\r\n\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1596439564","body":"/*\r\n思路：\r\n`双指针`\r\nlistA listB 从head开始遍历;因为长度可能不一样，所以首先需要消除长度差,可以listA 遍历完后，指针指向listB的head\r\n同理B一样，那么双指针走过的路程也就相同,速度一样，路程一样，那么一定会同时到达终点，\r\n此外如果相交的话，也就是存在后半程路程相同，那么AB指针相遇时，就是相交的点\r\n\r\n类型环形跑道，一个在内侧，一个在外侧，总距离都是1000米，起点不同，但是最后冲刺的直线跑道是相同的\r\n\r\n\r\n\r\n复杂度：\r\n时间复杂度：O(n)\r\n空间复杂度：O(1)\r\n*/\r\n```go\r\n// Definition for singly-linked list.\r\ntype ListNode struct {\r\n\tVal  int\r\n\tNext *ListNode\r\n}\r\n\r\nfunc getIntersectionNode(headA, headB *ListNode) *ListNode {\r\n\tif headA == nil || headB == nil {\r\n\t\treturn nil\r\n\t}\r\n\r\n\tpA := headA\r\n\tpB := headB\r\n\r\n\tfor pA != pB {\r\n\t\tif pA == nil {\r\n\t\t\tpA = headB\r\n\t\t} else {\r\n\t\t\tpA = pA.Next\r\n\t\t}\r\n\r\n\t\tif pB == nil {\r\n\t\t\tpB = headA\r\n\t\t} else {\r\n\t\t\tpB = pB.Next\r\n\t\t}\r\n\t}\r\n\treturn pA\r\n}\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"iambigchen":[null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1586455365","body":"## 思路\n\n用increments来存所有的increment操作，increment[i]表示前i个值都加increment[i]值\n\n在pop的时候，只需要把栈顶值取出，加increment[i]。在更新维护increment[i-1]，将increment[i-1] 变成 increment[i] + increment[i-1]。然后重置increment[i]为0即可\n\n## 关键点\n\n-  \n\n## 代码\n\n- 语言支持：JavaScript\n\nJavaScript Code:\n\n```javascript\n\nvar CustomStack = function(maxSize) {\n    this.maxSize = maxSize\n    this.list = []\n    this.increments = Array(maxSize).fill(0)\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if (this.list.length < this.maxSize) {\n        this.list.push(x)\n    }\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    if (this.list.length === 0) return -1\n    let i = this.list.length - 1\n    this.increments[i-1] += this.increments[i]\n    let res = this.list.pop() + this.increments[i]\n    this.increments[i] = 0\n    return res\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    let i = Math.min(k, this.list.length) -1\n    if (i >= 0) {\n        this.increments[i] += val\n    }\n};\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(1)$\n- 空间复杂度：$O(1)$","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"weiboshi":[null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587162592","body":"class CustomStack {\n\n    // declare an array to store the elements of the stack\n    private int[] stack;\n    // declare an integer to store the maximum size of the stack\n    private int maxSize;\n    // declare an integer to store the top index of the stack\n    private int top;\n\n    // constructor to initialize the stack with a given maxSize\n    public CustomStack(int maxSize) {\n        // initialize the array with the maxSize\n        this.stack = new int[maxSize];\n        // initialize the maxSize\n        this.maxSize = maxSize;\n        // initialize the top index to -1\n        this.top = -1;\n    }\n\n    // method to push an element x to the top of the stack\n    public void push(int x) {\n        // check if the stack is full\n        if (top == maxSize - 1) {\n            // throw an exception\n            throw new RuntimeException(\"Stack is full\");\n        } else {\n            // increment the top index\n            top++;\n            // assign x to the top position of the array\n            stack[top] = x;\n        }\n    }\n\n    // method to pop an element from the top of the stack\n    public int pop() {\n        // check if the stack is empty\n        if (top == -1) {\n            // return -1 as per the requirement\n            return -1;\n        } else {\n            // store the top element of the array in a variable\n            int x = stack[top];\n            // decrement the top index\n            top--;\n            // return x\n            return x;\n        }\n    }\n\n    // method to increment the bottom k elements of the stack by val\n    public void inc(int k, int val) {\n        // loop through the first k elements of the array or all elements if k > top + 1\n        for (int i = 0; i < Math.min(k, top + 1); i++) {\n            // increment each element by val\n            stack[i] += val;\n        }\n    }\n}\n","onTime":true},null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1596849783","body":"// Definition for singly-linked list.\n// public class ListNode {\n//     int val;\n//     ListNode next;\n//     ListNode(int x) {\n//         val = x;\n//         next = null;\n//     }\n// }\n\npublic class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        // If either list is empty, return null\n        if (headA == null || headB == null) {\n            return null;\n        }\n        \n        // Initialize two pointers to traverse the lists\n        ListNode pA = headA;\n        ListNode pB = headB;\n        \n        // Loop until the pointers meet or reach the end\n        while (pA != pB) {\n            // If pA reaches the end, move it to the head of list B\n            if (pA == null) {\n                pA = headB;\n            }\n            // Otherwise, move it to the next node\n            else {\n                pA = pA.next;\n            }\n            \n            // If pB reaches the end, move it to the head of list A\n            if (pB == null) {\n                pB = headA;\n            }\n            // Otherwise, move it to the next node\n            else {\n                pB = pB.next;\n            }\n        }\n        \n        // Return the intersection node or null if there is no intersection\n        return pA;\n    }\n}\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"master-guang":[null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/4#issuecomment-1587254742","body":"```js\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n    this.maxSize = maxSize;\n    this.stack = [];\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if(this.stack.length < this.maxSize) {\n        this.stack.push(x)\n    }\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    if(this.stack.length) {\n        return this.stack.pop()\n    } else {\n        return -1\n    }\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    if(this.stack.length < k) {\n        this.stack = this.stack.map(function(item) {\n            return item += val\n        })\n    } else {\n        for(let i = 0; i < k; i++) {\n            this.stack[i] += val\n        }\n    }\n};\n","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1592683182","body":"```js\n思路：要想划分最多的块，并且保证排序后的结果和原数组的排序结果相同，则块中的元素必须保证，块中的最大值都比右边的元素小或者相同，块中的最小值都比左边的元素大或者相同。\nvar maxChunksToSorted = function(arr) {\n  const stack = [];\n  for (const num of arr) {\n      if (stack.length === 0 || num >= stack[stack.length - 1]) {\n          stack.push(num);\n      } else {\n          const mx = stack.pop();\n          while (stack.length && stack[stack.length - 1] > num) {\n              stack.pop();\n          }\n          stack.push(mx);\n      }\n  }\n  return stack.length;\n};\n\n//test\nlet arr = [2,1,3,4,4]\nconsole.log(maxChunksToSorted(arr))","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jennyjgao":[null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589116849","body":"```\npublic class MedianDecodeString394 {\n    public String decodeString(String s){\n        StringBuilder rs = new StringBuilder();\n        Stack<Integer> kStack = new Stack<>();\n        Stack<StringBuilder> resStack = new Stack<>();\n        int k = 0; //重复k次\n        for(char c: s.toCharArray()){\n            if(c == '['){\n                //记录位置k,和当前结果\n                kStack.push(k);\n                resStack.push(rs);\n                k =0;\n                rs = new StringBuilder();\n            }else if(c == ']'){\n                //出最近的一次左括号记录的次数\n                int curk = kStack.pop();\n                StringBuilder temp = new StringBuilder();\n                for(int i=0;i<curk;i++){\n                    temp.append(rs);\n                }\n                //合并括号\n                rs = resStack.pop().append(temp);\n            }else if(c>='0' && c<='9'){\n                k = c - '0' +k *10; //转一下次数\n            }else{\n                //字符直接加\n                rs.append(c);\n            }\n        }\n        return rs.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"3[a]2[bc]\";\n        MedianDecodeString394 md = new MedianDecodeString394();\n        System.out.println(md.decodeString(s));\n    }\n}\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1590624080","body":"    ``` java\npublic class EasyStackQueue232 {\n    private Stack<Integer> sIn;\n    private Stack<Integer> sOut;\n\n    public EasyStackQueue232(){\n        sIn = new Stack<>();\n        sOut = new Stack<>();\n    }\n    public void push(int x){\n        sIn.push(x);\n    }\n\n    public Integer pop(){\n        // in -> out\n        if(sOut.isEmpty()){\n            while (! sIn.isEmpty()){\n                sOut.push(sIn.pop());\n            }\n        }\n        return sOut.pop();\n    }\n\n    public Integer peek(){\n        if(sOut.isEmpty()){\n            while(!sIn.isEmpty()){\n                sOut.push(sIn.pop());\n            }\n        }\n        return sOut.peek();\n    }\n\n    public boolean empty(){\n        return sIn.isEmpty() && sOut.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        EasyStackQueue232 myQueue = new EasyStackQueue232();\n        myQueue.push(1);\n        myQueue.push(2);\n        myQueue.push(3);\n        System.out.println(myQueue.pop());\n        System.out.println(myQueue.peek());\n        System.out.println(myQueue.empty());\n    }\n}\n    ```","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1596834540","body":"```\npublic class EasyIntersectionOfTwoLists160 {\n    public static class ListNode{\n        int val;\n        ListNode next;\n\n        ListNode(int x){\n            val = x;\n            next = null;\n        }\n    }\n    \n    public static ListNode getIntersectionOfTwoLists(ListNode headA, ListNode headB){\n        ListNode one = headA;\n        ListNode two = headB;\n        while(one!=two){\n            if(one == null){\n                one = headB;\n            }else{\n                one = one.next;\n            }\n\n            if(two == null){\n                two =headA;\n            }else{\n                two = two.next;\n            }\n        }\n        return one;\n    }\n\n    public static void main(String[] args) {\n        ListNode A = new ListNode(2);\n        ListNode B = new ListNode(3);\n        A.next = B;\n        System.out.println(EasyIntersectionOfTwoLists160.getIntersectionOfTwoLists(A,B).val);\n    }\n}\n\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangjay408":[null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/5#issuecomment-1589410068","body":"type item struct {\n\tn     int\n\tbytes []byte\n}\n\nfunc decodeString(str string) string {\n\tnum := 0\n\tst := []item{{1, []byte{}}}\n\n\tfor i := range str {\n\t\tswitch {\n\t\tcase str[i] == '0':\n\t\t\tnum *= 10\n\t\tcase str[i] > '0' && str[i] <= '9':\n\t\t\tnum = num*10 + int(str[i]-'0')\n\t\tcase str[i] == '[':\n\t\t\tst = append(st, item{num, []byte{}})\n\t\t\tnum = 0\n\t\tcase str[i] == ']':\n\t\t\ttmp := st[len(st)-1]\n\t\t\tst = st[:len(st)-1]\n\t\t\tfor j := 0; j < tmp.n; j++ {\n\t\t\t\tst[len(st)-1].bytes = append(st[len(st)-1].bytes, tmp.bytes...)\n\t\t\t}\n\t\tdefault:\n\t\t\tst[len(st)-1].bytes = append(st[len(st)-1].bytes, str[i])\n\t\t}\n\t}\n\n\treturn string(st[0].bytes)\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1591313658","body":"class MyQueue {\n\n    Stack<Integer> og;\n    Stack<Integer> temp;\n    int top;\n    \n    public MyQueue() {\n        og = new Stack();\n        temp = new Stack();\n    }\n    \n    public void push(int x) {\n        if(og.empty())\n            top = x;\n        og.push(x);\n    }\n    \n    public int pop() {\n        while(og.size() != 1)\n        {\n            temp.push(og.pop());\n        }\n        int popped = og.pop();\n        if(!temp.empty())\n            top = temp.peek();\n        while(!temp.empty())\n        {\n            og.push(temp.pop());\n        }\n        return popped;\n    }\n    \n    public int peek() {\n        return top;\n    }\n    \n    public boolean empty() {\n        return og.empty();\n    }\n}","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chang-you":[null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1590402125","body":"```python\nclass MyQueue:\n\n    def __init__(self):\n        # stack_in for push, stack_out for pop\n        self.stack_in = []\n        self.stack_out = []\n        \n    \n    def push(self, x: int) -> None:\n        self.stack_in.append(x)\n\n    def pop(self) -> int:\n        if self.empty():\n            return None\n        \n        if self.stack_out:\n            return self.stack_out.pop()\n        else:\n            while self.stack_in:\n                self.stack_out.append(self.stack_in.pop())\n            return self.stack_out.pop()\n\n    def peek(self) -> int:\n        ans = self.pop()\n        self.stack_out.append(ans)\n        return ans\n\n    def empty(self) -> bool:\n        return not (self.stack_in or self.stack_out)\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()\n```","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1596370580","body":"\"\"\"\r\n无限长度的问题应该可以这样来解决：\r\n两个链表同时做反向操作，也就是reverse linked list。那么会遇到有以下两种情况：\r\n1. 两个链表不相交部分一样长，那么他们会在某一刻访问到同一个node，那么这个node之后就全一致。\r\n    1.1 如果要恢复链表结构，再reverse一次即可\r\n2. 两个链表不想教部分不一样长，那么其中一个指针it_a会跑到另一个链表头部。此时, 让it_a做reverse list操作直到回到Head(A)，用it_b再次做reverse操作，it_a正常访问next，it_a和it_b指向同一个节点时候，就是交点。此时，链表也正好恢复了原始结构。\r\n更数学化一点语言应该是这样：\r\n假设两个list A，B不想交部分长度分别为M，N，满足M >= N, but we don't know the exact value of M or N.\r\n1. if M == N，after M reverse op, there will be it_A == it_b and the common node is found;\r\n2. if M > N, after N reverse op, it_b will be on common list. And after M+N reverse op, it_a will be at Head(B). And it_b will be M steps away from the common Node.\r\n3. Now let it_a execute reverse op for M+N times and it_a will be back at Head(A), which is also M steps away from the common Node.\r\n4. Now let it_b doing a reverse list op and it_a to visit the list. The two will meet at the common Node and the structure will be restored at this moment.\r\n\r\n```python\r\nclass Solution:\r\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\r\n        a, b = headA, headB\r\n        while a != b:\r\n            a = headB if not a else a.next\r\n            b = headA if not b else b.next\r\n        return a\r\n```\r\n    \r\n    ","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rocjemaintiendrai":[null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/6#issuecomment-1590447112","body":"class MyQueue {\n    Stack<Integer> input = new Stack<>();\n    Stack<Integer> output = new Stack<>();\n\n    public MyQueue() {\n        \n    }\n    \n    public void push(int x) {\n        input.push(x);\n    }\n    \n    public int pop() {\n        shuffle();\n        return output.pop();\n    }\n    \n    public int peek() {\n        shuffle();\n        return output.peek();\n    }\n    \n    public boolean empty() {\n        return input.empty() && output.empty();\n    }\n\n    private void shuffle() {\n        if(output.empty()) {\n            while(!input.empty()) {\n                output.push(input.pop());\n            }\n        }\n    }\n}","onTime":true},null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1598065928","body":"public class Solution {\n    public ListNode detectCycle(ListNode head) {\n        ListNode slow = head, fast = head;\n        while(fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n            if(slow == fast) break; \n        }\n        if(fast == null || fast.next == null)  {\n            return null;\n        }\n        while(head != slow) {\n            head = head.next;\n            slow = slow.next;\n        }\n        return head;\n    }\n}","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ainfinitedz":[null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/7#issuecomment-1593326406","body":"### 思路\n\n维持一个始终递增的单调栈，栈内保留的元素即是分片的元素。由此，分片段数是栈的大小\n\n### 代码\n\n```java\nimport java.util.*;\n\nclass Solution {   \n    public int maxChunksToSorted(int[] arr) {\n        Stack<Integer> stack = new Stack<>();\n        for(int i = 0; i < arr.length; i++) { //O(n)\n            // 将所有小于当前元素的值pop出来\n            if(!stack.isEmpty() && arr[i] < stack.peek()) {\n                int cur = stack.pop();\n            \t\n                while(!stack.isEmpty() && arr[i] < stack.peek()) { //O(n)\n                    stack.pop();\n                }\n            \tstack.push(cur);\n            } else {\n                stack.push(arr[i]);\n            }\n        }\n        return stack.size();\n    }\n}\n```\n\n### 算法复杂度\n\n时间复杂度：$O(n)$ 每个元素最多被pop和push一次\n\n空间复杂度：$O(n)$ 栈的大小最大为数组长度","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"christ36":[null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594872929","body":" public ListNode rotateRight(ListNode head, int k) {\n        if(head == null || head.next == null){\n            return head;\n        }\n\n        ListNode p1 = head;\n        ListNode p2 = head;\n        int size = 1;\n        for(int i = 0; i < k; i++){\n            if(p2.next!=null){\n                p2 = p2.next;\n                size++;\n            } else {\n                p2 = head;\n                k = (k % size) + size;\n            }\n        }\n\n        while(p2.next!=null){\n            p2 = p2.next;\n            p1 = p1.next;\n        }\n\n        p2.next = head;\n        head = p1.next;\n        p1.next = null;\n\n        return head;\n    }","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hengistchan":[null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/8#issuecomment-1594882437","body":"public ListNode rotateRight(ListNode head, int k) {\n    if(head==null||k==0){\n        return head;\n    }\n    ListNode cursor=head;\n    ListNode tail=null;//尾指针\n    int length=1;\n    while(cursor.next!=null)//循环 得到总长度\n    {\n        cursor=cursor.next;\n        length++;\n    }\n    int loop=length-(k%length);//得到循环的次数\n    tail=cursor;//指向尾结点\n    cursor.next=head;//改成循环链表\n    cursor=head;//指向头结点\n    for(int i=0;i<loop;i++){//开始循环\n        cursor=cursor.next;\n        tail=tail.next;\n    }\n    tail.next=null;//改成单链表\n    return cursor;//返回当前头\n}","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/10#issuecomment-1596048151","body":"```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode sortedListToBST(ListNode head) {\n        // 递归+快慢指针\n        return buildTree(head, null);\n    }\n\n    public TreeNode buildTree(ListNode left, ListNode right){\n        if(left == right){\n            return null;\n        }\n        ListNode mid = getMedian(left, right);\n        TreeNode root = new TreeNode(mid.val);\n        root.left = buildTree(left, mid);\n        root.right = buildTree(mid.next, right);\n        return root;\n    }\n\n    public ListNode getMedian(ListNode left, ListNode right){\n        ListNode fast = left;\n        ListNode slow = left;\n        while(fast != right && fast.next != right){\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n        return slow;\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/11#issuecomment-1596401366","body":"```typescript\nfunction getIntersectionNode(headA: ListNode | null, headB: ListNode | null): ListNode | null {\n  let a = headA, b = headB\n  while(a != b) {\n    a = a ? a.next : null\n    b = b ? b.next : null\n    if(a == null && b == null) return null\n    if(a == null) {\n      a = headB\n    } \n    if(b == null) {\n      b = headA\n    }\n  }\n  return a\n};\n```\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-11-daily-check/issues/12#issuecomment-1598052602","body":"```\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        while(head) {\n            if(!less<ListNode *>()(head, head->next)) {\n                return head->next;\n            }\n            head = head->next;\n        }\n        return nullptr;\n    }\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}