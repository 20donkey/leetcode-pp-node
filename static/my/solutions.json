{"michaelxi3":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1184635948","body":"# Idea\r\nArray Iteration，从后往前进位\r\n# Code\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        LinkedList<Integer> res = new LinkedList<>();\r\n        int index = num.length - 1;\r\n        \r\n        while (index >= 0 || k!=0) {\r\n            \r\n            if (index >= 0) {\r\n                k = num[index] + k;\r\n                index--;\r\n            }\r\n            // k != 0 时都要继续loop！因为有进位的 special case！\r\n            res.addFirst(k % 10);\r\n            k = k / 10;\r\n        }\r\n        \r\n        return res;\r\n    }\r\n}\r\n```\r\n# Complexity\r\n- Time: O(N)\r\n- Space: O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"darknightwriter":[{"url":"https://github.com/leetcode-pp/91alg-8-daily-check/issues/1#issuecomment-1184674932","body":"## 思路\n注意 k 、num数组、以及进位问题即可。\n- Java：数组遍历\n- Python： 字符串偷懒\n\n## 解题\nJava:\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        LinkedList<Integer> arr = new LinkedList<>();\n        int index = num.length - 1;\n        int plus = 0;\n        while (k > 0 || plus != 0 || index > -1) {\n            int mod = k % 10 + plus;\n            k /= 10;\n            if (index > -1) {\n                mod += num[index--];\n            }\n            arr.addFirst(mod % 10);\n            plus = mod / 10;\n        }\n        return arr;\n    }\n}\n```\nPython:\n```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        n = reduce(lambda x, y: x * 10 + y, num) + k\n        return [0] if n == 0 else [int(i) for i in str(n)]\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}