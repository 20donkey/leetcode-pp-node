{"1":[],"2":[],"3":[],"4":[],"5":[],"6":[],"7":[],"8":[],"9":[],"10":[],"11":[],"12":[],"13":[],"14":[],"15":[],"16":[],"17":[],"18":[],"19":[],"20":[],"21":[],"22":[],"23":[],"24":[],"25":[],"26":[],"27":[],"28":[],"29":[],"30":[],"31":[],"32":[],"33":[],"34":[],"35":[],"36":[],"37":[],"38":[],"39":[],"40":[],"41":[],"42":[],"43":[],"44":[],"45":[],"46":[],"47":[],"48":[],"49":[],"50":[],"51":[],"52":[],"53":[],"54":[],"55":[],"56":[],"57":[],"58":[],"59":[],"60":[],"61":[],"62":[],"63":[],"64":[],"65":[],"66":[],"67":[],"68":[],"69":[],"70":[],"71":[],"72":[],"73":[],"74":[],"75":[],"76":[],"77":[],"78":[],"79":[],"80":[],"81":[],"82":[],"83":[],"84":[],"85":[],"86":[],"87":[],"88":[],"89":[],"90":[],"91":[],"839781960":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429561861","body":" 思路；返回数组转换为字符串相加的结果，转换回数组\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> list = new ArrayList<>(); // 创建一个空的结果列表\r\n        int i = num.length - 1; // 从最高位开始处理\r\n        while (i >= 0 || k > 0) { // 如果num数组没有处理完或者k不为0\r\n            if (i >= 0) { // 如果num数组还有数\r\n                k += num[i]; // 将num[i]加到k中\r\n                i--; // 指向下一个num的下标\r\n            }\r\n            list.add(0, k % 10); // 将k的最低位添加到结果列表的最前面\r\n            k /= 10; // 去掉k的最低位\r\n        }\r\n        return list; // 返回结果列表\r\n    }\r\n}\r\n//时间空间复杂度O(N)\r\n\r\nclass Solution2 {\r\n    public static List<Integer> addToArrayForm(int[] num, int k) {\r\n        StringBuffer sb = new StringBuffer(); // 创建一个可变的字符串缓冲区\r\n        for (int i=0;i<num.length;i++) { // 遍历num数组\r\n            sb.append(num[i]); // 将num数组中的数添加到字符串缓冲区中\r\n        }\r\n        BigDecimal bg = new BigDecimal(sb.toString()).add(new BigDecimal(k)); // 将字符串缓冲区中的数和k相加\r\n        String countStr = bg.toString(); // 将相加的结果转换为字符串\r\n        List<Integer> list = new ArrayList<>(); // 创建一个空的结果列表\r\n        for (int i=0;i<countStr.length();i++) { // 遍历相加后的结果字符串\r\n            list.add(Integer.parseInt(String.valueOf(countStr.charAt(i)))); // 将结果字符串中的数添加到结果列表中\r\n        }\r\n        return list; // 返回结果列表\r\n    }\r\n}\r\n时间空间复杂度O(N)\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431409004","body":"思路，但是错了\r\n//输出距离每个字母最近的e的下标->输入字串s,字符e。\r\n```java\r\nclass Solution{\r\n    public int[] shortestToChar(String s, char c) {\r\n        ArrayList<Integer> lst = new ArrayList<>();\r\n        int[] rt = new int[s.length()];\r\n        //得到arr\r\n        for (int i = 0; i < s.length(); i++) {\r\n            if (s.charAt(i) == c) {\r\n                lst.add(i);\r\n            }\r\n        }\r\n        //遍历一遍\r\n        //遍历每个'e'字符3,5,611\r\n        for (int i = 0; i < lst.size(); i++) {\r\n            int e = lst.get(i); // 当前遍历到的'e'字符的下标\r\n            int j = e; // 初始化j为当前'e'字符的下标\r\n            while (j >= 0) {\r\n                int dist = e - j; // 计算当前字符到当前'e'字符的距离\r\n                // 如果rt[j]为0，说明当前位置之前没有出现过'e'字符，需要直接记录距离\r\n                // 或者当前位置到当前'e'字符的距离小于rt[j]，说明当前位置到当前'e'字符更近，需要更新rt[j]\r\n                if (rt[j] == 0 || dist < rt[j]) {\r\n                    rt[j] = dist; // 更新rt[j]为当前位置到当前'e'字符的距离\r\n                } else {\r\n                    break; // 如果当前位置到当前'e'字符的距离已经不再递减，说明已经找到最近的'e'字符，可以跳出循环\r\n                }\r\n                j--; // 继续向左遍历字符\r\n            }\r\n            j = e + 1; // 将j重置为当前'e'字符下标的下一个位置\r\n            while (j < s.length()) {\r\n                int dist = j - e; // 计算当前字符到当前'e'字符的距离\r\n                // 如果rt[j]为0，说明当前位置之前没有出现过'e'字符，需要直接记录距离\r\n                // 或者当前位置到当前'e'字符的距离小于rt[j]，说明当前位置到当前'e'字符更近，需要更新rt[j]\r\n                if (rt[j] == 0 || dist < rt[j]) {\r\n                    rt[j] = dist; // 更新rt[j]为当前位置到当前'e'字符的距离\r\n                } else if (dist == rt[j] && j < e) {\r\n                    // 当距离相等时，选择左边的字符\r\n                    rt[j] = dist;\r\n                    break;\r\n                } else {\r\n                    break; // 如果当前位置到当前'e'字符的距离已经不再递增，说明已经找到最近的'e'字符，可以跳出循环\r\n                }\r\n                j++; // 继续向右遍历字符\r\n            }\r\n        }\r\n        return rt;\r\n    }\r\n    \r\n} \r\n优化\r\n\r\n//给定一个字符串S和一个字符C，返回一个整数数组，其中每个元素表示字符C在字符串S中的距离。\r\nclass Solution {\r\n    public int[] shortestToChar(String s, char c) {\r\n        // 创建int型数组rt，用于存放最终的距离结果\r\n        int[] rt = new int[s.length()];\r\n        // 遍历字符串S\r\n        for (int i = 0; i < s.length(); i++) {\r\n            // 如果字符S中当前字符等于目标字符C，距离为0\r\n            if (s.charAt(i) == c) {\r\n                rt[i] = 0;\r\n            }\r\n            // 否则以当前字符为中心，从左右向外扩散查找，直到找到目标字符C\r\n            else {\r\n                int j = i - 1; // 左边字符的位置\r\n                int k = i + 1; // 右边字符的位置\r\n                while (j >= 0 || k < s.length()) {\r\n                    // 如果左边字符的位置不越界且字符等于目标字符C，距离为当前字符和目标字符之间的距离\r\n                    if (j >= 0 && s.charAt(j) == c) {\r\n                        rt[i] = i - j;\r\n                        break;\r\n                    }\r\n                    // 如果右边字符的位置不越界且字符等于目标字符C，距离为当前字符和目标字符之间的距离\r\n                    else if (k < s.length() && s.charAt(k) == c) {\r\n                        rt[i] = k - i;\r\n                        break;\r\n                    }\r\n                    // 否则继续向外扩散查找\r\n                    j--;\r\n                    k++;\r\n                }\r\n            }\r\n        }\r\n        // 返回查找结果\r\n        return rt;\r\n    }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433295829","body":"//思路inc栈底的 k 个元素的值都增加 val 。如果栈中元素总数小于 k ，则栈中的所有元素都增加 val\n```java\nclass Solution{\n    class CustomStack {\n        int maxSize;\n        int [] stk;\n        int top;\n\n        public CustomStack(int maxSize) {\n            this.maxSize = maxSize;\n            stk = new int[maxSize];\n            top = -1;\n        }\n        \n        public void push(int x) {\n            if(top<maxSize-1){\n                stk[++top]=x;\n            }\n        }\n        \n        public int pop() {\n            if(top<=0){\n                return -1;\n            }else{\n                int res = stack[top];\n                top--;\n                return res;\n            }\n        }\n        \n        public void increment(int k, int val) {\n            int l = Math.min(k,top+1);//1 <= maxSize, x, k <= 1000 \n            for(int i =0;i<l;i++){\n                stk[i] = stk[i]+val;\n            }\n        }\n    }\n} \n```\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"954545647":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1428935968","body":"### 思路\n\n逐位相加，从最后一位开始加起来，需要额外考虑剩余 1 的情况\n\n### 代码\n\n```javascript\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function (num, k) {\n  let i = num.length - 1;\n  let res = [];\n  let carry = 0;\n  while (i >= 0 || k !== 0) {\n    const a = i >= 0 ? num[i] : 0;\n    const b = k !== 0 ? k % 10 : 0;\n    const sum = a + b + carry;\n    carry = sum >= 10 ? 1 : 0;\n    res.push(sum % 10);\n    // 更新边界条件\n    k = Math.floor(k / 10);\n    i--;\n  }\n  if (carry) res.push(carry);\n  return res.reverse();\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430709353","body":"### 思路\n\n先记录 S 中存在字符 C 的位置，然后二次 for 循环去遍历\n\n### 代码\n\n```javascript\nvar shortestToChar = function (S, C) {\n  // 记录 C 字符在 S 字符串中出现的所有下标\n  var hasCArr = [];\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === C) hasCArr.push(i);\n  }\n\n  // 结果数组 res\n  var res = Array(S.length).fill(Infinity);\n\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === C) {\n      res[i] = 0;\n      continue;\n    }\n\n    // 非目标字符，到下标数组中找最近的下标\n    for (const cIndex of hasCArr) {\n      const dist = Math.abs(cIndex - i);\n      if (dist >= res[i]) break;\n      res[i] = dist;\n    }\n  }\n  return res;\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432293551","body":"### 思路\r\n\r\n根据要求写代码\r\n\r\n### 代码\r\n\r\n```javascript\r\n/**\r\n * @param {number} maxSize\r\n */\r\nvar CustomStack = function (maxSize) {\r\n  this.maxSize = maxSize;\r\n  this.list = [];\r\n};\r\n\r\n/**\r\n * @param {number} x\r\n * @return {void}\r\n */\r\nCustomStack.prototype.push = function (x) {\r\n  const len = this.list.length;\r\n  if (len >= this.maxSize) return;\r\n  this.list.push(x);\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nCustomStack.prototype.pop = function () {\r\n  const len = this.list.length;\r\n  if (len === 0) return -1;\r\n  return this.list.pop();\r\n};\r\n\r\n/**\r\n * @param {number} k\r\n * @param {number} val\r\n * @return {void}\r\n */\r\nCustomStack.prototype.increment = function (k, val) {\r\n  const maxVal = Math.min(k, this.list.length);\r\n  for (let i = 0; i < maxVal; i++) {\r\n    this.list[i] += val;\r\n  }\r\n};\r\n\r\n/**\r\n * Your CustomStack object will be instantiated and called as such:\r\n * var obj = new CustomStack(maxSize)\r\n * obj.push(x)\r\n * var param_2 = obj.pop()\r\n * obj.increment(k,val)\r\n */\r\n```\r\n\r\n**复杂度分析**\r\n\r\n- 时间复杂度：push、pop：O(1) increment:O(N)。\r\n- 空间复杂度：O(maxSize)\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"1541732340":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"michaelxi3":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"darknightwriter":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"findlayzhou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"laofuwf":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lbc546":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zch-bit":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"frankelzeng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xingzhaodev":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joeymoso":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hackbl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"q815101630":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shiyishuoshuo":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429017592","body":"class Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        //用LinkedList不断从头将位数和加入index 0\n        List<Integer> res = new LinkedList<>();\n        int n = num.length;\n        for (int i = n - 1; i >= 0; i--) {\n            //从末尾往前扫，加和取余的值\n            res.add(0, (num[i] + k) % 10);\n            //更新k存进位carry\n            k = (num[i] + k) / 10;\n        }\n\n        // post-possing: 处理k位数大于num的情况剩下的部分\n        // Time = O(log(k))\n        while (k > 0) {\n            res.add(0, k % 10);\n            k /= 10;\n        }\n\n        return res;\n    }\n}","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aouos":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"thinkfurther":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wengzhouyunfan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"whisht":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bzlff":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zzzkains":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chenmengyu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"uancen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nuomituxedo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhongranherz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gr52":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hydelovegood":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nikojxie":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429253540","body":"### 思路：\r\n逐位相加 进位+1\r\n\r\n### 代码：\r\n```javascript\r\nvar addToArrayForm = function(num, k) {\r\n  const result = []\r\n  let index = num.length - 1, overTen = false, current = 0\r\n  while(index >=0 || k > 0 || overTen) {\r\n    current = (num[index] || 0) + (k % 10 || 0) + overTen\r\n    result.unshift(current % 10)\r\n    index--\r\n    k = Math.floor(k / 10)\r\n    overTen = current >= 10\r\n  }\r\n  return result\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430684438","body":"### 思路\n遍历每一个字符，再用两个指针同时遍历其左右的字符，找到就退出循环\n\n### 代码\n```javascript\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function(s, c) {\n  const answer = new Array(s.length)\n  for(let index = 0; index < s.length; index ++) {\n    const str = s[index]\n    let left = index, right = index + 1\n    while(left >= 0 || right < s.length) {\n      if(s[left] === c) {\n        answer[index] = index - left\n        break\n      }\n      if(s[right] === c) {\n        answer[index] = right - index\n        break\n      }\n      left --\n      right ++\n    }\n  }\n  return answer\n};\n```\n\n### 复杂度\n- 时间复杂度： O(n^2)\n- 空间复杂度： O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432557533","body":"### 思路\n定义一个数组和一个maxSize，push和pop时判断边界，increament时遍历加value\n\n### 代码\n```javascript\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n  this.stack = []\n  this.size = maxSize\n};\n\n/**\n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n  if(this.stack.length < this.size) {\n    this.stack.push(x)\n  }\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n  if(this.stack.length) {\n    return this.stack.pop()\n  }\n  return -1\n};\n\n/**\n * @param {number} k\n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n  k = Math.min(k, this.stack.length)\n  for(let i = 0; i < k; i++) {\n    this.stack[i] += val\n  }\n};\n\n```\n\n### 复杂度\n- 时间复杂度：O(min(k, size))\n- 空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fangxianshen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jokertzw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cyang258":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kernelsue":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"erikahuang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kuang-mou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"iloveqier":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"duke-github":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429027822","body":"# 思路\n\t原地计算 数组num倒序加上k的和的余数作为num的每一位 循环中k/10参与下一次计算 将num放到list中 对于k的长度大于num长度的 继续将k剩余的长度一次添加到list头的位置上  \n# 算法复杂度\n\t时间复杂度 O(max(n,log k)) 空间复杂度O(max(n,log k)) n为数组长度 k为参数k\n# 代码\n\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> ans = new ArrayList<>();\n        int carry = k;\n        for (int i = num.length - 1; i >= 0&&carry != 0; i--) {\n            int sum = num[i] + carry;\n            carry = sum / 10;\n            num[i]=sum%10;\n        }\n        for(int i:num){\n            ans.add(i);\n        }\n        while (carry > 0) {\n            ans.add(0, carry % 10);\n            carry = carry / 10;\n        }\n        return ans;\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430646933","body":"# 思路\n\t一次遍历 回头赋值\n# 复杂度\n\t时间复杂度 O(n) 空间复杂度 O(1)\n# 代码\n```java\nclass Solution {\n    public static int[] shortestToChar(String s, char c) {\n        int index = s.length(), i = -1;\n        int[] ans = new int[s.length()];\n        for (char a : s.toCharArray()) {\n            i++;\n            if (a == c) {\n                //当前下标的字母为标记字母\n                ans[i] = 0;\n                int k = i;\n                index = i;\n                //向前遍历 直到数组中某位的值＜当前位置和该值下标的差\n                while (k >= 1 && ans[--k] > i - k) {\n                    ans[k] = i - k;\n                }\n            }\n            ans[i] = Math.abs(i - index);\n        }\n        return ans;\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432667078","body":"# 思路\n\t使用额外的数组存储increment需要增加的值和下标，在输出的时候增加这个值\n# 复杂度\n\t时间复杂度O(1) 空间复杂度O(maxSize)\n# 代码\n```java\nclass CustomStack {\n        int[] ans;\n        int index = 0;\n        int[] incres;\n\n        public CustomStack(int maxSize) {\n            ans = new int[maxSize];\n            incres = new int[maxSize];\n        }\n\n        public void push(int x) {\n            if (index < ans.length) {\n                ans[index++] = x;\n            }\n\n        }\n\n        public int pop() {\n            if (index <= 0) {\n                return -1;\n            }\n            int k = ans[--index] + incres[index];\n            if (index > 0) {\n                incres[index - 1] += incres[index];\n            }\n            incres[index] = 0;\n            return k;\n        }\n\n        public void increment(int k, int val) {\n            int temp = Math.min(k-1 , index - 1);\n            if(temp<0){\n                return;\n            }\n            incres[temp] += val;\n        }\n}\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"caterpillar-0":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ashleyyma6":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuki-yzy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zpc7":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yujian920":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kiirii4":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ucashurui":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xixiao51":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"feikerwu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"heng518":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yaya-bb":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tlntin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"richypang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fenchuiyun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jerry-lllman":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nickyk319":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"herbertpan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wsmmxmm":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fan-svg":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuzejia":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sunnyyujf":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"phoenixflyingsky":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nehchsuy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lzyxts":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"elainekuo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ll491119940":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"2learnsomething":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ataraxyadong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wzasd":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miluowzt":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"maylinglin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"weijie-he":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"brodxie":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"y525":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"leungogogo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"suukii":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429156559","body":"- Time: $O(N)$ N is the length of the input array\r\n- Space: $O(1)$ No extra space is used except the returned array.\r\n\r\n```typescript\r\nfunction addToArrayForm(num: number[], k: number): number[] {\r\n    const res = Array(num.length);\r\n\r\n    for (let read = num.length - 1, write = 0; read >= 0; read--, write++) {\r\n        res[write] = (num[read] + k) % 10;\r\n        k = ((num[read] + k) / 10) >> 0;\r\n    }\r\n\r\n    while (k > 0) {\r\n        res.push(k % 10);\r\n        k = (k / 10) >> 0;\r\n    }\r\n\r\n    res.reverse();\r\n    return res;\r\n};\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1432547572","body":"- Time: $O(N)$\r\n- Space: $O(N)$\r\n```tsx\r\nfunction shortestToChar(s: string, c: string): number[] {\r\n    const dist = Array(s.length).fill(0);\r\n\r\n    for (let i = 0; i < s.length; i++) {\r\n        if (s[i] === c) dist[i] = 0;\r\n        else dist[i] = (dist[i - 1] ?? Infinity) + 1;\r\n    }\r\n\r\n    for (let i = s.length - 2; i >= 0; i--) {\r\n        dist[i] = Math.min(dist[i], dist[i + 1] + 1);\r\n    }\r\n\r\n    return dist;\r\n};\r\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432600245","body":"|operation|Time|Space|\r\n|-|-|-|\r\n|`push`|$O(1)$|$O(1)$|\r\n|`pop`|$O(1)$|$O(1)$|\r\n|`increment`|$O(1)$|$O(1)$|\r\n\r\n```tsx\r\nclass CustomStack {\r\n  private maxSize_: number;\r\n  private top_: number = -1;\r\n  private nums_: number[];\r\n  private inc_: number[];\r\n  constructor(maxSize: number) {\r\n    this.maxSize_ = maxSize;\r\n    this.nums_ = Array(maxSize);\r\n    this.inc_ = Array(maxSize).fill(0);\r\n  }\r\n\r\n  push(x: number): void {\r\n    if (this.top_ === this.maxSize_ - 1) return;\r\n    this.nums_[++this.top_] = x;\r\n  }\r\n\r\n  pop(): number {\r\n    if (this.top_ < 0) return -1;\r\n\r\n    const num = this.nums_[this.top_];\r\n    const inc = this.inc_[this.top_];\r\n    this.inc_[this.top_ - 1] += inc;\r\n    this.inc_[this.top_] = 0;\r\n    this.top_--;\r\n\r\n    return num + inc;\r\n  }\r\n\r\n  increment(k: number, val: number): void {\r\n    k = Math.min(k - 1, this.top_);\r\n    if (k < 0) return;\r\n    this.inc_[k] += val;\r\n  }\r\n}\r\n```\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mirrors-cl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xqy97":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jakkiabc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckyoneday":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429672378","body":"## 代码\r\n\r\n```js\r\nvar addToArrayForm = function (num, K) {\r\n    const len = num.length || 0;\r\n    let numK = K;\r\n    const result = [];\r\n\r\n    for (let i = len - 1; i >= 0; i--) {\r\n        const a = num[i];\r\n        const b = numK % 10;\r\n       \r\n        let total = a + b;\r\n        numK = total >= 10 ? parseInt(numK / 10) + 1 : parseInt(numK / 10);\r\n        result[i] = total % 10;\r\n    }\r\n    while (numK > 0) {\r\n        result.unshift(numK % 10);\r\n        numK = parseInt(numK / 10);\r\n    }\r\n\r\n    return result;\r\n}\r\n```\r\n\r\n## 复杂度\r\n\r\n- 时间复杂度 O(n)\r\n- 空间复杂度 O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431427337","body":"## 代码\r\n\r\n```js\r\nvar shortestToChar = function(s, c) {\r\n  const tempArr = [];\r\n  const len = s.length;\r\n  let idx = -1;\r\n  for (let i = 0; i < len; i++) {\r\n    if (s[i] === c) {\r\n      idx = i;\r\n      tempArr[i] = 0;\r\n    } else if (idx === -1) {\r\n      tempArr[i] = Infinity;\r\n    } else {\r\n      tempArr[i] = i - idx;\r\n    }\r\n  }\r\n\r\n  idx = Infinity;\r\n  for (let i = len - 1; i > -1; i--) {\r\n    const val = tempArr[i];\r\n\r\n    if (s[i] === c) {\r\n      idx = i;\r\n    } else if (val > idx - i) {\r\n      tempArr[i] = idx - i ;\r\n    }\r\n  }\r\n\r\n  return tempArr;\r\n};\r\n```\r\n\r\n## 时间复杂度\r\n\r\n- 空间复杂度O(n)\r\n- 时间复杂度O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433027322","body":"## 代码\r\n\r\n```js\r\n/**\r\n * @param {number} maxSize\r\n */\r\n var CustomStack = function(maxSize) {\r\n  this.stack = [];\r\n  this.size = maxSize;\r\n};\r\n\r\n/** \r\n * @param {number} x\r\n * @return {void}\r\n */\r\nCustomStack.prototype.push = function(x) {\r\n  if (this.stack.length < this.size) {\r\n    this.stack.push(x);\r\n  }\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nCustomStack.prototype.pop = function() {\r\n  if (this.stack.length === 0) {\r\n    return -1;\r\n  } else {    \r\n    return this.stack.pop();\r\n  }\r\n};\r\n\r\n/** \r\n * @param {number} k \r\n * @param {number} val\r\n * @return {void}\r\n */\r\nCustomStack.prototype.increment = function(k, val) {\r\n  const len = k > this.stack.length ? this.stack.length : k;\r\n  for (let i = 0; i < len; i++) {\r\n    this.stack[i] += val;\r\n  }\r\n};\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chouqin99":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhaogeg111":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shawnhu23":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ye2222":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"uyplayer":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guixian001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"serena9":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"junzmer":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hx-code":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"admu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xxiaomm":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pgquestions":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"eldinzhou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jiangwenzhe":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shawnwu6688":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tomtao626":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aiweng1981":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"richard-lime":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"acoada":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"duanyaqi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ccslience":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429633422","body":"```\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& nums, int k)\r\n    {\r\n        stack<int> data;\r\n        int tmp;\r\n        int flag = 0;\r\n        for(int i = nums.size() - 1; i > -1; i--)\r\n        {\r\n            tmp = nums[i];\r\n            if(k > 0)\r\n            {\r\n                tmp += k % 10;\r\n                k = k / 10;\r\n            }\r\n            tmp += flag;\r\n            data.push(tmp % 10);\r\n            flag = tmp / 10;\r\n        }\r\n        while(k > 0)\r\n        {\r\n            tmp = flag + k % 10;\r\n            k = k / 10;\r\n            data.push(tmp % 10);\r\n            flag = tmp / 10;\r\n        }\r\n        if(flag)\r\n            data.push(flag);\r\n        vector<int> res;\r\n        while(data.size())\r\n        {\r\n            res.push_back(data.top());\r\n            data.pop();\r\n        }\r\n        return res;\r\n    }\r\n};\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431591552","body":"```\r\n###思路\r\n\r\n看解题思路，左右个遍历一次，分别记录距离，然后对比大小\r\n\r\n###代码\r\n\r\nclass Solution {\r\n    public int[] shortestToChar(String s, char c) {\r\n        int count = s.length();\r\n        int[] ans = new int[n];\r\n        Arrays.fill(ans, count + 1);\r\n        for (int i = 0, j = -1; i < count; i++) {\r\n            if (s.charAt(i) == c) j = i;\r\n            if (j != -1) ans[i] = i - j;\r\n        }\r\n        for (int i = count - 1, j = -1; i >= 0; i--) {\r\n            if (s.charAt(i) == c) j = i;\r\n            if (j != -1) ans[i] = Math.min(ans[i], j - i);\r\n        }\r\n        return ans;\r\n    }\r\n}\r\n###复杂度分析\r\n\r\n时间复杂度 ：O(n)\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433285487","body":"```\r\nclass CustomStack {\r\n\r\n    int[] arr;\r\n    int tail = -1;\r\n\r\n    public CustomStack(int maxSize) {\r\n        arr = new int[maxSize];\r\n    }\r\n    \r\n    public void push(int x) {\r\n        if(tail == arr.length - 1) {\r\n            return;\r\n        }\r\n        arr[++tail] = x;\r\n    }\r\n    \r\n    public int pop() {\r\n        if(tail == -1) {\r\n            return -1;\r\n        }\r\n        return arr[tail--];\r\n    }\r\n    \r\n    public void increment(int k, int val) {\r\n        for(int i = 0; i < Math.min(k, arr.length); i++) {\r\n            arr[i] += val;\r\n        }\r\n    }\r\n}\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kaiykk":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cachezhou0617":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangtuo1999":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cytrue":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckyryan-web":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"naomiwufzz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liuajingliu":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429623057","body":"#### 解题思路\n  1. 低位到高位逐位将数字加在一起\n  2. 若加法的结果大于等于 1010，把进位的 11 加入到下一位的计算中\n\n\n#### 代码实现\n\n```\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n    const res = [];\n    const n = num.length;\n    for (let i = n - 1; i >= 0; --i) {\n        let sum = num[i] + k % 10;\n        k = Math.floor(k / 10);\n        if (sum >= 10) {\n            k++;\n            sum -= 10;\n        }\n        res.push(sum);\n    }\n    for (; k > 0; k = Math.floor(k / 10)) {\n        res.push(k % 10);\n    }\n    res.reverse();\n    return res;\n};\n```\n#### 复杂度分析\n- 时间复杂度: O(max(n,logk), 其中 nn 为数组的长度\n- 空间复杂度: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431493869","body":"#### 解题思路\n- 从当前下标出发，分别向左、右两个方向去寻找目标字符 C。\n- 如果只在一个方向找到，直接计算字符距离。\n- 如果两个方向都找到，取两个距离的最小值\n\n#### 代码实现\n\n```\n/**\n * @param {string} S\n * @param {character} C\n * @return {number[]}\n */\nvar shortestToChar = function (S, C) {\n  const res = Array(S.length).fill(0);\n\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === C) continue;\n    // 定义两个指针 l, r 分别向左、右两个方向寻找目标字符 C，取最短距离\n    let l = i,\n      r = i,\n      shortest = Infinity;\n\n    while (l >= 0) {\n      if (S[l] === C) {\n        shortest = Math.min(shortest, i - l);\n        break;\n      }\n      l--;\n    }\n\n    while (r < S.length) {\n      if (S[r] === C) {\n        shortest = Math.min(shortest, r - i);\n        break;\n      }\n      r++;\n    }\n\n    res[i] = shortest;\n  }\n  return res;\n};\n```\n#### 复杂度分析\n- 时间复杂度：$O(N^2)$，N 为 S 的长度，两层循环。\n- 空间复杂度：$O(1)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433182188","body":"### 思路\n  用数组模拟栈，用数组原生方法pop、push方法实现\n  \n### 代码\n\n```\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n  this.maxSize = maxSize;\n  this.stack = [];\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n  if (this.stack.length >= this.maxSize) {\n    return;\n  }\n  this.stack.push(x);\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n  return this.stack.length ? this.stack.pop() : -1;\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n  const length = Math.min(k, this.stack.length);\n  for (let i = 0; i < length; i++) {\n    this.stack[i] += val;\n  }\n};\n```\n### 复杂度\n- 时间复杂度 \n\n  push: O(1)\n\n  pop：O(1)\n  \n  increment：O(K) \n \n- 空间复杂度：O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miss1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"johnxizhao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"incipe-win":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"revisegoal":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckysq999":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dereklisdr":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"perfqi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mryao1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"likeyousmile":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhg1992":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liquanluo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aq666888":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"samlu-ecnu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhongxiangxiang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hatorimain":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429112268","body":"# 解法思路1:\r\n\r\n这题本质上就像做加法一样。我们先用linkedlist来存结果，因为往链表头加一个数的操作是O(1)\r\n\r\n`num = [1,2,0,0], k = 34`\r\n\r\n可以当作 num的最后一位加了34。然后我们保留它的最后一位，也就是往我们的结果数组里面add一个(nums[i] + k) % 10。\r\n\r\n然后num[i - 1]的前面一位要进位。这个要进的位就是 34/10的结果。这里是3。\r\n\r\n然后我们一直进行这个操作直到遍历完整个数组。这里有个问题就是k本身的长度可能比num的数组长度大。所以如果k>0（说明k没加完）。我们继续把k % 10，结果加到res数组里。然后再k/10进位。\r\n\r\n## 注意要点：\r\n注意k可能本身的长度比num长。\r\n\r\n这道题空间复杂度是O(1)因为只有返回的数组占了空间复杂度。算法本身没有用任何辅助的数据结构。\r\n\r\n## 复杂度：\r\n\r\n时间：$O(n)$\r\n\r\n（O(k)，K是k的位数))\r\n\r\n空间：$O(1)$\r\n\r\n## 第一次自己写的代码：\r\n\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        LinkedList<Integer> tmp = new LinkedList<>();\r\n        for(int i = num.length - 1; i >= 0; i--) {\r\n            num[i] += k;\r\n            tmp.addFirst(num[i] % 10);\r\n            k = num[i] / 10;\r\n        }\r\n        while(k > 0) {\r\n            tmp.addFirst(k % 10);\r\n            k = k / 10;\r\n        } \r\n        List<Integer> res = new ArrayList<>(tmp);\r\n        return res;\r\n    \r\n    }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430140762","body":"# 解法思路1:\n\n## 注意要点：\n\n这题先指针从左扫到右，再从右扫到左，把初始index设成一个很大的负值（这里设了20000是因为长度最大值是10000）。这里不能设Integer.MIN_VALUE因为之后会overflow。  \n\n计算从左往右时每个字符到字符c的距离。遇到第一个之前距离都是非常大。\n\n扫完以后再从右往左扫，比较这个新的距离跟原来的距离哪个更小，这里注意index要设成一个正的很大的数，因为这样遇到第一个c之前右边的结果产生的数都会非常大，通过和原来的res[i]比较能得到正确的值。\n\n## 复杂度：\n\n时间：$O(n)$\n\n空间：$O(1)$\n\n两个for循环所以是O(n),开的数组只用来返回结果所以是O(1)\n\n## 第一次自己写的代码：\n\n```jsx\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int[] res = new int[s.length()];\n        int index = -20000;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == c) index = i;\n            res[i] = i - index;\n        }\n        index = 20000;\n        for(int i = s.length() - 1; i >= 0; i--) {\n            if(s.charAt(i) == c) index = i;\n            res[i] = Math.min(index - i, res[i]);\n        }\n        return res;\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1431936045","body":"# 题目名\r\n\r\n链接：[https://leetcode.com/problems/design-a-stack-with-increment-operation/description/](https://leetcode.com/problems/design-a-stack-with-increment-operation/description/)\r\n\r\n# 解法思路1:\r\n\r\n一开始global声明一个stack和一个increment数组。\r\n\r\n用stack的好处是不用多加一个变量来记录栈现在的size，不容易出错。\r\n\r\nincrement数组用来记录增加前几个index范围的值。\r\n\r\n比如increment[2]用来增加index [0, 2]范围的值\r\n\r\n实现push操作很简单。就是栈当前的size只要小于maxSize，就push。\r\n\r\nincrement数组用来增加数组[0, k - 1]范围的值。\r\n\r\n如果increment(k, val)了。那么我们就让i = Math.min(k, stack.size()) - 1。\r\n\r\nincrement[i] += val\r\n\r\n如果这时i < 0，说明没有区间的值让我们增加，不操作。\r\n\r\npop的时候同理。我们弹出栈顶的值，此时i = stack.size() - 1。\r\n\r\n此时增量操作过的栈顶实际的值应该是 increment[i] + stack.pop()\r\n\r\n因为我们已经加上了increment[i]的值。所以increment[i]清零。\r\n\r\nincrement[i - 1] += increment[i];\r\n\r\n然后返回increment[i] + stack.pop()\r\n\r\n优化的话可以把increment用一个linkedlist来维护，这样remove和add的操作都是1.空间复杂度最多是当前stack的size。\r\n\r\n## 注意要点：\r\n\r\n感觉这题的思路挺简单的就是前缀和实现O(1)操作，但是实际写的时候各种边界出了很多bug还de不出来。\r\n\r\n## 复杂度：\r\n\r\n时间：$O(1)$\r\n\r\n空间：$O(stackSize/N)$\r\n\r\npop, push, increment本身时间复杂度是1，但是因为我们额外要维护一个increment链表，所以平均下来空间复杂度是O(cnt/N)\r\n\r\n## 第一次自己写的代码：\r\n\r\n```java\r\nclass CustomStack {\r\n\r\n    Stack<Integer> stack;\r\n    LinkedList<Integer> increment;\r\n    int maxSize;\r\n    public CustomStack(int maxSize) {\r\n        this.maxSize = maxSize;\r\n        stack = new Stack<Integer>();\r\n        increment = new LinkedList<Integer>();\r\n        \r\n    }\r\n    \r\n    public void push(int x) {\r\n        if(stack.size() < this.maxSize) {\r\n            increment.add(0);\r\n            stack.push(x);\r\n        }\r\n    }\r\n    \r\n    public int pop() {\r\n        int i = stack.size() - 1;\r\n        if(i < 0) return -1;\r\n        if(i > 0)\r\n            increment.set(i - 1, increment.get(i) + increment.get(i - 1));\r\n        int res = increment.get(i) + stack.pop();\r\n        increment.remove(i);\r\n        return res; \r\n        \r\n    }\r\n    \r\n    public void increment(int k, int val) {\r\n        int i = Math.min(stack.size(), k) - 1;\r\n        if(i >= 0)\r\n            increment.set(i, increment.get(i) + val);\r\n    }\r\n}\r\n\r\n/**\r\n * Your CustomStack object will be instantiated and called as such:\r\n * CustomStack obj = new CustomStack(maxSize);\r\n * obj.push(x);\r\n * int param_2 = obj.pop();\r\n * obj.increment(k,val);\r\n */\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"neado":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaojunjun1110":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wxleah":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sunl1ght":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kerrhl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"orangejuz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"flyzenr":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"c1f2h3":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dlm001128":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liuxy94":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aconcert":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"linjunhe":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hyqqq22":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yibenxiao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"elon-lau":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nowkizzz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gsgtgyb":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"irenia111":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"suiyi8760":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"saltychess":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rabbit2010520":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ellie-wu05":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yopming":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckytwj":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zzz607":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zoulufeng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xxoojs":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"okkband":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wyz999":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hacker90":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ricjli":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luhaoling":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"flaming-cl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gelxgx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gaominghao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jessie725":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lsunxh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lanceli424":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qycoder":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qilin88":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hengheng-yun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"smz1995":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"size-of":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1428989759","body":"var addToArrayForm = function(num, k) {\n  let i = num.length - 1, list = []\n\n  n = 0\n  while (i >= 0 || k > 0 || n) {\n    let a = num[i] || 0, b = k % 10\n\n    let res = a + b + n\n    n = res / 10 | 0\n    k = k / 10 | 0\n    i--\n\n    list.push(res % 10)\n  }\n\n  return list.reverse()\n};\n时间复杂度：O(n), 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430628438","body":"/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function(s, c) {\n  const res = new Array(s.length).fill(Infinity)\n  for (let i = 0; i < s.length; i++) {\n    res[i] = s.substr(i, 1) === c ? 0 : (res[i - 1] != undefined ? res[i - 1] : Infinity) + 1\n  }\n\n  for (let i = s.length - 1; i >= 0; i--) {\n    let prev = res[i + 1] !== undefined ? res[i + 1] : Infinity\n    res[i] = prev + 1 < res[i] ? prev + 1 : res[i]\n  }\n\n  return res\n};\n时间复杂度O(n),空间复杂度O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432299251","body":"/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n    this.maxSize = maxSize\n    this.stack = []\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if (this.stack.length >= this.maxSize) return\n    this.stack.push(x)\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    if (!this.stack.length) return -1\n    return this.stack.pop()\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    let n = this.stack.length < k ? this.stack.length : k\n\n    for (let i = n - 1; i >= 0; i--) {\n        this.stack[i] += val\n    }\n};\n时间复杂度：push: O(1), pop: O(1), increment: O(n). 空间复杂度：O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"moyuanhua":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"9vivian88":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guxuehua":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kirosola":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"biscuit279":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"maoting":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"youzhaing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jawn-ha":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hanwangxxx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dujt-x":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"degndaixingqiu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gzgzgzgzgzgz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gentleman-goodman":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xinyi-arch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zenwangzy":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429936974","body":"## 思路\n模拟计算加法的逻辑。从个位开始遍历num计算的时候，用k作为carry 的数字。最后如果还有剩余的carry数字，加到res前中。\n\n## 代码\n```python\nclass Solution: \n\tdef addToArrayForm(self, num: List[int], k: int) -> List[int]: \n\t\tn = len(num) \n\t\tcarry = total = 0 \n\t\tres = [] \n\t\ti = len(num)-1 # track digits in num \n\t\twhile i >= 0 or k != 0: \n\t\t\tx = num[i] if i >= 0 else 0 # last digit in num \n\t\t\ty = k % 10 if k != 0 else 0 # last digit in k \n\t\t\ttotal = x + y + carry \n\t\t\tcarry = total // 10 \n\t\t\tk = k // 10 # remove last digit from k \n\t\t\ti -= 1 \n\t\t\tres.append(total % 10) \n\t\t\t\n\t\tif carry != 0: \n\t\t\tres.append(carry) \n\t\treturn res[::-1]\n```\n## 复杂度分析\n\n时间: O(N), n is max (len(num), k )\n\n空间: O(N), n is number of digits we processed in the while loop and the space in the res array","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"andyyxw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fourierhai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yangz001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mannnn6":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"haoyangxie":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chjillout":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wenjialu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mhcn":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"coconutice":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jackgaoyuan":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1428999601","body":"```\r\nfunc addToArrayForm(num []int, k int) []int {\r\n\tkstr := strconv.Itoa(k)\r\n\tvar kArr []int\r\n\tvar res []int\r\n\tvar sum, reminder, carry int\r\n\tfor i := 0; i < len(kstr); i++ {\r\n\t\tv, _ := strconv.Atoi(string(kstr[i]))\r\n\t\tkArr = append(kArr, v)\r\n\t}\r\n\treverseSlice(kArr)\r\n\treverseSlice(num)\r\n\tfor i, j := 0, 0; i < len(num) || j < len(kArr); {\r\n\t\tif i >= len(num) { // num out of index\r\n\t\t\tsum = carry + kArr[j]\r\n\t\t\tj++\r\n\t\t} else if j >= len(kArr) { // kArr out of index\r\n\t\t\tsum = carry + num[i]\r\n\t\t\ti++\r\n\t\t} else { // num and kArr are both in range\r\n\t\t\tsum = carry + num[i] + kArr[j]\r\n\t\t\ti++\r\n\t\t\tj++\r\n\t\t}\r\n\t\tcarry = sum / 10\r\n\t\treminder = sum % 10\r\n\t\tres = append(res, reminder)\r\n\t}\r\n\tif carry > 0 {\r\n\t\tres = append(res, carry)\r\n\t}\r\n\treverseSlice(res)\r\n\treturn res\r\n}\r\n\r\nfunc reverseSlice(num []int) {\r\n\tfor i, j := 0, len(num)-1; i < j; i, j = i+1, j-1 {\r\n\t\tnum[i], num[j] = num[j], num[i]\r\n\t}\r\n}\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xingzhan0312":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yufeng727":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fontendart":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yingchehu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cobayaz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tomato-tomato":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xfliudx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"djd28176":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xilutian":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xy147":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"itsjacob":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shunanch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yppah-eb":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"raychenlei":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"woshichuanqilz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"willuuu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"christina-soda":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jia98shanliang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"user-vannnn":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tobepellucid":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"johnvsd":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yueza":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shawyuan97":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"victorhuang99":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cusanity":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jay-xzj":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shiradaone":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xinyue-ma":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"taojin1992":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joyce94":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"steven72574":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tian-pengfei":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"asuka1h":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaowangcoding":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"james0608":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kaneyang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"azl397985856":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"whgsh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chengfengfengwang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bulingbulingbuling":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"c2tr":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"eden-ye":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"codingtrains":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"starorbiting":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mo-xiaoxiu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"passengersa":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shellylcooper":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"testplm":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tom-zhouch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"skylarxu214":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"taihui":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huaxueguakele":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yang-chenyu104":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mlking15":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"-3":[],"cyonline":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rzhao010":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zywang0":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jetery":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429910267","body":"### [989. 数组形式的整数加法](https://leetcode-cn.com/problems/add-to-array-form-of-integer/)\n### 思路\n模拟竖式的加法, 得到每个数组的最低位, 从最低位开始加\\\n注意 _循环结束后_ 对进位 `t` 的判断\n### 代码 (cpp)\n```cpp\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int> a, b;\n        for (int i = num.size() - 1; i >= 0; i--) a.push_back(num[i]);\n        while (k != 0) {\n            b.push_back(k % 10);\n            k /= 10;\n        }\n        vector<int> temp;\n        int t = 0;\n        for (int i = 0; i < a.size() || i < b.size(); i++) {\n            if (i < a.size()) t += a[i];\n            if (i < b.size()) t += b[i];\n            temp.push_back(t % 10);\n            t /= 10;\n        }\n        if (t) temp.push_back(1);\n        vector<int> ans;\n        for (int i = temp.size() - 1; i >= 0; i--) ans.push_back(temp[i]);\n        return ans;\n    }\n};\n```\n**复杂度分析**\n- 时间复杂度：O(N)\n- 空间复杂度：O(N)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431533429","body":"```\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        vector<int> ans(s.size(), INT_MAX);\n        int l = s.size(), r = -1, n = s.size();\n        for (int i = 0; i < s.size(); i++) {\n            int j = n - 1 - i;\n            if (s[i] == c) l = i;\n            if (s[j] == c) r = j;\n            if (i >= l) ans[i] = min(ans[i], i - l);\n            if (j <= r) ans[j] = min(ans[j], r - j);\n        }\n        return ans;\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433192790","body":"```cpp\nclass CustomStack {\n\npublic:\n    int size = 0, max = 0;\n    vector<int> stack;\n\n    CustomStack(int maxSize) {\n        max = maxSize;\n    }\n    \n    void push(int x) {\n        if (size < max) {\n            stack.push_back(x);\n            size++;\n        }\n    }\n    \n    int pop() {\n        if (size == 0) return -1;\n        size = size - 1;\n        int ret = stack[size];\n        stack.pop_back();\n        return ret;\n    }\n    \n    void increment(int k, int val) {\n        for (int i = 0; i < size && i < k; i++) {\n            stack[i] += val;\n        }\n    }\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"klspta":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bookyue":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429838033","body":"现写的还没以前写的简洁，泪目\n\nOC: O(max(n, logk))  \nSC: O(1)\n\n```java\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> ans = new LinkedList<>();\n        int i = num.length - 1;\n        int d = 0;\n        while (i >= 0 || k > 0 || d > 0) {\n            d += (i >= 0 ? num[i] : 0) + k % 10;\n            ans.add(0, d % 10);\n            d /= 10;\n            k /= 10;\n            i--;\n        }\n\n        return ans;\n    }\n```\n\n```java\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> ans = new LinkedList<>();\n        int i = num.length - 1;\n        while (i >= 0 || k > 0) {\n            if (i >= 0) k += num[i];\n\n            ans.add(0, k % 10);\n            k /= 10;\n            i--;\n        }\n\n        return ans;\n    }\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430652958","body":"TC: O(n)  \nSC: O(1)\n\n```java\n    public int[] shortestToChar(String s, char c) {\n        int n = s.length();\n        int[] ans = new int[n];\n        Arrays.fill(ans, n);\n        for (int i = 0, j = -1; i < n; i++) {\n            if (s.charAt(i) == c) j = i;\n            if (j != -1) ans[i] = i - j;\n        }\n\n        for (int i = n - 1, j = -1; i >= 0; i--) {\n            if (s.charAt(i) == c) j = i;\n            if (j != -1) ans[i] = Math.min(ans[i], j - i);\n        }\n\n        return ans;\n    }\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432451072","body":"TC: O(1) for all operations  \nOC: O(n)\n\n```java\nclass CustomStack {\n    private final int[] stack;\n    private final int[] add;\n    private int top;\n\n    public CustomStack(int maxSize) {\n        stack = new int[maxSize];\n        add = new int[maxSize];\n        top = -1;\n    }\n\n    public void push(int x) {\n        if (top == stack.length - 1) return;\n\n        stack[++top] = x;\n    }\n\n    public int pop() {\n        if (top == -1) return -1;\n\n        int ans = stack[top] + add[top];\n        if (top > 0) add[top - 1] += add[top];\n        add[top] = 0;\n        top--;\n\n        return ans;\n    }\n\n    public void increment(int k, int val) {\n        int limit = Math.min(k - 1, top);\n        if (limit >= 0)\n            add[limit] += val;\n    }\n}\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jancerwu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"buer1121":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ceramickitten":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gg925407590":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"alyenor":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chenming-cao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ggohem":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dark-volute":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ronething":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jmastella":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429296672","body":"思路\r\n用一个addson记录需要进位的数字, 从个位开始加，每一次把 %10 存进list里面，直到addson为零\r\n\r\n代码\r\n`\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> li = new ArrayList();\r\n\r\n        int addson = k;\r\n        int index = num.length-1;\r\n\r\n        while(index>=0 || addson >0){\r\n            if(index>=0){\r\n                addson += num[index];\r\n                index--;\r\n            }\r\n            li.add(0, addson%10);\r\n            addson/=10;\r\n            \r\n        }\r\n\r\n        return li;\r\n    }\r\n}\r\n`\r\n复杂度分析\r\n\r\n时间: O(max(N, log k)), N is the length of num\r\n空间: O(max(N, log k)), N is the length of num\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430971036","body":"思路\r\n从左到右loop一遍，记录左边离他最近的character。再从右到左loop一遍记录右边离他最近的character，两者取min。\r\n\r\n代码\r\n```\r\npublic int[] shortestToChar(String s, char c) {\r\n        int[] answer = new int[s.length()];\r\n        int index = -1;\r\n        for(int i=0; i<s.length(); i++){\r\n            if(s.charAt(i) == c){\r\n                index = i;\r\n            }\r\n            if(index == -1){\r\n                answer[i] = s.length();\r\n            }else{\r\n                answer[i] = i - index;\r\n            }\r\n            //System.out.println(s.charAt(i) + \" \" + answer[i]);\r\n        }\r\n        //System.out.println(\"==================\");\r\n        for(int i=s.length()-1; i>=0; i--){\r\n            if(s.charAt(i) == c){\r\n                index = i;\r\n            }\r\n            if(index >= i){\r\n                answer[i] = Math.min(answer[i], index - i);\r\n            }\r\n            //System.out.println(s.charAt(i) + \" \" + answer[i]);\r\n        }\r\n        return answer;\r\n}\r\n```\r\n复杂度\r\n时间：O(N) N=s.length()\r\n空间：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432576668","body":"思路\r\n用int array来代表stack，new variable index来mark top of list\r\npush的时候，check有没有超过array.length\r\npop的时候，check index>=0\r\nincrement的时候，取Math.min(k, arr.length)\r\n\r\n代码\r\n```\r\nclass CustomStack {\r\n    int[] arr;\r\n    int index;\r\n    public CustomStack(int maxSize) {\r\n        arr = new int[maxSize];\r\n        index = -1;\r\n    }\r\n    \r\n    public void push(int x) {\r\n        if(index < arr.length-1){\r\n            index++;\r\n            arr[index] = x;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    public int pop() {\r\n        if(index >=0){\r\n            return arr[index--];\r\n        }\r\n        return -1;\r\n    }\r\n    \r\n    public void increment(int k, int val) {\r\n        System.out.println(k + \" \" + index);\r\n        for(int i=0; i< Math.min(k, arr.length); i++){\r\n            arr[i]+=val;\r\n        }\r\n    }\r\n}\r\n```\r\n复杂度分析\r\n\r\n时间复杂度：push、pop：O(1) increment:O(N)。\r\n空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"paopaohua":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dd2001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mayloveless":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuexi001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nineis7":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"abby-xu":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429186782","body":"合并list -> 加上k -> 拆分为list\r\n```\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        return [int(a) for a in str(int(''.join(map(str,num)))+k)]\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430833276","body":"```\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        int n = s.size(), pos = -n;\n        vector<int> res(n,n);\n        for (int i = 0; i < n; i++) {\n            if (s[i] == c) pos = i;\n            res[i] = i - pos;\n        }\n        for (int i = pos - 1; i >= 0; i--) {\n            if (s[i] == c) pos = i;\n            res[i] = min(res[i], pos - i);\n        }\n        return res;\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432418838","body":"```\nclass CustomStack {\n    vector<int> stack;\n    int n;\npublic:\n    CustomStack(int maxSize) {\n        n = maxSize;\n    }\n    \n    void push(int x) {\n        if (stack.size() == n) return;\n        if (stack.size() < n) stack.push_back(x);\n    }\n    \n    int pop() {\n        if(stack.size()==0)\n            return -1;\n        int x=stack.back();\n        stack.pop_back();\n        return x;\n    }\n    \n    void increment(int k, int val) {\n        int x=k;\n        if(stack.size()<k)\n            x=stack.size();\n        for(int i=0;i<x;i++) {\n            stack[i]+=val;\n        }\n    }\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gsw9818":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaomingshixiaotang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"snmyj":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429688195","body":"```c\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int> kvet,res;\n        while(k>=1){\n            kvet.push_back(k%10);\n            k/=10;\n        }\n        reverse(kvet.begin(),kvet.end());\n        int n=num.size(),m=kvet.size(),cnt;\n        if(n>=m){\n            cnt=0;\n            for(int i=m-1,j=n-1;i>=0;i--,j--){\n                int a=num[j]+kvet[i]+cnt;\n                if(a>=10) {\n                    res.push_back(a-10);\n                    cnt=1;\n                }\n                else {\n                    res.push_back(a);\n                    cnt=0;\n                }\n            }\n            for(int i=n-m-1;i>=0;i--){\n                int a=num[i]+cnt;\n                if(a>=10) {\n                    res.push_back(a-10);\n                    cnt=1;\n                }\n                else {\n                    res.push_back(a);\n                    cnt=0;\n                }\n            }\n        }\n        else if(n<m){\n            cnt=0;\n            for(int i=n-1,j=m-1;i>=0;i--,j--){\n                int a=num[i]+kvet[j]+cnt;\n                if(a>=10) {\n                    res.push_back(a-10);\n                    cnt=1;\n                }\n                else {\n                    res.push_back(a);\n                    cnt=0;\n                }\n            }\n            for(int i=m-n-1;i>=0;i--){\n                int a=kvet[i]+cnt;\n                if(a>=10) {\n                    res.push_back(a-10);\n                    cnt=1;\n                }\n                else {\n                    res.push_back(a);\n                    cnt=0;\n                }\n            }\n        }\n        if(cnt!=0) res.push_back(cnt);\n        reverse(res.begin(),res.end());\n        return res;\n    }\n};\n```\nT:max(m,n)+n\nS:o(n)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431233047","body":"```c\n class Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        int n=s.length();\n        \n        vector<int> res;\n        for(int i=0;i<n;i++){\n           \n            if(s[i]==c) res.push_back(0);\n            else{\n                 for(int p=1;;p++){\n                     if(i+p<n){\n                     if((s[i+p]==c)&&(i+p)<n) {\n                         res.push_back(p);\n                         break;\n                     }\n                     }\n                     if(i-p>=0){\n                    if((s[i-p]==c)&&(i-p)>=0){\n                        res.push_back(p);\n                        break;\n                    }\n                     }\n                 }\n                \n                \n            }\n            \n        }\n        return res;\n    }\n};\n```\nT:O(NlogN);\nS:O(N);","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433244386","body":"```c\r\nclass CustomStack {\r\npublic:\r\n    vector<int> s;\r\n    int len=0,maxlen;\r\n    CustomStack(int maxSize) {\r\n            maxlen=maxSize;\r\n    }\r\n    \r\n    void push(int x) {\r\n        if(len<maxlen){\r\n        s.push_back(x);\r\n        len++;\r\n        }\r\n       \r\n    }\r\n    \r\n    int pop() {\r\n        if(len>0) {\r\n          int temp=s[len-1];\r\n          s.pop_back();\r\n        \r\n        len--;\r\n        return temp;\r\n        }\r\n        return -1;\r\n    }\r\n    \r\n    void increment(int k, int val) {\r\n            if(k<=len) {\r\n                for(int i=0;i<k;i++) s[i]+=val;\r\n            }\r\n            else {\r\n                for(int i=0;i<s.size();i++) s[i]+=val;\r\n            }\r\n    }\r\n};\r\n```\r\nT：push() pop() == O(1) ; increment: O(k);\r\nS: O(N);","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"flipn9":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429974446","body":"```java\n/**\n    TC: O(max(N,logk)), N为数组的长度\n    SC: O(max(N,logk))\n*/\n\n// Method 2: 将 加数 k 整个 加入数组表示的数的最低位\n//           3 + 912 = 915, 5 留在当前这一位，将 910 / 10 = 91 以进位的形式加入下一位\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> res = new LinkedList<>();\n        int N = num.length;\n        for (int i = N - 1; i >= 0; i--){\n            int sum = num[i] + k;\n            res.add(0, sum % 10);\n            k = sum / 10;   // 更新 k 存进位 carry\n        }\n        while (k > 0) {\n            res.add(0, k % 10);\n            k /= 10;\n        }\n        return res;\n    }\n}\n\n// Method 1: 两个数拆解后 同时 从后往前逐位相加\nclass Solution1 {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> res = new LinkedList<>();\n        int N = num.length;\n        \n        int i = N - 1;\n        int sum = 0, carry = 0;\n        while (i >= 0 || k > 0) {\n            int x = i >= 0 ? num[i] : 0;\n            int y = k > 0 ? k % 10 : 0;\n            sum = x + y + carry;\n            carry = sum / 10;\n            k /= 10;\n            i--;\n            res.add(0, sum % 10);\n        }\n        \n        if (carry != 0) res.add(0, carry);\n        return res;\n    }\n}\n```\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430842233","body":"```java\n/**\n    思路:     对每一个 i 从中心扩散找最近的 C     O(n^2)\n        ==>  空间换时间, 存储所有 c 的位置       O(nk), 出现 k 次\n        ==>  Greedy, 只关心最近的 C ==> 正向遍历+反向遍历\n    ------------------------------------------------------------------\n    实现:\n        两个数组 left 和 right 分别记录每个字符左/右侧出现的最后一个 C 字符的下标\n        同时比遍历这两个数组, 计算距离最小值\n\n    优化:    \n        1. 只需要最近的 C, 所以看情况可以覆盖掉第一个数组的值\n            case 1. 字符的左侧没有出现过 C 字符\n            case 2. i - left > right - i\n        2. 直接记录 C 与当前字符的距离, 而不是 C 的下标, 还可以省去最后遍历计算距离的过程\n                \n    TC: O(N), SC: O(1)      1ms\n*/\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int N = s.length();\n        int[] dist = new int[N];\n        dist[0] = s.charAt(0) == c ? 0 : N;\n        for (int i = 1; i < N; i++) {\n            dist[i] = s.charAt(i) == c ? 0 : dist[i - 1] + 1;\n        }\n        for (int i = N - 2; i >= 0; i--) {\n            dist[i] = Math.min(dist[i], dist[i + 1] + 1);  // 左侧距离 > 右侧距离, 未遇到 C 默认距离为 N\n        }\n        return dist;\n    }\n}\n\n/**\n    sliding window: 把 c 看成 s 的分割线\n    XXXX | XXXX | XXXXXX\n    \n    TC: O(N), SC: O(1)\n*/\nclass Solution1 {\n    public int[] shortestToChar(String s, char c) {\n        int N = s.length();\n        int[] dist = new int[N];\n        \n        int l = s.charAt(0) == c ? 0 : N;\n        int r = s.indexOf(c);\n        for (int i = 0; i < N; i++) {\n            dist[i] = Math.min(Math.abs(i - l), Math.abs(r - i));\n            if (i == r) {\n                l = r;\n                r = s.indexOf(c, l + 1);\n            }\n        }\n        return dist;\n    }\n}\n```\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wabw1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xqmmy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"a-pricity":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sclihuiming":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"amazeding":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"astrking":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429161664","body":"### 思路\n\n~~~bash\n1、题目可以简略理解为是2个数的相加，主要就是考虑生成结果的方式\n2、我们遍历num数组，考虑倒叙遍历，依次和k相加，结果对10取模，余数留下，模继续和下一位相加\n3、利用linkedlist的特性，每次加入的时候都是往头部加，这样我们得到的值就是正序的\n4、同时考虑到K值特别大的情况，最后对K值再进行判断一下，这样就是完整的流程\n~~~\n\n### 代码\n\n~~~java\npublic List<Integer> addToArrayForm(int[] num, int k) {\n    List<Integer> res = new LinkedList<>();\n    int n = num.length;\n    \n    for (int i = n - 1; i >= 0; i--) {\n        res.add(0, (num[i] + k) % 10);\n        k = (num[i] + k) / 10;\n    }\n    \n    while (k > 0) {\n        res.add(0, k % 10);\n        k /= 10;\n    }\n    \n    return res;\n}\n~~~\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430897544","body":"### 思路\n\n~~~bash\n1.无脑两次遍历，正着一次，反着一次，然后再比较两次遍历后相同下标处的最小值即可\n2.遍历的时候只考虑当前顺序，考虑不到的情况由下次反序遍历时来弥补\n~~~\n\n### 代码\n\n~~~java\npublic int[] shortestToChar(String s, char c) {\n    int n = s.length();\n    int[] ans = new int[n];\n\n    for (int i = 0, idx = -n; i < n; ++i) {\n        if (s.charAt(i) == c) {\n            idx = i;\n        }\n        ans[i] = i - idx;\n    }\n\n    for (int i = n - 1, idx = 2 * n; i >= 0; --i) {\n        if (s.charAt(i) == c) {\n            idx = i;\n        }\n        ans[i] = Math.min(ans[i], idx - i);\n    }\n    return ans;\n}\n~~~\n\n### 复杂度分析\n\n时间复杂度：O(n)\n空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432869219","body":"### 思路\n\n~~~bash\n1、看题目描述+栈的本身特性，做到后进先出\n2、同时考虑题目中的increment函数，循环加那肯定是数组来的最快，无脑for循环加即可\n3、我们把数组想象成横向的一组数字，左边是开头，右边是结尾，每次新增数据都是在结尾处添加当前数据，符合题目中的push要求，同时可以对前n个元素进行for循环遍历相加，也符合题目中的increment要求，只是我们不符合题目中的pop要求\n4、我们把步骤3中的数组进行逆时针旋转，同时记录最后一位值的下标，每次pop的时候，就移出数组中的最后一位元素，这样就满足了我们题目的要求\n\n整体而言就是数组+一个辅助标志位\n~~~\n\n### 代码\n\n~~~java\npublic class CustomStack {\n    int[] stack;\n    int top;\n    public CustomStack(int maxSize) {\n        stack = new int[maxSize];\n        top =-1;\n    }\n    public void Push(int x) {\n        if(top!=stack.Length-1)\n        {\n            top++;\n            stack[top]=x;\n        }\n    }\n    public int Pop() {\n        if(top==-1)\n        {\n            return -1;\n        }\n        --top;\n        return stack[top + 1];\n    }\n    public void Increment(int k, int val) {\n        int limit = Math.Min(k, top + 1);\n        for (int i = 0; i < limit; ++i)\n        {\n            stack[i] += val;\n        }\n    }\n}\n~~~\n\n### 复杂度分析\n\n时间复杂度：push和pop为O(1)，increment为O(n)\n空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tzuikuo":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429891420","body":"### 思路\n待补充\n\n### 代码\n\n\n```C++\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        map<int,int> nummap;\n        vector<int> revec;\n        int n=num.size(),flag=0;\n        reverse(num.begin(),num.end());\n        for(int i=0;i<n;i++){\n            nummap[i]=num[i];\n        }\n        int i=0;\n        while(k!=0){\n            nummap[i]+=k%10;\n            k=k/10;\n            i++;\n        }\n        for(auto it=nummap.begin();it!=nummap.end();it++){\n            if(it->second>=10&&it->first<nummap.size()-1){\n                it->second-=10;\n                it++;\n                it->second+=1;\n                it--;\n            }\n            if(it->second>=10&&it->first==nummap.size()-1){\n                it->second-=10;\n                flag++;\n            }\n            revec.push_back(it->second);\n        }\n        if(flag) revec.push_back(1);\n        reverse(revec.begin(),revec.end());\n        return revec;\n    }\n};\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431487447","body":"### 思路\n待补充\n\n### 代码\n\n\n```C++\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        int n=s.size();\n        vector<int> re;\n        for(int i=0;i<n;i++){\n            int left=i,right=i;\n            if(s[i]==c){\n                re.push_back(0);\n                continue;\n            }\n            left--;\n            right++;\n            while(true){\n                if(left<0&&right>n-1) break;\n                if(left>=0){\n                    if(s[left]==c){\n                        re.push_back(i-left);\n                        break;\n                    }\n                    left--;\n                } \n                if(right<=n-1){\n                    if(s[right]==c){\n                        re.push_back(right-i);\n                        break;\n                    }\n                    right++;\n                }\n            }\n        }\n        return re;\n    }\n};\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433245555","body":"### 思路\n用数组\n\n### 代码\n\n\n```C++\nclass CustomStack {\npublic:\n    int max_=0;\n    vector<int> vec;\n    CustomStack(int maxSize) {\n        max_=maxSize;\n    }\n    \n    void push(int x) {\n        if(vec.size()<max_) vec.push_back(x);\n    }\n    \n    int pop() {\n        int re=-1;\n        if(!vec.empty()){\n            re=vec[vec.size()-1];\n            vec.pop_back();\n        }\n        return re;\n    }\n    \n    void increment(int k, int val) {\n        if(vec.size()>0){\n            if(vec.size()<k){\n                for(int i=0;i<vec.size();i++) vec[i]+=val;\n            }\n            else{\n                for(int i=0;i<k;i++){\n                    vec[i]+=val;\n                }\n            }\n        }\n    }\n};\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ringo1597":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"brucezhang-utf-8":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luanxing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"moin-jer":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lihua1997":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cuizezhou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xuanaxuan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tiandao043":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"restlessbreeze":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429917860","body":"### code\r\n```\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n        vector<int> res;\r\n        int n = num.size();\r\n        for (int i = n - 1; i >= 0; --i) {\r\n            int sum = num[i] + k % 10;\r\n            k /= 10;\r\n            if (sum >= 10) {\r\n                k++;\r\n                sum -= 10;\r\n            }\r\n            res.push_back(sum);\r\n        }\r\n        for (; k > 0; k /= 10) {\r\n            res.push_back(k % 10);\r\n        }\r\n        reverse(res.begin(), res.end());\r\n        return res;\r\n    }\r\n};\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431476973","body":"### code\r\n```\r\nclass Solution {\r\npublic:\r\n    vector<int> shortestToChar(string s, char c) {\r\n        int n = s.length();\r\n        vector<int> ans(n);\r\n\r\n        for (int i = 0, idx = -n; i < n; ++i) {\r\n            if (s[i] == c) {\r\n                idx = i;\r\n            }\r\n            ans[i] = i - idx;\r\n        }\r\n\r\n        for (int i = n - 1, idx = 2 * n; i >= 0; --i) {\r\n            if (s[i] == c) {\r\n                idx = i;\r\n            }\r\n            ans[i] = min(ans[i], idx - i);\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433162602","body":"### code\r\n```\r\nclass CustomStack {\r\npublic:\r\n    vector<int> stk;\r\n    int top;\r\n\r\n    CustomStack(int maxSize) {\r\n        stk.resize(maxSize);\r\n        top = -1;\r\n    }\r\n    \r\n    void push(int x) {\r\n        if (top != stk.size() - 1) {\r\n            ++top;\r\n            stk[top] = x;\r\n        }\r\n    }\r\n    \r\n    int pop() {\r\n        if (top == -1) {\r\n            return -1;\r\n        }\r\n        --top;\r\n        return stk[top + 1];\r\n    }\r\n    \r\n    void increment(int k, int val) {\r\n        int lim = min(k, top + 1);\r\n        for (int i = 0; i < lim; ++i) {\r\n            stk[i] += val;\r\n        }\r\n    }\r\n};\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ruikiwi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huiminren":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"saitochen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wtdcai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"albert556":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wuxiaoshawn":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zrtch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhuzhu096":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"whoam-challenge":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"weisday":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"syh-coder":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaaller":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kyrie96521":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cavecrypto":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cxgbro":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"erjian96":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"a-polarbear":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"alexno1no2":[null,{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431598470","body":"```\n暴力破解\nclass Solution:\n     def shortestToChar(self, s: str, c: str) -> List[int]:\n         c_idx = [ i for i in range(len(s)) if s[i] == c ]\n         return [ min(abs( i - j )  for j in c_idx) for i in range(len(s)) ]\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433313429","body":"```\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stk = [0] * maxSize\n        self.top = -1\n\n    def push(self, x: int) -> None:\n        if self.top != len(self.stk) - 1:\n            self.top += 1\n            self.stk[self.top] = x\n\n    def pop(self) -> int:\n        if self.top == -1:\n            return -1\n        self.top -= 1\n        return self.stk[self.top + 1]\n\n    def increment(self, k: int, val: int) -> None:\n        lim = min(k, self.top + 1)\n        for i in range(lim):\n            self.stk[i] += val\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yetfan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhiyuanpeng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bwspsu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"arinzz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mdge":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"allenfeng666":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yin02":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"elsa-zhang":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429069573","body":"```bash\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        n = len(num)\n        sum = 0\n        for i in range(n):\n            sum=10*sum+num[i]\n        sum = sum+k\n\n        ans = []\n        while sum:\n            sum, remian = sum//10, sum%10\n            ans.append(remian)\n        \n        return ans[::-1]\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430692126","body":"```bash\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        pos = []\n        for i, w in enumerate(s):\n            if w==c:\n                pos.append(int(i))\n        \n        ans = []\n        for i, w in enumerate(s):\n            dis = [abs(p-i) for p in pos]\n            ans.append(min(dis))\n        return ans\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432520891","body":"```bash\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxsize = maxSize\n        self.list = []\n\n    def push(self, x: int) -> None:\n        if len(self.list) < self.maxsize:\n            self.list.append(x)\n\n    def pop(self) -> int:\n        if len(self.list) == 0:\n            return -1\n        return self.list.pop()\n\n    def increment(self, k: int, val: int) -> None:\n        length = min(k, len(self.list))\n        for i in range(length):\n            self.list[i] = self.list[i]+val\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"asur4s":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"littlesugarman":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhihaowan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"apockira":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guowei0223":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shuqianyang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sj941127":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zjsuper":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yongxi-zhou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"darwintk":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"h-steven":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mischaqi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wurongronga":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miduoliu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckyshenzhengkang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"y4h2":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yoco323":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"forschers":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shanshuiqiankun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"annabellhyx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hwfrankfung":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"frederickfan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huibinny":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ggmybro":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"myleetcodejourney":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"want2333":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"staringwhere":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"allenfeng8":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ryanbaiyansong":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1428966385","body":"```\nclass Solution:\n    def addToArrayForm(self, nums: List[int], k: int) -> List[int]:\n        nums.reverse()\n        i = t = 0\n        n = len(nums)\n        res = []\n        while i < n or t or k:\n            if k:\n                t += k % 10\n                k //= 10\n            \n            if i < n:\n                t += nums[i]\n                i += 1\n            \n            digit = t % 10\n            res.append(digit)\n            t //= 10\n        \n        res.reverse()\n        return res\n```\n高精度板子题","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430158405","body":"# 双指针 + 前后缀分解\n···\nclass Solution:\n    def shortestToChar(self, s: str, t: str) -> List[int]:\n        n = len(s)\n        ans = [0] * n\n        idx = -n \n        for i, c in enumerate(s):\n            if c == t:\n                idx = i \n            ans[i] = i - idx \n        \n        idx = 2 * n\n        for i in range(n - 1, -1, -1):\n            c = s[i]\n            if c == t:\n                idx = i \n            ans[i] = min(ans[i], idx - i)\n        \n        return ans\n        \n        l = 0 if s[0] == t else n \n        r = s.find(t, start=1)\n        for i in range(n):\n            ans[i] = min(i - l, r - i)\n            if i == r:\n                l = r \n                r = s.find(t, start = l + 1)\n        \n        return ans\n···","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1431886534","body":"```\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stk = []\n        self.maxSize = maxSize\n\n\n    def push(self, x: int) -> None:\n        if len(self.stk) < self.maxSize:\n            self.stk.append(x)\n\n\n    def pop(self) -> int:\n        if not self.stk: return -1\n        return self.stk.pop()\n\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(k):\n            if i < len(self.stk):\n                self.stk[i] += val\n\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n# maxSize\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dou-yu-xuan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hyxupup":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cs12300":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chiehw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aesir-idun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kaldsk12":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hxj2001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"for123s":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1428245121","body":"```\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int> res = {num.rbegin(), num.rend()};\n        int len = 0;\n        while (k!=0) {\n            int temp = k % 10;\n            k /= 10;\n            if (len < res.size()) {\n                if (temp + res[len] >= 10) {\n                    k += 1;\n                }\n                res[len] = (res[len] + temp) % 10;\n            }\n            else {\n                res.emplace_back(temp);\n            }\n            ++len;\n        }\n        return {res.rbegin(), res.rend()};\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430050786","body":"```\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        vector<int> res(s.size(), -1);\n        int idx = -1;\n        for (int i=0;i<s.size();i++) {\n            if (s[i] == c) {\n                idx = i;\n            }\n            if (idx != -1) {\n                res[i] = i - idx;\n            }\n        }\n        idx = -1;\n        for (int i=s.size()-1;i>=0;i--) {\n            if (s[i] == c) {\n                idx = i;\n            }\n            if (res[i] == -1) {\n                res[i] = idx - i;\n            }\n            else if (idx != -1) {\n                res[i] = min(res[i], idx - i);\n            }\n        }\n        return res;\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1431673255","body":"```\nclass CustomStack {\npublic:\n    vector<int> nums;\n    int top = -1;\n    CustomStack(int maxSize) {\n        nums.resize(maxSize);\n    }\n    \n    void push(int x) {\n        if (top == nums.size()-1) {\n            return;\n        }\n        nums[++top] = x;\n    }\n    \n    int pop() {\n        if (top == -1) {\n            return -1;\n        }\n        return nums[top--];\n    }\n    \n    void increment(int k, int val) {\n        for (int i=0;i<=top&&i<k;i++) {\n            nums[i] += val;\n        }\n    }\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zzhilin":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1428529645","body":"### 思路\r\n类似计算加法的逻辑。从个位开始遍历num计算的时候，用k作为carry over的数字。最后如果还有剩余的carry数字，加到res中。\r\n\r\n### 代码\r\n```python\r\nclass Solution: \r\n\tdef addToArrayForm(self, num: List[int], k: int) -> List[int]: \r\n\t\tn = len(num) \r\n\t\tcarry = total = 0 \r\n\t\tres = [] \r\n\t\ti = len(num)-1 # track digits in num \r\n\t\twhile i >= 0 or k != 0: \r\n\t\t\tx = num[i] if i >= 0 else 0 # last digit in num \r\n\t\t\ty = k % 10 if k != 0 else 0 # last digit in k \r\n\t\t\ttotal = x + y + carry \r\n\t\t\tcarry = total // 10 \r\n\t\t\tk = k // 10 # remove last digit from k \r\n\t\t\ti -= 1 \r\n\t\t\tres.append(total % 10) \r\n\t\t\t\r\n\t\tif carry != 0: \r\n\t\t\tres.append(carry) \r\n\t\treturn res[::-1]\r\n```\r\n\r\n**复杂度分析**\r\n- 时间: O(N), n is max number of digits in num or k\r\n- 空间: O(N), n is number of digits we processed in the while loop and the space in the res array","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430710786","body":"### 思路\nfirst pass left to right to calculate distance between last index of c (prev) and current index of element i, save answer to arr.\nsecond pass right to left to calculate distance between current i and last index of c.\ncompare with saved answers to find minimum\n\n### 代码\n```python\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n\n        prev = float('-inf')\n        ans = []\n        for i, ele in enumerate(s):\n            if ele == c:\n                prev = i\n            ans.append(i - prev)\n\n        prev = float('inf')\n        for i in range(len(s)-1, -1, -1):\n            if s[i] == c:\n                prev = i\n            ans[i] = min(prev - i, ans[i])\n\n        return ans\n```\n\n**复杂度分析**\n时间: O(n) all elements in s\n空间: O(n) ans array","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/5#issuecomment-1433571424","body":"### 思路\r\n类似basic calculator系列，创建空stack st和空string cur_str，从左到右遍历s。如果当前遍历的是数字，用一个temporary variable num存下来。如果是左括号，把当前repeat num和cur str加进stack，reset num和cur str。遇到右括号pop stack，根据存下来的数字复制cur str并存进cur str里。如果是普通character，直接存进cur str。\r\n\r\n### 代码\r\n```python\r\nclass Solution:\r\n    def decodeString(self, s: str) -> str:\r\n        st = []\r\n        cur_str = \"\"\r\n        num = 0\r\n        for c in s:\r\n            if c.isdigit():\r\n                num = 10*num\r\n                num += int(c)\r\n            elif c == '[':\r\n                st.append((cur_str, num))\r\n                cur_str = ''\r\n                num = 0\r\n            elif c ==']':\r\n                s, val = st.pop()\r\n                cur_str = s + val * cur_str\r\n            else:\r\n                cur_str += c\r\n        return cur_str\r\n```\r\n\r\n**复杂度分析**\r\n时间：O(n),itereated over s\r\n空间：O(max depth) aka O(n), stack","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yfu6":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1428552417","body":"1. My main purpose is to divide this problem into a simple adding and spliting problem. We can start with the smallest one, for example: [1, 0, 0] and 123. We use the last '0' to add the 123, and then divide it by 10 and leave the remainer. The last element of the list will be changed from 0 to 3, meanwhile, we will add the '0' with 120. We do the divide part again and again. In the end, we have walk through all the elements of the num list. If there is still k value, we will do the other iterate to add the new list element to num.\n2. class Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        for i in range(len(num) - 1, -1, -1):\n            if not k: break\n            k, num[i] = divmod(num[i] + k, 10)\n            # returns the quotient and remainder of （num[i] + k） / 10\n        while k:\n            k, a = divmod(k, 10)\n            num = [a] + num\n        return num\n3. The time and space complexity is O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430471180","body":"``\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        a,n=[],len(s)\n        for i in range(n):\n            if s[i]==c:\n                a.append(i)\n        answer=[]\n        j=0\n        for i in range(n):\n            if s[i]==c:\n                answer.append(0)\n                j+=1\n            elif i<a[0]:\n                answer.append(a[0]-i)\n            elif i>a[-1]:\n                answer.append(i-a[-1])\n            else:\n                answer.append(min((a[j]-i),(i-a[j-1])))\n        return answer\n``","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432089783","body":"```python\n# 1.  Use simple python push and pop function to solve the Problem\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stk = []\n        self.maxSize = maxSize\n\n\n    def push(self, x: int) -> None:\n        if len(self.stk) < self.maxSize:\n            self.stk.append(x)\n\n\n    def pop(self) -> int:\n        if not self.stk: return -1\n        return self.stk.pop()\n\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(k):\n            if i < len(self.stk):\n                self.stk[i] += val\n```\n3. The Time: O(k)\nSpace: O(k)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/5#issuecomment-1433601834","body":"1. The probem can be solved by creating a stack to store the repeat string and the number to repeat. We will loop each character in the string to store the information and compute the final result.\n2.\n```python\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack = []\n        cur_num = cur_str = ''\n        for c in s:\n            if c == '[':\n                stack.append(cur_str)\n                stack.append(int(cur_num))\n                cur_num = cur_str = ''\n            elif c == ']':\n                num = stack.pop()\n                prev_str = stack.pop()\n                cur_str = prev_str + cur_str * num\n            elif c.isdigit():\n                cur_num += c\n            else:\n                cur_str += c\n        return cur_str\n```\n3. Both O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mengsixing":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1428927200","body":"var addToArrayForm = function(num, k) {\n    let result = []\n    for(let i=num.length-1;i>=0;i--){\n        let sum = num[i] + k % 10;\n        k = Math.floor(k/10);\n        if(sum >=10){\n            sum-=10;\n            k++;\n        }\n        result.push(sum)\n    }\n    while(k > 0){\n        result.push(k % 10);\n        k = Math.floor(k/10);\n    }\n    return result.reverse();\n};","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431464685","body":"```js\nvar shortestToChar = function(s, c) {\nlet result = Array.from(s).fill(0);\nlet idx = -s.length;\nfor(let i=0;i<s.length;i++){\n    if(s[i]=== c){\n        idx = i;\n    }\n    result[i] = i-idx;\n}\n\nidx =s.length * 2;\nfor(let i=s.length-1;i>=0;--i){\n    if(s[i]=== c){\n        idx = i;\n    }\n    result[i] = Math.min(idx-i,result[i]);\n}\n\nreturn result\n\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"import-ant":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1428956544","body":"\n\n## 思路\n将k转化为数组，然后数组k和数组num遍历，按位相加。\n- 加数1：k[j]\n- 加数3：num[i]\n- 进位：c\n- **结果result**:(k[j]+num[i]+c) % 10\n-  **下一个进位** ：Math.floor(result / 10)\n\n## 代码\n\n- 语言支持：JavaScript\n\nJavaScript Code:\n\n```javascript\n\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n    //利用数组 字符串api (大数超出的风险)\n    // return (+num.join('')+k + '').split('');\n\n    //将k转化成数组，遍历num做加法运算。\n    k = (k+'').split('');\n    const length1 = num.length;\n    const length2 = k.length;\n    let i = length1-1,j=length2-1,c=0,result = [];\n    while(i >= 0 || j >= 0){\n        const add1 = i >= 0 ? num[i] : 0;\n        const add2 = j >= 0 ? +k[j] : 0;\n        const sum = add1 + add2 + c;\n        c = Math.floor(sum / 10);\n        result.unshift(sum % 10);\n        i --;\n        j --;\n    }\n    if(c != 0){\n        result.unshift(c);\n    }\n    return result\n};\n\n```\n\n\n**复杂度分析**\n令 n 为Math.max(k.length,num.length)。\n- 时间复杂度：$O(n)$\n- 空间复杂度：$O(n)$\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431234199","body":"\n\n## 思路\n- 将数组s中字符c出现的索引放到一个临时数组中。\n- 遍历数组s，对于s中的每个元素，遍历存放索引的临时数组，去找abs(temp(j)-i)最小的那个值。\n\n\n## 代码\n\n- 语言支持：JavaScript\n\nJavaScript Code:\n\n```javascript\n\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function(s, c) {\n    const length = s.length;\n    const answer = new Array(length).fill(0);\n    const temp = [];\n    for(let i = 0;i < length;i ++){\n        if(s[i] == c){\n            temp.push(i);\n        }\n    }\n    for(let i = 0;i < length;i ++){\n        let t = Infinity\n        for(let j = 0;j < temp.length;j ++){\n            t = Math.min(Math.abs(temp[j]-i),t);\n        }\n        answer[i] = t;\n    }\n    return answer;\n};\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。k为数组中字符c的数量\n\n- 时间复杂度：$O(n*k)$\n- 空间复杂度：$O(k)$ ，忽略结果数组\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432342758","body":"\n## 思路\n- 增量数组，前缀和思想\n- 先记录增加的值，在pop的时候加上该增加的值。\n\n## 代码\n\n- 语言支持：JavaScript\n\nJavaScript Code:\n\n```javascript\n\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n    this.stack = [];\n    this.maxSize = maxSize;\n    //记录增量\n    this.add = new Array(maxSize).fill(0);\n    this.size = 0;\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if(this.size < this.maxSize){\n        this.stack[this.size] = x;\n        this.size ++;\n    }\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    if(this.size == 0){\n        return -1;\n    }\n    if(this.size >= 2){\n        this.add[this.size-2] += this.add[this.size-1];\n    }\n    const num = this.stack[this.size-1] + this.add[this.size-1];\n    this.add[this.size-1] = 0;\n    this.size --;\n    return num;\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    const num = Math.min(k,this.size);\n    this.add[num-1] += val;\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */\n\n```\n**复杂度分析**\n\n令 maxSize 为栈最大长度。\n\n- 时间复杂度：$O(1)$\n- 空间复杂度：$O(maxSize)$ 增量数组\n\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joriscai":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1428969365","body":"# 思路\n先将k转成数组，再利用双指针分别从k和num的最后一位开始按位计算。注：需要考虑最后一次进位的情况。\n\n# 代码\njavascript\n\n```javascript\n/*\n * @lc app=leetcode.cn id=989 lang=javascript\n *\n * [989] 数组形式的整数加法\n */\n\n// @lc code=start\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n  const kArr = (k + '').split('')\n  let temp = 0\n  const ret = []\n  let i = num.length - 1\n  let j = kArr.length - 1\n  while(i >= 0 || j >= 0) {\n    const sum = (num[i] || 0) + parseInt(kArr[j] || 0) + temp\n    ret.unshift(sum % 10)\n    temp = parseInt(sum / 10)\n    i--\n    j--\n  }\n  if (temp) {\n    ret.unshift(temp)\n  }\n\n  return ret\n};\n// @lc code=end\n\n```\n\n# 复杂度分析\n时间复杂度：O(max(n, log k))，其中 n 为数组的长度。log k为k的位，即log 10(k)，10为底k的对数。\n空间复杂度：O(max(n, log k))。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1433309147","body":"# 思路\n- 先正序遍历数组，找目标字符跟右边元素的距离\n- 再反序遍历数组，找目标字符与左边元素的距离，同时取两次距离的最小值\n\n# 代码\njavascript\n\n```javascript\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function(s, c) {\n  let dis = Infinity\n  const ret = []\n  for (let i = 0; i < s.length; i++) {\n    const cur = s[i]\n    if (cur === c) {\n      dis = 0\n    } else {\n      dis++\n    }\n    ret.push(dis)\n  }\n\n  for (let i = s.length - 1; i >= 0; i--) {\n    const cur = s[i]\n    if (cur === c) {\n      dis = 0\n    } else {\n      dis++\n    }\n    ret[i] = Math.min(dis, ret[i])\n  }\n\n  return ret\n};\n\n```\n\n# 复杂度分析\n- 时间复杂度：O(n)，需要遍历两次数组，正序和反序\n- 空间复杂度：O(n)，返回结果的大小","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433304413","body":"# 思路\n- push方法要限制超过长度时不入栈\n- pop方法为了让所有操作都为O(1)的话，在出栈时再进行增加操作\n  - 出栈时要取出对应的增加值，并与栈顶值相加\n  - 由于数据出栈了，对应位置的加值无用，故对应位置的加值设为0，即默认值\n  - 由于inc方法的k是指栈底的 k 个元素，故此时下一位的加值要加上此次取出的加值，inc方法是栈底k个元素都增加val。\n- increment方法在对应的位置累加上加值即可 O(1)\n\n# 代码\njavascript\n\n```javascript\n/*\n * @lc app=leetcode.cn id=1381 lang=javascript\n *\n * [1381] 设计一个支持增量操作的栈\n */\n\n// @lc code=start\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n  this.size = maxSize\n  this.stack = []\n  this.add = []\n};\n\n/**\n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n  if (this.stack.length < this.size) {\n    this.stack.push(x)\n  }\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n  // 方法一\n  // return this.stack.pop() || -1\n\n  // 方法二\n  const len = this.stack.length\n  if (len === 0) {\n    return -1\n  }\n\n  const add = this.add[len] || 0\n  // 由于只记录当前栈顶的增加值\n  // 故要更新下一个栈顶\n  this.add[len - 1] = this.add[len - 1] || 0\n  this.add[len - 1] += add\n  // 出栈后，对应位置的增加值无用，重置为0\n  this.add[len] = 0\n\n  const curr = this.stack.pop()\n\n  return curr + add\n};\n\n/**\n * @param {number} k\n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n  // 方法一\n  // const len = Math.min(this.stack.length, k)\n  // for (let i = 0; i < len; i++) {\n  //   this.stack[i] += val\n  // }\n\n  // 方法二\n  const index = Math.min(this.stack.length, k)\n  this.add[index] = this.add[index] || 0\n  this.add[index] += val\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */\n// @lc code=end\n\n```\n\n# 复杂度分析\n- 时间复杂度：O(1)，三个方法都是O(1)\n- 空间复杂度：O(n)，一个栈空间和一个加值存放空间，两个都是n的长度","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangqianqian202301":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429058772","body":"##### 思路\n可理解为三个数相加， 记为first, second, third, 只要有任何一个数不为0， 则需要循环\n##### 代码\n```py\nfrom typing import List\ndef addNumber(arr: List, num: int):\n    third = 0\n    index = len(arr) - 1\n    while num != 0 or index >= 0 or third > 0:\n        if index < 0:\n            arr.insert(0, 0)\n            index = 0\n        second = num % 10\n        first = arr[index]\n        arr[index] = (first + second + third) % 10\n        third = (first + second + third) // 10\n        index = index - 1\n        num = num // 10\n\n    return arr\n\nprint(addNumber([1, 2, 1], 89))\nprint(addNumber([1, 2, 1], 890))\n            \n```\n##### 算法复杂度\n- 时间复杂度O(n)\n- 空间复杂度O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430808614","body":"##### 思路\n使用两个变量存储要查找的字符的位置，取距离两个字符的最小者\n##### 代码\n```python\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        length = len(s)\n        lIndex = -length\n        rIndex = s.index(c)\n        rtnArr = [0 for i in range(length)]\n        for i in range(len(s)):\n            if s[i] == c:\n                lIndex, rIndex = rIndex, i\n                for j in range(lIndex + 1, rIndex):\n                    rtnArr[j] = min(abs(j - lIndex), abs(j - rIndex))\n\n            else:\n                rtnArr[i] = min(abs(i - lIndex), abs(i - rIndex))\n        return rtnArr\n```\n##### 复杂度\nO(mn)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432761016","body":"##### 思路\n使用一个数组，一个index, index指向最新数据\n##### 代码\n```python\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.data = [None] * maxSize\n        self.index = -1\n\n    def push(self, x: int) -> None:\n        if (self.index + 1) < self.maxSize:\n            self.index = self.index + 1\n            self.data[self.index] = x\n\n    def pop(self) -> int:\n        if self.index >= 0:\n            self.index = self.index - 1\n            return self.data[self.index + 1]\n        else:\n            return -1\n\n\n    def increment(self, k: int, val: int) -> None:\n        to = min(k - 1, self.index)\n        for i in range(0, to + 1):\n            self.data[i] = self.data[i] + val\n\n```\n##### 复杂度\nO(1)\nO(1)\nO(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"airwalkers":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429071130","body":"```java\n// 思路，类似与归并排序，num数组末尾与k末尾数字相加，记录进位carray，插入到列表头\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        LinkedList<Integer> sum = new LinkedList<>();\n        int i = num.length - 1;\n        int carry = 0;\n        while (i >= 0 || k > 0) {\n            if (i >= 0) {\n                carry += num[i--];\n            }\n            if (k > 0) {\n                carry += k%10;\n                k /= 10;\n            }\n            sum.addFirst(carry % 10 );\n            carry /= 10;\n        }\n        if (carry > 0) {\n            sum.addFirst(carry);\n        }\n        return sum;\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431007168","body":"```java\n// 思路，从左向右扫描记录左侧最近下标入left数组，\n// 从右向左扫描右侧最近下标入right数组\n// 根据left，right数组以及i计算最近结果\n\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        char[] chars = s.toCharArray();\n        int[] left = new int[chars.length];\n        int[] right = new int[chars.length];\n\n        for (int i = 0, pre = -1; i < chars.length; i++) {\n            if (chars[i] == c) {\n                pre = i;\n            }\n            left[i] = pre;\n        }\n\n        for (int i = chars.length - 1, pre = -1; i >= 0; i--) {\n            if (chars[i] == c) {\n                pre = i;\n            }\n            right[i] = pre;\n        }\n\n        int[] res = new int[chars.length];\n        for (int i = 0; i < chars.length; i++) {\n            if (left[i] == -1) {\n                res[i] = right[i] - i;\n            } else if (right[i] == -1) {\n                res[i] = i - left[i];\n            } else {\n                res[i] = Math.min(i - left[i], right[i] - i);\n            }\n        }\n        return res;\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432451659","body":"```java\n// 思路，数组模拟栈，增加一个差分数组记录栈底k个数字需要累加的值\n// 复杂度，push O(1)，pop O(1)，increment O(1)\n\nclass CustomStack {\n    int[] stack;\n    int[] acc;\n    int maxSize;\n    int i;\n\n    public CustomStack(int maxSize) {\n        this.stack = new int[maxSize];\n        this.acc = new int[maxSize];\n        this.maxSize = maxSize;\n        this.i = 0;\n    }\n    \n    public void push(int x) {\n        if (i < maxSize) {\n            stack[i++] = x;\n        }\n    }\n    \n    public int pop() {\n        if (i == 0) {\n            return -1;\n        }\n        --i;\n        if (i - 1 >= 0) {\n            acc[i - 1] += acc[i];\n        }\n        stack[i] += acc[i];\n        acc[i] = 0;\n        return stack[i];\n    }\n    \n    public void increment(int k, int val) {\n        if (i > 0) {\n            acc[Math.min(k - 1, i - 1)] += val;\n        }\n    }\n}\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack obj = new CustomStack(maxSize);\n * obj.push(x);\n * int param_2 = obj.pop();\n * obj.increment(k,val);\n */\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhumengcheng":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429106157","body":"```javascript\r\n思路,末位数相加,超10进1,直接添加到数组的首位,如果是10则添加0,如果大于10取余数,\r\n/**\r\n * @param {number[]} num\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = function(num, k) {\r\n  let i = num.length - 1;\r\n  let ys = 0;\r\n  let res = [];\r\n  while (i >= 0 || k > 0) {\r\n    let x = i >= 0 ? num[i] : 0;\r\n    let y = k % 10;\r\n    k = Math.floor(k / 10);\r\n    ys = x + y;\r\n    if (ys >= 10) {\r\n      if (ys == 10) {\r\n        ys = 0;\r\n      } else {\r\n        ys = ys % 10;\r\n      }\r\n      k++;\r\n    }\r\n    i--;\r\n    res.unshift(ys);\r\n  }\r\n  return res;\r\n};\r\n\r\n```\r\n\r\n- 复杂度\r\n\r\n1. 时间复杂度：O(max⁡(n,log⁡k))，其中 nnn 为数组的长度。\r\n2. 空间复杂度：O(1)\r\n ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431409149","body":"```javascript\r\n解题思路: 第一层循环判断出c字符串的位置,第二层循环判断当前字符距离目标字符的距离Math.abs(i - j)判断距离\r\n/**\r\n * @param {string} s\r\n * @param {character} c\r\n * @return {number[]}\r\n */\r\nvar shortestToChar = function (s, c) {\r\n  let len = s.length;\r\n  const res = new Array(len).fill(len);\r\n  for (let i = 0; i < len; i++) {\r\n    if (s.substring(i, i + 1) === c) {\r\n      for (let j = 0; j < len; j++) {\r\n        res[j] = Math.min(Math.abs(i - j), res[j]);\r\n      }\r\n    }\r\n  }\r\n  return res;\r\n};\r\n\r\n```\r\n\r\n- 复杂度\r\n\r\n时间复杂度 O(n^2)\r\n空间复杂度 O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433063870","body":"```javascript\r\n实现思路: 使用数组完成\r\n/**\r\n * @param {number} maxSize\r\n */\r\nvar CustomStack = function (maxSize) {\r\n  this.maxSize = maxSize;\r\n  this.stack = new Array();\r\n};\r\n\r\n/**\r\n * @param {number} x\r\n * @return {void}\r\n */\r\nCustomStack.prototype.push = function (x) {\r\n  if (this.stack.length < this.maxSize) {\r\n    this.stack.push(x);\r\n  } else {\r\n    return;\r\n  }\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nCustomStack.prototype.pop = function () {\r\n  return this.stack.length > 0 ? this.stack.pop() : -1;\r\n};\r\n\r\n/**\r\n * @param {number} k\r\n * @param {number} val\r\n * @return {void}\r\n */\r\nCustomStack.prototype.increment = function (k, val) {\r\n  let len = this.stack.length < k ? this.stack.length : k;\r\n  for (let i = 0; i < len; i++) {\r\n    this.stack[i] += val;\r\n  }\r\n};\r\n\r\n```\r\n复杂度分析\r\n时间复杂度：O(1)\r\n空间复杂度：O(maxSize)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kofzhang":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429132721","body":"### 思路\r\n1.将列表转成数值\r\n2.加上K\r\n3.转成列表\r\n### 复杂度\r\n时间复杂度：O(n)\r\n空间复杂度：O(n)\r\n### 代码\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        n = 0\r\n        for i in num:\r\n            n=n*10+i\r\n        s = n+k\r\n        res = []\r\n        for i in str(s):\r\n            res.append(int(i))\r\n        return res\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430562184","body":"### 思路\r\n1.先找到所有字符位置，添加到一个列表里\r\n2.双指针，一个指向字符位置列表，一个指向原列表\r\n3.如果位置列表存在下一个位置，并且下一个位置到当前字符位置的绝对值小于当前位置到当前字符位置的绝对值，字符位置列表索引+1，并计算位置。否则以当前字符位置直接计算距离。\r\n### 复杂度\r\n时间复杂度：O(n)\r\n空间复杂度：O(n)\r\n### 代码\r\n```python\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        positions = [index for index,i in enumerate(s) if i==c]\r\n        res = []\r\n        p = 0\r\n        for index,i in enumerate(s):\r\n            if p<len(positions)-1 and abs(positions[p+1]-index)<abs(positions[p]-index):\r\n                p += 1                \r\n            res.append(abs(positions[p]-index))\r\n        return res\r\n                \r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432719597","body":"### 思路\r\n两个列表分别记录数据和增量。\r\n当increment的时候，只记录位置和增量，pop时增量向下累加\r\n### 复杂度\r\n时间复杂度：O(1)\r\n空间复杂度：O(n)\r\n### 代码\r\n```python\r\nclass CustomStack:\r\n\r\n    def __init__(self, maxSize: int):\r\n        self.maxSize = maxSize\r\n        self.data = [0]*maxSize\r\n        self.add = [0]*maxSize\r\n        self.cursor = -1\r\n\r\n\r\n\r\n    def push(self, x: int) -> None:\r\n        if self.cursor<self.maxSize-1:\r\n            self.cursor+=1\r\n            self.data[self.cursor]=x\r\n            self.add[self.cursor]=0\r\n            \r\n\r\n\r\n    def pop(self) -> int:\r\n        if self.cursor==-1:\r\n            return -1\r\n        r = self.data[self.cursor]+self.add[self.cursor]\r\n        \r\n        if self.cursor>=1:\r\n            self.add[self.cursor-1]+=self.add[self.cursor]        \r\n        self.cursor-=1\r\n        return r\r\n\r\n\r\n    def increment(self, k: int, val: int) -> None:\r\n        if self.cursor<k:\r\n            k = self.cursor+1\r\n        self.add[k-1]+=val\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"leonalhq":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429140638","body":"class Solution(object):\n    def addToArrayForm(self, num, k):\n        \"\"\"\n        :type num: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        # treat the num as a stack\n        res = []\n        carry = k\n        while num:\n            val = num.pop() + carry\n            carry = val/10\n            res.insert(0, val%10)\n\n        while carry:\n            res.insert(0, carry%10)\n            carry = carry/10\n        return res\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431559494","body":"class Solution(object):\n    def shortestToChar(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: List[int]\n        \"\"\"\n        left=[]\n        lens = len(s)\n        right=[0]*lens\n        \n        t = sys.maxsize\n        for i in range(0,lens):\n            if s[i]== c:\n                t = i\n            left.append(t)\n            \n        t = sys.maxsize\n        for i in range(lens-1,-1,-1):\n            if s[i]== c:\n                t = i\n            right[i] = t\n\n        ans = []\n        for i in range(0,lens):\n            ans.append(min(abs(left[i]-i),abs(right[i]-i)))\n            \n        return ans","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433193022","body":"class CustomStack(object):\r\n\r\n    def __init__(self, maxSize):\r\n        \"\"\"\r\n        :type maxSize: int\r\n        \"\"\"\r\n        self.stacks=[]\r\n        self.cnt=0\r\n        self.size = maxSize\r\n        self.incre = [0]*maxSize\r\n        \r\n        \r\n\r\n    def push(self, x):\r\n        \"\"\"\r\n        :type x: int\r\n        :rtype: None\r\n        \"\"\"\r\n        if self.cnt<self.size:\r\n            self.stacks.append(x)\r\n            self.cnt+=1\r\n        \r\n\r\n    def pop(self):\r\n        \"\"\"\r\n        :rtype: int\r\n        \"\"\"\r\n        if self.cnt<=0:\r\n            return -1\r\n        inc = self.incre[self.cnt-1]\r\n        self.incre[self.cnt-1] = 0\r\n        if self.cnt>1:\r\n            self.incre[self.cnt-2] +=inc\r\n        \r\n        self.cnt-=1\r\n        return self.stacks.pop() + inc\r\n        \r\n\r\n    def increment(self, k, val):\r\n        \"\"\"\r\n        :type k: int\r\n        :type val: int\r\n        :rtype: None\r\n        \"\"\"\r\n        if(self.cnt):\r\n            if k <= self.cnt:\r\n                self.incre[k-1] += val\r\n            if k > self.cnt:","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hjy-u":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429146539","body":"```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        carryon = 0\n        i = len(num) - 1\n        res = []\n        while (i >= 0 or k != 0):\n            current_num = num[i] if i >= 0 else 0\n            current_k = k%10 if k!=0 else 0\n            value = current_num + current_k + carryon\n            carryon = value // 10\n            k //= 10\n            i -= 1\n            res.insert(0, value % 10)\n        if carryon != 0:\n            res.insert(0, carryon)\n        return res\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430735051","body":"```python\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        n = len(s)\n        res = [0] * n\n        idx = -n\n        for i in range(n):\n            if s[i] == c:\n                idx = i\n            res[i] = i - idx\n        idx = 2 * n\n        for i in range(n - 1, -1, -1):\n            if s[i] == c:\n                idx = i\n            res[i] = min(res[i], idx - i)\n        return res\n```\nTC: O(n)\nSC: O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"csthaha":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429151521","body":"#### 思路：\n   1.将 K 也转换成对应的数组。\n   2. 遍历最长的一个数组。从末尾进行相加。\n   3. 获取res后 对数组进行替换。\n   4. 遍历完之后判断是否仍有进位。\n#### 复杂度：\n  时间复杂度：O(n)\n  空间复杂度：O(n)\n#### 代码：\n```javascript\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(arr, k) {\n    // k 数组形式\n    const strK = String(k)\n    const arrK = []\n    for(let i = 0; i < strK.length; i++) {\n        arrK.push(+strK[i])\n    }\n    let pos = 0 // 进位\n    const longArr = arrK.length > arr.length ? arrK : arr\n    for(let j = 0; j < longArr.length; j++) {\n        const A = arrK[arrK.length - 1 - j];\n        const B = arr[arr.length - 1 - j];\n        const sum = (A || 0) + (B || 0) + pos;\n        const res = sum % 10;\n        pos = Math.floor(sum / 10)\n        longArr[longArr.length - 1 - j] = res;\n    }\n    if(pos) {\n        longArr.unshift(pos)\n    }\n    return longArr\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430803730","body":"#### 思路：\n  - 获取字符**c**在**s**中的所有索引列表\n  - `getDistance` 获取字符在索引列表中的最小值。\n#### 复杂度：\n  - 时间复杂度: O(n^2)\n  - 空间复杂度: O(n)\n#### 代码：\n```javascript\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function(s, c) {\n    const res = []\n    const indexList = []\n    for(let i = 0; i < s.length; i++) {\n        if(s[i] === c) {\n            indexList.push(i)\n        }\n    }\n    const getDistance = (list, index) => {\n        let min = Number.MAX_VALUE;\n        for(let i = 0; i < list.length; i++) {\n            min = Math.min(Math.abs(list[i] - index), min)\n        }\n        return min\n    }\n    for(let i = 0; i < s.length; i++) {\n        res.push(getDistance(indexList, i))\n    }\n    return res\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432615804","body":"#### 复杂度：\n时间复杂度：O(min(k, maxSize))\n空间复杂度：O(1)\n#### 代码：\n```javascript\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n    this.list = [];\n    this.maxSize = maxSize;\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if(this.size() >= this.maxSize) {\n        return;\n    };\n    this.list.push(x);\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    if(this.size() === 0) return -1;\n    return this.list.pop();\n};\n\nCustomStack.prototype.size = function() {\n    return this.list.length;\n}\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    for(let i = 0; i < Math.min(this.size(), k); i++) {\n        this.list[i] += val;\n    }\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zepherust":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429177324","body":"\n- 最简单的思路\n```python\nclass Solution(object):\n    def addToArrayForm(self, num, k):\n        \"\"\"\n        :type num: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        A = 0\n        for i in num:\n            A = A*10 + i\n        k = k+A\n        result = []\n        while k!= 0:\n            result = [k%10] + result\n            k = k//10\n        return result if result != [] else [0]\n```\n结果： 2388ms/ 14.3MB\n原因分析: 两次O(n)循环，创建了一个数组\n\n- 尝试改进一次O(n)\n\n```python\nclass Solution(object):\n    def addToArrayForm(self, num, k):\n        \"\"\"\n        :type num: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        n = len(num)\n        addition = 0\n        result = []\n        for i in range(0,n):\n            t = num[n-i-1] + k%10 + addition\n            addition = 1 if t >=10 else 0\n            t = t %10\n            result = [t] + result\n            k = k // 10\n        while k>0:\n            t = k%10 + addition\n            addition = 1 if t >=10 else 0\n            t = t %10\n            result = [t] + result\n            k = k//10\n        if addition > 0:\n            result = [1] + result\n        return result \n```\n结果 : 1336ms/13.6MB\n分析：比上次几乎节省一半时间，合理\n\n- 尝试更优解法\n\n```python\nclass Solution(object):\n    def addToArrayForm(self, num, k):\n        \"\"\"\n        :type num: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        n = len(num) - 1\n        addition = 0\n        while n >= 0:\n            num[n] = num[n] + k%10 + addition\n            addition = 1 if num[n] >=10 else 0\n            num[n] = num[n] %10\n            k = k // 10\n            n -= 1\n        while k>0:\n            t = k%10 + addition\n            addition = 1 if t >=10 else 0\n            t = t %10\n            num = [t] + num\n            k = k//10\n        if addition > 0:\n            num = [1] + num\n        return num\n```\n结果:  56ms/13.4MB\n分析：直接使用原来的数组，省去创造数组的时间\n\n- 群友的最优解法\n\n```python\nclass Solution(object):\n    def addToArrayForm(self, num, k):\n        \"\"\"\n        :type num: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        i= len(num) - 1\n        while k>0 and i>=0:\n            num[i] += k\n            k = num[i] // 10\n            num[i] %= 10\n            i -= 1\n        while k>0:\n            num = [k%10] + num\n            k //= 10\n        return num\n```\n结果： 36/13.7\n分析：直接省去进位（把进位体现到k上），进一步节省时间","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431456932","body":"class Solution(object):\n    def shortestToChar(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: List[int]\n        \"\"\"\n        # forward \n        n = len(s)\n        result = [n for i in range(n)]\n        k = 0\n        for i in range(n):\n            if s[i] != c:\n                result[i] = abs(n-k-1)\n                k += 1\n            else:\n                result[i] = 0\n                k = n\n        print(result)\n        #backward\n        k = n-1\n        for i in range(n-1,-1,-1):\n            if s[i] != c:\n                result[i] = min(result[i],abs(k))\n                k -= 1\n            else:\n                result[i] = 0\n                k = -1\n        return result","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432932626","body":"- 使用Python自带的数组\r\n```\r\nclass CustomStack:\r\n\r\n    def __init__(self, maxSize: int):\r\n        self.capability = maxSize\r\n        self.size = 0\r\n        self.values = []\r\n\r\n    def push(self, x: int) -> None:\r\n        if self.size < self.capability:\r\n            self.values.append(x)\r\n            self.size+=1\r\n\r\n    def pop(self) -> int:\r\n        if self.size > 0:\r\n            v = self.values.pop()\r\n            self.size -=1\r\n            return v\r\n        else:\r\n            return -1\r\n\r\n    def increment(self, k: int, val: int) -> None:\r\n        if k > self.size:\r\n            l = self.size\r\n        else:\r\n            l = k\r\n        for i in range(l):\r\n            self.values[i] += val\r\n\r\n\r\n# Your CustomStack object will be instantiated and called as such:\r\n# obj = CustomStack(maxSize)\r\n# obj.push(x)\r\n# param_2 = obj.pop()\r\n# obj.increment(k,val)\r\n```\r\n- 空间换时间\r\n```\r\n class CustomStack:\r\n\r\n    def __init__(self, maxSize: int):\r\n        self.capability = maxSize\r\n        self.size = 0\r\n        self.values = [0 for i in range(maxSize)]\r\n\r\n    def push(self, x: int) -> None:\r\n        if self.size < self.capability:\r\n            self.size+=1\r\n            self.values[self.size -1] = x\r\n\r\n    def pop(self) -> int:\r\n        if self.size > 0:\r\n            v = self.values[self.size-1]\r\n            self.size -=1\r\n            return v\r\n        else:\r\n            return -1\r\n\r\n    def increment(self, k: int, val: int) -> None:\r\n        if k > self.size:\r\n            l = self.size\r\n        else:\r\n            l = k\r\n        for i in range(l):\r\n            self.values[i] += val\r\n\r\n\r\n# Your CustomStack object will be instantiated and called as such:\r\n# obj = CustomStack(maxSize)\r\n# obj.push(x)\r\n# param_2 = obj.pop()\r\n# obj.increment(k,val)\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"feefeefee":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429180682","body":"```\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n const len = num.length\n let i = len - 1 \n let carry = 0\n let res = []\n  while(i>=0 || k!==0){\n      let x = i>=0 ? num[i] : 0\n      let y = k !== 0 ? k % 10 :0\n      const sum = x + y +carry\n      carry = sum >= 10 ? 1 : 0\n      res.push(sum % 10);\n      k = Math.floor(k / 10)\n      i-- \n  \n  }\n  if(carry){\n     res.push(carry)\n  }\nreturn res.reverse()\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430664602","body":"```javaScript \n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function(s, c) {\n    let len = s.length\n    const arr = Array(s.length)\n    let l_current = null\n    let r_current = null\n\n    for(let i = 0; i < len ; i++){\n        l_current = s[i] === c ? i :l_current\n        arr[i] = l_current !== null ? Math.abs(i - l_current) : Infinity\n    }\n\n     for(let i = len-1; i >=0 ; i--){\n        r_current = s[i] === c ? i : r_current\n        if(r_current !== null){\n            const abs = Math.abs(i -r_current)\n            arr[i] = arr[i] < abs ? arr[i]:abs\n        }\n    }\n    return arr\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432628609","body":"```javaScript\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function (maxSize) {\n  this.maxSize = maxSize;\n  this.stack = [];\n};\n\n/**\n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function (x) {\n  const len = this.stack.length;\n  if (len < this.maxSize) {\n    this.stack.push(x);\n  }\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function () {\n  const len = this.stack.length;\n  return len === 0 ? -1 : this.stack.pop();\n};\n\n/**\n * @param {number} k\n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function (k, val) {\n  const len = this.stack.length;\n\n  const y = len < k ? len :k\n   for (let i = 0; i < y; i++) {\n      this.stack[i] += val;\n    }\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */\n\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hughlin07":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429183075","body":"class Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        \n        List<Integer> res= new ArrayList();\n        int index = num.length - 1;\n        \n        while( index >= 0 || k > 0){\n            if(index >= 0 ){\n                k = k + num[index];\n            }\n            res.add(k%10);\n            k = k/10;\n            index -- ;\n        }\n\n        Collections.reverse(res);\n        \n        return res;\n    }\n}\n\n\nComplexity Analysis:\nTime: O(n), n is the length of array\nSpace: O(n),","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432861018","body":"class CustomStack {\n    \n    int[] stack;\n    int top;\n\n    public CustomStack(int maxSize) {\n        stack = new int[maxSize];\n        top = -1;\n    }\n    \n    public void push(int x) {\n        if(top != stack.length-1){\n            top++;\n            stack[top] = x;\n        }\n    }\n    \n    public int pop() {\n\n        if(top != -1){\n            --top;\n            return stack[top+1 ];\n        }\n        return -1;\n    }\n    \n    public void increment(int k, int val) {\n        for(int i = 0; i < Math.min(k, top+1); i++){\n            stack[i] += val;\n        }\n    }\n}\n\nTime Complexity: \nPush, Pop: O(1)\nIncrement: O(k)\n\nSpace Complexity: O(k)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huizsh":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429183316","body":"### 解题思路\n逐位相加\n\n### 代码\n\n```golang\nfunc addToArrayForm(A []int, K int) []int {\n    carry := 0\n    for i := len(A) - 1; i >= 0; i-- {\n        A[i], carry = (carry + A[i] + K % 10) % 10, (carry + A[i] + K % 10) / 10\n        K /= 10\n    }\n    B := make([]int, 0)\n    carry = carry + K\n    for carry > 0 {\n        B = append([]int{carry % 10}, B...)\n        carry /= 10\n    }\n    return append(B, A...)\n}\n```\n\n### 复杂度分析\n时间复杂度：O(max(n, log k))\n空间复杂度：O(max(n, log k))","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chanceyliu":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429188828","body":"### 思路\r\n\r\n逐位相加，注意处理进位，将进位直接用 K 接收\r\n\r\n### 代码\r\n\r\n```typescript\r\nfunction addToArrayForm(num: number[], k: number): number[] {\r\n  let res: number[] = [];\r\n  for (let i = num.length - 1; i >= 0; i--) {\r\n    let sum = num[i] + (k % 10);\r\n    // 给k消位\r\n    k = Math.floor(k / 10);\r\n    // 有进位\r\n    if (sum >= 10) {\r\n      k++;\r\n      sum -= 10;\r\n    }\r\n    console.log(sum);\r\n    res.push(sum);\r\n  }\r\n  for (; k > 0; k = Math.floor(k / 10)) {\r\n    res.push(k % 10);\r\n  }\r\n  return res.reverse();\r\n}\r\n```\r\n\r\n**复杂度分析**\r\n\r\n- 时间复杂度：O(max(n,log k)) 其中 N 为数组长度\r\n- 空间复杂度：O(1)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430857093","body":"### 思路\n\n两次遍历，从前往后，在从后往前取最小距离\n\n### 代码\n\n```typescript\nfunction shortestToChar(s: string, c: string): number[] {\n  const n = s.length;\n  const res = new Array(n).fill(0);\n\n  for (let i = 0, idx = -n; i < n; i++) {\n    if (s[i] === c) {\n      idx = i;\n    }\n    res[i] = i - idx;\n  }\n\n  for (let i = n - 1, idx = 2 * n; i >= 0; i--) {\n    if (s[i] === c) {\n      idx = i;\n    }\n    res[i] = Math.min(res[i], idx - i);\n  }\n\n  return res;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：O(N) 其中 N 为数组长度\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432657977","body":"\n### 代码\n\n```typescript\n\nexport class CustomStack {\n  private data: any[];\n  private maxSize: number;\n\n  constructor(maxSize: number) {\n    this.data = [];\n    this.maxSize = maxSize;\n  }\n\n  push(x: number): void {\n    if (this.data.length < this.maxSize) {\n      this.data.push(x);\n    }\n  }\n\n  pop(): number {\n    console.log(this.data);\n    if (this.data.length === 0) {\n      return -1;\n    }\n    return this.data.pop();\n  }\n\n  increment(k: number, val: number): void {\n    for (let i = 0; i < Math.min(k, this.data.length); i++) {\n      this.data[i] += val;\n    }\n  }\n}\n\n```\n\n**复杂度分析**\n\n- 时间复杂度：push、pop O(1) ; increment O(n)\n- 空间复杂度：O(maxSize)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hshen11":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429194671","body":"#思路\n1. 把A数给转成数字aNum\n2. 数字aNum和K相加得到数字sum\n3. sum再转成数组\n```\n public int[] getInt(int[] A, int K) {\n        StringBuilder builder = new StringBuilder();\n        for (int i = 0; i < A.length; i++) {\n            builder.append(A[i]);\n        }\n        String aString = builder.toString();\n        int aNum = Integer.valueOf(aString);\n        int sum = K + aNum;\n\n        String[] split = String.valueOf(sum).split(\"\");\n        int[] result = new int[split.length];\n        for (int i = 0; i < split.length; i++) {\n            result[i] = Integer.valueOf(split[i]);\n        }\n        return result;\n    }\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431305704","body":"```java\n public int[] shortestToChar(String s, char c) {\n        char[] chars = s.toCharArray();\n        int n = chars.length;\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if (chars[i] == c) {\n                list.add(i);\n            }\n              \n        }\n        int[] result = new int[n];\n        for (int i = 0; i < n; i++) {\n            int k = n;\n            for (int j = 0; j < list.size(); j++) {\n                int b = Math.abs(i - list.get(j));\n                k = k - b <= 0 ? k: b;\n            }\n            result[i] = k;\n        }\n\n        return result;\n\n    }\n```\n### 复杂度\n- 时间O(n)\n- 空间O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433035535","body":"## 思路\n数组模拟栈\n```java\npublic class CustomStack {\n    int[] stack;\n    int top;\n\n    public CustomStack(int maxSize) {\n        stack = new int[maxSize];\n        top = -1;\n    }\n\n    public void push(int x) {\n        if (top != stack.length - 1) {\n            ++top;\n            stack[top] = x;\n        }\n    }\n\n    public int pop() {\n        if (top == -1) {\n            return -1;\n        }\n        --top;\n        return stack[top + 1];\n    }\n\n    public void increment(int k, int val) {\n        int limit = Math.min(k, top + 1);\n        for (int i = 0; i < limit; ++i) {\n            stack[i] += val;\n        }\n    }\n}\n```\n## 复杂度分析\n- 参见官方题解\n\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"horace7":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429210148","body":"### 思路\n从右往左依次相加，如果大于10则处理进位\n\n### 代码\n```javascript\nvar addToArrayForm = function(num, k) {\n    // 把k转换为数组\n    k = (k+'').split('');\n    // 从右往左依次相加\n    let l1 = num.length - 1;\n    let l2 = k.length - 1;\n    // c作为进位\n    let c = 0, result = [];\n    while (l1 >= 0 || l2 >=0) {\n        const num1 = l1 >= 0 ? +num[l1] : 0;\n        const num2 = l2 >= 0 ? +k[l2] : 0;\n        const sum = num1 + num2 + c;\n        // c取十位，数组push个位\n        c = Math.floor(sum / 10);\n        result.unshift(sum % 10);\n        l1--;\n        l2--;\n    }\n    // 退出循环时如果c大于0\n    if (c > 0) result.unshift(c);\n    return result;\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431022168","body":"```javascript\nvar shortestToChar = function(s, c) {\n    let res = Array(s.length).fill(0);\n\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] !== c) {\n            res[i] = res[i - 1] === void 0 ? Infinity : res[i - 1] + 1;\n        }\n    }\n\n    for (let i = s.length - 1; i >= 0; i--) {\n         if (res[i] === Infinity || res[i + 1] + 1 < res[i]) {\n             res[i] = res[i + 1] + 1;\n         }\n    }\n\n    return res\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432706661","body":"### 思路\n可以直接用js中的方法实现\n\n### 复杂度\n`时间复杂度：push pop：O(1); inc: O(k)`\n\n`空间复杂度：O(maxSize)`\n\n### 代码\n\n```javascript\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n    this.arr = [];\n    this.len = maxSize;\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if(this.arr.length < this.len) this.arr.push(x)\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n     return this.arr.pop() || -1\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    this.arr = this.arr.map((item, index) => index < k ? item + val : item)\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangzh0114":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429234314","body":"### 思路：  \n· 从低位到高位计算；  \n· 对k取整，将个位数与num[i]相加得到sum，k除10。  \n· 判断sum是否大于等于0，若true，除过10的k+1；将sum-10 push_back进列表；  \n· 若k比num长，经过上述循环后的k仍大于0，对k取整push_back后除10；  \n· reverse列表。    \n\n### 代码：  \n```cpp\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int> res;\n        int n = num.size();\n        for(int i = n - 1; i >= 0; --i){\n            int sum = num[i] + k % 10;\n            k /= 10;\n            if(sum >= 10){\n                ++k;\n                sum -= 10;\n            }\n            res.push_back(sum);\n        }\n        while(k > 0){\n            res.push_back(k % 10);\n            k /= 10;\n        }\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};\n```\n\n### 复杂度分析：\n· 时间复杂度O(n)，n为列表长度；   \n· 空间复杂度O(1)。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431551686","body":"### 思路\n---\n### 代码      \n```cpp    \nclass Solution {\npublic:\n   vector<int> shortestToChar(string S, char C) {\n       vector<int> ans(S.size(), 0);\n       int prev = -10000;\n       for(int i = 0; i < S.size(); i ++){\n           if(S[i] == C) prev = i;\n           ans[i] = i - prev;\n       }\n       prev = 20000;\n       for(int i = S.size() - 1; i >= 0; i --){\n           if(S[i] == C) prev = i;\n           ans[i] = min(ans[i], prev - i);\n       }\n       return ans;\n   }\n};\n```   \n---      \n### 复杂度分析       \ntc:O(n)     \nsc:O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433223214","body":"### 思路\n- 用vector实现      \n---\n### 代码    \n```cpp\nclass CustomStack {\nprivate:\n    vector<int> stack;\n    int maxSize_;\npublic:\n    CustomStack(int maxSize) {\n        maxSize_ = maxSize;\n        stack.reserve(maxSize);\n    }\n    \n    void push(int x) { \n        if (stack.size() >= maxSize_) {\n            return;\n        }\n        stack.push_back(x);\n    }\n    \n    int pop() {\n        if(!stack.empty()){\n            int top = stack.back();\n            stack.pop_back();\n            return top;\n        }\n        else return -1;\n    }\n    \n    void increment(int k, int val) {\n        if(stack.size() <= k){\n            for(int i = 0; i < stack.size(); i++){\n                stack[i] = stack[i] + val;\n            }\n        }\n        else{\n            for(int i = 0; i < k; i++){\n                stack[i] = stack[i] + val;\n            }\n        }\n    }\n};\n```\n---\n### 复杂度分析    \n- TC：O(N)，N为k    \n- SC：O(N)，N为maxSize\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dragonfcl":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429257693","body":"### 思路\n\n两个数组，从右往左处理数据，和大于0，则处理进位（注意空值默认0处理）\n\n### 代码\n\n\n```javascript\n     const addToArrayForm = function (aSource, plusNum) {\n        let aRes = []\n        let aTarget = Array.from(plusNum.toString());\n        while (aTarget.length > 0) {\n          let sum = (+aSource.pop() || 0) + (+aTarget.pop() || 0)\n          if (sum >= 10) {\n            aTarget.push((+aTarget.pop() || 0) + 1)\n            aRes.unshift(sum % 10)\n          } else {\n            aRes.unshift(sum)\n          }\n        }\n        aRes = [...aSource, ...aRes];\n        return aRes;\n      };\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431534561","body":"### 思路\n\n先记录c的Index，遍历字符串，记录距离的绝对值，取最小值\n\n### 代码\n\n\n```JavaScript\nvar shortestToChar = function(s, c) {\n    const aS = s.split('');\n    const aCIndex = [];\n    const aRes = new Array(aS.length).fill(aS.length);\n    for(let i = 0; i < aS.length; i++){\n        if(aS[i] == c) {\n            aCIndex.push(i)\n        }\n    }\n    for(let i = 0; i < aS.length; i++){\n        for(let j = 0; j < aCIndex.length; j++){\n            aRes[i] = Math.min(aRes[i],Math.abs(i-aCIndex[j]))\n        }\n    }\n    return aRes;\n};\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433317498","body":"\r\nvar CustomStack = function(maxSize) {\r\n  this.stack = [];\r\n  this.maxSize = maxSize;\r\n};\r\n\r\n/** \r\n * @param {number} x\r\n * @return {void}\r\n */\r\nCustomStack.prototype.push = function(x) {\r\n  let stack = this.stack;\r\n  if (stack.length < this.maxSize) {\r\n    stack.push( x );\r\n  }\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nCustomStack.prototype.pop = function() {\r\n  let stackTemp = this.stack;\r\n  if (stackTemp.length > 0){\r\nreturn stackTemp.pop();\r\n} \r\n  return -1;\r\n};\r\n\r\n/** \r\n * @param {number} k \r\n * @param {number} val\r\n * @return {void}\r\n */\r\nCustomStack.prototype.increment = function(k, val) {\r\n  let stack = this.stack;\r\n  for (let i = 0; i < Math.min(stack.length, k); i++) {\r\n    stack[i] += val;\r\n  }\r\n};","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huifeng248":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429283375","body":"###### thoughts\r\n        # convert the array form interger into int\r\n        # add them and turn the sum into array form\r\n\r\n```py\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]: \r\n        sub_total = 0 \r\n        i = len(num)-1\r\n        j = 0\r\n        while j < len(num):\r\n            digit = num[j] * (10**i)\r\n            sub_total += digit\r\n            j+= 1\r\n            i -= 1 \r\n        \r\n        \r\n        sub_total += k \r\n\r\n        res = list(str(sub_total))\r\n        return [int(i) for i in res]\r\n```\r\n######    Complexity \r\n        # time complexity is O(n), n is the max(len(num), len(sum))\r\n        # space complexity is O(n), n is the max(len(num), len(sum))","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430562334","body":"###### 思路： 左右指针算距离上一个的距离。然后比对两个array 的最小值\n```py\n\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        # Algorithm\n\n        # When going left to right, we'll remember the index prev of the last character C we've seen. Then the answer is i - prev.\n        # When going right to left, we'll remember the index prev of the last character C we've seen. Then the answer is prev - i.\n        # We take the minimum of these two answers to create our final answer.\n\n        left_res = [None]*len(s)\n        right_res = [None]*len(s)\n        res = []\n        \n        prev = float('-inf')\n        # check from left\n        for i, char in enumerate(s):    \n            if char == c:\n                prev = i\n            left_res[i] = i - prev\n        \n        # check from right\n        right_prev = float('inf')\n        for j in range(len(s)-1, -1, -1):\n            right_res[j] = float('inf')\n            if s[j] == c:\n                right_prev = j\n            right_res[j] = right_prev - j\n   \n        for i in range(len(s)):\n            ele = min(left_res[i], right_res[i])\n            res.append(ele)\n        return res\n```\n\n\n    # time complexity O(n)\n    # space complexity O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1431833638","body":"```python \nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.arr = []\n        \n\n    def push(self, x: int) -> None:\n        if len(self.arr) < self.maxSize:\n            self.arr.append(x)\n        \n    def pop(self) -> int:\n        if len(self.arr) >= 1:\n            res = self.arr.pop()\n            return res\n        else:\n            return -1\n        \n\n    def increment(self, k: int, val: int) -> None:\n        # print(\"stack\", self.arr, \"k\", k, val)\n        if len(self.arr) <= k:\n            self.arr = [i+val for i in self.arr]\n            # print([k, val], self.arr, )\n        else:\n            for i in range(k):\n                self.arr[i] += val\n            # print([k, val], self.arr, )\n        \n\n```\n\n##### time complexity: push, pop is O(1); increment is O(n) and n is equal to the min(len(stack), k)\n##### space complexity is O(n) n is the length of stack","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sarah11qing":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429288563","body":"```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        n = len(num) - 1\n        num[n] += k\n        carry = 0\n\n        # first, process the num arr\n        for i in range(n, -1, -1):\n            temp = num[i] + carry\n            num[i] = temp % 10\n            carry = temp // 10\n\n        # second, check carry\n        # if no carry, return num dirrectly\n        # else, create an addtional carry arr\n        if carry:\n            carry_arr = []\n            while carry:\n                carry_arr.append(carry % 10)\n                carry //= 10\n\n            # note that carry_arr need to be reversed\n            num = carry_arr[::-1] + num\n        \n        return num\n\n        # time: O(max(len(num), logk))\n        # space: O(max(len(num), logk))\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430988519","body":"```py\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n\n        # Find all index of c\n        c_index = []\n        for i, ch in enumerate(s):\n            if ch == c:\n                c_index.append(i)\n\n        # Initialize the res arr and a pointer     \n        res = [0] * len(s)\n        p = 0\n        \n        # Deal with three situations:\n        # when i < the first c's index\n        for i in range(0, c_index[0]):\n            res[i] = c_index[0] - i\n\n        # when i >= the last c's index\n        for i in range(c_index[-1], len(s)):\n            res[i] = i - c_index[-1]\n\n        # when first <= i < last\n        for i in range(c_index[0], c_index[-1]):\n            if i >= c_index[p + 1]:\n                p += 1\n            res[i] = min(i - c_index[p], c_index[p + 1] - i)\n\n        return res\n\n        # time: O(len(s)), traverse twice\n        # space: len(c_index), max = len(s)\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432686892","body":"```python\nclass CustomStack:\n    def __init__(self, maxSize: int):\n        self.stack = []\n        self.increments = []\n        self.size = 0\n        self.maxSize = maxSize\n\n    def push(self, x: int) -> None:\n        if self.size < self.maxSize:\n            self.stack.append(x)\n            self.increments.append(0)\n            self.size += 1\n        \n    def pop(self) -> int:\n        if self.size == 0:\n            return -1\n\n        # the value to pop = sum of two stacks' tops\n        top_ele = self.stack.pop()\n        top_inc = self.increments.pop()\n        self.size -= 1\n\n        # if stack is not empty, calculate the increments's top\n        if self.size:\n            self.increments[self.size - 1] += top_inc\n\n        return top_ele + top_inc\n\n\n    def increment(self, k: int, val: int) -> None:\n        if self.size == 0:\n            return\n        \n        # Add the val only to the index where the inc will be the first one to pop\n        self.increments[min(k, self.size) - 1] += val\n\n\n    # Delayed calcutation\n    # time: O(1) for push, pop, increment operations\n    # space: O(maxSize), two stacks\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"el1as7":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429303877","body":"思路：两个数组，从最后位开始依次计算。遇到结果大于10的留位。\n\n\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        length=len(num)\n        res=[]\n        n=length-1\n        summary,carry=0,0\n        while n >=0 or k !=0: \n            upper_end=num[n] if n>=0 else 0\n            low_end=k%10 if k !=0 else 0\n            summary=upper_end+low_end+carry\n            carry = summary // 10\n            k//=10\n            n-=1\n            res.append(summary%10)\n        if carry !=0: \n            res.append(carry)\n        return res[::-1]","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431302350","body":"\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        l = r = 0\n        n = len(s)\n        res = [n] * n\n        flag = False  \n        while r <= n - 1:\n            if s[r] == c:\n                res[r] = 0\n                while l <= r:\n                    res[l] = min(res[l], r - l)\n                    l += 1\n                r += 1\n                flag = True\n            else:\n                if flag:\n                    res[r] = res[r-1] + 1\n                r += 1\n        return res","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432934190","body":"class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.stack = []\n        self.top = -1\n\n    def push(self, x: int) -> None:\n        if self.top < self.maxSize - 1:\n            self.top += 1\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if self.top == -1:\n            return -1\n        value = self.stack[self.top]\n        self.top -= 1\n        return value\n\n    def inc(self, k: int, val: int) -> None:\n        length = min(k, self.top + 1)\n        for i in range(length):\n            self.stack[i] += val\n首先检查栈是否为空，如果为空，则返回 -1。否则的话弹出栈顶元素并将其返回","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zcytm3000":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429313172","body":"class Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        a=0\n        for i in num:\n            a = i + a*10\n        s = a + k\n        ar=[]\n        for i in str(s):\n            ar.append(int(i))\n        return ar","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430688419","body":"class Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        a=[]\n        b=[]\n        for i,ch in enumerate(s):\n            if ch==c:\n                b.append(int(i))\n        return([min(abs(x-i) for i in b) for x in range(len(s))])","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432919837","body":"class CustomStack(object):\r\n\r\n    def __init__(self, maxSize):\r\n        \"\"\"\r\n        :type maxSize: int\r\n        \"\"\"\r\n        self.stack = []\r\n        self.maxSize = maxSize\r\n\r\n    def push(self, x):\r\n        \"\"\"\r\n        :type x: int\r\n        :rtype: None\r\n        \"\"\"\r\n        if len(self.stack) < self.maxSize:\r\n            self.stack.append(x)\r\n        \r\n\r\n    def pop(self):\r\n        \"\"\"\r\n        :rtype: int\r\n        \"\"\"\r\n        if self.stack:\r\n            return self.stack.pop()\r\n        else:\r\n            return -1\r\n\r\n    def increment(self, k, val):\r\n        \"\"\"\r\n        :type k: int\r\n        :type val: int\r\n        :rtype: None\r\n        \"\"\"\r\n        for i in range(min(k, len(self.stack))):\r\n            self.stack[i]+=val","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pangjiadai":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429328694","body":"## Python3\n```python\nimport math \nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        num_value = 0\n        num_length = len(num)\n\n        for i in num:\n            if i != 0:\n                num_value += i * pow(10, num_length-1)\n            num_length -= 1\n\n        total = num_value + k\n        return [int(x) for x in str(total)]\n```\n\n## Complexity:\n- time: O(n)\n- space: O(n)","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432506382","body":"```Python\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        # stack: FILO, append, pop\n        self.stack = []\n        self.size = maxSize\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.size:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if self.stack:\n            return self.stack.pop()\n        return -1\n\n    def increment(self, k: int, val: int) -> None:\n        pointer = 0\n        for i in range(min(k, len(self.stack))):\n            self.stack[pointer] += val \n            pointer += 1\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xb798298436":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429336757","body":"addToArrayForm(array,k){\n    let str = \"\";\n    for(let i in array){\n      str += array[i];\n    }\n    let res = (parseInt(str)+k).toString().split('');\n    return res;\n  }","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430913022","body":"getDistance(s, c) {\n    let n = s.length;\n    let res = [];\n    let pos = -n;\n    for (let i = 0; i < n; i++) {\n      if (s[i] === c) {\n        pos = i;\n      }\n      res[i] = i - pos;\n    }\n\n    for (let i = n - 1; i >= 0; i--) {\n      if (s[i] === c) {\n        pos = i;\n      }\n      res[i] = Math.min(res[i], pos - i);\n    }\n\n    return res;\n  }","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ywang525":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429339866","body":"class Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        add = 0\r\n        res = [0]*len(num)\r\n        for i in range(len(num)-1, -1, -1):\r\n            if num[i] + k%10 + add < 10:\r\n                res[i] = num[i] + k%10 + add\r\n                add = 0  \r\n            else:\r\n                res[i] = num[i] + k%10 + add - 10\r\n                add = 1\r\n            k = k // 10\r\n        if add == 0 and k == 0:\r\n            return res\r\n        else:\r\n            n = add + k\r\n            while (n % 10 != 0) or (n // 10 != 0):\r\n                res = [n%10] + res\r\n                n = n//10\r\n            return res\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1432642389","body":"class Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        res = []\r\n        output = [0]*len(s)\r\n        for i in range(len(s)):\r\n            if s[i] == c:\r\n                res.append(i)\r\n        for i in range(len(s)):\r\n            minV = inf\r\n            for j in range(len(res)):\r\n                minV = min(minV, abs(res[j]-i))\r\n            output[i] = minV\r\n        return output","onTime":false},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"limbo42":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429352458","body":"```\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int> vec;\n        while(k) {\n            vec.push_back(k % 10);\n            k /= 10;\n        }\n        reverse(vec.begin(), vec.end());\n        int add = 0;\n        vector<int> ans;\n        int i = vec.size()-1;\n        int j = num.size()-1;\n        while(i >= 0 && j >= 0) {\n            int sum = vec[i] + num[j] + add;\n            if(sum >= 10) {\n                sum -= 10;\n                add = 1;\n            } else {\n                add = 0;\n            }\n            ans.push_back(sum);\n            i--;\n            j--;\n        }\n        // cout << 1;\n        while(i >= 0) {\n            int sum = vec[i] + add;\n            if(sum >= 10) {\n                sum -= 10;\n                add = 1;\n            } else {\n                add = 0;\n            }\n            ans.push_back(sum);\n            i--;\n        }\n        // cout << 2;\n        while(j >= 0) {\n            int sum = num[j] + add;\n            if(sum >= 10) {\n                sum -= 10;\n                add = 1;\n            } else {\n                add = 0;\n            }\n            ans.push_back(sum);\n            j--;\n        }\n        // cout << 3;\n        if(add) {\n            ans.push_back(1);\n        }\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430607361","body":"```C++\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        vector<int> ans(s.length(), s.length());\n        int pre = 2 * s.length();\n        for(int i = 0; i < s.length(); ++i) {\n            // 先记录离左边最近的\n            if(s[i] == c) {\n                pre = i;\n            }\n            ans[i] = min(abs(i - pre), ans[i]);\n        }\n        pre = 2 * s.length();\n        for(int i = s.length()-1; i >=0; --i) {\n            // 先记录离左边最近的\n            if(s[i] == c) {\n                pre = i;\n            }\n            ans[i] = min(abs(i - pre), ans[i]);\n        }\n        return ans;\n    }\n}c++;\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432323315","body":"```C++\nclass CustomStack {\npublic:\n    // 差分数组\n    vector<int> vec;\n    vector<int> add;\n    int size_;\n    CustomStack(int maxSize) {\n        size_ = maxSize;\n    }\n    \n    void push(int x) {\n        if(vec.size() < size_) {\n            vec.push_back(x);\n            add.push_back(0);\n        }\n    }\n    \n    int pop() {\n        if(vec.size() == 0) return -1;\n        int num = vec.back();\n        vec.pop_back();\n        int diff = add.back();\n        num += diff;\n        add.pop_back();\n        if(add.size() >= 1)\n            add[add.size()-1] += diff;\n        return num;\n    }\n    \n    void increment(int k, int val) {\n        // 支持范围+val\n        if(vec.size() == 0) return;\n        if(vec.size() < k) {\n            add[vec.size()-1] += val;\n        } else {\n            add[k-1] += val;\n        }\n    }\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack* obj = new CustomStack(maxSize);\n * obj->push(x);\n * int param_2 = obj->pop();\n * obj->increment(k,val);\n */\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dorapocket":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429417644","body":"```c++\r\nclass Solution {\r\n\r\npublic:\r\n    vector<int> num2arr(int num){\r\n        vector<int> v;\r\n        while(num!=0){\r\n            int last = num%10;\r\n            num = num/10;\r\n            v.push_back(last);\r\n        }\r\n        return v;\r\n    }\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n        vector<int> kv = num2arr(k);\r\n        vector<int> res;\r\n        reverse(num.begin(),num.end());\r\n        int i=0;\r\n        int over = 0;\r\n        while(i<num.size()&&i<kv.size()){\r\n            int n = num[i]+kv[i]+over;\r\n            over = n/10;\r\n            res.push_back(n%10);\r\n            i++;\r\n        }\r\n        while(i<num.size()||i<kv.size()){\r\n            int n = ((i<num.size())?num[i]:kv[i])+over;\r\n            over = n/10;\r\n            res.push_back(n%10);\r\n            i++;\r\n        }\r\n        if(over) res.push_back(over);\r\n        reverse(res.begin(),res.end());\r\n        return res;\r\n    }\r\n};\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431470683","body":"```c++\nclass Solution {\npublic:\n    int getMinDis(string s,int idx,char c){\n        int i=idx;\n        int tmp = s.size()+1;\n        while(i>=0){\n            if(s[i]==c) {tmp = min(tmp,idx-i);break;}\n            i--;\n        }\n        i=idx;\n        while(i<s.size()&&i-idx<tmp){\n            if(s[i]==c) {tmp = min(tmp,i-idx);break;}\n            i++;\n        }\n        return tmp;\n    }\n    vector<int> shortestToChar(string s, char c) {\n        vector<int> v;\n        for(auto i=0;i<s.size();i++){\n            v.emplace_back(getMinDis(s,i,c));\n        }\n        return v;\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432999782","body":"```c++\r\nclass CustomStack {\r\npublic:\r\n    int maxSize=0;\r\n    vector<int> v;\r\n    CustomStack(int m) {\r\n        maxSize=m;\r\n    }\r\n    \r\n    void push(int x) {\r\n        if(v.size()<maxSize) v.emplace_back(x);\r\n    }\r\n    \r\n    int pop() {\r\n        if(v.size()>0){\r\n            int i = v.back();\r\n            v.pop_back();\r\n            return i;\r\n        }\r\n        return -1;\r\n    }\r\n    \r\n    void increment(int k, int val) {\r\n        for(int i=0;i<k&&i<v.size();i++){\r\n            v[i]+=val;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Your CustomStack object will be instantiated and called as such:\r\n * CustomStack* obj = new CustomStack(maxSize);\r\n * obj->push(x);\r\n * int param_2 = obj->pop();\r\n * obj->increment(k,val);\r\n */\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zoeyzyzyzy":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429421064","body":"``` java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        int n = num.length;\n        List<Integer> res = new ArrayList<>();\n        int i = n - 1, sum = 0, carry = 0;\n        while (i >= 0 || k != 0) {\n            int x = i >= 0 ? num[i] : 0;\n            int y = k != 0 ? k % 10 : 0;\n\n            sum = x + y + carry;\n            carry = sum / 10;\n            k = k / 10;\n\n            i--;\n            res.add(0, sum % 10);\n        }\n        if (carry != 0)\n            res.add(0, carry);\n        return res;\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430987728","body":"### Thought\n- thinking of how to get distance between c and s.charAt(i);\n- go through the string twice 1 order and 1 reverse order;\n- in order is to traverse c in left situation, for first part(left has no c): make idx to -n;\n- reverse order is to traverse c in right situation, for last part(right has no c): make idx to 2*n;\n- find minium.\n### Code\n``` java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int n = s.length();\n        int[] res = new int[n];\n\n        for (int i = 0, idx = -n; i < n; i++) {\n            if (s.charAt(i) == c) {\n                idx = i;\n            }\n            res[i] = i - idx;\n        }\n\n        for (int i = n - 1, idx = 2 * n; i >= 0; i--) {\n            if (s.charAt(i) == c) {\n                idx = i;\n            }\n            res[i] = Math.min(res[i], idx - i);\n        }\n        return res;\n    }\n}\n```\n### Complexity\nTime complexity : O(n), traverse twice\n\nSpace complexity : O(n) array with size n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432758412","body":"``` java\nclass CustomStack {\n    int[] stack;\n    int top;\n\n    public CustomStack(int maxSize) {\n        stack = new int[maxSize];\n        top = -1;\n    }\n    \n    public void push(int x) {\n        if (top != stack.length - 1) {\n            ++top;\n            stack[top] = x;\n        }\n    }\n    \n    public int pop() {\n        if (top == -1) {\n            return -1;\n        }\n        --top;\n        return stack[top + 1];\n    }\n    \n    public void increment(int k, int val) {\n        int limit = Math.min(k, top + 1);\n        for (int i = 0; i < limit; ++i) {\n            stack[i] += val;\n        }\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/5#issuecomment-1433583760","body":"### Thought\nSince this problem we need to process the string in a nested manner, that is we need to process substring inside brackets before processing the outer substrings. A stack is a natural choice for this kind of problem because it allows us keep track of the order in which we encounter brackets.  Step by step:\n\n1. Initialize a string \"res\" to store the final decoded string, an integer \"curNumber\" to store the current number being processed, and two empty stacks: one to store the previous results and another to store the previous numbers.\n\n2. Loop through each character in the input string \"s\":\n\n    -  If the current character \"ch\" is a digit, update the current number \"curNumber\" by appending the digit to the end of the current number.\n\n    -  If the current character \"ch\" is an opening bracket '[', push the current number \"curNumber\" and the current result \"res\" onto their respective stacks, and reset \"curNumber\" and \"res\" to empty strings to start processing the substring inside the brackets.\n\n    -  If the current character \"ch\" is a closing bracket ']', pop the top element \"prevRes\" from the result stack and the top element \"prevNum\" from the number stack. Repeat the substring \"res\" \"prevNum\" times and append the resulting string to \"prevRes\". Set \"res\" to the new \"prevRes\" and continue processing the rest of the string.\n\n    -  If the current character \"ch\" is a letter, append it to the current result \"res\".\n\n3. Once the loop is complete, return the final decoded string \"res\".\n\n### Code\n``` java\nclass Solution {\n    public String decodeString(String s) {\n        LinkedList<String> stringStack = new LinkedList<>();\n        LinkedList<Integer> numStack = new LinkedList<>();\n        StringBuilder sb = new StringBuilder();\n        int curNum = 0;\n\n        for (int i = 0; i < s.length(); i++) {\n            char cur = s.charAt(i);\n            if (cur >= '0' && cur <= '9') {\n                curNum = curNum * 10 + (cur - '0');\n            } else if (cur == '[') {\n                stringStack.push(sb.toString());\n                numStack.push(curNum);\n                curNum = 0;\n                sb = new StringBuilder();\n            } else if (cur == ']') {\n                StringBuilder tem = new StringBuilder();\n                int cur_num = numStack.pop();\n                for (int j = 0; j < cur_num; j++) {\n                    tem.append(sb);\n                }\n                sb = new StringBuilder(stringStack.pop() + tem);\n            } else {\n                sb.append(cur);\n            }\n        }\n        return sb.toString();\n    }\n}\n```\n\n### Complexity:\nTime: O(n), loop through the input string 1 once.\n\nSpace: O(n), in the worst case, where the input string is fully nested, the maximum size of the stacks would be O(n/2). ","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jasonqiu":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429514656","body":"- Convert `k` to string\r\n- Pointers `pn` `pk` against `num` `k` respectively\r\n- Start from the ends and continue until both go beyond the first element. One may finish earlier than the other - always set the value to `0` afterwards\r\n- Append the carried bit (if any) and reverse\r\n\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        pn = len(num) - 1\r\n        k = str(k)\r\n        pk = len(k) - 1\r\n        carry = 0\r\n        result = []\r\n        while pn >= 0 or pk >= 0:\r\n            a = num[pn] if pn >= 0 else 0\r\n            b = k[pk] if pk >= 0 else 0\r\n            s = int(a) + int(b) + carry\r\n            result.append(s % 10)\r\n            carry = 1 if s >= 10 else 0\r\n            pn -= 1\r\n            pk -= 1\r\n        if carry > 0:\r\n            result.append(1)\r\n        return result[::-1]\r\n```\r\nTime: O(n)\r\nSpace: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431064325","body":"- Set `last` (last position of the character) to a large negative number\r\n-  Scan from the beginning. Distances to the nearest `c` in the left direction are calculated in this process. `last` will be updated at the position where `c` is found\r\n- Set `last` to a large positive number\r\n- Scan from the end of `s`. When distance to the nearest `c` in the right direction is shorter, update the answer with that distance. Again, `last` will be updated at the position where `c` is found\r\n\r\n```python\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        answer = []\r\n        last = -16383\r\n        for i in range(len(s)):\r\n            if s[i] == c:\r\n                last = i\r\n            answer.append(i - last)\r\n        last = 16384\r\n        for i in range(len(s) - 1, -1, -1):\r\n            if s[i] == c:\r\n                last = i\r\n            answer[i] = min(last - i, answer[i])\r\n        return answer\r\n```\r\nTime: O(n)\r\nSpace: O(n)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432860740","body":"- Use List\r\n```python\r\nclass CustomStack:\r\n\r\n    def __init__(self, maxSize: int):\r\n        self.stack = []\r\n        self.maxSize = maxSize\r\n\r\n    def push(self, x: int) -> None:\r\n        if len(self.stack) < self.maxSize:\r\n            self.stack.append(x)\r\n\r\n    def pop(self) -> int:\r\n        if not self.stack:\r\n            return -1\r\n        return self.stack.pop()\r\n\r\n    def increment(self, k: int, val: int) -> None:\r\n        for i in range(min(k, len(self.stack))):\r\n            self.stack[i] += val\r\n```\r\nTime: `push()` O(1), `pop()` O(1), `increment()` O(n)\r\nSpace: O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lp1506947671":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429552710","body":"\n\n```python\n# 思路:从低位到高位依次相加(数组倒叙遍历,数值除10取余),对数值位数大于数组的长度的部分进行边界处理\n\nfrom typing import List\n\n\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        \"\"\"\n        :type num: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        for i in num[::-1]:\n            sum_item = i + k % 10\n            k //= 10\n            if sum_item >= 10:\n                k += 1\n                sum_item -= 10\n            res.insert(0, sum_item)\n        while k > 0:\n            res.insert(0, k % 10)\n            k //= 10\n        return res\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print(solution.addToArrayForm([1, 2, 0, 0], 34))\n    \n# 时间复杂度:O(max(n,n-k))\n# 空间复杂度:O(n)\n```\n\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431458904","body":"### 思路\r\n\r\n先获取c字符在s字符中的标记记录在数组c_indices中\r\n\r\n然后遍历字符s中的每个字符,与c_indics中的值也就是c字符所在的索引逐一比较获取最小值\r\n\r\n\r\n\r\n### 代码\r\n\r\n```python\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        c_indices = []\r\n        for index, value in enumerate(s):\r\n            if value == c:\r\n                c_indices.append(index)\r\n        result = [None] * len(s)\r\n        for index, value in enumerate(s):\r\n            if value == c:\r\n                result[index] = 0\r\n                continue\r\n            for c_index in c_indices:\r\n                dist = abs(c_index - index)\r\n                if result[index] and dist >= result[index]:\r\n                    break\r\n                result[index] = dist\r\n\r\n        return result\r\n```\r\n\r\n### 复杂度\r\n\r\n时间复杂度: O(N∗K)，N 是 S 的长度，K 是字符 `C` 在字符串中出现的次数，K <= N。 \r\n\r\n空间复杂度 O(K)，K 为字符 `C` 出现的次数，这是记录字符 `C` 出现下标的辅助数组消耗的空间 \r\n\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433144775","body":"### 思路\n\n通过列表的pop和append分别作为栈的出栈入栈操作,需要注意入栈的最大长度和出站的空临界情况\n\n### 代码\n\n```python\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack = []\n        self.size = maxSize\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.size:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if not self.stack: return -1\n        return self.stack.pop()\n\n    def increment(self, k: int, val: int) -> None:\n        end = k\n        if len(self.stack) <= k:\n            end = len(self.stack)\n        for index in range(0, end):\n            self.stack[index] += val\n```\n\n### 复杂度\n\n时间复杂度：push 和 pop 操作时间复杂度为O(1),而 increment 操作的时间复杂度为O(min(k,cnt))\n\n空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"texamc2":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429605508","body":"class Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        i = 0\r\n        for j, n  in enumerate(num) :\r\n            i = 10 * i + n\r\n        res = i + k\r\n        l = []\r\n        for s in str(res):\r\n            l.append(int(s))\r\n        return l","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431330007","body":"``` \r\nfunc shortestToChar(s string, c byte) []int {\r\n    res := make([]int, len(s))\r\n    for i := 0; i < len(s); i++ {\r\n    l, r := i, i\r\n    for ; l >= 0 && s[i] != c; l = l - 1;{\r\n    }\r\n    for ; r < len(s) && s[i] != c; r = r+1; {\r\n    }\r\n    if l < 0 {\r\n        res[i] = r - i;\r\n     } else if r > len(s) {\r\n        res[i] = i - l;\r\n     } else {\r\n         res[i] = min(i-l, r-i)\r\n     }\r\n     }\r\n     return res\r\n  }\r\n  func min(a, b int) int {\r\n      if a > b {\r\n          return b\r\n         }\r\n       return a\r\n   }\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433125628","body":"```\r\ntype CustomStack struct {\r\n\tstack   []int\r\n\tmaxSize int\r\n\tmap_1   map[int]int\r\n}\r\n\r\nfunc Constructor(maxSize int) CustomStack {\r\n\treturn CustomStack{\r\n\t\tstack:   make([]int, 0),\r\n\t\tmaxSize: maxSize,\r\n\t\tmap_1:   make(map[int]int),\r\n\t}\r\n}\r\n\r\nfunc (this *CustomStack) Push(x int) {\r\n\tif len(this.stack) == this.maxSize {\r\n\t\treturn\r\n\t}\r\n\tthis.stack = append(this.stack, x)\r\n}\r\n\r\nfunc (this *CustomStack) Pop() int {\r\n\tif len(this.stack) == 0 {\r\n\t\treturn -1\r\n\t}\r\n\tv := this.stack[len(this.stack)-1]\r\n\tif inc, has := this.map_1[len(this.stack)]; has {\r\n\t\tv += inc\r\n\t\tdelete(this.map_1, len(this.stack))\r\n\t\tthis.map[len(this.stack)-1]+=inc\r\n\t}\r\n\tthis.stack = this.stack[:len(this.stack)-1]\r\n\treturn v\r\n}\r\n\r\nfunc (this *CustomStack) Increment(k int, val int) {\r\n\tif k > len(this.stack) {\r\n\t\tk = len(this.stack)\r\n\t}\r\n\tthis.map_1[k] += val\r\n\r\n}\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joemonkeylee":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429643042","body":"### 思路\n\n- k值转为 int数组 \n- 两数组高位向左相加 注意处理进位 \n- 若索引0为0 数组长度整体右移一位 \n\n 常规想法 不用复杂类型类型 要牺牲时间\n\n### 代码\n\n\n```c#\n\n    public List<int> Main(int[] num, int k)\n    {\n        int kCopy;\n\n        //1.获取k位数 \n        int kLength = 1;\n        kCopy = k;\n        while (kCopy / 10 > 0)\n        {\n            kLength++;\n            kCopy = kCopy / 10;\n        }\n\n        //2.将k转成数组\n        int[] num2 = new int[kLength];\n        int currentIndex = 0;\n        kCopy = k;\n        while (currentIndex < kLength)\n        {\n            num2[kLength - currentIndex - 1] = kCopy % 10;\n            kCopy = (kCopy - kCopy % 10) / 10;\n            currentIndex++;\n        }\n\n        //3.开辟一个数组 长度是两数组长度较大值+1 右对齐求和\n        int maxLength = Math.Max(num.Length, num2.Length);\n        int[] res = new int[maxLength + 1];\n        int carry = 0;\n        int a;\n        int b;\n        for (int index = 0; index < maxLength; index++)\n        {\n            if (num.Length - index > 0)\n            {\n                a = num[num.Length - index - 1];\n            }\n            else\n            {\n                a = 0;\n            }\n\n            if (num2.Length - index > 0)\n            {\n                b = num2[num2.Length - index - 1];\n            }\n            else\n            {\n                b = 0;\n            }\n\n            if (a + b + carry >= 10)\n            {\n                res[maxLength - index] = a + b + carry - 10;\n                carry = 1;\n            }\n            else\n            {\n                res[maxLength - index] = a + b + carry;\n                carry = 0;\n            }\n        }\n\n        if (carry == 1)\n        {\n            res[0] = carry;\n        }\n\n        //4.如果最低位是0 数组长度-1右移\n        int[] result = new int[maxLength];\n        if (res[0] == 0)\n        {\n            for (int i = 0; i < result.Count(); i++)\n            {\n                result[i] = res[i + 1];\n            }\n            return result;\n        }\n        else\n        {\n            return res;\n        }\n    }\n```\n\n**复杂度分析**\n- 时间复杂度：O(max(n,logk))\n- 空间复杂度：O(1)\n- 不太确定对不对","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431214887","body":"### 思路\n\n- 先找char的位置\n- 第二遍算较小长度\n\n### 代码\n\n\n```c#\n\n    public int[] ShortestToChar(string s, char c)\n    {\n        //记录c的位置\n        List<int> targetArray = new List<int>();\n\n        var charArray = s.ToCharArray();\n        for (int i = 0; i < charArray.Length; i++)\n        {\n            if (charArray[i].Equals(c))\n            {\n                targetArray.Add(i);\n            }\n        }\n\n        var res = new int[charArray.Length];\n        int targetArrayIndex = 0;\n        for (int i = 0; i < charArray.Length; i++)\n        {\n            if (targetArrayIndex < targetArray.Count() && i.Equals(targetArray[targetArrayIndex]))\n            {\n                res[i] = 0;\n                targetArrayIndex++;\n            }\n            else\n            {\n                if (i < targetArray[0])\n                {\n                    res[i] = Math.Abs(i - targetArray[targetArrayIndex]);\n                }\n                else if (i > targetArray[targetArray.Count() - 1])\n                {\n                    res[i] = Math.Abs(i - targetArray[targetArrayIndex - 1]);\n                }\n                else\n                {\n                    res[i] = Math.Min(Math.Abs(i - targetArray[targetArrayIndex]), Math.Abs(targetArray[targetArrayIndex - 1] - i));\n                }\n            }\n        }\n        return res;\n    }\n```\n\n**复杂度分析**\n- 时间复杂度：O(n)\n- 空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432943455","body":"### 思路\n\nc#中使用 int[]或者List<int>来模拟应该结果是差不多的。\n不能使用Stack 因为stack用index进行索引赋值\n\n### 代码\n\n```c#\n\npublic class CustomStack\n{\n    int[] array;\n    int index = -1;\n    public CustomStack(int maxSize)\n    {\n        array = new int[maxSize];\n    }\n\n    public void Push(int x)\n    {\n        if (index < array.Length - 1)\n        {\n            array[++index] = x;\n        }\n    }\n\n    public int Pop()\n    {\n        return index < 0 ? -1 : array[index--];\n    }\n\n    public void Increment(int k, int val)\n    {\n        for (int i = 0; i < (k > array.Length ? array.Length : k); i++)\n        {\n            array[i] += val;\n        }\n    }\n}\n\n```\n\n**复杂度分析**\n- 时间复杂度：Increment是O(n)，其他O(1)\n- 空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"northseacoder":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429682330","body":"## 思路\n- 利用 number 自动进位\n- 每次取数组未运算的最小位置直接加上 k 并取结果最末位 unshift 到结果数组内\n- nums 取完时需要考虑有多余进位\n- 计算时间复杂度时,当 k>num 时,循环次数为 log k(k 每次循环除 10)\n## 代码\n```js\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n    const res = [];\n    let index = num.length - 1;\n    let sum = k;\n    while (index >= 0 || sum > 0) {\n        if (index >= 0) {\n            sum += num[index];\n            index--;\n        }\n        res.unshift(sum % 10);\n        sum = Math.floor(sum / 10);\n    }\n    return res;\n};\n```\n### 复杂度\n- 时间复杂度: O(max(n,log k));\n- 空间复杂度: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430666807","body":"## 思路\n- 两次遍历\n- j 用来保留上次字符出现的位置\n- 从左往右获取左侧距离\n- 从右往左获取右侧距离\n\n## 代码\n```js\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function(s, c) {\n    const n = s.length;\n    const res = new Array(n).fill(Infinity);\n    for (let i = 0, j = -1; i < n; i++) {\n        if (s.at(i) === c) j = i;\n        if (j !== -1) res[i] = i - j;\n    }\n    for (let i = n - 1, j = -1; i >= 0; i--) {\n        if (s.at(i) === c) j = i;\n        if (j !== -1) res[i] = Math.min(res[i], j - i);\n    }\n    return res;\n};\n```\n## 复杂度\n- TC:O(n)\n- SC:O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432315252","body":"## 思路\n- 利用js 原生数组模拟栈\n\n## 代码\n```js\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n    this.stack = [];\n    this.size = maxSize;\n};\n\n/**\n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if (this.stack.length < this.size) this.stack.push(x);\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    return this.stack.pop() ?? -1;\n};\n\n/**\n * @param {number} k\n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    for (let i = 0; i < Math.min(this.stack.length, k); i++) {\n        this.stack[i] += val;\n    }\n};\n```\n## 复杂度\n- SC: O(n)\n- TC: push:O(1),pop:O(1),increment:O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dominique9898":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429688396","body":"### 思路\n\n首先计算 k 按十进制下的每一位的值, 然后模拟竖式加法,对每一位进行相加(不存在的位为0),\n并且用carry这个变量存储进位标志符. 因为我们是从前往后遍历,所以最后需要reverse一下结果.\n\n### 代码\n\n```cpp\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        if (k == 0) return num;\n\n        reverse(num.begin(), num.end());\n        vector<int> digit_k;\n        while (k) {\n            digit_k.push_back(k % 10);\n            k /= 10;\n        }\n\n        vector<int> ans;\n        int carry = 0, ptr = 0;\n        const int n = num.size(), m = digit_k.size();\n        while (carry || ptr < max(n, m)) {\n            const int d1 = ptr < n ? num[ptr] : 0;\n            const int d2 = ptr < m ? digit_k[ptr] : 0;\n            const int cur = d1 + d2 + carry;\n            carry = cur / 10;\n            ans.push_back(cur % 10);\n            ptr++;\n        }\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组 arr 长度。\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431436378","body":"# 思路\n\n首先从左到右遍历一次s，如果s[i] == c就设置为0，否则设置为s[i - 1] + 1\n然后从右到左遍历一次s，如果s[i] == c就设置为0，否则设置为min(s[i], s[i - 1] + 1)\n\n# 代码\n\n```cpp\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        if (s.empty()) return vector<int>{};\n\n        const int n = s.size();\n        const int MAX = n + 1000;\n        vector<int> ans(n, MAX);\n        ans[0] = (s[0] == c) ? 0 : MAX;\n        for (int i = 1; i < n; i++) {\n            ans[i] = (s[i] == c) ? 0 : ans[i - 1] + 1;\n        }\n\n        ans[n - 1] = (s[n - 1] == c) ? 0 : ans[n - 1];\n        for (int i = n - 2; i >= 0; i--) {\n            ans[i] = (s[i] == c) ? 0 : min(ans[i], ans[i + 1] + 1);\n        }\n        return ans;\n    }\n};\n```\n\n# 分析\n\n时间复杂度 O(N)\n空间复杂度 O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433254448","body":"# 思路\n\n用 stack 维护栈的原始元素。用stack维护前缀和\n\n# 代码\n\n```cpp\nclass CustomStack {\npublic:\n    CustomStack(int maxSize) {\n        mxSize = maxSize;\n        cur = 0;\n    }\n    \n    void push(int x) {\n        if (stk.size() + 1 > mxSize) return;\n        stk.push_back(x);\n        if (!diff.empty()) diff.back() += cur;\n        diff.push_back(0);\n        cur = 0;\n    }\n    \n    int pop() {\n        if (stk.empty()) return -1;\n        const int x = stk.back();\n        stk.pop_back();\n        cur += diff.back();\n        diff.pop_back();\n        return x + cur;\n    }\n    \n    void increment(int k, int val) {\n        if (stk.empty()) return;\n        const int n = stk.size();\n        diff[min(n - 1, k - 1)] += val;\n    }\nprivate:\n    vector<int> stk, diff;\n    int mxSize, cur;\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack* obj = new CustomStack(maxSize);\n * obj->push(x);\n * int param_2 = obj->pop();\n * obj->increment(k,val);\n */\n```\n\n# 复杂度分析\n\n每一个操作都是 O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wl678":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429692569","body":"2.14\n\n思路：\n\n​\t拿到题目最初的想法是将num数组转换为十进制的整数，然后直接与k相加，但是看到题目中条件数组的长度最大可以是$10^4$，排除这种做法，因为无论是int还是long long int 都够呛存下来。\n\n​\t因此，因该考虑逐位相加，但是这种方法我感觉又有些麻烦，所以参考了官方题解的另一种思路，并尝试实现。\n\n​\t将整数k与num数组最后一位相加，用temp暂时存下相加的结果，对temp取余得到最终结果的最后一位，然后再对temp整除10，将得到的结果与num数组倒数第二位相加，重复前面的步骤，整体的算法思路就是这样。\n\n​\t但是，要注意一些小问题，比如最终结果需要往前进位怎么办，整数k的长度 > 数组长度怎么办。\n\n​\t可以发现如果出现上面的两种情况，在跳出第一个for之后，temp肯定不为0，所以这时只需要将temp逐位插入到最终的数组中即可。\n\n​\t此外，对于整数k的长度远小于数组长度的测试用例，可以通过检查temp是否为0来提前终止循环，减少运行时间，算是一点小优化。\n\n代码：**C++**\n\n```c++\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        int nsize = num.size();\n        int temp = k;\n        for (int i = nsize - 1; i >= 0; i--) {\n            //小改进\n            if(temp == 0)\n                break;\n            temp = num[i] + temp;\n            num[i] = temp % 10;\n            temp = temp / 10;\n            //如果最高位出现进位\n            \n        }\n        while( temp != 0) {\n            num.insert(num.begin(), temp % 10);\n            temp = temp / 10;\n        }\n        return num;\n\n    }\n};\n```\n\n复杂度分析：\n\n​\t时间复杂度： 取决于整数k和数组的长度，所以应该是O(max(num.size(),logk));\n\n​\t空间复杂度：由于没有创建新的数组，应该为O(1);","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431341658","body":"思路：\n\n​\t既然需要查找距离当前位置最近的目标字符，一共有两种可能，左边最近或者右边最近，那么直观的想法是，每当遍历到一个字符，分别从左到字符串开头和从右到字符串末尾进行查找，最后将两边得到的最近的目标字符的距离进行比较，取最小值即可。当然会出现一些特殊情况，左边或者右边没有字符没有，或者目标字符只出现了一次，并且当前刚好遍历到该字符，此时两边都查找不到。\n\n\n\n代码：**C++**\n\n```c++\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        \n        int len = s.size();\n        vector<int> dis(len);\n        for(int i = 0; i < len;i++) {\n            int left = 0;\n            int right = 0;\n            if(s[i] != c){\n                //查找左边\n                for(int j = i; j >= 0; j--){\n                    if(s[j] == c){\n                        left = i - j;\n                        break;\n                    }\n                }\n                if(!left){\n                    left = -1;\n                }\n                //查找右边\n                for(int j = i; j < len; j++){\n                    if(s[j] == c){\n                        right = j - i;\n                        break;\n                    }\n                }\n                 if(!right){\n                    right = -1;\n                }\n                if(left == -1 || right == -1){\n                   dis[i] = max(left,right);\n                } else {\n                    dis[i] = min(left,right);\n                }\n                cout <<\"letf:\"<< left << endl;\n                cout <<\"rigth:\"<< right << endl;\n            } else {\n                dis[i] = 0;\n            }\n            \n        }\n        return dis;\n    }\n};\n```\n\n复杂度分析：\n\n时间复杂度：for循环里面嵌套了两个循环，时间复杂度为O(n\\*(i)+n\\*(n-i))=O($n^2$)\n\n空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432701934","body":"\n\n思路：\n\n​\t栈作为一种底层容器，可以使用vector、deque、list来实现，遵循“先进后出”原则，可以发现题目要求实现的 push、pop 和 inc 三个功能中，前两个功能就是普通的栈所具有的功能，而最后一个inc功能需要让栈中的元素是可见的。\n\n代码：**C++**\n\n```c++\nclass CustomStack {\npublic:\n    //使用vector来构造栈\n    vector<int> stk;\n    //栈顶元素\n    int top;\n\t//构造函数\n    CustomStack(int maxSize) {\n        stk.resize(maxSize);\n        top = -1;\n    }\n    \n    void push(int x) {\n        if (top != stk.size() - 1) {\n            ++top;\n            stk[top] = x;\n        }\n    }\n    \n    int pop() {\n        if (top == -1) {\n            return -1;\n        }\n        --top;\n        return stk[top + 1];\n    }\n    \n    void increment(int k, int val) {\n        int lim = min(k, top + 1);\n        for (int i = 0; i < lim; ++i) {\n            stk[i] += val;\n        }\n    }\n};\n\n```\n\n复杂度分析：\n\n时间复杂度：\n\n​\tpush: O(1)\n\n​\tpop:   O(1)\n\n​\tinc:     O(k)\n\n空间复杂度： O(maxSize)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"meisgithub":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429694199","body":"思路：\n加法模拟\n\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int> ans;\n        int carry = 0;\n        int n = num.size();\n        for (int i = n - 1; i >= 0; --i)\n        {\n            int digit = k % 10;\n            k /= 10;\n            int sum = num[i] + digit + carry;\n            ans.push_back(sum % 10);\n            carry = sum / 10;\n        }\n        while (k)\n        {\n            int digit = k % 10;\n            k /= 10;\n            int sum = digit + carry;\n            ans.push_back(sum % 10);\n            carry = sum / 10;\n        }\n        if (carry > 0)\n        {\n            ans.push_back(1);\n        }\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};\n\n时间复杂度：O(n)\n空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430809021","body":"思路：遍历一次得到左边和右边最接近字符c的下标，最后计算最近距离\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        int n = s.size();\n        vector<int> left(n);\n        vector<int> right(n);\n        left[0] = s[0] == c ? 0 : -10000;\n        right[n - 1] = s[n - 1] == c ? n - 1 : 20000;\n        for (int i = 1; i < n; ++i)\n        {\n            if (s[i] == c)\n            {\n                left[i] = i;\n            }\n            else\n            {\n                left[i] = left[i - 1];\n            }\n            // cout << n - i - 1 << endl;\n            if (s[n - i - 1] == c)\n            {\n                right[n - i - 1] = n - i - 1;\n            }\n            else\n            {\n                right[n - i - 1] = right[n - i];\n            }\n        }\n        vector<int> ans(n);\n        for (int i = 0; i < n; ++i)\n        {\n            ans[i] = min(abs(i - left[i]), abs(right[i] - i));\n        }\n        return ans;\n    }\n};\n时间复杂度：O(n)\n空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432486024","body":"#### 思路\n* 使用数组模拟\n``` cpp\nclass CustomStack {\nprivate:\n    int m_size;\n    int m_maxSize;\n    vector<int> v;\npublic:\n    CustomStack(int maxSize) {\n        m_size = 0;\n        m_maxSize = maxSize;\n        v.clear();\n    }\n    \n    void push(int x) {\n        if (m_size < m_maxSize)\n        {\n            v.push_back(x);\n            m_size++;\n        }\n    }\n    \n    int pop() {\n        if (m_size == 0)\n        {\n            return -1;\n        }\n        int ans = v[m_size - 1];\n        v.pop_back();\n        m_size--;\n        return ans;\n    }\n    \n    void increment(int k, int val) {\n        for (int i = 0; i < k && i < m_size; ++i)\n        {\n            v[i] += val;\n        }\n    }\n};\n```\n\n#### 复杂度\n* 时间复杂度：O(n)\n* 空间复杂度：O(maxSize())","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sye9286":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429697450","body":"### 思路\n\n把数组转换回数字，直接相加计算，再把结果转换成数组\n不过遇到一个问题是，题目给的数字居然超过了 JS 的安全最大值，被迫把所有数字转换成 BigInt 才能计算\n\n今天时间不多先写下这个方案，后续再思考完善一下其他方案，比如 k 直接往数组最后一位加，超过 10 的进一。但还没想好怎么处理最高位进一的问题。\n\n### 代码\n\n\n```js\n\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n    let num_digit = BigInt(0);\n    for (let i=0; i<=num.length-1; i++) {\n        num_digit += BigInt(num[i]) * (BigInt(10) ** BigInt(num.length-1-i) )\n    }\n\n    num_digit += BigInt(k)\n\n    return num_digit.toString().split('').map(Number);\n\n};\n\n```\n\n**复杂度分析**\n\n执行用时：5868 ms, 在所有 JavaScript 提交中击败了6.19%的用户\n内存消耗：50.8 MB, 在所有 JavaScript 提交中击败了5.31%的用户\n\n- 时间复杂度：O(n), n 为数组 num 的长度。\n- 空间复杂度：O(n)\n\n从结果上看 BigInt 的处理应该使用了大量内存空间\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431589153","body":"### 思路\r\n正向遍历，不匹配且从未匹配过时为 num[i] = -1，匹配为0，不匹配但曾经匹配过则为 num[i-1] 的值 +1\r\n反向遍历，和num里的值比较，更新为取较小的值。\r\n\r\n时间关系，代码还在测试中，结果有点问题。。\r\n\r\n### 代码\r\n```js\r\nlet s = [\"q\",\"g\",\"g\",\"c\",\"g\",\"e\",\"h\",\"c\"]\r\nlet c = \"c\"\r\nlet number = []\r\nlet number2 = []\r\n\r\n    let found = false;\r\n    \r\n    for(let i = 0; i < s.length; i++) {\r\n        \r\n\r\n        if (s[i] !== c){\r\n            if (!found) {\r\n                number[i] = -1;\r\n            } \r\n            else number[i] = number[i-1] + 1 ;\r\n        }\r\n\r\n\r\n        if (s[i] === c){\r\n            found = true;\r\n            number[i] = 0;\r\n        }\r\n        \r\n        // console.log(number)\r\n\r\n    }\r\n    \r\n    \r\n    found = false;\r\n    \r\n    for(i = s.length-1; i >= 0; i--) {\r\n    \r\n        if (s[i] === c){\r\n            number2[i] = 0;\r\n        }\r\n\r\n        if (s[i] !== c && i != s.length-1){\r\n            \r\n            number2[i] = number2[i+1] + 1 ;\r\n            \r\n            if (number2[i] < number[i] || number[i] === -1 ) number[i] = number2[i]\r\n        }\r\n    \r\n    \r\n        \r\n        // console.log(number2)\r\n\r\n    }\r\n```\r\n\r\n### 复杂度分析\r\n\r\n- 时间复杂度：O(n)\r\n- 空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432911295","body":"### 思路\n就是个数组。\nrealSize 表示容纳的真实元素数量，同时也可以作为下标用，因为每次都只操作最后一个元素\npush 时只要 realSize 小于 maxSize 就允许添加，否则不需要做特殊处理\npop 时如果 realSize 不为0，就返回那个元素（realSize - 1），并且 realSize 数量减少 1。其实理论上并不需要专门把栈里的数字删除，只要标记数量减少了即可。\ninc 先判断 k 是否大于 realSize，取小的值作为数量，然后从头依次相加\n\n\n### 代码\n```js\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n    this.stack = new Array(maxSize)\n    this.realSize = 0;\n    this.maxSize = maxSize;\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if (this.realSize < this.maxSize) {\n        this.stack[this.realSize++] = x;        \n    }\n    //console.log(\"push \"+ x)\n    //console.log(\"RS+ \"+this.realSize)\n    //console.log(this.stack)\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    //console.log(\"pop RS \" + this.realSize)\n    //console.log(\"before \"+ this.stack)\n    if(this.realSize !== 0){\n        let val_ret = this.stack[--this.realSize]\n        //console.log(\"RS-- \"+this.realSize)\n        //console.log(\"VR \"+val_ret)\n        this.stack[this.realSize] = undefined\n        //console.log(\"after \"+ this.stack)\n        return val_ret\n    }else return -1\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\n\n function min(a, b) {\n  return a < b ? a : b;\n}\n\nCustomStack.prototype.increment = function(k, val) {\n    //console.log(\"inc k \"+k+\" val \"+val)\n    //console.log(\"before inc \"+ this.stack)\n\n    for(let i=0; i< min(k,this.realSize); i++) {\n        this.stack[i] += val;\n    }\n    //console.log(\"after inc \"+ this.stack)\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */\n```\n\n### 复杂度分析\n时间复杂度，inc是O(n)，其他O(1)\n空间复杂度O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fuku-l":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429707061","body":"### 思路\n1. 从低位开始，每次取两个数字的相应一位a,b。进行求和sum（a+b+carry），取sum的个位放到结果，取sum的十位放到进位carry。对两个数字的指针进行移动，直到两个数字都遍历结束。\n2. 判断是否存在进位，有就将进位放到结果中。\n**模板**\n```\nwhile( A 没完 || B 没完成){\n    a = A 的当前位\n    b = B 的当前位\n    # 求和\n    sum = a+b+进位carry\n    当前位 = sum % 10\n    进位 = sum / 10\n\n    # 移动 A 和B\n    A=A/10\n    B=B/10 \n}\n\nif(进位carry!=0) {\n    将进位加到结果中\n}\n```\n### 代码\n\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> res = new ArrayList<Integer>();\n        int sum = 0;\n        int carry = 0;\n        int idx = num.length-1;\n        while(idx >=0 || k !=0){\n            int a = idx >= 0 ? num[idx]:0;\n            int b = k!=0 ? k%10:0;\n            sum = a+b+carry;\n            res.add(0,sum%10);\n            carry = sum/10;\n            idx--;\n            k/=10;\n        }\n        if(carry!=0) res.add(0, carry);\n        return res;\n    }\n}\n```\n\n**复杂度分析**\n- 时间复杂度：O(max(N, logK))，其中 N 为数组长度。\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430858292","body":"### 思路\r\n数组的正序遍历和倒序遍历。需要遍历两次，使用 indexof(ch, index)需要注意字符串不存在的情况，即返回-1。\r\n\r\n### 代码\r\n\r\n```java\r\npublic class Q0821ShortestDistanceToACharacter {\r\n\r\n    public static void main(String[] args) {\r\n        Solution solution = new Q0821ShortestDistanceToACharacter().new Solution();\r\n        int[] test1= solution.shortestToChar(\"loveleetcode\", 'e');\r\n        System.out.println(Arrays.toString(test1));;\r\n    }\r\n\r\n    class Solution {\r\n        public int[] shortestToChar(String s, char c) {\r\n            int[] res = new int[s.length()];\r\n            int ch = c;\r\n\r\n            for (int i = 0; i < s.length(); i++) {\r\n                int a = s.indexOf(ch, i);\r\n                int b = s.lastIndexOf(ch, i);\r\n                if (a == i) {\r\n                    res[i] = 0;\r\n                } else {\r\n                    res[i] = a>0&&b>0?Math.min(Math.abs(a - i), Math.abs(b-i)):a<0? Math.abs(b-i): Math.abs(a-i);\r\n                    //if(a<0){\r\n                    //    res[i] = Math.abs(b-i);\r\n                    //} else if(b<0){\r\n                    //    res[i] = Math.abs(a-i);\r\n                    //} else {\r\n                    //    res[i] = Math.min(Math.abs(a - i), Math.abs(b-i));\r\n                    //}\r\n                }\r\n            }\r\n            return res;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(N)，其中 N 为数组长度。\r\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432640510","body":"### 思路\r\n因为题目中要求 nc() 方法需要遍历栈底到k的区间，可以使用数组和指针来完成\r\n\r\n### 代码\r\n\r\n```java\r\nclass CustomStack {\r\n    int[] arr = null;\r\n    int top;\r\n    public CustomStack(int maxSize) {\r\n        arr = new int[maxSize];\r\n        top = -1;\r\n    }\r\n    \r\n    public void push(int x) {\r\n        if(top < arr.length-1){\r\n            arr[++top] = x;\r\n        }\r\n    }\r\n    \r\n    public int pop() {\r\n        if(top >= 0){\r\n            return arr[top--];\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n    \r\n    public void increment(int k, int val) {\r\n        int loop = Math.min(k-1, top);\r\n        for(int i = 0; i <= loop; i++){\r\n            arr[i] += val;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：出栈和入栈为O(1)，increment方法为O(N)， N 为数组长度。\r\n- 空间复杂度：O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kangliqi1":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429723823","body":"public List<Integer> addToArrayForm(int[] num,int k) {\n               //把k拆分成数组\n\t\tString kStr = String.valueOf(k);\n\t\tList<Integer> kArr= new ArrayList<>();\n\t\tString[] kStrs = kStr.split(\"\");\n\t\t//取较大值为遍历总次数，遍历相加，大于10则前一位多加1\n\t\tint a= num.length;\n\t\tint b = kStrs.length;\n\t\tint max = a;\n\t\tif (b>a){\n\t\t\tmax = b;\n\t\t}\n\t\tList <Integer> res = new ArrayList<>();\n\t\tint next = 0;\n\t\tfor (int j = 1;j<=max;j++) {\n\t\t\tint num1 = 0;\n\t\t\tint num2 = 0;\n\t\t\tif (a - j >=0) {\n\t\t\t\tnum1 = num[a-j];\n\t\t\t}\n\t\t\tif (b- j >= 0) {\n\t\t\t\tnum2 = Integer.valueOf(kStrs[b-j]);\n\t\t\t}\n\t\t\tint cur = num1+num2+next;\n\t\t\tif (cur>=10) {\n\t\t\t\tres.add(cur%10);\n\t\t\t\tnext = 1;\n\t\t\t} else {\n\t\t\t\tres.add(cur);\n\t\t\t\tnext = 0;\n\t\t\t}\n\t\t}\n\t\treturn Collections.reverse(res);\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431236149","body":"        public static int[] shortestToChar(String s, char c) {\n\t// 字符串长度\n        int len = s.length();\n        //创建一个和字符串长度一样长的数组存储结果值\n        int[] r = new int[len];\n \t//从左遍历\n        int pos = -10000;\n \tfor (int i = 0; i < len; i++) {\n            if (s.charAt(i) == c) {\n                pos = i;\n            }\n            r[i] = i - pos;\n        }\n \t//从右遍历\n        pos = 10000;\n        for (int i = len - 1; i >= 0; i--) {\n            if (s.charAt(i) == c) {\n                pos = i;\n            }\n            r[i] = Math.min(r[i], pos - i);\n        }\n        return r;\n    }\n\n时间复杂度O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433044884","body":"class CustomStack {  \r\n\t\r\n\tList<Integer> stack = new ArrayList();\r\n\tint maxSize = 0;\r\n\r\n   public CustomStack(int num) {\r\n      maxSize = num;\r\n    }\r\n\t\r\n\tpublic void push(int i) {\r\n\t\tif (stack.size() < maxSize) {\r\n\t\t\tstack.add(i);\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic int pop() {\r\n\t\tif (stack.size == 0) {\r\n\t\t\treturn -1;\r\n\t\t} else {\r\n\t\t\tint res = stack.get(stack.size() - 1);\r\n\t\t\tstack.removeLast();\r\n\t\t\treturn res;\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic void inc(int k, int val) {\r\n\t\tint i = k < stack.size() ? k : stack.size();\r\n\t\tfor (int j = 0;j < i;j++) {\r\n\t\t\tstack.get(j) += val;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n时间复杂度 stack.inc(int k, int val)   O(n)\r\n空间复杂度O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"richardtaok":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429734899","body":"# 思路\n将k转成数组，从数组最后一个两两相加，在加上上一对相加后的除数\n将余数赋值给较长数组的当前值\n更新当前的除数，直到其中一个走到头了\n长的一个数组继续上面的步骤。直到temp为0.\n返回最长的数组\n# 代码\n```\nvar addToArrayForm = function(num, k) {\n    const data = String(k).split('').map(i=>Number(i))\n    const addList = (num,data)=>{\n        let i = data.length-1;\n        let j = num.length-1;\n        let temp = 0\n        while(i>=0 && j>=0){\n            let sum = data[i] + num[j] + temp;\n            num[j] = sum%10\n            temp = parseInt(sum/10)\n            i--;\n            j--;\n            console.log(num)\n        }\n        while(j>=0){\n            let sum = num[j] + temp;;\n            num[j]=sum%10\n            temp = parseInt(sum/10)\n            j--;\n        }\n        console.log(num)\n        if(temp){\n            num.unshift(1)\n        }\n        return num;\n    }\n    if(num.length>=data.length){\n        return addList(num,data)\n    }else{\n        return addList(data,num)\n    }\n    \n    \n};\n```\n# 复杂度\n时间复杂度： O(n)\n空间复杂度： O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431546994","body":"# 代码\r\n```\r\nvar shortestToChar = function(s, c) {\r\n    const res = new Array(s.length).fill(0);\r\n    const n = s.length;\r\n    // idx是记录下最近一次左边c出现的位置\r\n    for(let i=0,idx=-n;i<n;i++){\r\n        if(s[i]===c){\r\n            idx = i\r\n        }\r\n        res[i] = i-idx;\r\n    }\r\n    // 记录下最近一次右边c出现的位置\r\n    for(let i=n-1,idx=2*n;i>=0;i--){\r\n        if(s[i]===c){\r\n            idx = i\r\n        }\r\n        res[i] = Math.min(res[i],idx-i)\r\n    }\r\n    return res\r\n};\r\n```\r\n# 复杂度分析\r\nT(n)=O(n)\r\nS(n)=O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433315696","body":"# 代码\n```\nvar CustomStack = function(maxSize) {\n    this.length = 0\n    this.maxSize = maxSize;\n    this.values = [];\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if(this.length<this.maxSize){\n        this.values.push(x)\n        this.length +=1;\n    }\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    if(this.length>0){\n        this.length-=1\n        return this.values.pop()\n    }\n    return -1\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    console.log(this.length,k)\n    const len = this.length<k ? this.length : k\n    for(let i = 0;i<len;i++){\n        this.values[i] += val\n    }\n    \n};\n```\n# increment复杂度\nT(n)= O(k)\nS(n)=O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chocolate-emperor":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429752834","body":"```c++\n// 大数加法，从最低位计算，一直加到两数均取完，最后再把多出的进位数也加上\nclass Solution {\npublic:\n\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        reverse(num.begin(),num.end());\n        vector<int>res;\n        int bit_res = 0,curr=0;\n        while(k!=0 || curr<num.size()){\n            if(curr<num.size()) bit_res+=num[curr];\n            if(k!=0)    bit_res += k%10;\n            res.push_back(bit_res%10);\n\n            bit_res = bit_res/10;\n            k=k/10;\n            curr+=1;\n        }\n        while(bit_res!=0){\n            res.push_back(bit_res%10);\n            bit_res/=10;\n        }\n        reverse(res.begin(),res.end());\n        return res;\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431312919","body":"```c++\nclass Solution {\npublic:\n//每个字符的结果来自离它右侧和左侧最近的字符c中的较小值\n//扫描两遍，第一遍更新所有c字符右侧字符的距离，第二遍更新所有c字符的左侧字符距离\n    vector<int> shortestToChar(string s, char c) {\n        int l = s.length();\n        int dis = 0, i=0, j=l-1;\n        vector<int>res(l,l);\n        while(s[i]!=c && i<l)  i+=1;\n        while(i <= l-1){\n            if(s[i]==c) dis=i;\n            res[i] = min(res[i],i-dis);\n\n            i+=1;\n        }\n\n        while(s[j]!=c && j>=0)   j-=1;\n        while(j>=0){\n            if(s[j]==c) dis=j;\n            res[j] = min(res[j],dis - j);\n\n            j-=1;\n        }   \n\n        return res;  \n        \n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433167584","body":"```c++\nclass CustomStack {\npublic:\n    int stk[1000+5];\n    int max_sz;\n    int cnt;    //（最后一个元素）栈顶元素序号\n    CustomStack(int maxSize) {\n        max_sz = maxSize;\n        cnt = -1;\n    }\n    \n    void push(int x) {\n        if(cnt+1<max_sz)   stk[++cnt] = x;\n\n    }\n    \n    int pop() {\n        if(cnt>-1)    return stk[cnt--];   \n        else return -1;\n    }\n    \n    void increment(int k, int val) {\n        for(int i=0;i<min(k,cnt+1);i++){\n            stk[i]+=val;\n        }\n    }\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lydia61":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429759312","body":"# 989. 数组形式的整数加法\n\n## 思路\n\n - 将 num 和 k 逐位进行求和，并将求和结果的个位逐个保存\n- 直到 num 全部遍历， 且 k 为 0 \n\n## 代码\n \n``` c++\nclass Solution\n{\npublic:\n    vector<int> addToArrayForm(vector<int> &num, int k)\n    {\n        // 用来保存结果值\n        vector<int> v_res;\n        \n        // 将 num 和 k 逐位进行求和，并将求和结果的个位逐个保存\n        // 直到 num 全部遍历， 且 k 为 0 \n        while (!num.empty() || k) {\n            if (!num.empty()) { \n                k += num.back();\n                num.pop_back();\n            }\n            v_res.push_back(k % 10);\n            k /= 10;\n        }\n\n        // 反转成从高位到低位\n        reverse(v_res.begin(), v_res.end());\n        \n        // 返回结果\n        return v_res;\n    }\n};\n```\n## 复杂度分析\n\n- 时间复杂度：O(n)\n- 空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431497927","body":"# 821. 字符的最短距离\n\n## 思路\n\n正反遍历字符串，分别算出距离目标字符的前后距离。\n\n## 代码\n\n``` c++\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        // 获取字符串长度\n        int length = s.length();\n        // 初始化结果向量\n        vector<int> v_res(length, 0);\n\n        // 保存 目标位置，初始值为最远处\n        int point_target = -length;\n\n        // 正向遍历\n        for(int index = 0; index < length; index++) {\n            if(s[index] == c) \n                point_target = index;\n            v_res[index] = index - point_target;\n        }\n\n        // 反向遍历\n        point_target = length << 1;\n        for(int index = length - 1; index >= 0; index--) {\n            if(s[index] == c) \n                point_target = index;\n            if (point_target - index < v_res[index])\n                v_res[index] = point_target - index;\n        }\n\n        // 返回结果\n        return v_res;\n    }\n};\n```\n\n## 复杂度分析\n\n- 时间复杂度：O(n)\n- 空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433244234","body":"# 1381. 设计一个支持增量操作的栈\n\n## 思路\n\n利用定长数组模拟栈\n\n## 代码\n\n``` C++\nclass CustomStack {\nprivate:\n    int * stack;\n    short length;\n    short MAX_SIZE;\n\npublic:\n    CustomStack(int maxSize) {\n        stack = new int[maxSize];\n        length = 0;\n        MAX_SIZE = maxSize;\n    }\n    \n    void push(int x) {\n        if(length < MAX_SIZE)\n            stack[length++] = x;\n    }\n    \n    int pop() {\n        if(length)\n            return stack[--length];\n        else\n            return -1;\n    }\n    \n    void increment(int k, int val) {\n        if (k > length)\n            k = length;\n        while (k)\n            stack[--k] += val;\n    }\n};\n```\n\n## 复杂度分析\n\n- 时间复杂度：O(1)\n- 空间复杂度：O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangjiahuan17":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429777424","body":"# 思路\r\n将输入list转化为int型后与k相加，再转化为list\r\n\r\n# 代码\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        num_str = \"\"\r\n        if len(num)>0:\r\n            for i in num:\r\n                num_str += str(i)\r\n            result_int = int(num_str) + k\r\n            result = [int(j) for j in str(result_int)]\r\n        return result\r\n \r\n# 复杂度\r\nO(n)?       \r\n       ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431465290","body":"# 思路\r\n正向遍历，记录s中字符与c的正向距离，反向遍历，记录s中字符与c的反向距离，取二者中最小值\r\n\r\n# 代码\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        sl = len(s)\r\n        result = [0 for i in range(sl)]\r\n\r\n        idx = -sl\r\n        for i, si in enumerate(s):\r\n            if si == c:\r\n                idx = i\r\n            result[i] = i - idx\r\n        \r\n        idx = 2 * sl\r\n        for i in range(sl-1, -1, -1):\r\n            if s[i] == c:\r\n                idx = i\r\n            result[i] = min(result[i], idx-i)\r\n        \r\n        return result\r\n# 复杂度\r\n时间复杂度：O(n)\r\n空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433203473","body":"# 代码\r\nclass CustomStack:\r\n\r\n    def __init__(self, maxSize: int):\r\n        self.st = []\r\n        self.cnt = 0\r\n        self.size = maxSize\r\n\r\n    def push(self, x: int) -> None:\r\n        if self.cnt < self.size:\r\n            self.st.append(x)\r\n            self.cnt += 1\r\n\r\n    def pop(self) -> int:\r\n        if len(self.st) == 0:\r\n            return -1\r\n        self.cnt -= 1\r\n        return self.st.pop()\r\n\r\n    def increment(self, k: int, val: int) -> None:\r\n        for i in range(min(k, self.cnt)):\r\n            self.st[i] += val\r\n\r\n# 复杂度\r\n时间复杂度：O(k)\r\n空间复杂度：O(maxsize)\r\n\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"seanutf":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429780721","body":"```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> res = new ArrayList<Integer>();\r\n        int n = num.length;\r\n        for (int i = n - 1; i >= 0; --i) {\r\n            int sum = num[i] + k % 10;\r\n            k /= 10;\r\n            if (sum >= 10) {\r\n                k++;\r\n                sum -= 10;\r\n            }\r\n            res.add(sum);\r\n        }\r\n        for (; k > 0; k /= 10) {\r\n            res.add(k % 10);\r\n        }\r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n}\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangyong-hub":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429806182","body":"```c\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& A, int K) {\n        vector<int> res;\n        int n = A.size();\n        for(int i =n-1;i>=0;i--){\n            int sum = A[i] + K%10;\n            K /=10;\n            if(sum>=10){\n                K++;\n                sum -=10;\n\n            }\n            res.push_back(sum);\n        }\n        for(;K>0;K/=10){\n            res.push_back(K%10);\n        }\n        reverse(res.begin(),res.end());\n        return res;\n\n    }\n};\n```\n# 时间复杂度 O(N)\n# 空间复杂度O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431343471","body":"思路：\n1、把c出现的位置记录；\n2、s[i]循环求最小距离\n时间复杂度（O(n*k)）\n空间复杂度O(N)\n```c\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        vector<int>num_i;\n        vector<int>res(s.length(),s.size());\n        for(int i=0;i<s.length();i++)\n        {\n            if(s[i]==c)\n                num_i.push_back(i);\n            else\n                continue;\n        }\n\n        for(int i=0;i<s.length();i++)\n        {\n            int dist=s.length();\n            if(s[i]==c)\n            {\n                res[i]=0;\n                continue;\n            } \n            else\n            {\n                for(int j=0;j<num_i.size();j++)\n                {\n                    dist = abs(i-num_i[j]);\n                    if(dist<res[i])\n                        res[i]=dist;\n                }\n            }\n        }\n        return res;\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433031130","body":"#思路\n使用数组模拟栈\n```c\nclass CustomStack {\nprivate:\n    int size;\n    int top;//栈顶\n    int *stack;//数组模拟栈\npublic:\n    CustomStack(int maxSize) {\n        stack = new int[maxSize];\n        size  = maxSize;\n        top = 0;\n    }  \n    void push(int x) {\n        if(top >=size)\n            return;\n        if(top <size)\n            stack[top++]=x;\n    }\n    \n    int pop() {\n        if(top>0)\n            return stack[--top];\n        else\n            return -1;\n\n    }\n    \n    void increment(int k, int val) {\n            if(top <k){\n                for(int i=0;i<top;i++)\n                        stack[i] +=val;\n            }else{\n                for(int i=0;i<k;i++)\n                        stack[i] +=val;\n\n            }\n    }\n};\n\n\n```\n# 时间复杂度分析\npop push (O(1))\ninc (O(K))\n#空间复杂度\nO(N)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"erquaner":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429815149","body":"```js\r\n/**\r\n * @param {number[]} num\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = function(num, k) {\r\n    let arrK = String(k).split('')\r\n    let i = num.length-1, j = arrK.length-1\r\n    let list = [], c = 0\r\n    while(i >=0||j>=0) {\r\n        const add1 = i >= 0 ? num[i] : 0;\r\n        const add2 = j >= 0 ? +arrK[j] : 0;\r\n        const sum = add1 + add2 + c;\r\n        c = Math.floor(sum / 10);\r\n        list.unshift(sum % 10);\r\n        i--;\r\n        j--;\r\n      \r\n    }\r\n     if(c != 0){\r\n        list.unshift(c);\r\n       }\r\n\r\n    return list;\r\n};\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1433066985","body":"```js\r\n//双指针\r\nvar shortestToChar = (S, C) => {\r\n    let res = [] \r\n    for ( let i = 0 ; i < S.length ; i ++){\r\n        let left = i , right = i\r\n        while(1){\r\n            if ( S[left] === C || S[right] === C) {\r\n                res.push(right-i)\r\n                break\r\n            }\r\n            left--;\r\n            right++\r\n        }\r\n    }\r\n    return res\r\n}\r\n// 数组 \r\nvar shortestToChar = (S, C) => {\r\n    let arr = [] , res = [] ,index = 0\r\n    for( let i = 0 ; i < S.length ; i ++){\r\n        if (S[i] === C ) arr.push(i)\r\n    }\r\n    for( let i = 0 ; i < S.length ; i ++){\r\n        for( let j = index ; j < arr.length ; j ++) {\r\n            if ( i <= arr[j] ){\r\n                index = j ; \r\n                res.push(Math.min(arr[j]-i,(i-arr[j-1] || Infinity)))\r\n                break\r\n            }\r\n            j === arr.length -1 && res.push(i-arr[j])\r\n        }\r\n    }\r\n    return res\r\n}\r\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433065609","body":"```js\r\n/**\r\n * @param {number} maxSize\r\n */\r\nvar CustomStack = function(maxSize) {\r\n  this.stack = new Array();   // [empty, ...]\r\n  this.maxSize = maxSize;\r\n};\r\n\r\n/** \r\n * @param {number} x\r\n * @return {void}\r\n */\r\nCustomStack.prototype.push = function(x) {\r\n  // 最大长度限制\r\n  if(this.stack.length<this.maxSize){\r\n    this.stack.push(x);\r\n  }\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nCustomStack.prototype.pop = function() {\r\n  // 栈顶为空的 =》 -1\r\n  if(this.stack.length===0){\r\n    return -1;\r\n  }\r\n  let val = this.stack.pop();\r\n  return val;\r\n};\r\n\r\n/** \r\n * @param {number} k \r\n * @param {number} val\r\n * @return {void}\r\n */\r\nCustomStack.prototype.increment = function(k, val) {\r\n  let n = Math.min(k,this.stack.length);  //取交集，前n个元素+val\r\n  for(let i=0;i<n;i++){\r\n    this.stack[i] += val;\r\n  }\r\n};\r\n\r\n/**\r\n * Your CustomStack object will be instantiated and called as such:\r\n * var obj = new CustomStack(maxSize)\r\n * obj.push(x)\r\n * var param_2 = obj.pop()\r\n * obj.increment(k,val)\r\n */\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jiujingxukong":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429824008","body":"# 思路\r\n在leetcode看题解，看到如下思路：\r\n```\r\nwhile ( A 没完 || B 没完)\r\n    A 的当前位\r\n    B 的当前位\r\n\r\n    和 = A 的当前位 + B 的当前位 + 进位carry\r\n\r\n    当前位 = 和 % 10;\r\n    进位 = 和 / 10;\r\n\r\n判断还有进位吗\r\n```\r\n顺着这个思路写。\r\n# 代码\r\n```javascript\r\n/**\r\n * @param {number[]} num\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = function (num, k) {\r\n  let res = [];\r\n  let carry = 0;\r\n\r\n  while (num.length !== 0 || k !== 0) {\r\n    let a = num.length !== 0 ? num.pop() : 0;\r\n    let b = k % 10;\r\n\r\n    let sum = a + b + curry;\r\n    let current = sum % 10;\r\n    carry = Math.floor(sum / 10);\r\n\r\n    res.push(current);\r\n\r\n    k = Math.floor(k / 10);\r\n  }\r\n  if (curry === 1) res.push(1);\r\n  return res.reverse();\r\n};\r\n```\r\n# 复杂度分析\r\n1. 时间复杂度\r\nO(max(a,b)) a为给定数组长度，b为给定整数的位数\r\n2. 空间复杂度\r\ncurry是函数范围的变量\r\na,b,sum,current,k都是循环范围的变量\r\n整体空间复杂度为O（1）\r\n\r\n# 个人代码习惯勘误\r\n1. array.push()返回值不是数组，不能res=res.push(current)\r\n2. 返回值需要return值,不然就会看到返回值是undefined\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431476925","body":"# 解题思路\n看Lucifer的官方题解2  \n先将字符c出现在字符串s中的下标位置存入数组cIndices中  \n再遍历字符串s的每个字符，再在cIndices中寻找距离当前字符最近的下标\n# 代码\n```javascript\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function(s, c) {\n    let cIndices=[]\n    for(i=0;i<s.length;i++){\n        if(s[i]===c){\n            cIndices.push(i)\n        }\n    }\n\n    let res=Array(s.length).fill(Infinity)\n\n    for(i=0;i<s.length;i++){\n\n        if(s[i]===c){\n            res[i]=0\n            continue\n        }\n\n        for(let cIndex of cIndices){\n            let distance=Math.abs(i-cIndex)\n\n            if(res[i]<distance)break\n\n            res[i]=distance\n        }\n    }\n    return res\n\n};\n```\n# 复杂度分析\n1. 时间复杂度。O（N*K）N为字符串s的长度，K为c字符出现在字符串s中的次数，K<=N。一层循环内套一层小的循环。O（N+N*K）≈O（N*K）\n2. 空间复杂度。O（K）。开辟了新的数组cIndices。\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433211649","body":"# 解题思路\r\n第二种解题思路没看懂，第一次看到这种解法，所以按照第一种写代码   \r\n需要一个 cnt 变量记录栈的当前长度，一个 size 变量记录最大容量，并在 pop 和 push 的时候更新 cnt   \r\npush 的时候要判断是否满了   \r\npop 的时候要判断是否空了\r\n从栈底往上的K个元素增加都val，要遍历栈内元素，当增加到K个元素时，便跳出循环。\r\n# 解题代码\r\n```javascript\r\n/**\r\n * @param {number} maxSize\r\n */\r\nvar CustomStack = function(maxSize) {\r\n    this.max=maxSize\r\n    this.stack=[]\r\n\r\n};\r\n\r\n/** \r\n * @param {number} x\r\n * @return {void}\r\n */\r\nCustomStack.prototype.push = function(x) {\r\n    if(this.stack.length<this.max){\r\n        this.stack.push(x)\r\n    }\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nCustomStack.prototype.pop = function() {\r\n    const res=this.stack.pop()\r\n   return res==null?-1:res\r\n\r\n};\r\n\r\n/** \r\n * @param {number} k \r\n * @param {number} val\r\n * @return {void}\r\n */\r\nCustomStack.prototype.increment = function(k, val) {\r\n    for(i=0;i<this.stack.length;i++){\r\n        if(i<k){\r\n            this.stack[i]=this.stack[i]+val\r\n        }\r\n       if(i=k)break\r\n    }\r\n};\r\n```\r\n# 复杂度分析\r\n1. 时间复杂度   \r\npush和pop都是O（1）   \r\nincrement操作是O（min(k,l)）l是stack的长度   \r\n2. 空间复杂度O（1）\r\n# 代码习惯\r\n1. 当js中数组长度为0，此时pop，会返回结果undefined,所以判断原本数组中是否为空的条件，需要是res==null，而不能是res===null\r\n\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"x1aox1a":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429825256","body":"# **0989. 数组形式的整数加法**\n\n# 题目\n\n```bash\n整数的 数组形式  num 是按照从左到右的顺序表示其数字的数组。\n\n例如，对于 num = 1321 ，数组形式是 [1,3,2,1] 。\n给定 num ，整数的 数组形式 ，和整数 k ，返回 整数 num + k 的 数组形式 。\n\n示例 1：\n\n输入：num = [1,2,0,0], k = 34\n输出：[1,2,3,4]\n解释：1200 + 34 = 1234\n示例 2：\n\n输入：num = [2,7,4], k = 181\n输出：[4,5,5]\n解释：274 + 181 = 455\n示例 3：\n\n输入：num = [2,1,5], k = 806\n输出：[1,0,2,1]\n解释：215 + 806 = 1021\n```\n\n# 思路\n\n1. 将列表转数字\n2. 数字相加\n3. 数字和转列表\n4. 返回列表\n\n# 代码\n\n```python\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n\n        def list_to_num(num: List[int]) -> int:\n            # O(N)\n            res = 0\n            Len = len(num)\n            for i in range(Len):\n                res += num[i] * 10**(Len-i-1)\n            return res\n\n        def num_to_list(k: int) -> List[int]:\n            # O(N)\n            return list(map(int, str(k)))\n\n        return num_to_list(list_to_num(num) + k)\n```\n\n- 时间复杂度：O(N) + O(N) = O(N)\n- 空间复杂度：O(1)，除了返回结果，只使用了常数空间","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431475727","body":"# 0**821. 字符的最短距离**\r\n\r\n# 题目\r\n\r\n```python\r\n给你一个字符串 s 和一个字符 c ，且 c 是 s 中出现过的字符。\r\n\r\n返回一个整数数组 answer ，其中 answer.length == s.length 且 answer[i] 是 s 中从下标 i 到离它 最近 的字符 c 的 距离 。\r\n\r\n两个下标 i 和 j 之间的 距离 为 abs(i - j) ，其中 abs 是绝对值函数。\r\n\r\n \r\n\r\n示例 1：\r\n\r\n输入：s = \"loveleetcode\", c = \"e\"\r\n输出：[3,2,1,0,1,0,0,1,2,2,1,0]\r\n解释：字符 'e' 出现在下标 3、5、6 和 11 处（下标从 0 开始计数）。\r\n距下标 0 最近的 'e' 出现在下标 3 ，所以距离为 abs(0 - 3) = 3 。\r\n距下标 1 最近的 'e' 出现在下标 3 ，所以距离为 abs(1 - 3) = 2 。\r\n对于下标 4 ，出现在下标 3 和下标 5 处的 'e' 都离它最近，但距离是一样的 abs(4 - 3) == abs(4 - 5) = 1 。\r\n距下标 8 最近的 'e' 出现在下标 6 ，所以距离为 abs(8 - 6) = 2 。\r\n示例 2：\r\n\r\n输入：s = \"aaab\", c = \"b\"\r\n输出：[3,2,1,0]\r\n```\r\n\r\n# 思路：双向遍历\r\n\r\n- 第一次：左到右，计算最短距离\r\n- 第二次：右到左，再次计算并且更新最短距离\r\n\r\n# 代码\r\n\r\n```python\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n\r\n        L = len(s)\r\n        res = [L] * L\r\n        \r\n        # left to right\r\n        c_idx = None\r\n        for i, char in enumerate(s):\r\n            if char==c:\r\n                c_idx, res[c_idx] = i, 0\r\n            elif c_idx is not None:\r\n                res[i] = i-c_idx\r\n\r\n        # right to left        \r\n        c_idx = None  \r\n        for i, char in enumerate(s[::-1]):\r\n            i = L-i-1\r\n            if char==c: \r\n                c_idx = i\r\n            elif c_idx is not None:\r\n                res[i] = min(res[i], c_idx-i)\r\n        \r\n        return res\r\n```\r\n\r\n- 时间复杂度：O(N)\r\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433300555","body":"# **1381. 设计一个支持增量操作的栈**\r\n\r\n# 题目\r\n\r\n```python\r\n请你设计一个支持对其元素进行增量操作的栈。\r\n\r\n实现自定义栈类 CustomStack ：\r\n\r\nCustomStack(int maxSize)：用 maxSize 初始化对象，maxSize 是栈中最多能容纳的元素数量。\r\nvoid push(int x)：如果栈还未增长到 maxSize ，就将 x 添加到栈顶。\r\nint pop()：弹出栈顶元素，并返回栈顶的值，或栈为空时返回 -1 。\r\nvoid inc(int k, int val)：栈底的 k 个元素的值都增加 val 。如果栈中元素总数小于 k ，则栈中的所有元素都增加 val 。\r\n \r\n\r\n示例：\r\n\r\n输入：\r\n[\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]\r\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]\r\n输出：\r\n[null,null,null,2,null,null,null,null,null,103,202,201,-1]\r\n解释：\r\nCustomStack stk = new CustomStack(3); // 栈是空的 []\r\nstk.push(1);                          // 栈变为 [1]\r\nstk.push(2);                          // 栈变为 [1, 2]\r\nstk.pop();                            // 返回 2 --> 返回栈顶值 2，栈变为 [1]\r\nstk.push(2);                          // 栈变为 [1, 2]\r\nstk.push(3);                          // 栈变为 [1, 2, 3]\r\nstk.push(4);                          // 栈仍然是 [1, 2, 3]，不能添加其他元素使栈大小变为 4\r\nstk.increment(5, 100);                // 栈变为 [101, 102, 103]\r\nstk.increment(2, 100);                // 栈变为 [201, 202, 103]\r\nstk.pop();                            // 返回 103 --> 返回栈顶值 103，栈变为 [201, 202]\r\nstk.pop();                            // 返回 202 --> 返回栈顶值 202，栈变为 [201]\r\nstk.pop();                            // 返回 201 --> 返回栈顶值 201，栈变为 []\r\nstk.pop();                            // 返回 -1 --> 栈为空，返回 -1\r\n```\r\n\r\n# 思路\r\n\r\n# 代码\r\n\r\n```python\r\nclass CustomStack:\r\n\r\n    def __init__(self, maxSize: int):\r\n        self.max_size = maxSize\r\n        self.size = 0\r\n        self.stack = []\r\n\r\n    def push(self, x: int) -> None:\r\n        if self.size == self.max_size: return None\r\n        self.stack.append(x)\r\n        self.size += 1\r\n\r\n    def pop(self) -> int:\r\n        if self.size == 0: \r\n            return -1\r\n        else:\r\n            self.size -= 1\r\n            return self.stack.pop()\r\n\r\n    def increment(self, k: int, val: int) -> None:\r\n        for i in range(min(k, self.size)):\r\n            if i==self.max_size:\r\n                return None\r\n            self.stack[i] += val\r\n            \r\n\r\n# Your CustomStack object will be instantiated and called as such:\r\n# obj = CustomStack(maxSize)\r\n# obj.push(x)\r\n# param_2 = obj.pop()\r\n# obj.increment(k,val)\r\n```\r\n\r\n- 时间复杂度：\r\n    - push: O(1)\r\n    - pop: O(1)\r\n    - increment: O(min(k, size)), size is the current size\r\n- 空间复杂度：都是 O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"drinkmorekaik":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429842914","body":"## 思路\n##### 遍历数组num然后往数字k累加，省去进位的考虑，使用~~运算符避免undefined相加为NaN的情况，返回数组先使push最终再reserve比每一次unshift性能更好\n```\nconst addToArrayForm = function(num, k) {\n    const res = [];\n    let len = num.length - 1\n    while(len >= 0 || k) {\n        k += ~~num[len]\n        res.push(k % 10)\n        k = parseInt(k / 10)\n        len--\n    }\n    return res.reverse()\n}\n```\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431458364","body":"## 思路\r\n## 双指针记录当前正在遍历字符串的最近的左右字符c的index\r\n## 然后计算距离它的最小值\r\n```javascript\r\nvar shortestToChar = function(s, c) {\r\n  const res = []\r\n  let leftIndex = -1,\r\n      rightIndex = s.indexOf(c)\r\n  for (let i = 0; i < s.length; i++) {\r\n      if (leftIndex === -1 && i < rightIndex) {\r\n          res[i] = rightIndex - i\r\n          continue\r\n      }\r\n      if (i === rightIndex) {\r\n          res[i] = 0\r\n          leftIndex = rightIndex\r\n          rightIndex = s.indexOf(c, leftIndex + 1)\r\n          continue\r\n      }\r\n      // i-leftIndex 一定为正数， rightIndex-i 使用 Math.abs 的原因是 rightIndex 值可能为 -1，-1减去i的绝对值一定大于 i-leftIndex\r\n      res[i] = Math.min(i - leftIndex, Math.abs(rightIndex - i))\r\n  }\r\n  return res\r\n};\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433180933","body":"##API 搬运工\n```javascript\nclass CustomStack {\n  constructor(maxSize) {\n    this.maxSize = maxSize\n    this.stack = []\n  }\n  push(x) {\n    if (this.stack.length < this.maxSize) this.stack.push(x)\n  }\n  pop() {\n    return this.stack.pop() || -1\n  }\n  increment(k, val) {\n    const count = Math.min(k, this.stack.length)\n    for (let i = 0; i < count; i++) {\n      this.stack[i] += val\n    }\n  }\n}\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dinjufen":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429850830","body":"思路：令t = k，从num的末位开始累加，边加边将t的末位放入列表，以免t太大超出限制。加完后再依次添加num剩余的数，最后得到结果\n时间复杂度：O(n)\n空间复杂度：O(n)\n\n```C++\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        int t = k;\n        int i = 0;\n        vector<int> res;\n        while (t) {\n            if (i < num.size()) {\n                t += num[num.size() - i - 1];\n                i++;\n            }\n            res.push_back(t % 10);\n            t /= 10;\n        }\n        while (i < num.size()) {\n            res.push_back(num[num.size() - i - 1]);\n            i++;\n        }\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuzmt":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429857608","body":"### 思路\n从低位相加，每次将所得之和的个位数push进arr数组, 再将和除以10之后取整，与数组的倒数第二位再相加，以此循环\n### 代码\n```js\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n    const arr = [];\n    let _k = k;\n    let i = num.length - 1;\n    while (i >= 0 || _k > 0) {\n        if (i >= 0) {\n            _k += num[i];\n            i--;\n        }\n        arr.push(_k % 10);\n        _k = parseInt(_k / 10);\n    }\n    return arr.reverse();\n};\n```\n### 复杂度分析\n- 时间复杂度O(n)\n- 空间复杂度O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431399034","body":"### 思路\n拿到每一个字符到目标字符的距离，然后再取出最短距离\n### 代码\n```js\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function(s, c) {\n    var len = s.length;\n    var res = [];\n    for (var i = 0; i < len; i++) {\n        var distance = [];\n        for (var n = 0; n < len; n++) {\n            if (s[n] === c) {\n                distance.push(Math.abs(i - n));\n            }\n        }\n        res.push(Math.min(...distance))\n    }\n    return res;\n};\n```\n### 复杂度\n- 时间复杂度 O(n^2)\n- 空间复杂度 O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433164917","body":"### 思路\n- 构造函数主要就是初始化两个值；\n- push在数组最后添加一个元素；\n- pop把数组最后一个元素删除，并返回删除的值即可；\n- increment确定好循环次数\n### 代码\n```js\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n    this.stack = [];\n    this.maxSize = maxSize;\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if (this.stack?.length < this.maxSize) {\n        this.stack = [...this.stack, x]\n    }\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    const len = this.stack.length;\n    const lastVal = this.stack[len - 1];\n    this.stack.splice(len - 1, 1)\n    return lastVal || -1;\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    const len = this.stack.length > k ? k : this.stack.length;\n    for(let i = 0; i < len; i++) {\n        this.stack[i] += val;\n    }\n};\n```\n### 复杂度\n- 时间复杂度\n  - 初始化, push, pop为O(1)\n  - increment 为O(k)\n- 空间复杂度 O(maxSize)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"munmust":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429862730","body":"### 思路\n1,将k也转化为数组\n2，将两个数组从最后开始相加\n3，通过和得出carry（是否进位），和当前位数的值\n4，最后判断是否有carry，在添加到结果数组里\n5，反转数组得到结果\n\n### 代码\n\n``` javascript\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function (num, k) {\n    const result = [];\n    let i = num.length - 1;\n    const kArr = `${k}`.split('').map(v => Number(v));\n    let j = kArr.length - 1;\n    let carry = 0;\n    while (i >= 0 || j >= 0) {\n        const sumVal = (num?.[i] || 0) + (kArr?.[j] || 0) + carry;\n        const val = Math.floor(sumVal % 10);\n        carry = Math.floor(sumVal / 10);\n        result.push(val);\n        i--;\n        j--;\n    }\n    if (!!carry) {\n        result.push(carry)\n    }\n    return result.reverse();\n};\n```\n\n### 复杂度\n空间复杂度 O(n)\n时间复杂度 O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431439401","body":"### 思路\n1，得到各个指定字符的位置\n2，遍历字符串，遍历得到的位置的数组\n3，进行两个位置的相减，取最小正整数返回\n### 代码\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function (s, c) {\n    const sArr = s.split('');\n    const cResult = [];\n\n    sArr.forEach((sItem, index) => {\n        if (sItem === c) {\n            cResult.push(index);\n        }\n    })\n    const result = sArr.map((v, index) => {\n        let min = s.length;\n        cResult.forEach(value => {\n            const nowMin = Math.abs(value - index)\n            min = min < nowMin ? min : nowMin\n        })\n        return min\n    })\n    return result\n};\n\n### 时间复杂度 O(n^2)\n### 空间复杂度O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433348222","body":"``` javascript\r\n/**\r\n * @param {number} maxSize\r\n */\r\nvar CustomStack = function (maxSize) {\r\n    this.stack = [];\r\n    this.maxSize = maxSize;\r\n};\r\n\r\n/** \r\n * @param {number} x\r\n * @return {void}\r\n */\r\nCustomStack.prototype.push = function (x) {\r\n    if (this.stack.length < this.maxSize) {\r\n        this.stack.push(x)\r\n    }\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nCustomStack.prototype.pop = function () {\r\n    if (this.stack.length === 0) {\r\n        return -1;\r\n    }\r\n    return this.stack.pop();\r\n\r\n};\r\n\r\n/** \r\n * @param {number} k \r\n * @param {number} val\r\n * @return {void}\r\n */\r\nCustomStack.prototype.increment = function (k, val) {\r\n    let len = Math.min(k, this.stack.length);  //取交集，前n个元素+val\r\n    for (let i = 0; i < len; i++) {\r\n        this.stack[i] += val;\r\n    }\r\n};\r\n\r\n/**\r\n * Your CustomStack object will be instantiated and called as such:\r\n * var obj = new CustomStack(maxSize)\r\n * obj.push(x)\r\n * var param_2 = obj.pop()\r\n * obj.increment(k,val)\r\n */\r\n```","onTime":false},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yan-jie":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429866566","body":"```javascript\nvar addToArrayForm = function(num, k) {\n\n    let result = [];\n    const numberLen = num.length;\n    let reducedK = k;\n    let carry = 0;\n\n    for(let i = numberLen - 1; ; i--){\n        if(num[i] === undefined && reducedK === 0 && carry === 0){\n            break;\n        }\n        const lastInNum = num[i] === undefined ? 0 : num[i];\n        const lastInK = reducedK === 0 ? 0 : reducedK % 10;\n        reducedK = Math.floor(reducedK / 10);\n        const sum = lastInNum + lastInK + carry;\n        const validSum = sum >= 10 ? sum - 10 : sum;\n        carry = sum >= 10 ? 1 : 0\n        result.unshift(validSum);\n    }\n\n    return result;\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431456161","body":"```javascript\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function(s, c) {\n    const result = [];\n    const len = s.length;\n    let lastPosition = -1;\n    for(let i = 0; i < len; i++){\n        if(s[i] === c){\n            if(lastPosition === -1){\n                lastPosition = i;\n            }\n            for(let j = 0; j <= i; j++){\n                const oldDistance = result[j];\n\n                const d1 = Math.abs(lastPosition - j);\n                const d2 = Math.abs(i - j)\n                const minDistance = Math.min(d1, d2)\n\n                if(oldDistance === undefined){\n                    result[j] = minDistance\n                }else{\n                    result[j] = Math.min(oldDistance, minDistance)\n                }\n            }\n            lastPosition = i;\n        }\n    }\n\n    // 补充\n    if(lastPosition < len - 1){\n        for(let i = lastPosition; i < len; i++){\n            result[i] = Math.abs(lastPosition - i)\n        }\n    }\n\n    return result;\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432866073","body":"```javascript\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n    this.maxSize = maxSize;\n    this.data = new Array(maxSize).fill(null);\n    this.index = -1;\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if(this.index < this.maxSize - 1){\n        this.data[this.index + 1] = x;\n        this.index++;\n    }\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    if(this.index === -1){\n        return -1\n    }\n    const res = this.data[this.index];\n    this.data[this.index] = null;\n    this.index = this.index - 1;\n    return res;\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    if(this.index === -1) return;\n    const loopNumber = Math.min(k, this.index + 1)\n    for(let i = 0; i < loopNumber; i++){\n        this.data[i] = this.data[i] + val;\n    }\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hktangshuo":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429871860","body":"有bug\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        int n = num.length - 1;\n        LinkedList<Integer> res = new LinkedList<>();\n\n        int c = k;\n        while (n >= 0) {\n            int tmp = num[n]+c;\n\n            res.addFirst(tmp%10);\n            c=tmp/10;\n\n            n--;\n        };\n        while (c!=0){\n            res.addFirst(c);\n\n            c=c/10;\n\n        }\n\n        return res;\n    }\n\n}","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zpbc007":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429891929","body":"# 思路\n- k % 10 得到当前位的数值\n- Math.floor(k / 10 ) 得到向上一位的值\n- 将 k 直接加到数组最后一位，并不断向上进位，直到数组遍历完毕 & k 为0\n\n# 代码\nfunction addToArrayForm(num: number[], k: number): number[] {\n    const result: number[] = []\n    \n    for (let index = num.length - 1; index >= 0 || k > 0;index--, k = Math.floor(k / 10)) {\n        if (index >= 0) {\n            k += num[index]\n        }\n        \n        result.unshift(k%10)\n    }\n    \n    return result\n};\n\n# 复杂度分析\n时间复杂度：O（Max(num.length,k))\n空间复杂度：O（num.length)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431481273","body":"# 思路\n正序遍历数组，得到距离左侧节点的距离，逆序遍历数组，得到距离右侧节点的距离\n\n# 代码\n```ts\nfunction shortestToChar(s: string, c: string): number[] {\n    const result: number[] = []\n\n    let lastIndex = -1\n    for (let index = 0; index < s.length ; index++) {\n        const char = s[index]\n\n        if (char === c) {\n            lastIndex = index\n        }\n\n        result[index] = lastIndex === -1 ? s.length : index - lastIndex\n    }\n\n    lastIndex = -1\n    for (let index = s.length - 1; index >= 0; index--) {\n        const char = s[index]\n\n        if (char === c) {\n            lastIndex = index\n        }\n\n        result[index] = lastIndex === -1 ? result[index] : (result[index] < lastIndex - index ? result[index] : lastIndex - index)\n    }\n    return result\n};\n```\n\n# 复杂度\n时间复杂度：O(n)\n空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433298451","body":"# 思路\n一个 stack 维护原始数据，一个 stack 维护后续每个元素增加的值。在 pop 的时候再把值加上\n\n# 代码\nclass CustomStack {\n    // 存放数据\n    private dataArr: number[] = []\n\n    // 存放每次增加的值\n    private incrementVal: number[] = []\n\n    // 栈顶指针\n    private topIndex = -1\n\n    constructor(private maxSize: number) {}\n\n    push(x: number): void {\n        if (this.topIndex < this.maxSize - 1) {\n            this.dataArr[++this.topIndex] = x\n        }\n    }\n\n    pop(): number {\n        if (this.topIndex === -1) {\n            return -1\n        }\n\n        const result = this.dataArr[this.topIndex] + (this.incrementVal[this.topIndex] ? this.incrementVal[this.topIndex] : 0)\n        this.dataArr[this.topIndex] = 0\n        this.incrementVal[this.topIndex] = 0\n        this.topIndex--\n\n        return result\n    }\n\n    increment(k: number, val: number): void {\n        const maxIndex = Math.min(k, this.topIndex + 1)\n\n        for (let i = 0; i < maxIndex; i++) {\n            this.incrementVal[i] = this.incrementVal[i] ? this.incrementVal[i] + val : val\n        }\n    }\n}\n\n# 复杂度\n时间复杂度：\n- pop O(1)\n- increment O(1)\n\n空间复杂度：O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"linlizzz":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429896683","body":"### 思路\n1.将K转换成数组形式\n\n2.将数组A和K的元素依次倒叙相加，顺序记入新数组，大于9的结果记1，加入下一次计算\n\n3.将得到的数组进行元素倒序排序，得到最终结果\n\n### 代码\n```python\nimport numpy as np\n\ndef add(A, K):\n    K_list = []\n    while(K//10 != 0):\n        K_list.append(K%10)\n        K = K//10\n    K_list.append(K%10) # 将K倒序存成列表\n    print(K_list)\n    res = []\n    up = 0\n    diff = abs(A.shape[0] - len(K_list))\n    for i in range(min(len(K_list), A.shape[0])):\n        res.append((K_list[i] + A[-1-i])%10 + up)\n        print(res)\n        if (K_list[i] + A[-1-i])//10 == 1:\n            up = 1\n        else:\n            up = 0\n    if A.shape[0] > len(K_list):\n        for j in range(diff):\n            res.append(A[-2-i-j] + up)\n            if (A[-2-i-j] + up)//10 == 1:\n                up = 1\n            else:\n                up = 0\n            print(res)\n    elif A.shape[0] < len(K_list):\n        for j in range(diff):\n            res.append(K_list[i+j+1] + up)\n            if (K_list[i+j+1] + up)//10 == 1:\n                up = 1\n            else:\n                up = 0\n            print(res)\n    res.reverse()\n    res = np.array(res)\n    return res\n```\n### 时间复杂度\nT(n)=O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431529057","body":"### 思路\n1.取出字符c在字符串s中出现的所有下标值，存于列表pos\n\n2.比较每个位置下标值与pos中所有值的差绝对值，取最小数，作为该位置的最短距离值，存于输出结果列表的相应位置\n\n### 代码\n```python\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        pos = []\n        res = []\n        for i in range(len(s)):\n            if c == s[i]:\n                pos.append(i)\n\n        for j in range(len(s)):\n            t = len(s)\n            for i in pos:\n                t = min(abs(j-i), t)\n            res.append(t)\n        \n        return res\n```\n### 复杂度分析\nT(n) = n^2\n\nS(n) = n\n\nn=len(s)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433291470","body":"### 思路\n\n1.利用列表构建栈，列表长度为maxSize，设计指针变量指向栈顶之后一个元素。\n\n2.push时，先判断列表是否已满，未满则加入指针变量指向元素位置，指针变量上移。\n\n3.pop时，先判断列表是否为空，非空则指针变量下移，取出该元素值，并将该元素清空。\n\n4.increment时，取k和指针变量较小者，遍历加入val值。\n\n### 代码\n```python\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack = [None]*maxSize\n        self.size = maxSize\n        self.point = 0\n\n    def push(self, x: int) -> None:\n        if self.point == self.size:\n            pass\n        else:\n            self.stack[self.point] = x\n            self.point += 1\n\n    def pop(self) -> int:\n        if self.point == 0:\n            res = -1\n        else:\n            self.point -= 1\n            res = self.stack[self.point]\n            self.stack[self.point] = None\n        return res\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(k):\n            if i < self.point:\n                self.stack[i] += val\n            else:\n                break\n```\n### 复杂度分析\nincrement时，T(n)=O(n),n为栈的maxSize\n其余T(n)=O(1)\nS(n)=O(n)\n\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"krabbejing":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429898395","body":"\n    class Solution:\n        def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n            i = len(num)-1\n            while k:\n                num[i] += k\n                k, num[i] = num[i] // 10, num[i] % 10\n                i -= 1\n                if i < 0 and k > 0:\n                    i = 0\n                    num.insert(0,0)\n            return num\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431543980","body":"    class Solution:\n        def shortestToChar(self, s: str, c: str) -> List[int]:\n            length = len(s)\n            res = [0 if s[i] == c else None for i in range(length)]\n            # left to right\n            for i in range(1, length):\n                if res[i] != 0 and res[i-1] is not None:\n                    res[i] = res[i-1] + 1\n            # right to left\n            for i in range(length-2, -1, -1):\n                if res[i] is None or res[i+1] + 1 < res[i]:\n                    res[i] =  res[i+1] + 1\n            return res","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433234776","body":"```python\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.currentSize = 0\n        self.storage = []\n\n    def push(self, x: int) -> None:\n        if self.currentSize < self.maxSize:\n            self.storage.append(x)\n            self.currentSize+=1\n\n    def pop(self) -> int:\n        if self.currentSize == 0:\n            return -1\n        self.currentSize-=1\n        return self.storage.pop()\n\n    def increment(self, k: int, val: int) -> None:\n        incre_num = min(k, self.currentSize)\n        for i in range(incre_num):\n            self.storage[i] += val\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"firehaosky":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429903817","body":"# 思路：\n# k取余数与num的最后一位相加，数组长度i-1，用re来记录进位，当k取整或数组num的长度i为0时，将剩余数，插入数组前面。\n\n# 代码：\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        re = 0\n        ans = []\n        i_num = len(num)-1\n        i_k = len(str(k))-1\n\n        while i_num>=0 or i_k>=0:\n            x = num[i_num] if i_num>=0 else 0\n            y = k%10 if i_k>=0 else 0\n            k //= 10\n\n            sums = x+y+re\n            re = sums // 10\n            ans.insert(0, sums%10)\n\n            i_num -= 1\n            i_k -= 1\n        \n        if re>0:\n            ans.insert(0, re)\n        \n        return ans\n\n# 复杂度分析\n# 时间复杂度：O(n)\n# 空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431347829","body":"# 思路：\n'''\n遍历数组，从左起以数组最大长度计算，逐个递减，当遇到c的时候更新被减数\n从右再遍历一遍，同之前的结果对比取最小值。\n'''\n# 解题 python\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        n = len(s)\n        ans = [0] * n\n\n        idx = -n\n        for i in range(0,n):\n            if s[i] == c:\n                idx = i\n            \n            ans[i] = i - idx\n        \n        idx = 2*n\n        for i in range(n-1, -1, -1):\n            if s[i] == c:\n                idx = i\n            \n            ans[i] = min(ans[i], idx-i)\n        \n        return ans\n\n# 复杂度分析：\n'''\n时间复杂度：for循环O（n）\n空间复杂度：O（1）\n'''","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432933019","body":"# 思路：\n'''\n首先根据最大值确定数组长度，以及数组计数\n'''\n\n# 解题 python\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack = [0] * maxSize\n        self.top_num = -1\n\n\n    def push(self, x: int) -> None:\n        if self.top_num != len(self.stack)-1:\n            self.top_num+=1\n            self.stack[self.top_num] = x\n\n\n\n    def pop(self) -> int:\n        if self.top_num != -1:\n            self.top_num -= 1\n            return self.stack[self.top_num+1]\n        else:\n            return -1\n\n\n    def increment(self, k: int, val: int) -> None:\n        lm = min(k, self.top_num+1)\n        for i in range(lm):\n            self.stack[i] += val\n\n\n\n\n# 复杂度分析：\n\"\"\"\n时间复杂度：只有inc中为O（n）\n空间复杂度：O（maxsize）\n\"\"\"","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chao-cc":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429926937","body":"###思路\r\n\r\n最近才接触算法，很懵逼看了leetcode题解，先照着做下学习下思路\r\n\r\nwhile ( A 没完 || B 没完)\r\n    A 的当前位\r\n    B 的当前位\r\n\r\n   和 = A 的当前位 + B 的当前位 + 进位carry\r\n\r\n   当前位 = 和 % 10;\r\n   进位 = 和 / 10;\r\n\r\n判断是否有进位\r\n\r\n\r\n\r\n###代码\r\n\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        int numL = num.length;\r\n        List<Integer> res = new ArrayList<>();\r\n        int i = numL -1, sum = 0 , carry = 0;\r\n        while(i>=0||k!=0){\r\n            int x = i>=0? num[i]:0;\r\n            int y = k!=0? k%10:0;\r\n            sum = x + y + carry;\r\n            carry  = sum/10;\r\n            k = k/10;\r\n            i--;\r\n            res.add(0,sum%10);\r\n        }\r\n        if(carry !=0){\r\n            res.add(0,carry);\r\n        }\r\n        return res;\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n###复杂度","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431581701","body":"###思路\n\n看解题思路，左右个遍历一次，分别记录距离，然后对比大小\n\n###代码\n\n```java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int count = s.length();\n        int[] ans = new int[n];\n        Arrays.fill(ans, count + 1);\n        for (int i = 0, j = -1; i < count; i++) {\n            if (s.charAt(i) == c) j = i;\n            if (j != -1) ans[i] = i - j;\n        }\n        for (int i = count - 1, j = -1; i >= 0; i--) {\n            if (s.charAt(i) == c) j = i;\n            if (j != -1) ans[i] = Math.min(ans[i], j - i);\n        }\n        return ans;\n    }\n}\n```\n\n###复杂度分析\n\n时间复杂度 ：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433280746","body":"### 思路\n\n看了官方解题， 知道了 push pop的原理，希望能进步一点点，用数组模拟栈 变量top来记录当前栈顶的位置\n\n### 代码\n\n````java\nclass CustomStack{\n  int[] stack;\n  int top;\n  public CustomStack(int maxSize){\n    stack = new int[maxSize];\n    top = -1;\n   \n  }\n  public void push(int x){\n    if(top != stack.length -1){\n      top++;\n      stack[top] =x;\n    }\n\t}\n  public int pop(){\n    if(top == -1){\n      return top;\n    }\n    --top;\n    return stack[top+1];\n  }\n  public void increment(int k, int val){\n\t\tint limit = Math.min(k, top + 1);\n    for(int i=0; i < limit; ++i){\n\t\t\tstack[i] += val;\n    }\n  }\n  \n}\n````\n\n### 复杂度\n\n- 时间复杂度：incremet 方法里面循环操作 O(k)\n- 空间复杂度：O(maxSize)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jinjin680":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429932323","body":"## 思路\n\n- 直接把K加到A的每一位中，再做取余处理得到和的数组形式对应位置的数；加了K之后的A[i]除以10得到新的K\n- 若加了该数字加了K之后，位数变多了\n  - 两数位数相同，和多了一位\n  - K位数比该数多\n- 在数组前面插入0，继续循环直至K为0\n\n## 代码\n\n```python\nclass Solution:\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\n        i = len(A) - 1\n        while K:\n            A[i] += K\n            K = A[i] // 10\n            A[i] = A[i] % 10\n            #处理加了该数字加了K之后，位数变多了的情况（两数位数相同，和多了一位；K位数比该数多）\n            i -= 1\n            if i < 0 and K:\n                A.insert(0,0)\n                i = 0\n        return A\n```\n\n ## 复杂度分析\n\n- 时间复杂度：O(N)\n- 空间复杂度：O(N)\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431556364","body":"## 思路\n\n- 思路1：从左到右遍历一遍，得到离左边C的距离；再从右到左遍历一遍，得到离右边C的距离；取二者之间较小的那一个\n- 思路2：双指针\n  1. 未遇到C时，右指针右移；\n  2. 当右指针遇到C时，左指针的值即为与右指针之间的距离和当前值的最小项\n  3. 当右指针遇到C后，右指针右移，且右指针所在值为前一值加1\n\n## 代码\n\n```python\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        l = r = 0\n        n = len(s)\n        res = [n] * n\n        flag = False  # 判断是否遇到过C\n        while r <= n - 1:\n            if s[r] == c: # 遇到C了\n                res[r] = 0 # 遇到c，距离为0\n                while l <= r: # 若l<=r，更新从左指针到r-1位置\n                    res[l] = min(res[l], r - l) # r - left  # 取两者距离最小值\n                    l += 1\n                r += 1\n                flag = True\n            else:\n                if flag:\n                    res[r] = res[r-1] + 1  # 算的是与左边C的距离\n                r += 1 # 没有遇到过c，右指针往右移\n        return res\n\n\n```\n\n## 复杂度分析\n\n- 时间复杂度：O(N)\n- 空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cruiseyugh":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429943458","body":"## 思路\n方法1.  将整个加数 k 加入从数组的最低位加起来，然后分别取最低位为num的结果，以及sum//10 为下一位的累加值\n\n## 关键点\n\n-  \n\n## 代码\n\n- 语言支持：Python3\n\nPython3 Code:\n\n```python\n\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        n = len(num) -1\n        while k:\n            num[n] += k\n            #k,num[n] = num[n]//10, num[n]%10\n            num[n],k = num[n]%10, num[n]//10\n            n -= 1\n            if n<0 and k:\n                num.insert(0,0)\n                n = 0\n        return num\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(n)$\n- 空间复杂度：$O(n)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431455081","body":"## 思路\n\n## 关键点\n\n-  \n\n## 代码\n\n- 语言支持：Python3\n\nPython3 Code:\n\n```python\n\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        ans = [ len(s)+1 for _ in range(len(s))]\n        flag_index =-1\n        for index in range(len(s)):\n            \n            if s[index]==c:\n                ans[index] = 0\n                flag_index = index\n            elif flag_index !=-1:\n                ans[index] = index -flag_index\n        #print(ans)\n        flag_index =-1\n        for index in range(len(s)-1,-1,-1):\n            if s[index]==c:\n                ans[index] = 0\n                flag_index = index\n            elif flag_index !=-1:\n                ans[index] = min(flag_index-index ,ans[index] )\n        return ans\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(2n)$\n- 空间复杂度：$O(n)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433229854","body":"## 思路\r\n\r\n## 关键点\r\n\r\n-  \r\n\r\n## 代码\r\n\r\n- 语言支持：Python3\r\n\r\nPython3 Code:\r\n\r\n```python\r\n\r\nclass CustomStack:\r\n\r\n    def __init__(self, maxSize: int):\r\n        self.stk = [0] * maxSize\r\n        self.top = -1\r\n\r\n    def push(self, x: int) -> None:\r\n        if (self.top+1) ==len(self.stk):\r\n            return \r\n        self.top += 1\r\n        self.stk[self.top] = x\r\n        #print(self.stk)\r\n\r\n    def pop(self) -> int:\r\n        if self.top == -1:\r\n            return -1\r\n        self.top -=1 \r\n        #print(self.stk)\r\n        return self.stk[self.top+1]\r\n\r\n    def increment(self, k: int, val: int) -> None:\r\n        k = min(self.top+1,k)\r\n        for index in range(k):\r\n            self.stk[index] +=val\r\n        #print(self.stk)\r\n\r\n\r\n# Your CustomStack object will be instantiated and called as such:\r\n# obj = CustomStack(maxSize)\r\n# obj.push(x)\r\n# param_2 = obj.pop()\r\n# obj.increment(k,val)\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为数组长度。\r\n\r\n- 时间复杂度：$O(k)$\r\n- 空间复杂度：$O(maxsize)$","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"quieter2018":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429944216","body":"**思路**\r\n从低位逐个相加，进位加1，加完倒序；\r\n\r\n**代码**\r\n下述代码未考虑到 k 的位数比num多的情况，导致越界\r\n```C++\r\n\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n\r\n        int len = num.size()-1;\r\n        int rem = 0;\r\n        vector<int> result;\r\n        while(len >= 0 ||k != 0){\r\n            rem = k % 10;\r\n            k = k / 10;\r\n            int sum = num[len]+rem;\r\n            if(sum >= 10){\r\n                k = k+1;\r\n                rem = sum % 10;\r\n                result.push_back(rem);\r\n            }else{\r\n                result.push_back(sum);\r\n            }\r\n            len--;\r\n        }\r\n        return {result.rbegin(), result.rend()};\r\n\r\n    }\r\n};\r\n\r\n```\r\n修改后\r\n```C++\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n\r\n        int len = num.size()-1;\r\n        int rem = 0;\r\n        vector<int> result;\r\n        while(len >= 0 ||k != 0){\r\n            rem = k % 10;\r\n            k = k / 10;\r\n            \r\n            if(len>=0){\r\n                int sum = num[len]+rem;\r\n                if(sum >= 10){\r\n                    k = k+1;\r\n                }\r\n                 result.push_back(sum%10);\r\n            }else{\r\n                result.push_back(rem);\r\n            }\r\n            len--;\r\n        }\r\n        return {result.rbegin(), result.rend()};\r\n\r\n    }\r\n};\r\n```\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431231443","body":"**思路**\r\n从左往右遍历计算距离，从右往左遍历，取最小值。\r\n\r\n**代码**\r\n\r\n```C++\r\nclass Solution {\r\npublic:\r\n    vector<int> shortestToChar(string s, char c) {\r\n        vector<int> dis(s.size());\r\n        int c_idx_1=0;\r\n        int c_idx_2=1;\r\n\r\n        for(int i = 0;i<s.size(); i++){\r\n            if(s[i]==c){\r\n                c_idx_2 = i;\r\n                dis[i]=0;\r\n                for(int j=c_idx_1; j<i;j++){\r\n                    dis[j]=abs(c_idx_2-j);\r\n                }\r\n                c_idx_1 =c_idx_2+1;\r\n            }else{\r\n                dis[i]=abs(c_idx_2-i);\r\n            }\r\n        }\r\n\r\n        c_idx_1= s.size()-1;\r\n        c_idx_2= s.size()-1;\r\n        vector<int> dis_back(s.size());\r\n\r\n        for(int i = s.size()-1;i>=0; i--){\r\n            if(s[i]==c){\r\n                c_idx_2 = i;\r\n                dis[i]=0;\r\n                for(int j=c_idx_1; j>i;j--){\r\n\r\n                    dis_back[j]=abs(c_idx_2-j);\r\n                }\r\n                c_idx_1 =c_idx_2-1;\r\n            }else{\r\n                dis_back[i]=abs(c_idx_2-i);\r\n            }\r\n        }\r\n\r\n        for(int i = 0;i<s.size(); i++){\r\n            dis[i]= min(dis_back[i],dis[i]);\r\n        }\r\n\r\n    return dis;    \r\n\r\n    }\r\n};\r\n```\r\n\r\n**复杂度分析**\r\n\r\n- 时间复杂度：O(n)\r\n\r\n- 空间复杂度：O(n)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433238056","body":"**思路**\r\n就按照题目所述进行实现即可。\r\n\r\n**代码**\r\n```C++\r\nclass CustomStack {\r\npublic:\r\n    vector<int> stack;\r\n    int maxSize;\r\n    int top_idx = -1;\r\n\r\n    CustomStack(int maxSize) {\r\n        stack.resize(maxSize);\r\n        this->maxSize = maxSize;\r\n    }\r\n    \r\n    void push(int x) {\r\n        if(top_idx >= maxSize-1){\r\n            return;\r\n        }\r\n        top_idx++;\r\n        stack[top_idx]=x;\r\n\r\n    }\r\n    \r\n    int pop() {\r\n        if(top_idx<0){\r\n            return -1;\r\n        }\r\n        int res =  stack[top_idx];\r\n        top_idx--;\r\n        return res;\r\n    }\r\n    \r\n    void increment(int k, int val) {\r\n        for(int i=0;i<=top_idx && i< k;i++){\r\n            stack[i]+=val;\r\n        }\r\n\r\n    }\r\n};\r\n```\r\n\r\n**复杂度分析**\r\n\r\n- 时间复杂度：push()、pop() 为 O(1) ;  increment操作是 O(k);\r\n- 空间复杂度:  O(n);","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jadeliu13":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429970650","body":"'''\nK取余作为相加的位数，K取整作为进一位的相加结果\n'''\nclass Solution:\n    def addToArrayForm(self, A: list[int], K: int) -> list[int]:\n        n = len(A)\n        ans = []\n\n        for i in range(n-1, -1, -1):\n            sum = A[i] + K % 10\n            K //= 10\n            # 当前位相加结果大于 10 时，进位 1 加入下一位计算\n            if sum >= 10:                \n                K += 1\n            # 进入数组\n            ans.append(sum % 10)\n            \n        # 若数组 A 的长度小于整数 K 位数个数的情况\n        while K > 0:\n            ans.append(K % 10)\n            K //= 10\n        # 因为添加进来是由低位往高位，输出时进行逆序输出\n        return ans[::-1]\n'''\n待解\n时间复杂度：O(n)\n空间复杂度：O(n)\n'''","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431595411","body":"class Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        n = len(s)\n\n        def find_c():\n            yield from (i for i, j in enumerate(s) if j == c)\n            yield n * 2\n\n        f = find_c()\n        x, y = n * 2, next(f)\n        \n        ans = list()\n        for i, j in enumerate(s):\n            if j == c:\n                x, y = i, next(f)\n            ans.append(min(abs(i - x), abs(i - y)))\n        return ans","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaoq777":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429974006","body":"```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> kList = new ArrayList<>();\r\n        while(k != 0) {\r\n            kList.add(k % 10);\r\n            k = k / 10;\r\n        }\r\n        Collections.reverse(kList);\r\n        \r\n        int i = num.length - 1, j = kList.size() - 1;\r\n        List<Integer> result = new ArrayList<>();\r\n        int add = 0;\r\n        while(i >= 0 || j >= 0) {\r\n            int sum = add;\r\n            if(i >= 0) {\r\n                sum += num[i--];\r\n            }\r\n            if(j >= 0) {\r\n                sum += kList.get(j--);\r\n            }\r\n            add = sum >= 10 ? 1 : 0;\r\n            result.add(sum % 10);\r\n        }\r\n        if(add != 0) {\r\n            result.add(1);\r\n        }\r\n        Collections.reverse(result);\r\n        return result;\r\n    }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431568984","body":"## 思路\r\n先从左至右遍历，记录最后出现的字符c的索引j，得到每个位置与 向左找最近的字符c 的距离Math.abs(i-j)。\r\n再从右至左遍历，同上方式得到每个位置与 向右找最近的字符c 的距离。\r\n若在某个位置上向左找向右找都有字符c，就求 向左找最小距离 与 向右找最小距离 的较小值作为结果。\r\n\r\n\r\n## 代码\r\n```java\r\nclass Solution {\r\n    public int[] shortestToChar(String s, char c) {\r\n        int len = s.length();\r\n        int[] result = new int[len];\r\n        Arrays.fill(result, Integer.MAX_VALUE);\r\n        int j = -1;\r\n        for(int i = 0; i < len; i++) {\r\n            if(s.charAt(i) == c) {\r\n                j = i;\r\n            }\r\n            if(j != -1) {\r\n                result[i] = Math.abs(i - j);\r\n            }\r\n        }\r\n        j = -1;\r\n        for(int i = len - 1; i >= 0; i--) {\r\n            if(s.charAt(i) == c) {\r\n                j = i;\r\n            }\r\n            if(j != -1) {\r\n                result[i] = Math.min(result[i], Math.abs(i - j));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n```\r\n\r\n## 复杂度分析\r\n\r\n时间复杂度 O(N)\r\n空间复杂度 O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433266099","body":"### 思路\r\n使用数组实现栈，使用一个tail变量记录当前栈顶的索引。\r\n入栈操作tail+1，出栈操作tail-1。\r\n\r\n### 代码\r\n```java\r\nclass CustomStack {\r\n\r\n    int[] arr;\r\n    int tail = -1;\r\n\r\n    public CustomStack(int maxSize) {\r\n        arr = new int[maxSize];\r\n    }\r\n    \r\n    public void push(int x) {\r\n        if(tail == arr.length - 1) {\r\n            return;\r\n        }\r\n        arr[++tail] = x;\r\n    }\r\n    \r\n    public int pop() {\r\n        if(tail == -1) {\r\n            return -1;\r\n        }\r\n        return arr[tail--];\r\n    }\r\n    \r\n    public void increment(int k, int val) {\r\n        for(int i = 0; i < Math.min(k, arr.length); i++) {\r\n            arr[i] += val;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### 复杂度分析\r\n\r\n时间复杂度:\r\n* push: O(1)\r\n* pop: O(1)\r\n* increment: O(k)或O(maxSize)\r\n\r\n空间复杂度:\r\nO(maxSize)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jiangyanlineu":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429976257","body":"### Idea\r\n- use``` k%10``` to get the least important digit (the last one)\r\n- use ```carry_on``` to memorize the number that we carried from last round, the original ```carry_on``` should be 0\r\n- loop from the last element in array num to the start, ```carry_on+num_element + k%10``` should be the current number\r\n- update the ```carry_on``` and ```num_element``` in different way based on if ```carry_on+num_element + k%10 >= 10```\r\n- if we run out of the num element, then we insert the new digit to the index 0 until ```k == 0 and carry_on == 0```\r\n```python3\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        i = len(num)-1\r\n        carry_on = 0\r\n        while i >= 0:\r\n            carry_on += k%10\r\n            k = k//10\r\n            temp = num[i] + carry_on\r\n            if temp >= 10:\r\n                carry_on = temp//10\r\n                num[i] = temp%10\r\n            else:\r\n                num[i] = temp\r\n                carry_on = 0\r\n            i -= 1\r\n\r\n        while carry_on or k:\r\n            carry_on += k%10\r\n            k = k//10\r\n            if carry_on >= 10:\r\n                num.insert(0, carry_on%10)\r\n                carry_on = carry_on//10\r\n            else:\r\n                num.insert(0, carry_on)\r\n                carry_on = 0\r\n        return num\r\n```\r\n- Time Complexity:  O(N)  <b>N = len(max(len(num), len(k_digits))</b>\r\n- Space Complexity: O(1) <b> insert new digits to the original num array</b>","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430346702","body":"### Idea\r\n- use <b>Two Pointers</b> to decide which index is the cloest\r\n- get all c's index in s\r\n- iterate through s and get the smallest distance\r\n```python3\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        # Get all c's index in s\r\n        c_index = []\r\n        for index, value in enumerate(s):\r\n            if value == c:\r\n                c_index.append(index)\r\n                \r\n        ans = []\r\n        cur = c_index.pop(0)\r\n        for i in range(len(s)):\r\n            distance_cur = cur-i if cur-i >= 0 else i-cur\r\n            if not c_index:\r\n                ans.append(distance_cur)\r\n            else:\r\n                distance_next = c_index[0]-i if c_index[0]-i>=0 else i-c_index[0]\r\n                ans.append(min(distance_cur, distance_next))\r\n                if distance_next <= distance_cur:\r\n                    cur = c_index.pop(0)\r\n        return ans\r\n```\r\n- Time Complexity = O(N) <b>N= len(s)</b>\r\n- Space Complexity = O(N) <b>N= len(s)</b>","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433316573","body":"###Idea\r\n- use self.cur_length to memorize the length of the stack\r\n- self.limit represents the maxSize of the stack\r\n- use array's append and pop to do push and pop\r\n\r\n```python3\r\nclass CustomStack:\r\n\r\n    def __init__(self, maxSize: int):\r\n        self.limit = maxSize\r\n        self.cur_length = 0\r\n        self.stack = []\r\n        \r\n    def push(self, x: int) -> None:\r\n        if self.cur_length < self.limit:\r\n            self.stack.append(x)\r\n            self.cur_length += 1\r\n        else:\r\n            return\r\n    \r\n    def pop(self) -> int:\r\n        if self.stack:\r\n            self.cur_length -= 1\r\n            return self.stack.pop()\r\n        return -1\r\n\r\n    def increment(self, k: int, val: int) -> None:\r\n        k = min(k, self.cur_length)\r\n        while k>0 :\r\n            self.stack[k-1] += val\r\n            k -= 1\r\n        return\r\n```\r\n- Time Complexity = O(1) for push and pop, O(N) for increment N=min(k, self.cur_length)\r\n- Space Complexity = O(N) N=maxSize","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liuxiner":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1429985050","body":"## 思路\r\n 1. 将k转为数组\r\n 2. 数组形式逐位相加\r\n\r\n## 代码（JavaScript）\r\n\r\n```javascript\r\nvar addToArrayForm = function (num, k) {\r\n    let i1 = num.length - 1;\r\n    let kArray = k.toString().split('').map(i => Number(i));\r\n    let i2 = kArray.length - 1;\r\n    const carry =0;\r\n    const res = []\r\n    while (i1 >= 0 || i2 >= 0) {\r\n        const sum = num[i1] + kArray[i2] + carry;\r\n        const val = sum % 10;\r\n        carry = Math.floor(sum / 10);\r\n        res.push(val);\r\n        i1--;\r\n        i2--;\r\n    }\r\n    if(!!carry) {\r\n        res.push(carry)\r\n    }\r\n\r\n    return res;\r\n};\r\n\r\n\r\n```\r\n\r\n\r\n## 复杂度分析\r\n时间O(N)\r\n空间O(N)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431571499","body":"# 思路：\n两次遍历\n\nvar shortestToChar = function (s, c) {\n    const arr = s.split('');\n    const n = arr.length;\n    const res = [];\n    for (let i = 0, idx = -n; i < n; i++) {\n        if (arr[i] == c) {\n            idx = i;\n        }\n        res[i] = i - idx;\n    }\n\n    for (let i = n - 1, idx = 2 * n; i >= 0; i--) {\n        if (arr[i] == c) {\n            idx = i;\n        }\n        res[i] = Math.min(res[i], idx - i);\n    }\n    return res\n\n};\n\n时间&空间 O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433193468","body":"思路：模拟数组原生pop和push\r\n```javascript\r\n/**\r\n * @param {number} maxSize\r\n */\r\nvar CustomStack = function(maxSize) {\r\n    this.maxSize = maxSize;\r\n    this.stack = [];\r\n};\r\n\r\n/** \r\n * @param {number} x\r\n * @return {void}\r\n */\r\nCustomStack.prototype.push = function(x) {\r\n    let stack = this.stack;\r\n    if(stack.length < this.maxSize) {\r\n        stack.push(x);\r\n    }\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nCustomStack.prototype.pop = function() {\r\n    let stack = this.stack;\r\n    if(stack.length > 0) {\r\n        return stack.pop();\r\n    }\r\n    return -1;\r\n};\r\n\r\n/** \r\n * @param {number} k \r\n * @param {number} val\r\n * @return {void}\r\n */\r\nCustomStack.prototype.increment = function(k, val) {\r\n    let stack = this.stack;\r\n    for(let i = 0; i < Math.min(stack.length, k); i++) {\r\n        stack[i] += val;\r\n    }\r\n};\r\n\r\n/**\r\n * Your CustomStack object will be instantiated and called as such:\r\n * var obj = new CustomStack(maxSize)\r\n * obj.push(x)\r\n * var param_2 = obj.pop()\r\n * obj.increment(k,val)\r\n */\r\n ```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yufanzh":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1430340398","body":"# intuition: convert k to list of num, then add backwards\n# tc: o(n)\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        # first convert k to array \n        # then use carrier to add backwards\n        k_list = list(map(int, str(k))) #map(func, iter)\n        # print(k_list)\n        # now we add backwards\n        i = len(num) - 1\n        j = len(k_list) - 1\n        carry = 0\n        ans = []\n        while i >= 0 or j >= 0:\n            a = num[i] if i >= 0 else 0 \n            b = k_list[j] if j >= 0 else 0\n            val = a + b + carry\n            carry = val // 10\n            i -= 1\n            j -= 1\n            ans.append(val%10)\n        # now ans is in reversed order\n        if carry != 0:\n            ans.append(carry)\n        ans.reverse()\n        return ans\n\n","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1430315284","body":"#forward and backward array traverse\n# tc: o(n) since we traverse the array without nest\n# sc: o(n) for initialize ans array\n\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        ans = [float('inf')] * len(s)\n        # traverse forward and backward to get two list, first the min value between those two list\n        # correct way to initialize ans\n        ans = [0 if s[i] == c else None for i in range(len(s))] # 0 means distance\n        # forward scan\n        for i in range(1, len(s)):\n            if ans[i] != 0 and ans[i-1] is not None:\n                ans[i] = ans[i-1] + 1\n                # if i index is not c, and previous distance has value\n        \n        # backward scan\n        for i in range(len(s)-2, -1, -1):\n            if ans[i] is None or ans[i] > ans[i+1] + 1:\n                ans[i] = ans[i+1] + 1 # not updated yet or value larger than backward scan\n        return ans\n\n            ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1431948381","body":"```\r\nclass CustomStack:\r\n# keep a separate increment array to add only on the boundary\r\n    def __init__(self, maxSize: int):\r\n        self.max = maxSize\r\n        self.stack = []\r\n        self.incr = []\r\n        \r\n    def push(self, x: int) -> None:\r\n        if len(self.stack) < self.max:\r\n            self.stack.append(x)\r\n            self.incr.append(0)\r\n\r\n    def pop(self) -> int:\r\n        if len(self.stack) == 0:\r\n            return -1 # empty stack\r\n        if len(self.stack) > 1:\r\n            self.incr[-2] += self.incr[-1]\r\n        return self.stack.pop() + self.incr.pop()\r\n\r\n    def increment(self, k: int, val: int) -> None:\r\n        if self.incr:\r\n            idx = min(k, len(self.incr))\r\n            self.incr[idx - 1] += val\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"franciszq":[null,{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431327395","body":"## 思路\n\n求最短距离，一维数据的话，需要从前往后，从后往前各自遍历一遍，然后每个位置，取较小的一个。\n\n## 代码\n\n~~~c++\nclass Solution\n{\npublic:\n    vector<int> shortestToChar(string s, char c)\n    {\n        vector<int> from_begin_length, from_end_length, res;\n        int length_tmp = 999999;\n        for (int i = 0; i < s.size(); ++i) {    // 从头遍历\n            if (s[i] == c) {\n                length_tmp = 0;\n            } else {\n                length_tmp++;\n            }\n            from_begin_length.emplace_back(length_tmp);\n        }\n        length_tmp = 9999999;\n        for (int i = s.size() - 1; i >= 0; --i) {     // 从尾遍历\n            if (s[i] == c) {\n                length_tmp = 0;\n            } else {\n                length_tmp++;\n            }\n            from_end_length.emplace_back(length_tmp);\n        }\n        for (int i = 0; i < s.size(); ++i) {\n            if (from_begin_length[i] < from_end_length[s.size() - i - 1]) {\n                res.emplace_back(from_begin_length[i]);\n            } else {\n                res.emplace_back(from_end_length[s.size() - i - 1]);\n            }\n        }\n        return res;\n    }\n};\n\n\n\n\n~~~\n\n## 复杂度\n\n* 时间复杂度O(3n)\n* 空间复杂度O(3n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432964991","body":"## 思路\n\n用数组来模拟栈。\n\n## 代码\n\n~~~c++\nclass CustomStack\n{\npublic:\n    CustomStack(int maxSize)\n    {\n        max_size = maxSize;\n        stack.reserve(max_size);\n    }\n\n    void push(int x)\n    {\n        if (stack.size() >= max_size) {\n            return;\n        }\n        stack.emplace_back(x);\n    }\n\n    int pop()\n    {\n        if (stack.size() > 0) {\n            int val = stack.back();\n            stack.pop_back();\n            return val;\n        } else {\n            return -1;\n        }\n\n    }\n\n    void increment(int k, int val)\n    {\n        int add_size = min(k, int(stack.size()));\n        for (int add_id = 0; add_id < add_size; ++add_id) {\n            stack[add_id] = stack[add_id] + val;\n        }\n    }\nprivate:\n    vector<int> stack;\n    int max_size;\n    int cur_size;\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack* obj = new CustomStack(maxSize);\n * obj->push(x);\n * int param_2 = obj->pop();\n * obj->increment(k,val);\n */\n~~~\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kangqinsen":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1431529917","body":"\n## 题目地址(989. 数组形式的整数加法)\n\nhttps://leetcode.cn/problems/add-to-array-form-of-integer/\n\n## 思路\n\n两数相加，从后往前，两数遍历完最后看carry。\n其中一个数遍历完，后续取0。\n最后reverse下。\n## 关键点\n\n-  \n\n## 代码\n\n- 语言支持：Java\n\nJava Code:\n\n```java\n\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> ans = new ArrayList<>();\n        int c = 0;\n\n        int i = num.length-1 ; \n\n        int carry = 0;\n        while(i>=0 || k >0){\n          int ki = k % 10;\n          int numi = i >= 0 ? num[i] : 0;\n\n          k /= 10;\n          i--;\n\n          int sum = (ki + numi + carry) ;\n          carry = sum / 10;\n          ans.add(sum%10);\n        }\n        if(carry>0){\n          ans.add(carry);\n        }\n        List<Integer> result = new ArrayList<>();\n        for(int idx = ans.size()-1 ; idx >= 0 ; idx --){\n          result.add(ans.get(idx));\n        }\n        return result;\n    }\n}\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(n)$\n- 空间复杂度：$O(n)$\n\n\n","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431448135","body":"\n## 题目地址(821. 字符的最短距离)\n\nhttps://leetcode.cn/problems/shortest-distance-to-a-character/\n\n\n## 思路\n两次循环，第一次从左到右，第二次从左到右，分别找到从左到右最小的距离和从右到校最小的距离，二者取最小\n## 关键点\n两次循环中，第一次从左到右，在找到第一个c之前，result[i] = 无限大，在第一次c之前的结果，在第二次循环从右到左一定能找到最近的c，且是最终答案。\n同理，从右到左，也是无限大。\n\n-  \n\n## 代码\n\n- 语言支持：Java\n\nJava Code:\n\n```java\n\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n      int size = s.length();\n      int[] result = new int[size];\n      int currentIndexC = -1*size;\n      for(int i = 0 ; i < size ; i++){\n        int ch = s.charAt(i);\n        if(ch == c){\n          currentIndexC = i;\n        }\n      result[i] = Math.abs(currentIndexC - i);\n      }\n\n      currentIndexC = size*2;\n      for(int i = size - 1 ; i >= 0 ; i--){\n        int ch = s.charAt(i);\n        if(ch == c){\n          currentIndexC = i;\n        }\n        result[i] = Math.min(result[i] , Math.abs(currentIndexC - i));\n      }\n      \n      return result;\n    }\n}\n\n```\n\n\n**复杂度分析**\n\n令 n 为数组长度。\n\n- 时间复杂度：$O(n)$\n- 空间复杂度：$O(1)$\n\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"manwzy":[null,{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431519341","body":"/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\n\nvar shortestToChar = function(s, c) {\n  let i=-1,j=0,cur=0;\n  let res = []\n  while(i<s.length){\n    if(s[j]!==c && j<s.length){\n      j++\n      continue\n    }\n\n    if(i===-1){\n      cur = 0\n      while(cur<j){\n        res.push(j-cur++)\n      }\n    }else if(j===s.length){\n      cur = i\n      while(cur<j){\n        res.push(cur++-i)\n      }\n    }else{\n      cur = i\n      while(cur<j){\n        res.push(Math.min(cur-i,j-cur))\n        cur++\n      }\n    }\n    i=j\n    j++\n  }\n  return res\n};","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jerry9926":[null,{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431523338","body":"思路：\n1. 计算目标字符的下标数组\n2. 遍历字符串，计算每个字符与目标字符的距离\n3. 对比距离取最小值记录\n4. 输出\n\n```js\nvar shortestToChar = function(s, c) {\n    // i=目标字符的下标,e=结果\n    var i = [], e = []\n    s.split('').forEach(function(item, index) {\n        item == c && i.push(index)\n    })\n    s.split('').forEach(function(num, index) {\n        if (num == c) {\n            e.push(0)\n        } else {\n            // b=当前距离\n            var b = s.length\n            i.forEach(function(item) {\n                if (Math.abs(item-index) < b) {\n                    b = Math.abs(item-index)\n                }\n            })\n            e.push(b)\n        }\n    })\n    return e\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432601446","body":"时间复杂度\npush、pop=O(1)\nincrement=O(n)\n空间复杂度\nO(maxSize)\n\n```js\n\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n    this.value=[]\n    this.maxSize=maxSize\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if (this.value.length < this.maxSize) {\n        this.value.unshift(x)\n    }\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    if (this.value.length === 0) {\n        return -1\n    }\n    return this.value.shift()\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    var n=0\n    for (var i=this.value.length-1; i >= 0; i--) {\n        if (n < k) {\n            n++\n            this.value[i] = this.value[i] + val    \n        }\n    }\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"soso1105":[null,{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431572670","body":"### 代码\n\n```python\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        left = []\n        res = []\n        for i in range(len(s)):\n            if c == s[i]:\n                left.append(i)\n\n        for j in range(len(s)):\n            t = len(s)\n            for i in left:\n                t = min(abs(j-i), t)\n            res.append(t)\n        \n        return res\n```\n\n**复杂度分析**\n\n\\- 时间复杂度：O(N^2)\n\\- 空间复杂度：O(N)\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433263826","body":"### 代码\n\n```python\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.currentSize = 0\n        self.storage = []\n\n    def push(self, x: int) -> None:\n        if self.currentSize < self.maxSize:\n            self.storage.append(x)\n            self.currentSize+=1\n\n    def pop(self) -> int:\n        if self.currentSize == 0:\n            return -1\n        self.currentSize-=1\n        return self.storage.pop()\n\n    def increment(self, k: int, val: int) -> None:\n        incre_num = min(k, self.currentSize)\n        for i in range(incre_num):\n            self.storage[i] += val\n```\n\n**复杂度分析**\n\n\\- 时间复杂度：O(1)\n\\- 空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pkuphy":[null,null,{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432292492","body":"```rust\r\nstruct CustomStack {\r\n    elements: Vec<i32>, // 使用 vector 模拟 stack\r\n    maxSize: usize, // 初始化 maxSize，后续比较多用 usize 所以此处使用 usize 类型\r\n}\r\n\r\n\r\nimpl CustomStack {\r\n\r\n    fn new(maxSize: i32) -> Self {\r\n        CustomStack {\r\n            elements: Vec::new(), // new vector\r\n            maxSize: maxSize as usize,\r\n        }\r\n    }\r\n    \r\n    fn push(&mut self, x: i32) { // &mut self\r\n        if self.elements.len() < self.maxSize {\r\n            self.elements.push(x)\r\n        }\r\n    }\r\n    \r\n    fn pop(&mut self) -> i32 {\r\n        self.elements.pop().unwrap_or(-1)\r\n    }\r\n    \r\n    fn increment(&mut self, k: i32, val: i32) {\r\n        let k = std::cmp::min(k as usize, self.elements.len());\r\n\r\n        for i in 0..k {\r\n            *(self.elements.get_mut(i).unwrap()) += val;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\npush, pop O(1)\r\nincrement O(k)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhenya-zhu":[null,{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/3#issuecomment-1431616262","body":"思路：\n遇到c将count置0。顺序遍历，倒序遍历，填充时取最小值\n```\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\n\nvar shortestToChar = function(s, c) {\n    let arr = s.split('').map(ch => {\n        if (ch == c) {\n            return 0\n        } else{\n            return null\n        }\n    })\n\n    let dis = null\n    for (let i = 0; i < arr.length; i++){\n        cur = arr[i]\n        if (cur === 0){\n            dis = 0\n        }else{\n            if (dis !== null){\n                dis++\n                if (arr[i] == null){\n                    arr[i] = dis\n                }else{\n                    arr[i] = Math.min(arr[i], dis)\n                }\n            }\n        }\n    }\n    dis = null\n    for (let i = arr.length - 1; i > -1; i--){\n        cur = arr[i]\n        if (cur === 0){\n            dis = 0\n        }else{\n            if (dis !== null){\n                dis++\n                if (arr[i] == null){\n                    arr[i] = dis\n                }else{\n                    arr[i] = Math.min(arr[i], dis)\n                }\n            }\n        }\n    }\n    return arr\n\n};\n```\n\n时间复杂度：3次遍历，O(n)\n空间复杂度：O(1)\n","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433025382","body":"/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n    this.maxSize = maxSize\n    this.stack = []\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if (this.stack.length < this.maxSize){\n        this.stack.push(x)\n    }\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    if (this.stack.length > 0){\n        return this.stack.pop()\n    }else{\n        return -1\n    }\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    const len = this.stack.length\n    for(let i = 0; i < k && i < len; i++){\n        this.stack[i] += val\n    }\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wty9sky":[null,null,{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432367108","body":"``` javascript\nfunction ListNode(val){\n    this.val=val;\n    this.next=null;\n}\nvar CustomStack = function(maxSize) {\n    this.maxSize=maxSize;\n    this.head=null;\n    this.length=0;\n};\n\nCustomStack.prototype.push = function(x) {\n    if(this.length===this.maxSize) return;\n    let node=new ListNode(x);\n    let linkList=this.head;\n    node.next=linkList;\n    this.head=node;\n    this.length++;\n};\n\nCustomStack.prototype.pop = function() {\n    if(this.length===0) return -1;\n    let linkList=this.head.next;\n    let popVal=this.head.val;\n    this.head=linkList;\n    this.length--;\n    return popVal;\n};\n\nCustomStack.prototype.increment = function(k, val) {\n    if(k<0) return;\n    let start=this.length-k;\n    let currentNode=this.head;\n    if(start>0){\n        for(let i=0;i<start;++i){\n            currentNode=currentNode.next;\n        }\n    }\n    while(currentNode){\n        currentNode.val+=val;\n        currentNode=currentNode.next;\n    }\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"skyoct":[null,null,{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1432523094","body":"class CustomStack {\r\n\r\n    private int[] stack;\r\n    private int top = 0;\r\n\r\n    public CustomStack(int maxSize) {\r\n        stack = new int[maxSize];\r\n    }\r\n    \r\n    public void push(int x) {\r\n        if (top >= stack.length) {\r\n            return;\r\n        }\r\n        stack[top++] = x;\r\n    }\r\n    \r\n    public int pop() {\r\n        if (top == 0) {\r\n            return -1;\r\n        }\r\n        return stack[--top];\r\n    }\r\n    \r\n    public void increment(int k, int val) {\r\n        int end = k > top ? top : k ;\r\n        for(int i=0; i<end; i++) {\r\n            stack[i] += val;\r\n        }\r\n    }\r\n}","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bingzxy":[{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/2#issuecomment-1433279109","body":"### 题目：\r\n\r\n[989. 数组形式的整数加法](https://leetcode-cn.com/problems/add-to-array-form-of-integer/)\r\n\r\n### 思路\r\n数组逐位相加，模拟\r\n\r\n### 代码\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> kArr = new ArrayList<> ();\r\n        while (k > 0) {\r\n            System.out.println(k % 10);\r\n            kArr.add(k % 10);\r\n            k /= 10;\r\n        }\r\n        List<Integer> nArr = new ArrayList<> ();\r\n        for (int i = num.length - 1; i >= 0; i--) {\r\n            nArr.add(num[i]);\r\n        }\r\n\r\n        List<Integer> ans = new ArrayList<> ();\r\n        int extr = 0;\r\n        int size = Math.min(kArr.size(), nArr.size());\r\n        for (int i = 0; i < size; i++) {\r\n            int tmp = kArr.get(i) + nArr.get(i) + extr;\r\n            extr = tmp / 10;\r\n            ans.add(tmp % 10);\r\n        }\r\n\r\n        if (size < kArr.size()) {\r\n            for (int i = size; i < kArr.size(); i++) {\r\n                int tmp = kArr.get(i) + extr;\r\n                extr = tmp / 10;\r\n                ans.add(tmp % 10);\r\n            }\r\n        }\r\n\r\n        if (size < nArr.size()) {\r\n            for (int i = size; i < nArr.size(); i++) {\r\n                int tmp = nArr.get(i) + extr;\r\n                extr = tmp / 10;\r\n                ans.add(tmp % 10);\r\n            }\r\n        }\r\n\r\n        if (extr == 1) {\r\n            ans.add(extr);\r\n        }\r\n\r\n        List<Integer> reverseAns = new ArrayList<> ();\r\n        for (int i = ans.size() - 1; i >= 0; i--) {\r\n            reverseAns.add(ans.get(i));\r\n        }\r\n\r\n        return reverseAns;\r\n    }\r\n}\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(n)\r\n- 空间复杂度：O(n)","onTime":false},null,{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433197588","body":"### 思路\r\n使用数组模拟栈操作\r\n\r\n### 代码\r\n```java\r\nclass CustomStack {\r\n\r\n    int[] stack;\r\n    int current;\r\n    int size;\r\n\r\n    public CustomStack(int maxSize) {\r\n        stack = new int[maxSize];\r\n        size = maxSize;\r\n    }\r\n    \r\n    public void push(int x) {\r\n        if (current == size) {\r\n            return;\r\n        }\r\n        stack[current++] = x;\r\n    }\r\n    \r\n    public int pop() {\r\n        if (current == 0) {\r\n            return -1;\r\n        }\r\n        return stack[--current];\r\n    }\r\n    \r\n    public void increment(int k, int val) {\r\n        for (int i = 0; i < Math.min(k, current); i++) {\r\n            stack[i] += val;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：push、pop O(1)，increment O(k)\r\n- 空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaodingc":[null,null,{"url":"https://github.com/leetcode-pp/91alg-10-daily-check/issues/4#issuecomment-1433349820","body":"C#版本\r\n```\r\npublic class CustomStack {\r\n    int[] num;\r\n    int cur = -1;\r\n\r\n    public CustomStack(int maxSize) {\r\n        num = new int[maxSize];\r\n    }\r\n    \r\n    public void Push(int x) {\r\n        if(cur < num.Length-1){\r\n            ++cur;\r\n            num[cur] = x;\r\n        }\r\n    }\r\n    \r\n    public int Pop() {\r\n        if(cur == -1)\r\n            return -1;\r\n        cur--;\r\n        return num[cur+1];\r\n    }\r\n    \r\n    int t;\r\n    public void Increment(int k, int val) {\r\n        t = Math.Min(k, cur +1);\r\n        for(int i = 0 ; i < t ; i++){\r\n            num[i] += val;\r\n        }\r\n    }\r\n}\r\n```","onTime":false},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}